{"id": "7a70fcea-eadb-480e-a48a-999cf05844b3", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = particle_positions[a] + self.f * (particle_positions[b] - particle_positions[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) that dynamically adjusts exploration and exploitation to adaptively solve diverse optimization problems.", "configspace": "", "generation": 0, "fitness": 0.16350928055304165, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.2655142626414865, 0.2655142626414865, 0.2655142626414865, 0.37524219539501313, 0.37524219539501313, 0.37524219539501313, 0.44968552552457974, 0.44968552552457974, 0.44968552552457974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016048975719742842, 0.016048975719742842, 0.016048975719742842, 0.025651796860946208, 0.025651796860946208, 0.025651796860946208, 0.08686619554151187, 0.08686619554151187, 0.08686619554151187, 0.06870317924588087, 0.06870317924588087, 0.06870317924588087, 0.0846591548138107, 0.0846591548138107, 0.0846591548138107, 0.058489734334124854, 0.058489734334124854, 0.058489734334124854, 0.0698601300565832, 0.0698601300565832, 0.0698601300565832, 0.05320693803195531, 0.05320693803195531, 0.05320693803195531, 0.9811601445492328, 0.9811601445492328, 0.9811601445492328, 0.9705236949700418, 0.9705236949700418, 0.9705236949700418, 0.968022282768111, 0.968022282768111, 0.968022282768111, 0.11016507841686363, 0.11016507841686363, 0.11016507841686363, 0.11608922382825804, 0.11608922382825804, 0.11608922382825804, 0.098844193770673, 0.098844193770673, 0.098844193770673, 0.14343812645248033, 0.14343812645248033, 0.14343812645248033, 0.1697848354651178, 0.1697848354651178, 0.1697848354651178, 0.41311956856478904, 0.41311956856478904, 0.41311956856478904, 0.12659557716433678, 0.12659557716433678, 0.12659557716433678, 0.07770224473683451, 0.07770224473683451, 0.07770224473683451, 0.1897711986907329, 0.1897711986907329, 0.1897711986907329, 0.07877190771485398, 0.07877190771485398, 0.07877190771485398, 0.056217640953924675, 0.056217640953924675, 0.056217640953924675, 0.029499298005158936, 0.029499298005158936, 0.029499298005158936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044176005246511885, 0.044176005246511885, 0.044176005246511885, 0.03054595577556707, 0.03054595577556707, 0.03054595577556707, 0.04609157754807547, 0.04609157754807547, 0.04609157754807547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02591873327820282, 0.02591873327820282, 0.02591873327820282, 0.040818632859615955, 0.040818632859615955, 0.040818632859615955, 0.019593967550818325, 0.019593967550818325, 0.019593967550818325, 0.29365303498331663, 0.29365303498331663, 0.29365303498331663, 0.34645319994167423, 0.34645319994167423, 0.34645319994167423, 0.30161856870831205, 0.30161856870831205, 0.30161856870831205, 0.07907438862474447, 0.07907438862474447, 0.07907438862474447, 0.07531298332919611, 0.07531298332919611, 0.07531298332919611, 0.06461768640248378, 0.06461768640248378, 0.06461768640248378, 0.1255436984884284, 0.1255436984884284, 0.1255436984884284, 0.17241049345742454, 0.17241049345742454, 0.17241049345742454, 0.13437405820916426, 0.13437405820916426, 0.13437405820916426, 0.21989169859250568, 0.21989169859250568, 0.21989169859250568, 0.1912343540608853, 0.1912343540608853, 0.1912343540608853, 0.22856057930455642, 0.22856057930455642, 0.22856057930455642, 0.15963318799476778, 0.15963318799476778, 0.15963318799476778, 0.1371981136570115, 0.1371981136570115, 0.1371981136570115, 0.14446065290770416, 0.14446065290770416, 0.14446065290770416, 0.19060174889691106, 0.19060174889691106, 0.19060174889691106, 0.18189423460658305, 0.18189423460658305, 0.18189423460658305, 0.15925162943159543, 0.15925162943159543, 0.15925162943159543, 0.17108993245371307, 0.17108993245371307, 0.17108993245371307, 0.15069341539799774, 0.15069341539799774, 0.15069341539799774, 0.16091923286878485, 0.16091923286878485, 0.16091923286878485, 0.23928460720529643, 0.23928460720529643, 0.23928460720529643, 0.1709568399557364, 0.1709568399557364, 0.1709568399557364, 0.16459815789254972, 0.16459815789254972, 0.16459815789254972, 0.15773947770532737, 0.15773947770532737, 0.15773947770532737, 0.1990037539937044, 0.1990037539937044, 0.1990037539937044, 0.1473954274848056, 0.1473954274848056, 0.1473954274848056, 0.18667074744013534, 0.18667074744013534, 0.18667074744013534, 0.18367220820426355, 0.18367220820426355, 0.18367220820426355, 0.16919875609966717, 0.16919875609966717, 0.16919875609966717, 0.061128186002503915, 0.061128186002503915, 0.061128186002503915, 0.06332366046618387, 0.06332366046618387, 0.06332366046618387, 0.04973150857522979, 0.04973150857522979, 0.04973150857522979]}, "mutation_prompt": null}
{"id": "81873ea5-183b-4a2c-ae49-0f8d4c6920e1", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight_initial = 0.9  # Initial inertia weight\n        self.inertia_weight_final = 0.4  # Final inertia weight\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # Update inertia weight\n            w = self.inertia_weight_initial - (self.inertia_weight_initial - self.inertia_weight_final) * (evaluations / self.budget)\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (w * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = particle_positions[a] + self.f * (particle_positions[b] - particle_positions[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "A refined hybrid optimization strategy combining PSO and DE, now with adaptive inertia weight for enhanced exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.13678942503962593, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "7a70fcea-eadb-480e-a48a-999cf05844b3", "metadata": {"aucs": [0.22262665711066987, 0.22262665711066987, 0.22262665711066987, 0.24024916388929418, 0.24024916388929418, 0.24024916388929418, 0.32861297798610545, 0.32861297798610545, 0.32861297798610545, 0.0020166548248021776, 0.0020166548248021776, 0.0020166548248021776, 0.07455495047659733, 0.07455495047659733, 0.07455495047659733, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0669933260298512, 0.0669933260298512, 0.0669933260298512, 0.05729203652115644, 0.05729203652115644, 0.05729203652115644, 0.05042712455694531, 0.05042712455694531, 0.05042712455694531, 0.028331535759680948, 0.028331535759680948, 0.028331535759680948, 0.03848996715292341, 0.03848996715292341, 0.03848996715292341, 0.030354059616346407, 0.030354059616346407, 0.030354059616346407, 0.9712609523884993, 0.9712609523884993, 0.9712609523884993, 0.9645696225303936, 0.9645696225303936, 0.9645696225303936, 0.9685978074331428, 0.9685978074331428, 0.9685978074331428, 0.0540997866061762, 0.0540997866061762, 0.0540997866061762, 0.07145202727953437, 0.07145202727953437, 0.07145202727953437, 0.12769351186509703, 0.12769351186509703, 0.12769351186509703, 0.1293507417569062, 0.1293507417569062, 0.1293507417569062, 0.1339179016100177, 0.1339179016100177, 0.1339179016100177, 0.12708461690988315, 0.12708461690988315, 0.12708461690988315, 0.04735785644807433, 0.04735785644807433, 0.04735785644807433, 0.04564476719562027, 0.04564476719562027, 0.04564476719562027, 0.025139230460900164, 0.025139230460900164, 0.025139230460900164, 0.006262292883601361, 0.006262292883601361, 0.006262292883601361, 0.049834269015778365, 0.049834269015778365, 0.049834269015778365, 0.004431707113297989, 0.004431707113297989, 0.004431707113297989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041117253160063094, 0.041117253160063094, 0.041117253160063094, 0.005490167334017859, 0.005490167334017859, 0.005490167334017859, 0.01581715085843549, 0.01581715085843549, 0.01581715085843549, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002972913795491472, 0.002972913795491472, 0.002972913795491472, 0.016134009499734425, 0.016134009499734425, 0.016134009499734425, 0.02895894164480306, 0.02895894164480306, 0.02895894164480306, 0.21293842161598409, 0.21293842161598409, 0.21293842161598409, 0.2324146409656429, 0.2324146409656429, 0.2324146409656429, 0.23548529916610483, 0.23548529916610483, 0.23548529916610483, 0.07190503152787586, 0.07190503152787586, 0.07190503152787586, 0.05612303410334096, 0.05612303410334096, 0.05612303410334096, 0.06400045221763395, 0.06400045221763395, 0.06400045221763395, 0.14208315360569812, 0.14208315360569812, 0.14208315360569812, 0.15648950471912226, 0.15648950471912226, 0.15648950471912226, 0.17160442195601067, 0.17160442195601067, 0.17160442195601067, 0.1931403348874321, 0.1931403348874321, 0.1931403348874321, 0.16225275924420313, 0.16225275924420313, 0.16225275924420313, 0.17137329498643106, 0.17137329498643106, 0.17137329498643106, 0.11717461376320992, 0.11717461376320992, 0.11717461376320992, 0.14346042523560498, 0.14346042523560498, 0.14346042523560498, 0.11805567150925456, 0.11805567150925456, 0.11805567150925456, 0.157087040538594, 0.157087040538594, 0.157087040538594, 0.20823315460032354, 0.20823315460032354, 0.20823315460032354, 0.15242048252220175, 0.15242048252220175, 0.15242048252220175, 0.15675421913328969, 0.15675421913328969, 0.15675421913328969, 0.14494836246649723, 0.14494836246649723, 0.14494836246649723, 0.13830340762640103, 0.13830340762640103, 0.13830340762640103, 0.2512037444250109, 0.2512037444250109, 0.2512037444250109, 0.14224273819517907, 0.14224273819517907, 0.14224273819517907, 0.12659519832319932, 0.12659519832319932, 0.12659519832319932, 0.1602404966930504, 0.1602404966930504, 0.1602404966930504, 0.16867669888151215, 0.16867669888151215, 0.16867669888151215, 0.13438261170129295, 0.13438261170129295, 0.13438261170129295, 0.17978960644907382, 0.17978960644907382, 0.17978960644907382, 0.17895817853199825, 0.17895817853199825, 0.17895817853199825, 0.17420704190742142, 0.17420704190742142, 0.17420704190742142, 0.050789933215365624, 0.050789933215365624, 0.050789933215365624, 0.0504133473569538, 0.0504133473569538, 0.0504133473569538, 0.047255299068311274, 0.047255299068311274, 0.047255299068311274]}, "mutation_prompt": null}
{"id": "929b172d-9bbd-4cfb-8896-6e2b5afb5aa9", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b])  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhanced mutation in DE step by using a weighted sum of two vectors to improve convergence.", "configspace": "", "generation": 2, "fitness": 0.1698378589623251, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "7a70fcea-eadb-480e-a48a-999cf05844b3", "metadata": {"aucs": [0.3473139540619864, 0.3473139540619864, 0.3473139540619864, 0.23187755517041464, 0.23187755517041464, 0.23187755517041464, 0.44912722699454743, 0.44912722699454743, 0.44912722699454743, 0.01433477488200774, 0.01433477488200774, 0.01433477488200774, 0.009672132606081685, 0.009672132606081685, 0.009672132606081685, 0.03205586189684073, 0.03205586189684073, 0.03205586189684073, 0.07760362954527877, 0.07760362954527877, 0.07760362954527877, 0.08186987492838549, 0.08186987492838549, 0.08186987492838549, 0.067166683675983, 0.067166683675983, 0.067166683675983, 0.07230064650998846, 0.07230064650998846, 0.07230064650998846, 0.0670616599343874, 0.0670616599343874, 0.0670616599343874, 0.07895932468254263, 0.07895932468254263, 0.07895932468254263, 0.9672491218784767, 0.9672491218784767, 0.9672491218784767, 0.9610112342198609, 0.9610112342198609, 0.9610112342198609, 0.9159518761994938, 0.9159518761994938, 0.9159518761994938, 0.1807261363622431, 0.1807261363622431, 0.1807261363622431, 0.15831608670252195, 0.15831608670252195, 0.15831608670252195, 0.12638431022693764, 0.12638431022693764, 0.12638431022693764, 0.2041396135845328, 0.2041396135845328, 0.2041396135845328, 0.21401643508436996, 0.21401643508436996, 0.21401643508436996, 0.22878598141950446, 0.22878598141950446, 0.22878598141950446, 0.09457526929396465, 0.09457526929396465, 0.09457526929396465, 0.12294600697762093, 0.12294600697762093, 0.12294600697762093, 0.0794026810870444, 0.0794026810870444, 0.0794026810870444, 0.0722975061031742, 0.0722975061031742, 0.0722975061031742, 0.10152934552006643, 0.10152934552006643, 0.10152934552006643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07165922644613387, 0.07165922644613387, 0.07165922644613387, 0.01916606637139251, 0.01916606637139251, 0.01916606637139251, 0.06654270928420558, 0.06654270928420558, 0.06654270928420558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053056633032626976, 0.053056633032626976, 0.053056633032626976, 0.021209958796939876, 0.021209958796939876, 0.021209958796939876, 0.057808053948468996, 0.057808053948468996, 0.057808053948468996, 0.3656332695410427, 0.3656332695410427, 0.3656332695410427, 0.3533116911678754, 0.3533116911678754, 0.3533116911678754, 0.3231454393416564, 0.3231454393416564, 0.3231454393416564, 0.07733933280622274, 0.07733933280622274, 0.07733933280622274, 0.0887764367519942, 0.0887764367519942, 0.0887764367519942, 0.08563179538757137, 0.08563179538757137, 0.08563179538757137, 0.11820780484903282, 0.11820780484903282, 0.11820780484903282, 0.14721701511430385, 0.14721701511430385, 0.14721701511430385, 0.14300300621484252, 0.14300300621484252, 0.14300300621484252, 0.21390326488582256, 0.21390326488582256, 0.21390326488582256, 0.2366354308151395, 0.2366354308151395, 0.2366354308151395, 0.23210348241255097, 0.23210348241255097, 0.23210348241255097, 0.18097878999385741, 0.18097878999385741, 0.18097878999385741, 0.14656253691679866, 0.14656253691679866, 0.14656253691679866, 0.15595248788517568, 0.15595248788517568, 0.15595248788517568, 0.20789691964586732, 0.20789691964586732, 0.20789691964586732, 0.18171120908466631, 0.18171120908466631, 0.18171120908466631, 0.19101548973051174, 0.19101548973051174, 0.19101548973051174, 0.1761985555481297, 0.1761985555481297, 0.1761985555481297, 0.1682246555386444, 0.1682246555386444, 0.1682246555386444, 0.19679095142151892, 0.19679095142151892, 0.19679095142151892, 0.4062513001120259, 0.4062513001120259, 0.4062513001120259, 0.17496801388799044, 0.17496801388799044, 0.17496801388799044, 0.16650337422653205, 0.16650337422653205, 0.16650337422653205, 0.15160360070777767, 0.15160360070777767, 0.15160360070777767, 0.19800533380818397, 0.19800533380818397, 0.19800533380818397, 0.15353573815321164, 0.15353573815321164, 0.15353573815321164, 0.18635166342356901, 0.18635166342356901, 0.18635166342356901, 0.1867063842412814, 0.1867063842412814, 0.1867063842412814, 0.17437073458874275, 0.17437073458874275, 0.17437073458874275, 0.07243378033325443, 0.07243378033325443, 0.07243378033325443, 0.06101650661636304, 0.06101650661636304, 0.06101650661636304, 0.0595222727072241, 0.0595222727072241, 0.0595222727072241]}, "mutation_prompt": null}
{"id": "3ce7a171-303c-4b6a-81fd-2d0433e003ec", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.7  # Changed line\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b] + np.random.rand() * (particle_positions[a] - particle_positions[b]))  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Improve exploration by adjusting the cognitive component and enhance mutation with a dynamic factor.", "configspace": "", "generation": 3, "fitness": 0.16705648579831364, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "929b172d-9bbd-4cfb-8896-6e2b5afb5aa9", "metadata": {"aucs": [0.3852716439537428, 0.3852716439537428, 0.3852716439537428, 0.3854028777071048, 0.3854028777071048, 0.3854028777071048, 0.38839510671077293, 0.38839510671077293, 0.38839510671077293, 0.07817540773747966, 0.07817540773747966, 0.07817540773747966, 0.01797543913172117, 0.01797543913172117, 0.01797543913172117, 0.026845913402308574, 0.026845913402308574, 0.026845913402308574, 0.08079310321825539, 0.08079310321825539, 0.08079310321825539, 0.0762328556089289, 0.0762328556089289, 0.0762328556089289, 0.08472140056612809, 0.08472140056612809, 0.08472140056612809, 0.06926953081704668, 0.06926953081704668, 0.06926953081704668, 0.0528054520389134, 0.0528054520389134, 0.0528054520389134, 0.06583180594539029, 0.06583180594539029, 0.06583180594539029, 0.966658560006449, 0.966658560006449, 0.966658560006449, 0.9545491254711099, 0.9545491254711099, 0.9545491254711099, 0.9578344402243711, 0.9578344402243711, 0.9578344402243711, 0.12315866091297523, 0.12315866091297523, 0.12315866091297523, 0.13308346331431808, 0.13308346331431808, 0.13308346331431808, 0.1675334897724029, 0.1675334897724029, 0.1675334897724029, 0.20052624242583983, 0.20052624242583983, 0.20052624242583983, 0.18635602387862482, 0.18635602387862482, 0.18635602387862482, 0.1867503134900459, 0.1867503134900459, 0.1867503134900459, 0.10499374574443077, 0.10499374574443077, 0.10499374574443077, 0.11546110137572763, 0.11546110137572763, 0.11546110137572763, 0.10919095154144054, 0.10919095154144054, 0.10919095154144054, 0.08021789635301935, 0.08021789635301935, 0.08021789635301935, 0.04927794609017566, 0.04927794609017566, 0.04927794609017566, 0.06517074911194709, 0.06517074911194709, 0.06517074911194709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035223606257356876, 0.035223606257356876, 0.035223606257356876, 0.0025382101273792035, 0.0025382101273792035, 0.0025382101273792035, 0.025243329452925956, 0.025243329452925956, 0.025243329452925956, 0.0039936664357479446, 0.0039936664357479446, 0.0039936664357479446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04830482371405198, 0.04830482371405198, 0.04830482371405198, 0.04635353671779152, 0.04635353671779152, 0.04635353671779152, 0.04202948483375857, 0.04202948483375857, 0.04202948483375857, 0.2875599009896841, 0.2875599009896841, 0.2875599009896841, 0.3356840248077181, 0.3356840248077181, 0.3356840248077181, 0.2603511774052537, 0.2603511774052537, 0.2603511774052537, 0.07883401608964125, 0.07883401608964125, 0.07883401608964125, 0.07283721790101916, 0.07283721790101916, 0.07283721790101916, 0.06608493079734745, 0.06608493079734745, 0.06608493079734745, 0.20154534162005266, 0.20154534162005266, 0.20154534162005266, 0.16585268336035786, 0.16585268336035786, 0.16585268336035786, 0.12031871117010362, 0.12031871117010362, 0.12031871117010362, 0.20524363429046366, 0.20524363429046366, 0.20524363429046366, 0.21578617256018828, 0.21578617256018828, 0.21578617256018828, 0.2027491118890975, 0.2027491118890975, 0.2027491118890975, 0.1220283617748108, 0.1220283617748108, 0.1220283617748108, 0.1396997073393481, 0.1396997073393481, 0.1396997073393481, 0.1630007627357034, 0.1630007627357034, 0.1630007627357034, 0.1759429262914216, 0.1759429262914216, 0.1759429262914216, 0.1683556759614725, 0.1683556759614725, 0.1683556759614725, 0.173539477209394, 0.173539477209394, 0.173539477209394, 0.15971872303466117, 0.15971872303466117, 0.15971872303466117, 0.16264045367640612, 0.16264045367640612, 0.16264045367640612, 0.17254411676775816, 0.17254411676775816, 0.17254411676775816, 0.4344063271160158, 0.4344063271160158, 0.4344063271160158, 0.18892240097369972, 0.18892240097369972, 0.18892240097369972, 0.16243759219849108, 0.16243759219849108, 0.16243759219849108, 0.1910114072995499, 0.1910114072995499, 0.1910114072995499, 0.19214366102424962, 0.19214366102424962, 0.19214366102424962, 0.14410945040436818, 0.14410945040436818, 0.14410945040436818, 0.17421136568938966, 0.17421136568938966, 0.17421136568938966, 0.18281900270578244, 0.18281900270578244, 0.18281900270578244, 0.18001461744698444, 0.18001461744698444, 0.18001461744698444, 0.07346576866874788, 0.07346576866874788, 0.07346576866874788, 0.05908700810327905, 0.05908700810327905, 0.05908700810327905, 0.07845134408643972, 0.07845134408643972, 0.07845134408643972]}, "mutation_prompt": null}
{"id": "fdfc5dd4-6644-4b47-9987-c320ed39eaa8", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b])  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhanced mutation in DE step by using a weighted sum of two vectors to improve convergence.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "929b172d-9bbd-4cfb-8896-6e2b5afb5aa9", "metadata": {"aucs": [0.3473139540619864, 0.3473139540619864, 0.3473139540619864, 0.23187755517041464, 0.23187755517041464, 0.23187755517041464, 0.44912722699454743, 0.44912722699454743, 0.44912722699454743, 0.01433477488200774, 0.01433477488200774, 0.01433477488200774, 0.009672132606081685, 0.009672132606081685, 0.009672132606081685, 0.03205586189684073, 0.03205586189684073, 0.03205586189684073, 0.07760362954527877, 0.07760362954527877, 0.07760362954527877, 0.08186987492838549, 0.08186987492838549, 0.08186987492838549, 0.067166683675983, 0.067166683675983, 0.067166683675983, 0.07230064650998846, 0.07230064650998846, 0.07230064650998846, 0.0670616599343874, 0.0670616599343874, 0.0670616599343874, 0.07895932468254263, 0.07895932468254263, 0.07895932468254263, 0.9672491218784767, 0.9672491218784767, 0.9672491218784767, 0.9610112342198609, 0.9610112342198609, 0.9610112342198609, 0.9159518761994938, 0.9159518761994938, 0.9159518761994938, 0.1807261363622431, 0.1807261363622431, 0.1807261363622431, 0.15831608670252195, 0.15831608670252195, 0.15831608670252195, 0.12638431022693764, 0.12638431022693764, 0.12638431022693764, 0.2041396135845328, 0.2041396135845328, 0.2041396135845328, 0.21401643508436996, 0.21401643508436996, 0.21401643508436996, 0.22878598141950446, 0.22878598141950446, 0.22878598141950446, 0.09457526929396465, 0.09457526929396465, 0.09457526929396465, 0.12294600697762093, 0.12294600697762093, 0.12294600697762093, 0.0794026810870444, 0.0794026810870444, 0.0794026810870444, 0.0722975061031742, 0.0722975061031742, 0.0722975061031742, 0.10152934552006643, 0.10152934552006643, 0.10152934552006643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07165922644613387, 0.07165922644613387, 0.07165922644613387, 0.01916606637139251, 0.01916606637139251, 0.01916606637139251, 0.06654270928420558, 0.06654270928420558, 0.06654270928420558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053056633032626976, 0.053056633032626976, 0.053056633032626976, 0.021209958796939876, 0.021209958796939876, 0.021209958796939876, 0.057808053948468996, 0.057808053948468996, 0.057808053948468996, 0.3656332695410427, 0.3656332695410427, 0.3656332695410427, 0.3533116911678754, 0.3533116911678754, 0.3533116911678754, 0.3231454393416564, 0.3231454393416564, 0.3231454393416564, 0.07733933280622274, 0.07733933280622274, 0.07733933280622274, 0.0887764367519942, 0.0887764367519942, 0.0887764367519942, 0.08563179538757137, 0.08563179538757137, 0.08563179538757137, 0.11820780484903282, 0.11820780484903282, 0.11820780484903282, 0.14721701511430385, 0.14721701511430385, 0.14721701511430385, 0.14300300621484252, 0.14300300621484252, 0.14300300621484252, 0.21390326488582256, 0.21390326488582256, 0.21390326488582256, 0.2366354308151395, 0.2366354308151395, 0.2366354308151395, 0.23210348241255097, 0.23210348241255097, 0.23210348241255097, 0.18097878999385741, 0.18097878999385741, 0.18097878999385741, 0.14656253691679866, 0.14656253691679866, 0.14656253691679866, 0.15595248788517568, 0.15595248788517568, 0.15595248788517568, 0.20789691964586732, 0.20789691964586732, 0.20789691964586732, 0.18171120908466631, 0.18171120908466631, 0.18171120908466631, 0.19101548973051174, 0.19101548973051174, 0.19101548973051174, 0.1761985555481297, 0.1761985555481297, 0.1761985555481297, 0.1682246555386444, 0.1682246555386444, 0.1682246555386444, 0.19679095142151892, 0.19679095142151892, 0.19679095142151892, 0.4062513001120259, 0.4062513001120259, 0.4062513001120259, 0.17496801388799044, 0.17496801388799044, 0.17496801388799044, 0.16650337422653205, 0.16650337422653205, 0.16650337422653205, 0.15160360070777767, 0.15160360070777767, 0.15160360070777767, 0.19800533380818397, 0.19800533380818397, 0.19800533380818397, 0.15353573815321164, 0.15353573815321164, 0.15353573815321164, 0.18635166342356901, 0.18635166342356901, 0.18635166342356901, 0.1867063842412814, 0.1867063842412814, 0.1867063842412814, 0.17437073458874275, 0.17437073458874275, 0.17437073458874275, 0.07243378033325443, 0.07243378033325443, 0.07243378033325443, 0.06101650661636304, 0.06101650661636304, 0.06101650661636304, 0.0595222727072241, 0.0595222727072241, 0.0595222727072241]}, "mutation_prompt": null}
{"id": "4bf98db1-7def-4f37-847e-1339fdfc2d6a", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_adaptive = 0.5 + (0.5 * (evaluations / self.budget))  # Changed line\n                mutant = particle_positions[a] + f_adaptive * (particle_positions[b] - particle_positions[c])  # Changed line\n\n                cr_adaptive = 0.9 - (0.5 * (evaluations / self.budget))  # Changed line\n                trial = np.where(np.random.rand(self.dim) < cr_adaptive, mutant, particle_positions[i])  # Changed line\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive parameters for DE scaling factor and crossover probability to enhance exploration and exploitation.", "configspace": "", "generation": 5, "fitness": 0.16837483891540544, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "929b172d-9bbd-4cfb-8896-6e2b5afb5aa9", "metadata": {"aucs": [0.3495847547726576, 0.3495847547726576, 0.3495847547726576, 0.34054529946620893, 0.34054529946620893, 0.34054529946620893, 0.32654733573223893, 0.32654733573223893, 0.32654733573223893, 0.0014237444996457738, 0.0014237444996457738, 0.0014237444996457738, 0.0202106263336973, 0.0202106263336973, 0.0202106263336973, 0.022995085366011137, 0.022995085366011137, 0.022995085366011137, 0.08273885969543682, 0.08273885969543682, 0.08273885969543682, 0.0755646934147629, 0.0755646934147629, 0.0755646934147629, 0.08467784266567491, 0.08467784266567491, 0.08467784266567491, 0.07531942958397997, 0.07531942958397997, 0.07531942958397997, 0.046910295629829624, 0.046910295629829624, 0.046910295629829624, 0.05749822814558225, 0.05749822814558225, 0.05749822814558225, 0.9812106915151291, 0.9812106915151291, 0.9812106915151291, 0.9707043684917035, 0.9707043684917035, 0.9707043684917035, 0.9667569529995427, 0.9667569529995427, 0.9667569529995427, 0.14642828448183987, 0.14642828448183987, 0.14642828448183987, 0.11820788284581196, 0.11820788284581196, 0.11820788284581196, 0.15561711450733218, 0.15561711450733218, 0.15561711450733218, 0.1639544585033802, 0.1639544585033802, 0.1639544585033802, 0.22518694249115634, 0.22518694249115634, 0.22518694249115634, 0.1843537344346261, 0.1843537344346261, 0.1843537344346261, 0.12062746506404476, 0.12062746506404476, 0.12062746506404476, 0.09590752392559576, 0.09590752392559576, 0.09590752392559576, 0.04124657646021623, 0.04124657646021623, 0.04124657646021623, 0.08255195279507277, 0.08255195279507277, 0.08255195279507277, 0.07275172030386423, 0.07275172030386423, 0.07275172030386423, 0.015497734954801445, 0.015497734954801445, 0.015497734954801445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11605549679859084, 0.11605549679859084, 0.11605549679859084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05172950055315506, 0.05172950055315506, 0.05172950055315506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06722073569558829, 0.06722073569558829, 0.06722073569558829, 0.05725590629203203, 0.05725590629203203, 0.05725590629203203, 0.039582638474329856, 0.039582638474329856, 0.039582638474329856, 0.3575230021787239, 0.3575230021787239, 0.3575230021787239, 0.3383566488418288, 0.3383566488418288, 0.3383566488418288, 0.35247309055143283, 0.35247309055143283, 0.35247309055143283, 0.08262743626148439, 0.08262743626148439, 0.08262743626148439, 0.059143062361731835, 0.059143062361731835, 0.059143062361731835, 0.05998084024135586, 0.05998084024135586, 0.05998084024135586, 0.1447966671163191, 0.1447966671163191, 0.1447966671163191, 0.16051181949201343, 0.16051181949201343, 0.16051181949201343, 0.1315387454642889, 0.1315387454642889, 0.1315387454642889, 0.21170434595568444, 0.21170434595568444, 0.21170434595568444, 0.23741763382737413, 0.23741763382737413, 0.23741763382737413, 0.22164687788809445, 0.22164687788809445, 0.22164687788809445, 0.09005814593766204, 0.09005814593766204, 0.09005814593766204, 0.18726597813786838, 0.18726597813786838, 0.18726597813786838, 0.12626786264057388, 0.12626786264057388, 0.12626786264057388, 0.1684003454808879, 0.1684003454808879, 0.1684003454808879, 0.16669270087766253, 0.16669270087766253, 0.16669270087766253, 0.1521952210826676, 0.1521952210826676, 0.1521952210826676, 0.1633880390741288, 0.1633880390741288, 0.1633880390741288, 0.1638630915437489, 0.1638630915437489, 0.1638630915437489, 0.17049835060892804, 0.17049835060892804, 0.17049835060892804, 0.5011040433615996, 0.5011040433615996, 0.5011040433615996, 0.16638469975447878, 0.16638469975447878, 0.16638469975447878, 0.3016849509461186, 0.3016849509461186, 0.3016849509461186, 0.19376848665934365, 0.19376848665934365, 0.19376848665934365, 0.197812378627924, 0.197812378627924, 0.197812378627924, 0.14738743330093584, 0.14738743330093584, 0.14738743330093584, 0.16085195104483485, 0.16085195104483485, 0.16085195104483485, 0.17674145838126554, 0.17674145838126554, 0.17674145838126554, 0.17442084586174822, 0.17442084586174822, 0.17442084586174822, 0.07005707799442262, 0.07005707799442262, 0.07005707799442262, 0.06074288832428887, 0.06074288832428887, 0.06074288832428887, 0.06811840519423262, 0.06811840519423262, 0.06811840519423262]}, "mutation_prompt": null}
{"id": "b9d685ea-2fe8-4705-9a49-63d120c20dc2", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b])  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhanced mutation in DE step by using a weighted sum of two vectors to improve convergence.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "929b172d-9bbd-4cfb-8896-6e2b5afb5aa9", "metadata": {"aucs": [0.3473139540619864, 0.3473139540619864, 0.3473139540619864, 0.23187755517041464, 0.23187755517041464, 0.23187755517041464, 0.44912722699454743, 0.44912722699454743, 0.44912722699454743, 0.01433477488200774, 0.01433477488200774, 0.01433477488200774, 0.009672132606081685, 0.009672132606081685, 0.009672132606081685, 0.03205586189684073, 0.03205586189684073, 0.03205586189684073, 0.07760362954527877, 0.07760362954527877, 0.07760362954527877, 0.08186987492838549, 0.08186987492838549, 0.08186987492838549, 0.067166683675983, 0.067166683675983, 0.067166683675983, 0.07230064650998846, 0.07230064650998846, 0.07230064650998846, 0.0670616599343874, 0.0670616599343874, 0.0670616599343874, 0.07895932468254263, 0.07895932468254263, 0.07895932468254263, 0.9672491218784767, 0.9672491218784767, 0.9672491218784767, 0.9610112342198609, 0.9610112342198609, 0.9610112342198609, 0.9159518761994938, 0.9159518761994938, 0.9159518761994938, 0.1807261363622431, 0.1807261363622431, 0.1807261363622431, 0.15831608670252195, 0.15831608670252195, 0.15831608670252195, 0.12638431022693764, 0.12638431022693764, 0.12638431022693764, 0.2041396135845328, 0.2041396135845328, 0.2041396135845328, 0.21401643508436996, 0.21401643508436996, 0.21401643508436996, 0.22878598141950446, 0.22878598141950446, 0.22878598141950446, 0.09457526929396465, 0.09457526929396465, 0.09457526929396465, 0.12294600697762093, 0.12294600697762093, 0.12294600697762093, 0.0794026810870444, 0.0794026810870444, 0.0794026810870444, 0.0722975061031742, 0.0722975061031742, 0.0722975061031742, 0.10152934552006643, 0.10152934552006643, 0.10152934552006643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07165922644613387, 0.07165922644613387, 0.07165922644613387, 0.01916606637139251, 0.01916606637139251, 0.01916606637139251, 0.06654270928420558, 0.06654270928420558, 0.06654270928420558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053056633032626976, 0.053056633032626976, 0.053056633032626976, 0.021209958796939876, 0.021209958796939876, 0.021209958796939876, 0.057808053948468996, 0.057808053948468996, 0.057808053948468996, 0.3656332695410427, 0.3656332695410427, 0.3656332695410427, 0.3533116911678754, 0.3533116911678754, 0.3533116911678754, 0.3231454393416564, 0.3231454393416564, 0.3231454393416564, 0.07733933280622274, 0.07733933280622274, 0.07733933280622274, 0.0887764367519942, 0.0887764367519942, 0.0887764367519942, 0.08563179538757137, 0.08563179538757137, 0.08563179538757137, 0.11820780484903282, 0.11820780484903282, 0.11820780484903282, 0.14721701511430385, 0.14721701511430385, 0.14721701511430385, 0.14300300621484252, 0.14300300621484252, 0.14300300621484252, 0.21390326488582256, 0.21390326488582256, 0.21390326488582256, 0.2366354308151395, 0.2366354308151395, 0.2366354308151395, 0.23210348241255097, 0.23210348241255097, 0.23210348241255097, 0.18097878999385741, 0.18097878999385741, 0.18097878999385741, 0.14656253691679866, 0.14656253691679866, 0.14656253691679866, 0.15595248788517568, 0.15595248788517568, 0.15595248788517568, 0.20789691964586732, 0.20789691964586732, 0.20789691964586732, 0.18171120908466631, 0.18171120908466631, 0.18171120908466631, 0.19101548973051174, 0.19101548973051174, 0.19101548973051174, 0.1761985555481297, 0.1761985555481297, 0.1761985555481297, 0.1682246555386444, 0.1682246555386444, 0.1682246555386444, 0.19679095142151892, 0.19679095142151892, 0.19679095142151892, 0.4062513001120259, 0.4062513001120259, 0.4062513001120259, 0.17496801388799044, 0.17496801388799044, 0.17496801388799044, 0.16650337422653205, 0.16650337422653205, 0.16650337422653205, 0.15160360070777767, 0.15160360070777767, 0.15160360070777767, 0.19800533380818397, 0.19800533380818397, 0.19800533380818397, 0.15353573815321164, 0.15353573815321164, 0.15353573815321164, 0.18635166342356901, 0.18635166342356901, 0.18635166342356901, 0.1867063842412814, 0.1867063842412814, 0.1867063842412814, 0.17437073458874275, 0.17437073458874275, 0.17437073458874275, 0.07243378033325443, 0.07243378033325443, 0.07243378033325443, 0.06101650661636304, 0.06101650661636304, 0.06101650661636304, 0.0595222727072241, 0.0595222727072241, 0.0595222727072241]}, "mutation_prompt": null}
{"id": "b3f981a9-7807-427d-93c6-81476b9d97cd", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b])  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhanced mutation in DE step by using a weighted sum of two vectors to improve convergence.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "929b172d-9bbd-4cfb-8896-6e2b5afb5aa9", "metadata": {"aucs": [0.3473139540619864, 0.3473139540619864, 0.3473139540619864, 0.23187755517041464, 0.23187755517041464, 0.23187755517041464, 0.44912722699454743, 0.44912722699454743, 0.44912722699454743, 0.01433477488200774, 0.01433477488200774, 0.01433477488200774, 0.009672132606081685, 0.009672132606081685, 0.009672132606081685, 0.03205586189684073, 0.03205586189684073, 0.03205586189684073, 0.07760362954527877, 0.07760362954527877, 0.07760362954527877, 0.08186987492838549, 0.08186987492838549, 0.08186987492838549, 0.067166683675983, 0.067166683675983, 0.067166683675983, 0.07230064650998846, 0.07230064650998846, 0.07230064650998846, 0.0670616599343874, 0.0670616599343874, 0.0670616599343874, 0.07895932468254263, 0.07895932468254263, 0.07895932468254263, 0.9672491218784767, 0.9672491218784767, 0.9672491218784767, 0.9610112342198609, 0.9610112342198609, 0.9610112342198609, 0.9159518761994938, 0.9159518761994938, 0.9159518761994938, 0.1807261363622431, 0.1807261363622431, 0.1807261363622431, 0.15831608670252195, 0.15831608670252195, 0.15831608670252195, 0.12638431022693764, 0.12638431022693764, 0.12638431022693764, 0.2041396135845328, 0.2041396135845328, 0.2041396135845328, 0.21401643508436996, 0.21401643508436996, 0.21401643508436996, 0.22878598141950446, 0.22878598141950446, 0.22878598141950446, 0.09457526929396465, 0.09457526929396465, 0.09457526929396465, 0.12294600697762093, 0.12294600697762093, 0.12294600697762093, 0.0794026810870444, 0.0794026810870444, 0.0794026810870444, 0.0722975061031742, 0.0722975061031742, 0.0722975061031742, 0.10152934552006643, 0.10152934552006643, 0.10152934552006643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07165922644613387, 0.07165922644613387, 0.07165922644613387, 0.01916606637139251, 0.01916606637139251, 0.01916606637139251, 0.06654270928420558, 0.06654270928420558, 0.06654270928420558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053056633032626976, 0.053056633032626976, 0.053056633032626976, 0.021209958796939876, 0.021209958796939876, 0.021209958796939876, 0.057808053948468996, 0.057808053948468996, 0.057808053948468996, 0.3656332695410427, 0.3656332695410427, 0.3656332695410427, 0.3533116911678754, 0.3533116911678754, 0.3533116911678754, 0.3231454393416564, 0.3231454393416564, 0.3231454393416564, 0.07733933280622274, 0.07733933280622274, 0.07733933280622274, 0.0887764367519942, 0.0887764367519942, 0.0887764367519942, 0.08563179538757137, 0.08563179538757137, 0.08563179538757137, 0.11820780484903282, 0.11820780484903282, 0.11820780484903282, 0.14721701511430385, 0.14721701511430385, 0.14721701511430385, 0.14300300621484252, 0.14300300621484252, 0.14300300621484252, 0.21390326488582256, 0.21390326488582256, 0.21390326488582256, 0.2366354308151395, 0.2366354308151395, 0.2366354308151395, 0.23210348241255097, 0.23210348241255097, 0.23210348241255097, 0.18097878999385741, 0.18097878999385741, 0.18097878999385741, 0.14656253691679866, 0.14656253691679866, 0.14656253691679866, 0.15595248788517568, 0.15595248788517568, 0.15595248788517568, 0.20789691964586732, 0.20789691964586732, 0.20789691964586732, 0.18171120908466631, 0.18171120908466631, 0.18171120908466631, 0.19101548973051174, 0.19101548973051174, 0.19101548973051174, 0.1761985555481297, 0.1761985555481297, 0.1761985555481297, 0.1682246555386444, 0.1682246555386444, 0.1682246555386444, 0.19679095142151892, 0.19679095142151892, 0.19679095142151892, 0.4062513001120259, 0.4062513001120259, 0.4062513001120259, 0.17496801388799044, 0.17496801388799044, 0.17496801388799044, 0.16650337422653205, 0.16650337422653205, 0.16650337422653205, 0.15160360070777767, 0.15160360070777767, 0.15160360070777767, 0.19800533380818397, 0.19800533380818397, 0.19800533380818397, 0.15353573815321164, 0.15353573815321164, 0.15353573815321164, 0.18635166342356901, 0.18635166342356901, 0.18635166342356901, 0.1867063842412814, 0.1867063842412814, 0.1867063842412814, 0.17437073458874275, 0.17437073458874275, 0.17437073458874275, 0.07243378033325443, 0.07243378033325443, 0.07243378033325443, 0.06101650661636304, 0.06101650661636304, 0.06101650661636304, 0.0595222727072241, 0.0595222727072241, 0.0595222727072241]}, "mutation_prompt": null}
{"id": "7cd4739c-453e-402d-8bb8-6c1fb9f63cff", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor, now adaptive\n        self.cr = 0.9  # DE crossover probability, now adaptive\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # Adaptive parameters\n            self.f = 0.4 + 0.1 * np.random.rand()  # line changed\n            self.cr = 0.8 + 0.2 * np.random.rand()  # line changed\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = particle_positions[a] + self.f * (particle_positions[b] - particle_positions[c])  # line changed\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                trial_score = func(trial)  # line changed\n                if trial_score < scores[i]:  # line changed\n                    particle_positions[i] = trial\n                    scores[i] = trial_score  # line changed\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduced adaptive DE parameters and randomization for improved exploration and convergence in mixed strategy optimization.", "configspace": "", "generation": 8, "fitness": 0.16675438162695372, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "929b172d-9bbd-4cfb-8896-6e2b5afb5aa9", "metadata": {"aucs": [0.43803200909304907, 0.43803200909304907, 0.43803200909304907, 0.3540328094438835, 0.3540328094438835, 0.3540328094438835, 0.36852940082271435, 0.36852940082271435, 0.36852940082271435, 0.12332981546792032, 0.12332981546792032, 0.12332981546792032, 0.0389509892934371, 0.0389509892934371, 0.0389509892934371, 0.017228138612949473, 0.017228138612949473, 0.017228138612949473, 0.09334671801444927, 0.09334671801444927, 0.09334671801444927, 0.07035999874481735, 0.07035999874481735, 0.07035999874481735, 0.0566074258634115, 0.0566074258634115, 0.0566074258634115, 0.05250916736367561, 0.05250916736367561, 0.05250916736367561, 0.07124931336084506, 0.07124931336084506, 0.07124931336084506, 0.05745403688126627, 0.05745403688126627, 0.05745403688126627, 0.9771481569151685, 0.9771481569151685, 0.9771481569151685, 0.9750586187840379, 0.9750586187840379, 0.9750586187840379, 0.977210379357877, 0.977210379357877, 0.977210379357877, 0.10570158353359727, 0.10570158353359727, 0.10570158353359727, 0.14078139241289533, 0.14078139241289533, 0.14078139241289533, 0.11679014213712258, 0.11679014213712258, 0.11679014213712258, 0.15884603889666615, 0.15884603889666615, 0.15884603889666615, 0.15508351480926996, 0.15508351480926996, 0.15508351480926996, 0.2019393026261731, 0.2019393026261731, 0.2019393026261731, 0.13682135176087518, 0.13682135176087518, 0.13682135176087518, 0.07919751947073239, 0.07919751947073239, 0.07919751947073239, 0.11068577146591574, 0.11068577146591574, 0.11068577146591574, 0.11248839081251549, 0.11248839081251549, 0.11248839081251549, 0.04851956276065461, 0.04851956276065461, 0.04851956276065461, 0.14788897697529424, 0.14788897697529424, 0.14788897697529424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042634103693257375, 0.042634103693257375, 0.042634103693257375, 0.009370975482689614, 0.009370975482689614, 0.009370975482689614, 0.06753257184005979, 0.06753257184005979, 0.06753257184005979, 0.0014271259717224538, 0.0014271259717224538, 0.0014271259717224538, 0.0007338663582828753, 0.0007338663582828753, 0.0007338663582828753, 0.025630938020549165, 0.025630938020549165, 0.025630938020549165, 0.043648796270382983, 0.043648796270382983, 0.043648796270382983, 0.031168038274263066, 0.031168038274263066, 0.031168038274263066, 0.04347517529305556, 0.04347517529305556, 0.04347517529305556, 0.3207028947431332, 0.3207028947431332, 0.3207028947431332, 0.2822985498258127, 0.2822985498258127, 0.2822985498258127, 0.31797059691662966, 0.31797059691662966, 0.31797059691662966, 0.06516703723489625, 0.06516703723489625, 0.06516703723489625, 0.08292297829977902, 0.08292297829977902, 0.08292297829977902, 0.0708383780388896, 0.0708383780388896, 0.0708383780388896, 0.12275296017727944, 0.12275296017727944, 0.12275296017727944, 0.15572084318858415, 0.15572084318858415, 0.15572084318858415, 0.13916674180710775, 0.13916674180710775, 0.13916674180710775, 0.20186732546612862, 0.20186732546612862, 0.20186732546612862, 0.21142279351290938, 0.21142279351290938, 0.21142279351290938, 0.23574341356719364, 0.23574341356719364, 0.23574341356719364, 0.12771811751046136, 0.12771811751046136, 0.12771811751046136, 0.15500797690586676, 0.15500797690586676, 0.15500797690586676, 0.16254885299516175, 0.16254885299516175, 0.16254885299516175, 0.15110290697438322, 0.15110290697438322, 0.15110290697438322, 0.16285163041910622, 0.16285163041910622, 0.16285163041910622, 0.19007031854457546, 0.19007031854457546, 0.19007031854457546, 0.17601720646892172, 0.17601720646892172, 0.17601720646892172, 0.1809606603427748, 0.1809606603427748, 0.1809606603427748, 0.16217571454265833, 0.16217571454265833, 0.16217571454265833, 0.3415985168267722, 0.3415985168267722, 0.3415985168267722, 0.14891494225145852, 0.14891494225145852, 0.14891494225145852, 0.18228699630873213, 0.18228699630873213, 0.18228699630873213, 0.15603563188627378, 0.15603563188627378, 0.15603563188627378, 0.17326173710557013, 0.17326173710557013, 0.17326173710557013, 0.12575112998398819, 0.12575112998398819, 0.12575112998398819, 0.185223122561463, 0.185223122561463, 0.185223122561463, 0.1733011295055974, 0.1733011295055974, 0.1733011295055974, 0.19985115198769743, 0.19985115198769743, 0.19985115198769743, 0.0750082818336012, 0.0750082818336012, 0.0750082818336012, 0.0686085564989638, 0.0686085564989638, 0.0686085564989638, 0.04973426602282016, 0.04973426602282016, 0.04973426602282016]}, "mutation_prompt": null}
{"id": "9802ebb8-6463-4ef6-9822-de23995f194a", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                perturbation = np.random.uniform(-0.1, 0.1, self.dim)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + perturbation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce a diversity-driven mutation strategy by incorporating a perturbation factor to enhance exploration.", "configspace": "", "generation": 9, "fitness": 0.17271947255382206, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "929b172d-9bbd-4cfb-8896-6e2b5afb5aa9", "metadata": {"aucs": [0.3425450197922083, 0.3425450197922083, 0.3425450197922083, 0.3500721327306049, 0.3500721327306049, 0.3500721327306049, 0.3670392128974367, 0.3670392128974367, 0.3670392128974367, 0.024695246253192304, 0.024695246253192304, 0.024695246253192304, 0.06316764037863609, 0.06316764037863609, 0.06316764037863609, 0.0024454815472985114, 0.0024454815472985114, 0.0024454815472985114, 0.10907725643286381, 0.10907725643286381, 0.10907725643286381, 0.09825428932749725, 0.09825428932749725, 0.09825428932749725, 0.10639642591448539, 0.10639642591448539, 0.10639642591448539, 0.06507995215867701, 0.06507995215867701, 0.06507995215867701, 0.07798988722881128, 0.07798988722881128, 0.07798988722881128, 0.062147459389790494, 0.062147459389790494, 0.062147459389790494, 0.9425315352393849, 0.9425315352393849, 0.9425315352393849, 0.9493937975155889, 0.9493937975155889, 0.9493937975155889, 0.9462556168163412, 0.9462556168163412, 0.9462556168163412, 0.14333726960680637, 0.14333726960680637, 0.14333726960680637, 0.15834846851952622, 0.15834846851952622, 0.15834846851952622, 0.16370998333450137, 0.16370998333450137, 0.16370998333450137, 0.19448021042571928, 0.19448021042571928, 0.19448021042571928, 0.23048143595310233, 0.23048143595310233, 0.23048143595310233, 0.1151853958929625, 0.1151853958929625, 0.1151853958929625, 0.08957602578859913, 0.08957602578859913, 0.08957602578859913, 0.10079004566033978, 0.10079004566033978, 0.10079004566033978, 0.1279605172210695, 0.1279605172210695, 0.1279605172210695, 0.11353039217482908, 0.11353039217482908, 0.11353039217482908, 0.09566324260024506, 0.09566324260024506, 0.09566324260024506, 0.053513260722408584, 0.053513260722408584, 0.053513260722408584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05557845315241905, 0.05557845315241905, 0.05557845315241905, 0.09137653105962595, 0.09137653105962595, 0.09137653105962595, 0.04130465730328492, 0.04130465730328492, 0.04130465730328492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04902047841168167, 0.04902047841168167, 0.04902047841168167, 0.037964963228567794, 0.037964963228567794, 0.037964963228567794, 0.08148091567820315, 0.08148091567820315, 0.08148091567820315, 0.33184052046046153, 0.33184052046046153, 0.33184052046046153, 0.3211028741185029, 0.3211028741185029, 0.3211028741185029, 0.3338414615951364, 0.3338414615951364, 0.3338414615951364, 0.0838813511949551, 0.0838813511949551, 0.0838813511949551, 0.0766717716384423, 0.0766717716384423, 0.0766717716384423, 0.07087611820167461, 0.07087611820167461, 0.07087611820167461, 0.20626834991907184, 0.20626834991907184, 0.20626834991907184, 0.12224789102330469, 0.12224789102330469, 0.12224789102330469, 0.17904738864930003, 0.17904738864930003, 0.17904738864930003, 0.24782930856662888, 0.24782930856662888, 0.24782930856662888, 0.21403880865756342, 0.21403880865756342, 0.21403880865756342, 0.22284258696038217, 0.22284258696038217, 0.22284258696038217, 0.12787099541750302, 0.12787099541750302, 0.12787099541750302, 0.1608408421582711, 0.1608408421582711, 0.1608408421582711, 0.13151609194227187, 0.13151609194227187, 0.13151609194227187, 0.16156467790161766, 0.16156467790161766, 0.16156467790161766, 0.17225141525256715, 0.17225141525256715, 0.17225141525256715, 0.19196238721469483, 0.19196238721469483, 0.19196238721469483, 0.1773984019006497, 0.1773984019006497, 0.1773984019006497, 0.17121933591692884, 0.17121933591692884, 0.17121933591692884, 0.17458660003131699, 0.17458660003131699, 0.17458660003131699, 0.49477952817598525, 0.49477952817598525, 0.49477952817598525, 0.1568874528824683, 0.1568874528824683, 0.1568874528824683, 0.1659216552702497, 0.1659216552702497, 0.1659216552702497, 0.19688856993626158, 0.19688856993626158, 0.19688856993626158, 0.2032395436693809, 0.2032395436693809, 0.2032395436693809, 0.1521673037042226, 0.1521673037042226, 0.1521673037042226, 0.17022431400204474, 0.17022431400204474, 0.17022431400204474, 0.18623516738198498, 0.18623516738198498, 0.18623516738198498, 0.1825204486447406, 0.1825204486447406, 0.1825204486447406, 0.06850905254042139, 0.06850905254042139, 0.06850905254042139, 0.06710293892571895, 0.06710293892571895, 0.06710293892571895, 0.060633669663757384, 0.060633669663757384, 0.060633669663757384]}, "mutation_prompt": null}
{"id": "f5ac5192-87d6-421b-a945-fb81d6ca0ef7", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.9  # Modified line: initial inertia weight\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # Adapt inertia weight based on progress\n            self.inertia_weight = 0.4 + 0.5 * ((self.budget - evaluations) / self.budget)  # Modified line\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                perturbation = np.random.uniform(-0.05, 0.05, self.dim)  # Modified line\n                mutant = 0.6 * (particle_positions[a] + particle_positions[b]) + perturbation  # Modified line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance convergence speed by introducing adaptive inertia weight and refinement in mutation strategy.", "configspace": "", "generation": 10, "fitness": 0.13827472305347113, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "9802ebb8-6463-4ef6-9822-de23995f194a", "metadata": {"aucs": [0.28655698403198204, 0.28655698403198204, 0.28655698403198204, 0.22498608677267784, 0.22498608677267784, 0.22498608677267784, 0.29251671107481214, 0.29251671107481214, 0.29251671107481214, 0.011311011223064993, 0.011311011223064993, 0.011311011223064993, 0.008914431897608877, 0.008914431897608877, 0.008914431897608877, 0.013278197601807373, 0.013278197601807373, 0.013278197601807373, 0.062336110412628654, 0.062336110412628654, 0.062336110412628654, 0.07018504475042442, 0.07018504475042442, 0.07018504475042442, 0.045469116124080555, 0.045469116124080555, 0.045469116124080555, 0.0521237065702197, 0.0521237065702197, 0.0521237065702197, 0.02649383286402096, 0.02649383286402096, 0.02649383286402096, 0.035901451198619205, 0.035901451198619205, 0.035901451198619205, 0.9655512967737242, 0.9655512967737242, 0.9655512967737242, 0.9777723930619067, 0.9777723930619067, 0.9777723930619067, 0.9699357245992155, 0.9699357245992155, 0.9699357245992155, 0.0932271340015488, 0.0932271340015488, 0.0932271340015488, 0.09403257220306149, 0.09403257220306149, 0.09403257220306149, 0.09614447689681471, 0.09614447689681471, 0.09614447689681471, 0.09989590367211221, 0.09989590367211221, 0.09989590367211221, 0.14250317314427685, 0.14250317314427685, 0.14250317314427685, 0.10906744955123959, 0.10906744955123959, 0.10906744955123959, 0.06909827509093125, 0.06909827509093125, 0.06909827509093125, 0.026652713872473366, 0.026652713872473366, 0.026652713872473366, 0.010601244255424191, 0.010601244255424191, 0.010601244255424191, 0.03282853896315718, 0.03282853896315718, 0.03282853896315718, 0.04113102067360874, 0.04113102067360874, 0.04113102067360874, 0.006748847886803522, 0.006748847886803522, 0.006748847886803522, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04907070500379618, 0.04907070500379618, 0.04907070500379618, 0.0040811015280147744, 0.0040811015280147744, 0.0040811015280147744, 0.04092305499511151, 0.04092305499511151, 0.04092305499511151, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015164279437306694, 0.015164279437306694, 0.015164279437306694, 0.0210762434060362, 0.0210762434060362, 0.0210762434060362, 0.29941852558724213, 0.29941852558724213, 0.29941852558724213, 0.2251716306011694, 0.2251716306011694, 0.2251716306011694, 0.25200547525350137, 0.25200547525350137, 0.25200547525350137, 0.05979037564640166, 0.05979037564640166, 0.05979037564640166, 0.056492240717921915, 0.056492240717921915, 0.056492240717921915, 0.06348488800317886, 0.06348488800317886, 0.06348488800317886, 0.14227529662427674, 0.14227529662427674, 0.14227529662427674, 0.12107972100835673, 0.12107972100835673, 0.12107972100835673, 0.15577087875253837, 0.15577087875253837, 0.15577087875253837, 0.17968998074390963, 0.17968998074390963, 0.17968998074390963, 0.202817617186135, 0.202817617186135, 0.202817617186135, 0.17670602369547284, 0.17670602369547284, 0.17670602369547284, 0.1336941848571569, 0.1336941848571569, 0.1336941848571569, 0.13855408151821702, 0.13855408151821702, 0.13855408151821702, 0.10083641802729093, 0.10083641802729093, 0.10083641802729093, 0.15542392275137884, 0.15542392275137884, 0.15542392275137884, 0.14382750996168636, 0.14382750996168636, 0.14382750996168636, 0.17330515903511645, 0.17330515903511645, 0.17330515903511645, 0.17258087346182105, 0.17258087346182105, 0.17258087346182105, 0.14058776970921716, 0.14058776970921716, 0.14058776970921716, 0.16222439679124467, 0.16222439679124467, 0.16222439679124467, 0.17817084863276755, 0.17817084863276755, 0.17817084863276755, 0.17016187224321622, 0.17016187224321622, 0.17016187224321622, 0.16037617175748398, 0.16037617175748398, 0.16037617175748398, 0.1639747338550076, 0.1639747338550076, 0.1639747338550076, 0.16567616745442026, 0.16567616745442026, 0.16567616745442026, 0.14655409792836616, 0.14655409792836616, 0.14655409792836616, 0.18352025321876986, 0.18352025321876986, 0.18352025321876986, 0.17841400729585422, 0.17841400729585422, 0.17841400729585422, 0.19418064500995147, 0.19418064500995147, 0.19418064500995147, 0.06667683757659648, 0.06667683757659648, 0.06667683757659648, 0.050554091373194, 0.050554091373194, 0.050554091373194, 0.04550453003255028, 0.04550453003255028, 0.04550453003255028]}, "mutation_prompt": null}
{"id": "5d5826f9-f1a0-4859-823d-5fbd4bbd9eba", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                perturbation = np.random.uniform(-0.2, 0.2, self.dim)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + perturbation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance the diversity and exploration capability by adjusting the perturbation range to [-0.2, 0.2].", "configspace": "", "generation": 11, "fitness": 0.16880999968526658, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "9802ebb8-6463-4ef6-9822-de23995f194a", "metadata": {"aucs": [0.3818253919521153, 0.3818253919521153, 0.3818253919521153, 0.3913965286057103, 0.3913965286057103, 0.3913965286057103, 0.3746862853541476, 0.3746862853541476, 0.3746862853541476, 0.010259467593270677, 0.010259467593270677, 0.010259467593270677, 0.005645698674208166, 0.005645698674208166, 0.005645698674208166, 0.021159303014100295, 0.021159303014100295, 0.021159303014100295, 0.09320771908371439, 0.09320771908371439, 0.09320771908371439, 0.06663177651302044, 0.06663177651302044, 0.06663177651302044, 0.08533225589349003, 0.08533225589349003, 0.08533225589349003, 0.05459775734687877, 0.05459775734687877, 0.05459775734687877, 0.06093609945611156, 0.06093609945611156, 0.06093609945611156, 0.06831752891309573, 0.06831752891309573, 0.06831752891309573, 0.9422383942253664, 0.9422383942253664, 0.9422383942253664, 0.949043219557196, 0.949043219557196, 0.949043219557196, 0.9459219553160443, 0.9459219553160443, 0.9459219553160443, 0.15980144315180478, 0.15980144315180478, 0.15980144315180478, 0.1899147353677897, 0.1899147353677897, 0.1899147353677897, 0.18370837559202013, 0.18370837559202013, 0.18370837559202013, 0.18972339964755658, 0.18972339964755658, 0.18972339964755658, 0.15650806748755908, 0.15650806748755908, 0.15650806748755908, 0.11415997658574473, 0.11415997658574473, 0.11415997658574473, 0.11118269236754919, 0.11118269236754919, 0.11118269236754919, 0.09463331621893267, 0.09463331621893267, 0.09463331621893267, 0.09208060859370149, 0.09208060859370149, 0.09208060859370149, 0.10242023548447665, 0.10242023548447665, 0.10242023548447665, 0.1179705284859569, 0.1179705284859569, 0.1179705284859569, 0.08138046169447422, 0.08138046169447422, 0.08138046169447422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008749159912092574, 0.0008749159912092574, 0.0008749159912092574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035923683447783294, 0.035923683447783294, 0.035923683447783294, 0.010910035960799869, 0.010910035960799869, 0.010910035960799869, 0.039980412573687896, 0.039980412573687896, 0.039980412573687896, 0.0015543039209591214, 0.0015543039209591214, 0.0015543039209591214, 0.0001518617844125103, 0.0001518617844125103, 0.0001518617844125103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058702994254113405, 0.058702994254113405, 0.058702994254113405, 0.05151991740745032, 0.05151991740745032, 0.05151991740745032, 0.05523777492822013, 0.05523777492822013, 0.05523777492822013, 0.32010094127355926, 0.32010094127355926, 0.32010094127355926, 0.35369552166936213, 0.35369552166936213, 0.35369552166936213, 0.3593543423400618, 0.3593543423400618, 0.3593543423400618, 0.08907567313354214, 0.08907567313354214, 0.08907567313354214, 0.08379570052465513, 0.08379570052465513, 0.08379570052465513, 0.07732056737967374, 0.07732056737967374, 0.07732056737967374, 0.1324110746517233, 0.1324110746517233, 0.1324110746517233, 0.16505315020532219, 0.16505315020532219, 0.16505315020532219, 0.14386905210188872, 0.14386905210188872, 0.14386905210188872, 0.2380612471926794, 0.2380612471926794, 0.2380612471926794, 0.20216416579245222, 0.20216416579245222, 0.20216416579245222, 0.22085128121832087, 0.22085128121832087, 0.22085128121832087, 0.1319056136381267, 0.1319056136381267, 0.1319056136381267, 0.15172311976165875, 0.15172311976165875, 0.15172311976165875, 0.1312162182522194, 0.1312162182522194, 0.1312162182522194, 0.17037344260197573, 0.17037344260197573, 0.17037344260197573, 0.18741542191347282, 0.18741542191347282, 0.18741542191347282, 0.1961518001007464, 0.1961518001007464, 0.1961518001007464, 0.17330548255436862, 0.17330548255436862, 0.17330548255436862, 0.16406907945072158, 0.16406907945072158, 0.16406907945072158, 0.17211568790128184, 0.17211568790128184, 0.17211568790128184, 0.44026743576703353, 0.44026743576703353, 0.44026743576703353, 0.152220337902497, 0.152220337902497, 0.152220337902497, 0.12145745513032835, 0.12145745513032835, 0.12145745513032835, 0.19543770333131993, 0.19543770333131993, 0.19543770333131993, 0.2031084983187984, 0.2031084983187984, 0.2031084983187984, 0.15293976250415764, 0.15293976250415764, 0.15293976250415764, 0.1718764245537634, 0.1718764245537634, 0.1718764245537634, 0.18119624651568833, 0.18119624651568833, 0.18119624651568833, 0.17039336134982064, 0.17039336134982064, 0.17039336134982064, 0.0723472262902275, 0.0723472262902275, 0.0723472262902275, 0.06929651703574213, 0.06929651703574213, 0.06929651703574213, 0.0599113025373339, 0.0599113025373339, 0.0599113025373339]}, "mutation_prompt": null}
{"id": "8f164693-5101-4b58-8d16-a2644239e94c", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                perturbation = np.random.uniform(-0.1, 0.1, self.dim)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + perturbation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce a diversity-driven mutation strategy by incorporating a perturbation factor to enhance exploration.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9802ebb8-6463-4ef6-9822-de23995f194a", "metadata": {"aucs": [0.3425450197922083, 0.3425450197922083, 0.3425450197922083, 0.3500721327306049, 0.3500721327306049, 0.3500721327306049, 0.3670392128974367, 0.3670392128974367, 0.3670392128974367, 0.024695246253192304, 0.024695246253192304, 0.024695246253192304, 0.06316764037863609, 0.06316764037863609, 0.06316764037863609, 0.0024454815472985114, 0.0024454815472985114, 0.0024454815472985114, 0.10907725643286381, 0.10907725643286381, 0.10907725643286381, 0.09825428932749725, 0.09825428932749725, 0.09825428932749725, 0.10639642591448539, 0.10639642591448539, 0.10639642591448539, 0.06507995215867701, 0.06507995215867701, 0.06507995215867701, 0.07798988722881128, 0.07798988722881128, 0.07798988722881128, 0.062147459389790494, 0.062147459389790494, 0.062147459389790494, 0.9425315352393849, 0.9425315352393849, 0.9425315352393849, 0.9493937975155889, 0.9493937975155889, 0.9493937975155889, 0.9462556168163412, 0.9462556168163412, 0.9462556168163412, 0.14333726960680637, 0.14333726960680637, 0.14333726960680637, 0.15834846851952622, 0.15834846851952622, 0.15834846851952622, 0.16370998333450137, 0.16370998333450137, 0.16370998333450137, 0.19448021042571928, 0.19448021042571928, 0.19448021042571928, 0.23048143595310233, 0.23048143595310233, 0.23048143595310233, 0.1151853958929625, 0.1151853958929625, 0.1151853958929625, 0.08957602578859913, 0.08957602578859913, 0.08957602578859913, 0.10079004566033978, 0.10079004566033978, 0.10079004566033978, 0.1279605172210695, 0.1279605172210695, 0.1279605172210695, 0.11353039217482908, 0.11353039217482908, 0.11353039217482908, 0.09566324260024506, 0.09566324260024506, 0.09566324260024506, 0.053513260722408584, 0.053513260722408584, 0.053513260722408584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05557845315241905, 0.05557845315241905, 0.05557845315241905, 0.09137653105962595, 0.09137653105962595, 0.09137653105962595, 0.04130465730328492, 0.04130465730328492, 0.04130465730328492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04902047841168167, 0.04902047841168167, 0.04902047841168167, 0.037964963228567794, 0.037964963228567794, 0.037964963228567794, 0.08148091567820315, 0.08148091567820315, 0.08148091567820315, 0.33184052046046153, 0.33184052046046153, 0.33184052046046153, 0.3211028741185029, 0.3211028741185029, 0.3211028741185029, 0.3338414615951364, 0.3338414615951364, 0.3338414615951364, 0.0838813511949551, 0.0838813511949551, 0.0838813511949551, 0.0766717716384423, 0.0766717716384423, 0.0766717716384423, 0.07087611820167461, 0.07087611820167461, 0.07087611820167461, 0.20626834991907184, 0.20626834991907184, 0.20626834991907184, 0.12224789102330469, 0.12224789102330469, 0.12224789102330469, 0.17904738864930003, 0.17904738864930003, 0.17904738864930003, 0.24782930856662888, 0.24782930856662888, 0.24782930856662888, 0.21403880865756342, 0.21403880865756342, 0.21403880865756342, 0.22284258696038217, 0.22284258696038217, 0.22284258696038217, 0.12787099541750302, 0.12787099541750302, 0.12787099541750302, 0.1608408421582711, 0.1608408421582711, 0.1608408421582711, 0.13151609194227187, 0.13151609194227187, 0.13151609194227187, 0.16156467790161766, 0.16156467790161766, 0.16156467790161766, 0.17225141525256715, 0.17225141525256715, 0.17225141525256715, 0.19196238721469483, 0.19196238721469483, 0.19196238721469483, 0.1773984019006497, 0.1773984019006497, 0.1773984019006497, 0.17121933591692884, 0.17121933591692884, 0.17121933591692884, 0.17458660003131699, 0.17458660003131699, 0.17458660003131699, 0.49477952817598525, 0.49477952817598525, 0.49477952817598525, 0.1568874528824683, 0.1568874528824683, 0.1568874528824683, 0.1659216552702497, 0.1659216552702497, 0.1659216552702497, 0.19688856993626158, 0.19688856993626158, 0.19688856993626158, 0.2032395436693809, 0.2032395436693809, 0.2032395436693809, 0.1521673037042226, 0.1521673037042226, 0.1521673037042226, 0.17022431400204474, 0.17022431400204474, 0.17022431400204474, 0.18623516738198498, 0.18623516738198498, 0.18623516738198498, 0.1825204486447406, 0.1825204486447406, 0.1825204486447406, 0.06850905254042139, 0.06850905254042139, 0.06850905254042139, 0.06710293892571895, 0.06710293892571895, 0.06710293892571895, 0.060633669663757384, 0.060633669663757384, 0.060633669663757384]}, "mutation_prompt": null}
{"id": "a506869d-918b-49e3-9dd5-f059213e5c02", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance search diversity by dynamically adjusting the perturbation range during DE-like mutation.", "configspace": "", "generation": 13, "fitness": 0.17282632746971804, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "9802ebb8-6463-4ef6-9822-de23995f194a", "metadata": {"aucs": [0.3254444129944287, 0.3254444129944287, 0.3254444129944287, 0.43038391511044205, 0.43038391511044205, 0.43038391511044205, 0.4304017704567602, 0.4304017704567602, 0.4304017704567602, 0.013419350392357088, 0.013419350392357088, 0.013419350392357088, 0.02948917256468153, 0.02948917256468153, 0.02948917256468153, 0.02342719460656517, 0.02342719460656517, 0.02342719460656517, 0.08675451021253355, 0.08675451021253355, 0.08675451021253355, 0.08100385900881579, 0.08100385900881579, 0.08100385900881579, 0.08234207689577833, 0.08234207689577833, 0.08234207689577833, 0.0507161201676366, 0.0507161201676366, 0.0507161201676366, 0.0700518195414841, 0.0700518195414841, 0.0700518195414841, 0.07178612091915637, 0.07178612091915637, 0.07178612091915637, 0.9422629569474659, 0.9422629569474659, 0.9422629569474659, 0.949063162854701, 0.949063162854701, 0.949063162854701, 0.9458406644673429, 0.9458406644673429, 0.9458406644673429, 0.14857580814437155, 0.14857580814437155, 0.14857580814437155, 0.15566106165302573, 0.15566106165302573, 0.15566106165302573, 0.190124835004281, 0.190124835004281, 0.190124835004281, 0.1847723667620621, 0.1847723667620621, 0.1847723667620621, 0.1568682661933799, 0.1568682661933799, 0.1568682661933799, 0.14432666054722088, 0.14432666054722088, 0.14432666054722088, 0.13533085147452162, 0.13533085147452162, 0.13533085147452162, 0.10396076833681889, 0.10396076833681889, 0.10396076833681889, 0.08596326293361867, 0.08596326293361867, 0.08596326293361867, 0.0720930788186972, 0.0720930788186972, 0.0720930788186972, 0.10923727922240234, 0.10923727922240234, 0.10923727922240234, 0.08324558854316078, 0.08324558854316078, 0.08324558854316078, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059746273068663536, 0.059746273068663536, 0.059746273068663536, 0.0009082727560000281, 0.0009082727560000281, 0.0009082727560000281, 0.05468256531773075, 0.05468256531773075, 0.05468256531773075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486908285290916, 0.07486908285290916, 0.07486908285290916, 0.026200533053333697, 0.026200533053333697, 0.026200533053333697, 0.06696461830457134, 0.06696461830457134, 0.06696461830457134, 0.2987110433344665, 0.2987110433344665, 0.2987110433344665, 0.3357449810260187, 0.3357449810260187, 0.3357449810260187, 0.38272433819430185, 0.38272433819430185, 0.38272433819430185, 0.07002241217868799, 0.07002241217868799, 0.07002241217868799, 0.07804536808038831, 0.07804536808038831, 0.07804536808038831, 0.06881622726554337, 0.06881622726554337, 0.06881622726554337, 0.12788774256757174, 0.12788774256757174, 0.12788774256757174, 0.16532080426171158, 0.16532080426171158, 0.16532080426171158, 0.14200172853462723, 0.14200172853462723, 0.14200172853462723, 0.2297507309387231, 0.2297507309387231, 0.2297507309387231, 0.20988598244679968, 0.20988598244679968, 0.20988598244679968, 0.24439062483977902, 0.24439062483977902, 0.24439062483977902, 0.1278854261211001, 0.1278854261211001, 0.1278854261211001, 0.14975955027718924, 0.14975955027718924, 0.14975955027718924, 0.13540180710490224, 0.13540180710490224, 0.13540180710490224, 0.198752741924913, 0.198752741924913, 0.198752741924913, 0.245834536180344, 0.245834536180344, 0.245834536180344, 0.18427781508261798, 0.18427781508261798, 0.18427781508261798, 0.18470905753119615, 0.18470905753119615, 0.18470905753119615, 0.17071048074482564, 0.17071048074482564, 0.17071048074482564, 0.18421513300159087, 0.18421513300159087, 0.18421513300159087, 0.5440406017007349, 0.5440406017007349, 0.5440406017007349, 0.1545483776436205, 0.1545483776436205, 0.1545483776436205, 0.12074389138728714, 0.12074389138728714, 0.12074389138728714, 0.19473621344180425, 0.19473621344180425, 0.19473621344180425, 0.20183271581357864, 0.20183271581357864, 0.20183271581357864, 0.1531621154592574, 0.1531621154592574, 0.1531621154592574, 0.1719790421334486, 0.1719790421334486, 0.1719790421334486, 0.17435350717840725, 0.17435350717840725, 0.17435350717840725, 0.17632672176330577, 0.17632672176330577, 0.17632672176330577, 0.06891174526899302, 0.06891174526899302, 0.06891174526899302, 0.06470847752060782, 0.06470847752060782, 0.06470847752060782, 0.09678535674443589, 0.09678535674443589, 0.09678535674443589]}, "mutation_prompt": null}
{"id": "09311533-da7a-44d9-bef4-2e794cfbdaba", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance search diversity by dynamically adjusting the perturbation range during DE-like mutation.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a506869d-918b-49e3-9dd5-f059213e5c02", "metadata": {"aucs": [0.3254444129944287, 0.3254444129944287, 0.3254444129944287, 0.43038391511044205, 0.43038391511044205, 0.43038391511044205, 0.4304017704567602, 0.4304017704567602, 0.4304017704567602, 0.013419350392357088, 0.013419350392357088, 0.013419350392357088, 0.02948917256468153, 0.02948917256468153, 0.02948917256468153, 0.02342719460656517, 0.02342719460656517, 0.02342719460656517, 0.08675451021253355, 0.08675451021253355, 0.08675451021253355, 0.08100385900881579, 0.08100385900881579, 0.08100385900881579, 0.08234207689577833, 0.08234207689577833, 0.08234207689577833, 0.0507161201676366, 0.0507161201676366, 0.0507161201676366, 0.0700518195414841, 0.0700518195414841, 0.0700518195414841, 0.07178612091915637, 0.07178612091915637, 0.07178612091915637, 0.9422629569474659, 0.9422629569474659, 0.9422629569474659, 0.949063162854701, 0.949063162854701, 0.949063162854701, 0.9458406644673429, 0.9458406644673429, 0.9458406644673429, 0.14857580814437155, 0.14857580814437155, 0.14857580814437155, 0.15566106165302573, 0.15566106165302573, 0.15566106165302573, 0.190124835004281, 0.190124835004281, 0.190124835004281, 0.1847723667620621, 0.1847723667620621, 0.1847723667620621, 0.1568682661933799, 0.1568682661933799, 0.1568682661933799, 0.14432666054722088, 0.14432666054722088, 0.14432666054722088, 0.13533085147452162, 0.13533085147452162, 0.13533085147452162, 0.10396076833681889, 0.10396076833681889, 0.10396076833681889, 0.08596326293361867, 0.08596326293361867, 0.08596326293361867, 0.0720930788186972, 0.0720930788186972, 0.0720930788186972, 0.10923727922240234, 0.10923727922240234, 0.10923727922240234, 0.08324558854316078, 0.08324558854316078, 0.08324558854316078, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059746273068663536, 0.059746273068663536, 0.059746273068663536, 0.0009082727560000281, 0.0009082727560000281, 0.0009082727560000281, 0.05468256531773075, 0.05468256531773075, 0.05468256531773075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486908285290916, 0.07486908285290916, 0.07486908285290916, 0.026200533053333697, 0.026200533053333697, 0.026200533053333697, 0.06696461830457134, 0.06696461830457134, 0.06696461830457134, 0.2987110433344665, 0.2987110433344665, 0.2987110433344665, 0.3357449810260187, 0.3357449810260187, 0.3357449810260187, 0.38272433819430185, 0.38272433819430185, 0.38272433819430185, 0.07002241217868799, 0.07002241217868799, 0.07002241217868799, 0.07804536808038831, 0.07804536808038831, 0.07804536808038831, 0.06881622726554337, 0.06881622726554337, 0.06881622726554337, 0.12788774256757174, 0.12788774256757174, 0.12788774256757174, 0.16532080426171158, 0.16532080426171158, 0.16532080426171158, 0.14200172853462723, 0.14200172853462723, 0.14200172853462723, 0.2297507309387231, 0.2297507309387231, 0.2297507309387231, 0.20988598244679968, 0.20988598244679968, 0.20988598244679968, 0.24439062483977902, 0.24439062483977902, 0.24439062483977902, 0.1278854261211001, 0.1278854261211001, 0.1278854261211001, 0.14975955027718924, 0.14975955027718924, 0.14975955027718924, 0.13540180710490224, 0.13540180710490224, 0.13540180710490224, 0.198752741924913, 0.198752741924913, 0.198752741924913, 0.245834536180344, 0.245834536180344, 0.245834536180344, 0.18427781508261798, 0.18427781508261798, 0.18427781508261798, 0.18470905753119615, 0.18470905753119615, 0.18470905753119615, 0.17071048074482564, 0.17071048074482564, 0.17071048074482564, 0.18421513300159087, 0.18421513300159087, 0.18421513300159087, 0.5440406017007349, 0.5440406017007349, 0.5440406017007349, 0.1545483776436205, 0.1545483776436205, 0.1545483776436205, 0.12074389138728714, 0.12074389138728714, 0.12074389138728714, 0.19473621344180425, 0.19473621344180425, 0.19473621344180425, 0.20183271581357864, 0.20183271581357864, 0.20183271581357864, 0.1531621154592574, 0.1531621154592574, 0.1531621154592574, 0.1719790421334486, 0.1719790421334486, 0.1719790421334486, 0.17435350717840725, 0.17435350717840725, 0.17435350717840725, 0.17632672176330577, 0.17632672176330577, 0.17632672176330577, 0.06891174526899302, 0.06891174526899302, 0.06891174526899302, 0.06470847752060782, 0.06470847752060782, 0.06470847752060782, 0.09678535674443589, 0.09678535674443589, 0.09678535674443589]}, "mutation_prompt": null}
{"id": "cdbf9997-0d02-4fdd-b105-8a77e5890e95", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                particle_velocities[i] = (self.inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance search diversity by dynamically adjusting the perturbation range during DE-like mutation.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a506869d-918b-49e3-9dd5-f059213e5c02", "metadata": {"aucs": [0.3254444129944287, 0.3254444129944287, 0.3254444129944287, 0.43038391511044205, 0.43038391511044205, 0.43038391511044205, 0.4304017704567602, 0.4304017704567602, 0.4304017704567602, 0.013419350392357088, 0.013419350392357088, 0.013419350392357088, 0.02948917256468153, 0.02948917256468153, 0.02948917256468153, 0.02342719460656517, 0.02342719460656517, 0.02342719460656517, 0.08675451021253355, 0.08675451021253355, 0.08675451021253355, 0.08100385900881579, 0.08100385900881579, 0.08100385900881579, 0.08234207689577833, 0.08234207689577833, 0.08234207689577833, 0.0507161201676366, 0.0507161201676366, 0.0507161201676366, 0.0700518195414841, 0.0700518195414841, 0.0700518195414841, 0.07178612091915637, 0.07178612091915637, 0.07178612091915637, 0.9422629569474659, 0.9422629569474659, 0.9422629569474659, 0.949063162854701, 0.949063162854701, 0.949063162854701, 0.9458406644673429, 0.9458406644673429, 0.9458406644673429, 0.14857580814437155, 0.14857580814437155, 0.14857580814437155, 0.15566106165302573, 0.15566106165302573, 0.15566106165302573, 0.190124835004281, 0.190124835004281, 0.190124835004281, 0.1847723667620621, 0.1847723667620621, 0.1847723667620621, 0.1568682661933799, 0.1568682661933799, 0.1568682661933799, 0.14432666054722088, 0.14432666054722088, 0.14432666054722088, 0.13533085147452162, 0.13533085147452162, 0.13533085147452162, 0.10396076833681889, 0.10396076833681889, 0.10396076833681889, 0.08596326293361867, 0.08596326293361867, 0.08596326293361867, 0.0720930788186972, 0.0720930788186972, 0.0720930788186972, 0.10923727922240234, 0.10923727922240234, 0.10923727922240234, 0.08324558854316078, 0.08324558854316078, 0.08324558854316078, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059746273068663536, 0.059746273068663536, 0.059746273068663536, 0.0009082727560000281, 0.0009082727560000281, 0.0009082727560000281, 0.05468256531773075, 0.05468256531773075, 0.05468256531773075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486908285290916, 0.07486908285290916, 0.07486908285290916, 0.026200533053333697, 0.026200533053333697, 0.026200533053333697, 0.06696461830457134, 0.06696461830457134, 0.06696461830457134, 0.2987110433344665, 0.2987110433344665, 0.2987110433344665, 0.3357449810260187, 0.3357449810260187, 0.3357449810260187, 0.38272433819430185, 0.38272433819430185, 0.38272433819430185, 0.07002241217868799, 0.07002241217868799, 0.07002241217868799, 0.07804536808038831, 0.07804536808038831, 0.07804536808038831, 0.06881622726554337, 0.06881622726554337, 0.06881622726554337, 0.12788774256757174, 0.12788774256757174, 0.12788774256757174, 0.16532080426171158, 0.16532080426171158, 0.16532080426171158, 0.14200172853462723, 0.14200172853462723, 0.14200172853462723, 0.2297507309387231, 0.2297507309387231, 0.2297507309387231, 0.20988598244679968, 0.20988598244679968, 0.20988598244679968, 0.24439062483977902, 0.24439062483977902, 0.24439062483977902, 0.1278854261211001, 0.1278854261211001, 0.1278854261211001, 0.14975955027718924, 0.14975955027718924, 0.14975955027718924, 0.13540180710490224, 0.13540180710490224, 0.13540180710490224, 0.198752741924913, 0.198752741924913, 0.198752741924913, 0.245834536180344, 0.245834536180344, 0.245834536180344, 0.18427781508261798, 0.18427781508261798, 0.18427781508261798, 0.18470905753119615, 0.18470905753119615, 0.18470905753119615, 0.17071048074482564, 0.17071048074482564, 0.17071048074482564, 0.18421513300159087, 0.18421513300159087, 0.18421513300159087, 0.5440406017007349, 0.5440406017007349, 0.5440406017007349, 0.1545483776436205, 0.1545483776436205, 0.1545483776436205, 0.12074389138728714, 0.12074389138728714, 0.12074389138728714, 0.19473621344180425, 0.19473621344180425, 0.19473621344180425, 0.20183271581357864, 0.20183271581357864, 0.20183271581357864, 0.1531621154592574, 0.1531621154592574, 0.1531621154592574, 0.1719790421334486, 0.1719790421334486, 0.1719790421334486, 0.17435350717840725, 0.17435350717840725, 0.17435350717840725, 0.17632672176330577, 0.17632672176330577, 0.17632672176330577, 0.06891174526899302, 0.06891174526899302, 0.06891174526899302, 0.06470847752060782, 0.06470847752060782, 0.06470847752060782, 0.09678535674443589, 0.09678535674443589, 0.09678535674443589]}, "mutation_prompt": null}
{"id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 16, "fitness": 0.21305793638113052, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "a506869d-918b-49e3-9dd5-f059213e5c02", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "fef6c698-b4a4-484f-b408-11ef2e9264f9", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "26f3b4ea-b7c8-40c4-867d-75b96005c820", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "6c38f9d1-615c-48ed-af5c-c0aef26afdcd", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "a1fd3cd7-e0d4-40a5-b97e-24b940d82e01", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "dcb8c515-aebb-4258-9667-287554f95da4", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "c3bd971b-5d5a-48ed-a3af-a79cded19837", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                dynamic_cognitive_component = self.cognitive_component + 0.5 * (evaluations / self.budget)  # Changed line\n                cognitive_velocity = dynamic_cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce a dynamic cognitive component in PSO to better adapt to the search landscape by increasing it as evaluations progress.", "configspace": "", "generation": 22, "fitness": 0.21172514016318414, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5389843790892839, 0.5389843790892839, 0.5389843790892839, 0.5745509713173318, 0.5745509713173318, 0.5745509713173318, 0.5760855216407923, 0.5760855216407923, 0.5760855216407923, 0.1805970738486823, 0.1805970738486823, 0.1805970738486823, 0.1761986796450825, 0.1761986796450825, 0.1761986796450825, 0.11880124398057101, 0.11880124398057101, 0.11880124398057101, 0.09781399492722065, 0.09781399492722065, 0.09781399492722065, 0.08553138281583184, 0.08553138281583184, 0.08553138281583184, 0.1045784983334106, 0.1045784983334106, 0.1045784983334106, 0.08601792498867455, 0.08601792498867455, 0.08601792498867455, 0.10026901524982346, 0.10026901524982346, 0.10026901524982346, 0.10149329155568065, 0.10149329155568065, 0.10149329155568065, 0.9421352436556529, 0.9421352436556529, 0.9421352436556529, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.20607411123570285, 0.20607411123570285, 0.20607411123570285, 0.24857603205213763, 0.24857603205213763, 0.24857603205213763, 0.25368677832073006, 0.25368677832073006, 0.25368677832073006, 0.39379368311536556, 0.39379368311536556, 0.39379368311536556, 0.2309905337728081, 0.2309905337728081, 0.2309905337728081, 0.1377529554580429, 0.1377529554580429, 0.1377529554580429, 0.13871196314049938, 0.13871196314049938, 0.13871196314049938, 0.1110609201363344, 0.1110609201363344, 0.1110609201363344, 0.14819048212101715, 0.14819048212101715, 0.14819048212101715, 0.1669262297384485, 0.1669262297384485, 0.1669262297384485, 0.10090941514073093, 0.10090941514073093, 0.10090941514073093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05871707887553823, 0.05871707887553823, 0.05871707887553823, 0.009593951033358472, 0.009593951033358472, 0.009593951033358472, 0.021011626010541073, 0.021011626010541073, 0.021011626010541073, 0.059711704624753614, 0.059711704624753614, 0.059711704624753614, 0.09861923727040611, 0.09861923727040611, 0.09861923727040611, 0.048985573006900096, 0.048985573006900096, 0.048985573006900096, 0.11206927477950135, 0.11206927477950135, 0.11206927477950135, 0.1583140993372636, 0.1583140993372636, 0.1583140993372636, 0.08554477208445566, 0.08554477208445566, 0.08554477208445566, 0.3874973594362642, 0.3874973594362642, 0.3874973594362642, 0.4246369628073807, 0.4246369628073807, 0.4246369628073807, 0.3873190934707602, 0.3873190934707602, 0.3873190934707602, 0.09623686139607379, 0.09623686139607379, 0.09623686139607379, 0.10073580278079008, 0.10073580278079008, 0.10073580278079008, 0.07427598898249577, 0.07427598898249577, 0.07427598898249577, 0.13397685885252564, 0.13397685885252564, 0.13397685885252564, 0.17781067962095076, 0.17781067962095076, 0.17781067962095076, 0.17049643772806633, 0.17049643772806633, 0.17049643772806633, 0.30099131920488786, 0.30099131920488786, 0.30099131920488786, 0.22472277028707455, 0.22472277028707455, 0.22472277028707455, 0.3162663235966823, 0.3162663235966823, 0.3162663235966823, 0.12809553537020024, 0.12809553537020024, 0.12809553537020024, 0.17648442787609997, 0.17648442787609997, 0.17648442787609997, 0.16385540008880983, 0.16385540008880983, 0.16385540008880983, 0.19130478841878562, 0.19130478841878562, 0.19130478841878562, 0.20317347999994972, 0.20317347999994972, 0.20317347999994972, 0.18686757139039156, 0.18686757139039156, 0.18686757139039156, 0.18874668809641904, 0.18874668809641904, 0.18874668809641904, 0.17064105514186756, 0.17064105514186756, 0.17064105514186756, 0.3061627685292899, 0.3061627685292899, 0.3061627685292899, 0.768551201349727, 0.768551201349727, 0.768551201349727, 0.15642215760491818, 0.15642215760491818, 0.15642215760491818, 0.12171942990132667, 0.12171942990132667, 0.12171942990132667, 0.16479267968007993, 0.16479267968007993, 0.16479267968007993, 0.20301100906904002, 0.20301100906904002, 0.20301100906904002, 0.15304289731961873, 0.15304289731961873, 0.15304289731961873, 0.17742123888579187, 0.17742123888579187, 0.17742123888579187, 0.17573867619780215, 0.17573867619780215, 0.17573867619780215, 0.19546829337542337, 0.19546829337542337, 0.19546829337542337, 0.07804182875983101, 0.07804182875983101, 0.07804182875983101, 0.06885941969741594, 0.06885941969741594, 0.06885941969741594, 0.1032995733452643, 0.1032995733452643, 0.1032995733452643]}, "mutation_prompt": null}
{"id": "e7e111c4-66be-40b3-928d-b6c3f9ede0a3", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "0aae1e14-855d-4085-a2f9-acc4d9fa2b07", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                f_adapted = self.f + 0.5 * (1 - (scores[i] - global_best_score) / (np.max(scores) - np.min(scores) + 1e-9))  # Changed line\n                mutant = particle_positions[a] + f_adapted * (particle_positions[b] - particle_positions[c])  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Improve DE mutation strategy by incorporating fitness-based weight adaptation to enhance exploitation.", "configspace": "", "generation": 24, "fitness": 0.20746336866863876, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.48711576660535094, 0.48711576660535094, 0.48711576660535094, 0.5760467662223141, 0.5760467662223141, 0.5760467662223141, 0.5250355066756189, 0.5250355066756189, 0.5250355066756189, 0.19863098018194814, 0.19863098018194814, 0.19863098018194814, 0.28324971435990964, 0.28324971435990964, 0.28324971435990964, 0.03940950612258021, 0.03940950612258021, 0.03940950612258021, 0.08296442961509709, 0.08296442961509709, 0.08296442961509709, 0.11203341977078274, 0.11203341977078274, 0.11203341977078274, 0.10140561877315557, 0.10140561877315557, 0.10140561877315557, 0.06705448378112888, 0.06705448378112888, 0.06705448378112888, 0.07520128575366958, 0.07520128575366958, 0.07520128575366958, 0.08477414732712474, 0.08477414732712474, 0.08477414732712474, 0.9817636275628903, 0.9817636275628903, 0.9817636275628903, 0.9821094873556436, 0.9821094873556436, 0.9821094873556436, 0.975959434449736, 0.975959434449736, 0.975959434449736, 0.1772483494618271, 0.1772483494618271, 0.1772483494618271, 0.13008849842450965, 0.13008849842450965, 0.13008849842450965, 0.16249385213597323, 0.16249385213597323, 0.16249385213597323, 0.2146302962932759, 0.2146302962932759, 0.2146302962932759, 0.26637241972538683, 0.26637241972538683, 0.26637241972538683, 0.3265265900202723, 0.3265265900202723, 0.3265265900202723, 0.09911898573167288, 0.09911898573167288, 0.09911898573167288, 0.13926840998628487, 0.13926840998628487, 0.13926840998628487, 0.10580578403048224, 0.10580578403048224, 0.10580578403048224, 0.13409880714977152, 0.13409880714977152, 0.13409880714977152, 0.10809716571250605, 0.10809716571250605, 0.10809716571250605, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05383388237941322, 0.05383388237941322, 0.05383388237941322, 0.02671695273014596, 0.02671695273014596, 0.02671695273014596, 0.045483291288076044, 0.045483291288076044, 0.045483291288076044, 0.02396748133455262, 0.02396748133455262, 0.02396748133455262, 0.047974112323816875, 0.047974112323816875, 0.047974112323816875, 0.08154664818149171, 0.08154664818149171, 0.08154664818149171, 0.06228532795650499, 0.06228532795650499, 0.06228532795650499, 0.08499786050326497, 0.08499786050326497, 0.08499786050326497, 0.06535521850764947, 0.06535521850764947, 0.06535521850764947, 0.3988469215297389, 0.3988469215297389, 0.3988469215297389, 0.4169211266704552, 0.4169211266704552, 0.4169211266704552, 0.3831021560579352, 0.3831021560579352, 0.3831021560579352, 0.08378085637196853, 0.08378085637196853, 0.08378085637196853, 0.07357084836343897, 0.07357084836343897, 0.07357084836343897, 0.08024704329682575, 0.08024704329682575, 0.08024704329682575, 0.19769341408933983, 0.19769341408933983, 0.19769341408933983, 0.15955960088331522, 0.15955960088331522, 0.15955960088331522, 0.12901343751447547, 0.12901343751447547, 0.12901343751447547, 0.283087463327946, 0.283087463327946, 0.283087463327946, 0.2956884071632816, 0.2956884071632816, 0.2956884071632816, 0.34557829939482865, 0.34557829939482865, 0.34557829939482865, 0.13573183998528715, 0.13573183998528715, 0.13573183998528715, 0.24053074967137666, 0.24053074967137666, 0.24053074967137666, 0.1858808363283897, 0.1858808363283897, 0.1858808363283897, 0.1893802081651358, 0.1893802081651358, 0.1893802081651358, 0.18656990215577685, 0.18656990215577685, 0.18656990215577685, 0.17954114569637603, 0.17954114569637603, 0.17954114569637603, 0.1930901713377816, 0.1930901713377816, 0.1930901713377816, 0.2024305576841371, 0.2024305576841371, 0.2024305576841371, 0.20336105141659344, 0.20336105141659344, 0.20336105141659344, 0.5787929957642386, 0.5787929957642386, 0.5787929957642386, 0.2025912987387254, 0.2025912987387254, 0.2025912987387254, 0.35626124843408435, 0.35626124843408435, 0.35626124843408435, 0.20328717205935765, 0.20328717205935765, 0.20328717205935765, 0.19680448692969355, 0.19680448692969355, 0.19680448692969355, 0.1492178960763455, 0.1492178960763455, 0.1492178960763455, 0.188843989664228, 0.188843989664228, 0.188843989664228, 0.18648815573099942, 0.18648815573099942, 0.18648815573099942, 0.1738389783123444, 0.1738389783123444, 0.1738389783123444, 0.07301773845089243, 0.07301773845089243, 0.07301773845089243, 0.056332256956056925, 0.056332256956056925, 0.056332256956056925, 0.07921618148679155, 0.07921618148679155, 0.07921618148679155]}, "mutation_prompt": null}
{"id": "ca3c7de6-5345-4fab-b18a-e2897aedc7eb", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                dynamic_social_component = self.social_component * (1 + 0.5 * (evaluations / self.budget))  # Changed line\n                social_velocity = dynamic_social_component * r2 * (global_best_position - particle_positions[i])  # Changed line\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce dynamic social component scaling in PSO to improve exploration-exploitation balance.", "configspace": "", "generation": 25, "fitness": 0.20229301487297224, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5159675244872894, 0.5159675244872894, 0.5159675244872894, 0.4247069705560963, 0.4247069705560963, 0.4247069705560963, 0.573277098636487, 0.573277098636487, 0.573277098636487, 0.110931808450354, 0.110931808450354, 0.110931808450354, 0.24070299680402307, 0.24070299680402307, 0.24070299680402307, 0.11143814975904665, 0.11143814975904665, 0.11143814975904665, 0.09811057733490103, 0.09811057733490103, 0.09811057733490103, 0.09245444111117596, 0.09245444111117596, 0.09245444111117596, 0.09781903208379406, 0.09781903208379406, 0.09781903208379406, 0.08802173072670194, 0.08802173072670194, 0.08802173072670194, 0.09385952213486526, 0.09385952213486526, 0.09385952213486526, 0.07859621019259466, 0.07859621019259466, 0.07859621019259466, 0.9421441388302157, 0.9421441388302157, 0.9421441388302157, 0.9490695404362431, 0.9490695404362431, 0.9490695404362431, 0.9459150237459899, 0.9459150237459899, 0.9459150237459899, 0.19709024558142507, 0.19709024558142507, 0.19709024558142507, 0.2454463664310016, 0.2454463664310016, 0.2454463664310016, 0.23819548151068204, 0.23819548151068204, 0.23819548151068204, 0.3393271033511114, 0.3393271033511114, 0.3393271033511114, 0.1981016178948677, 0.1981016178948677, 0.1981016178948677, 0.11390560276105421, 0.11390560276105421, 0.11390560276105421, 0.15872239995483273, 0.15872239995483273, 0.15872239995483273, 0.11962445366603847, 0.11962445366603847, 0.11962445366603847, 0.1538973312605636, 0.1538973312605636, 0.1538973312605636, 0.12430671649558878, 0.12430671649558878, 0.12430671649558878, 0.12227582849568575, 0.12227582849568575, 0.12227582849568575, 0.015576639004947546, 0.015576639004947546, 0.015576639004947546, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060441795214971394, 0.060441795214971394, 0.060441795214971394, 0.015294539046789901, 0.015294539046789901, 0.015294539046789901, 0.047729094573768505, 0.047729094573768505, 0.047729094573768505, 0.04673861500243859, 0.04673861500243859, 0.04673861500243859, 0.047506368205852745, 0.047506368205852745, 0.047506368205852745, 0.050352085693471826, 0.050352085693471826, 0.050352085693471826, 0.1013005483899162, 0.1013005483899162, 0.1013005483899162, 0.07070551079554932, 0.07070551079554932, 0.07070551079554932, 0.09058249244244287, 0.09058249244244287, 0.09058249244244287, 0.40383121641627207, 0.40383121641627207, 0.40383121641627207, 0.3844420180827145, 0.3844420180827145, 0.3844420180827145, 0.3641543590229671, 0.3641543590229671, 0.3641543590229671, 0.131135377106823, 0.131135377106823, 0.131135377106823, 0.09033680731499971, 0.09033680731499971, 0.09033680731499971, 0.08538947867355817, 0.08538947867355817, 0.08538947867355817, 0.16784724560975806, 0.16784724560975806, 0.16784724560975806, 0.1658505480929935, 0.1658505480929935, 0.1658505480929935, 0.17913697498628445, 0.17913697498628445, 0.17913697498628445, 0.25907405544892825, 0.25907405544892825, 0.25907405544892825, 0.20981333509690991, 0.20981333509690991, 0.20981333509690991, 0.2933752400623685, 0.2933752400623685, 0.2933752400623685, 0.13569168575650326, 0.13569168575650326, 0.13569168575650326, 0.16570466895612357, 0.16570466895612357, 0.16570466895612357, 0.12484525567700167, 0.12484525567700167, 0.12484525567700167, 0.18151663742581703, 0.18151663742581703, 0.18151663742581703, 0.18888678211294907, 0.18888678211294907, 0.18888678211294907, 0.22749528056859036, 0.22749528056859036, 0.22749528056859036, 0.20484012907633375, 0.20484012907633375, 0.20484012907633375, 0.216099586257551, 0.216099586257551, 0.216099586257551, 0.1913625599670432, 0.1913625599670432, 0.1913625599670432, 0.6788258245243826, 0.6788258245243826, 0.6788258245243826, 0.15586015029585776, 0.15586015029585776, 0.15586015029585776, 0.12111459760491183, 0.12111459760491183, 0.12111459760491183, 0.16488875814625514, 0.16488875814625514, 0.16488875814625514, 0.1987636992738121, 0.1987636992738121, 0.1987636992738121, 0.15273951218657256, 0.15273951218657256, 0.15273951218657256, 0.18084500192417086, 0.18084500192417086, 0.18084500192417086, 0.18830288931606265, 0.18830288931606265, 0.18830288931606265, 0.18158282312161222, 0.18158282312161222, 0.18158282312161222, 0.08394869300216756, 0.08394869300216756, 0.08394869300216756, 0.07733782786303522, 0.07733782786303522, 0.07733782786303522, 0.08962245081989206, 0.08962245081989206, 0.08962245081989206]}, "mutation_prompt": null}
{"id": "dadbb97a-d185-4fbb-bd76-bef6c83e820e", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (0.5 + 0.5 * (1 - evaluations / self.budget))  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.1, 0.1, self.dim) * (0.5 + 0.5 * (1 - evaluations / self.budget))  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance convergence by optimizing adaptive parameters and dynamic perturbation in PSO with DE-like mutation.", "configspace": "", "generation": 26, "fitness": 0.19719487492231164, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.483885126308251, 0.483885126308251, 0.483885126308251, 0.5255165152426575, 0.5255165152426575, 0.5255165152426575, 0.5024957569697179, 0.5024957569697179, 0.5024957569697179, 0.06410494479913154, 0.06410494479913154, 0.06410494479913154, 0.17218045075758803, 0.17218045075758803, 0.17218045075758803, 0.09627955737821248, 0.09627955737821248, 0.09627955737821248, 0.08712616838237919, 0.08712616838237919, 0.08712616838237919, 0.09319942323033192, 0.09319942323033192, 0.09319942323033192, 0.10476023636507048, 0.10476023636507048, 0.10476023636507048, 0.06353161669653418, 0.06353161669653418, 0.06353161669653418, 0.10182552053538707, 0.10182552053538707, 0.10182552053538707, 0.09585867397800862, 0.09585867397800862, 0.09585867397800862, 0.9425280799425758, 0.9425280799425758, 0.9425280799425758, 0.9474866611332297, 0.9474866611332297, 0.9474866611332297, 0.9461997494404949, 0.9461997494404949, 0.9461997494404949, 0.21744052235176947, 0.21744052235176947, 0.21744052235176947, 0.18226858374056143, 0.18226858374056143, 0.18226858374056143, 0.1771171471463604, 0.1771171471463604, 0.1771171471463604, 0.1995405613773702, 0.1995405613773702, 0.1995405613773702, 0.3351948652667551, 0.3351948652667551, 0.3351948652667551, 0.11329898474600231, 0.11329898474600231, 0.11329898474600231, 0.13467928614534375, 0.13467928614534375, 0.13467928614534375, 0.11747718372031346, 0.11747718372031346, 0.11747718372031346, 0.16256349368038903, 0.16256349368038903, 0.16256349368038903, 0.13084643230634396, 0.13084643230634396, 0.13084643230634396, 0.13026304046962067, 0.13026304046962067, 0.13026304046962067, 0.07787106294033819, 0.07787106294033819, 0.07787106294033819, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056521471377273924, 0.056521471377273924, 0.056521471377273924, 0.01705397465468106, 0.01705397465468106, 0.01705397465468106, 0.04588204037903465, 0.04588204037903465, 0.04588204037903465, 0.011643323269983963, 0.011643323269983963, 0.011643323269983963, 0.01197997627056302, 0.01197997627056302, 0.01197997627056302, 0.02862444259781327, 0.02862444259781327, 0.02862444259781327, 0.03440160012948412, 0.03440160012948412, 0.03440160012948412, 0.03627438061726751, 0.03627438061726751, 0.03627438061726751, 0.06643151681207204, 0.06643151681207204, 0.06643151681207204, 0.40533845925907797, 0.40533845925907797, 0.40533845925907797, 0.3664810733401582, 0.3664810733401582, 0.3664810733401582, 0.36129769457392935, 0.36129769457392935, 0.36129769457392935, 0.09649039982518315, 0.09649039982518315, 0.09649039982518315, 0.07819099376363903, 0.07819099376363903, 0.07819099376363903, 0.0714701785059606, 0.0714701785059606, 0.0714701785059606, 0.19279613443653554, 0.19279613443653554, 0.19279613443653554, 0.15049984504317382, 0.15049984504317382, 0.15049984504317382, 0.22843926333240716, 0.22843926333240716, 0.22843926333240716, 0.27495068317796756, 0.27495068317796756, 0.27495068317796756, 0.25549387764757625, 0.25549387764757625, 0.25549387764757625, 0.25716631772571574, 0.25716631772571574, 0.25716631772571574, 0.14999764161663953, 0.14999764161663953, 0.14999764161663953, 0.252078571759759, 0.252078571759759, 0.252078571759759, 0.13332771016642364, 0.13332771016642364, 0.13332771016642364, 0.185870890601316, 0.185870890601316, 0.185870890601316, 0.26730825242488676, 0.26730825242488676, 0.26730825242488676, 0.19506303613865317, 0.19506303613865317, 0.19506303613865317, 0.1822908618977186, 0.1822908618977186, 0.1822908618977186, 0.1979204428633562, 0.1979204428633562, 0.1979204428633562, 0.1793827029711218, 0.1793827029711218, 0.1793827029711218, 0.5323035550756965, 0.5323035550756965, 0.5323035550756965, 0.15767023282801895, 0.15767023282801895, 0.15767023282801895, 0.1658472528486321, 0.1658472528486321, 0.1658472528486321, 0.2032682091961514, 0.2032682091961514, 0.2032682091961514, 0.20112577038088575, 0.20112577038088575, 0.20112577038088575, 0.15274749661407894, 0.15274749661407894, 0.15274749661407894, 0.18450702004612152, 0.18450702004612152, 0.18450702004612152, 0.16780344008697934, 0.16780344008697934, 0.16780344008697934, 0.19660958779565962, 0.19660958779565962, 0.19660958779565962, 0.08218488086496634, 0.08218488086496634, 0.08218488086496634, 0.06937214072692932, 0.06937214072692932, 0.06937214072692932, 0.08808400571220698, 0.08808400571220698, 0.08808400571220698]}, "mutation_prompt": null}
{"id": "d7997592-da18-46aa-b864-572e997ff667", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] - particle_positions[b]) + particle_positions[c] + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce dynamic DE scaling factor to enhance exploration by decreasing it over iterations.", "configspace": "", "generation": 27, "fitness": 0.2066425052365917, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.6553973886050155, 0.6553973886050155, 0.6553973886050155, 0.630573529919331, 0.630573529919331, 0.630573529919331, 0.588927130855661, 0.588927130855661, 0.588927130855661, 0.1628686427794348, 0.1628686427794348, 0.1628686427794348, 0.20423349797814638, 0.20423349797814638, 0.20423349797814638, 0.22465786440590996, 0.22465786440590996, 0.22465786440590996, 0.09034977142738465, 0.09034977142738465, 0.09034977142738465, 0.13549037443166012, 0.13549037443166012, 0.13549037443166012, 0.07868099477190937, 0.07868099477190937, 0.07868099477190937, 0.08091220374263686, 0.08091220374263686, 0.08091220374263686, 0.0732836285191204, 0.0732836285191204, 0.0732836285191204, 0.06563322396509852, 0.06563322396509852, 0.06563322396509852, 0.9720815402250663, 0.9720815402250663, 0.9720815402250663, 0.9648528069059638, 0.9648528069059638, 0.9648528069059638, 0.9701140644810625, 0.9701140644810625, 0.9701140644810625, 0.16047962044133623, 0.16047962044133623, 0.16047962044133623, 0.23992598303496615, 0.23992598303496615, 0.23992598303496615, 0.18316660905888127, 0.18316660905888127, 0.18316660905888127, 0.1932091483726801, 0.1932091483726801, 0.1932091483726801, 0.1919149768420303, 0.1919149768420303, 0.1919149768420303, 0.19136788409231809, 0.19136788409231809, 0.19136788409231809, 0.1084569565380743, 0.1084569565380743, 0.1084569565380743, 0.13776289996176716, 0.13776289996176716, 0.13776289996176716, 0.10887814374185778, 0.10887814374185778, 0.10887814374185778, 0.1173200480537242, 0.1173200480537242, 0.1173200480537242, 0.10732998437889618, 0.10732998437889618, 0.10732998437889618, 0.1138101619271491, 0.1138101619271491, 0.1138101619271491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014758487222042427, 0.014758487222042427, 0.014758487222042427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07930266442104272, 0.07930266442104272, 0.07930266442104272, 0.01105404668926746, 0.01105404668926746, 0.01105404668926746, 0.01603645649894292, 0.01603645649894292, 0.01603645649894292, 0.02306864871258818, 0.02306864871258818, 0.02306864871258818, 0.045592232733914884, 0.045592232733914884, 0.045592232733914884, 0.05851025046995961, 0.05851025046995961, 0.05851025046995961, 0.07146510150961627, 0.07146510150961627, 0.07146510150961627, 0.0748771197480197, 0.0748771197480197, 0.0748771197480197, 0.04719268379874497, 0.04719268379874497, 0.04719268379874497, 0.4145427726041022, 0.4145427726041022, 0.4145427726041022, 0.4168320560373958, 0.4168320560373958, 0.4168320560373958, 0.37540330847429326, 0.37540330847429326, 0.37540330847429326, 0.07715427952376341, 0.07715427952376341, 0.07715427952376341, 0.08596676634273481, 0.08596676634273481, 0.08596676634273481, 0.07503903112092869, 0.07503903112092869, 0.07503903112092869, 0.17350010370476066, 0.17350010370476066, 0.17350010370476066, 0.1628343155876395, 0.1628343155876395, 0.1628343155876395, 0.13723891935486043, 0.13723891935486043, 0.13723891935486043, 0.2596740727538719, 0.2596740727538719, 0.2596740727538719, 0.277192555831519, 0.277192555831519, 0.277192555831519, 0.2704703200460643, 0.2704703200460643, 0.2704703200460643, 0.11589076460038561, 0.11589076460038561, 0.11589076460038561, 0.16835461954047493, 0.16835461954047493, 0.16835461954047493, 0.13785495665530523, 0.13785495665530523, 0.13785495665530523, 0.17640406103855366, 0.17640406103855366, 0.17640406103855366, 0.20558445684217763, 0.20558445684217763, 0.20558445684217763, 0.18893175007201113, 0.18893175007201113, 0.18893175007201113, 0.18724841422806304, 0.18724841422806304, 0.18724841422806304, 0.18068142838085954, 0.18068142838085954, 0.18068142838085954, 0.21760326669702224, 0.21760326669702224, 0.21760326669702224, 0.6159686925135617, 0.6159686925135617, 0.6159686925135617, 0.15456556930832144, 0.15456556930832144, 0.15456556930832144, 0.1658492171444904, 0.1658492171444904, 0.1658492171444904, 0.16330551732573917, 0.16330551732573917, 0.16330551732573917, 0.3933298184145476, 0.3933298184145476, 0.3933298184145476, 0.15522563031898717, 0.15522563031898717, 0.15522563031898717, 0.1750033431049124, 0.1750033431049124, 0.1750033431049124, 0.1740074704833483, 0.1740074704833483, 0.1740074704833483, 0.17731457541535234, 0.17731457541535234, 0.17731457541535234, 0.07054372208168369, 0.07054372208168369, 0.07054372208168369, 0.057404453330457406, 0.057404453330457406, 0.057404453330457406, 0.07760337689519381, 0.07760337689519381, 0.07760337689519381]}, "mutation_prompt": null}
{"id": "2ef9c938-325e-4930-a1f8-c92481a59a76", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "6f2a01e0-e324-4498-acea-f8939cab4300", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "09aa359d-1527-4c78-af2a-e5df72b92e6b", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "4eef42e2-b4d6-4405-a5cc-e8578b1ea921", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "fd535de0-33f6-4c86-a800-0cc5a4b74213", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "a1ac8be8-d952-4fc4-b222-4318414006e1", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = (self.social_component + evaluations / self.budget) * r2 * (global_best_position - particle_positions[i])  # Changed line\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)  # Changed line\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])  # Changed line\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance the PSO-DE hybrid by introducing a dynamic social component and adaptive DE crossover rate.", "configspace": "", "generation": 33, "fitness": 0.20707410026189285, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.4839499685563443, 0.4839499685563443, 0.4839499685563443, 0.5524667276906559, 0.5524667276906559, 0.5524667276906559, 0.5231831597549879, 0.5231831597549879, 0.5231831597549879, 0.10065643155361936, 0.10065643155361936, 0.10065643155361936, 0.15854978319385593, 0.15854978319385593, 0.15854978319385593, 0.07594035131227117, 0.07594035131227117, 0.07594035131227117, 0.0889096980410955, 0.0889096980410955, 0.0889096980410955, 0.09909876879168, 0.09909876879168, 0.09909876879168, 0.09308541461799591, 0.09308541461799591, 0.09308541461799591, 0.08383394655873311, 0.08383394655873311, 0.08383394655873311, 0.07706371623974373, 0.07706371623974373, 0.07706371623974373, 0.08040657702104159, 0.08040657702104159, 0.08040657702104159, 0.941972738439328, 0.941972738439328, 0.941972738439328, 0.952009236851785, 0.952009236851785, 0.952009236851785, 0.9461108177207088, 0.9461108177207088, 0.9461108177207088, 0.22302886081433426, 0.22302886081433426, 0.22302886081433426, 0.22398452257813029, 0.22398452257813029, 0.22398452257813029, 0.21042247949389425, 0.21042247949389425, 0.21042247949389425, 0.5718663702705483, 0.5718663702705483, 0.5718663702705483, 0.15290469666219197, 0.15290469666219197, 0.15290469666219197, 0.12951503916781382, 0.12951503916781382, 0.12951503916781382, 0.12341841548583465, 0.12341841548583465, 0.12341841548583465, 0.1135740610924495, 0.1135740610924495, 0.1135740610924495, 0.1469094698874056, 0.1469094698874056, 0.1469094698874056, 0.1708173602615941, 0.1708173602615941, 0.1708173602615941, 0.11414560025741372, 0.11414560025741372, 0.11414560025741372, 0.040937375251337116, 0.040937375251337116, 0.040937375251337116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08880954393392382, 0.08880954393392382, 0.08880954393392382, 0.02074995560745918, 0.02074995560745918, 0.02074995560745918, 0.05797650497009288, 0.05797650497009288, 0.05797650497009288, 0.05895216767322076, 0.05895216767322076, 0.05895216767322076, 0.08028749002842683, 0.08028749002842683, 0.08028749002842683, 0.05926598774892755, 0.05926598774892755, 0.05926598774892755, 0.07829552802895745, 0.07829552802895745, 0.07829552802895745, 0.10006592558758598, 0.10006592558758598, 0.10006592558758598, 0.08539106937877439, 0.08539106937877439, 0.08539106937877439, 0.42529345505199767, 0.42529345505199767, 0.42529345505199767, 0.3920343263874808, 0.3920343263874808, 0.3920343263874808, 0.3717944538035546, 0.3717944538035546, 0.3717944538035546, 0.10509823756779879, 0.10509823756779879, 0.10509823756779879, 0.11407381313511611, 0.11407381313511611, 0.11407381313511611, 0.11423862067264057, 0.11423862067264057, 0.11423862067264057, 0.1790240827719839, 0.1790240827719839, 0.1790240827719839, 0.18034972660753068, 0.18034972660753068, 0.18034972660753068, 0.20019414256713663, 0.20019414256713663, 0.20019414256713663, 0.300083059770366, 0.300083059770366, 0.300083059770366, 0.2506044814792936, 0.2506044814792936, 0.2506044814792936, 0.28183542850134335, 0.28183542850134335, 0.28183542850134335, 0.15632902711806107, 0.15632902711806107, 0.15632902711806107, 0.16643570848074374, 0.16643570848074374, 0.16643570848074374, 0.1697723037533435, 0.1697723037533435, 0.1697723037533435, 0.18457323356165145, 0.18457323356165145, 0.18457323356165145, 0.1865860518502841, 0.1865860518502841, 0.1865860518502841, 0.2090382836773944, 0.2090382836773944, 0.2090382836773944, 0.20278854403401736, 0.20278854403401736, 0.20278854403401736, 0.21876488731722832, 0.21876488731722832, 0.21876488731722832, 0.18981986822548724, 0.18981986822548724, 0.18981986822548724, 0.605056309638007, 0.605056309638007, 0.605056309638007, 0.15630093299177938, 0.15630093299177938, 0.15630093299177938, 0.12131247671098955, 0.12131247671098955, 0.12131247671098955, 0.16288441500591866, 0.16288441500591866, 0.16288441500591866, 0.2037315076459021, 0.2037315076459021, 0.2037315076459021, 0.15313042808167088, 0.15313042808167088, 0.15313042808167088, 0.1871069043985032, 0.1871069043985032, 0.1871069043985032, 0.18793258961820303, 0.18793258961820303, 0.18793258961820303, 0.1761931728763373, 0.1761931728763373, 0.1761931728763373, 0.07579031458284702, 0.07579031458284702, 0.07579031458284702, 0.07924888323167922, 0.07924888323167922, 0.07924888323167922, 0.09305978721583175, 0.09305978721583175, 0.09305978721583175]}, "mutation_prompt": null}
{"id": "8be57729-09b5-48ee-b5e5-7ceb98aca361", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * np.sqrt(1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * np.sqrt(1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce non-linear decay in adaptive inertia weight and dynamic perturbation for enhanced exploration-exploitation balance.", "configspace": "", "generation": 34, "fitness": 0.19071644721661604, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.45978315958983385, 0.45978315958983385, 0.45978315958983385, 0.4667646154879752, 0.4667646154879752, 0.4667646154879752, 0.5075306916825154, 0.5075306916825154, 0.5075306916825154, 0.07885872169661512, 0.07885872169661512, 0.07885872169661512, 0.10463084327707184, 0.10463084327707184, 0.10463084327707184, 0.08478858715766291, 0.08478858715766291, 0.08478858715766291, 0.10555009067887855, 0.10555009067887855, 0.10555009067887855, 0.08299945089469651, 0.08299945089469651, 0.08299945089469651, 0.07991225492237086, 0.07991225492237086, 0.07991225492237086, 0.0776379868415743, 0.0776379868415743, 0.0776379868415743, 0.08610607767740708, 0.08610607767740708, 0.08610607767740708, 0.08957908495163214, 0.08957908495163214, 0.08957908495163214, 0.942234304146541, 0.942234304146541, 0.942234304146541, 0.9490441043578798, 0.9490441043578798, 0.9490441043578798, 0.9458164128898487, 0.9458164128898487, 0.9458164128898487, 0.15207327708434337, 0.15207327708434337, 0.15207327708434337, 0.19455814124267756, 0.19455814124267756, 0.19455814124267756, 0.2375141816348978, 0.2375141816348978, 0.2375141816348978, 0.24103942779663134, 0.24103942779663134, 0.24103942779663134, 0.18438263075211792, 0.18438263075211792, 0.18438263075211792, 0.11451665480161954, 0.11451665480161954, 0.11451665480161954, 0.14229519303564864, 0.14229519303564864, 0.14229519303564864, 0.115209439269922, 0.115209439269922, 0.115209439269922, 0.11853163667491828, 0.11853163667491828, 0.11853163667491828, 0.1627932720420735, 0.1627932720420735, 0.1627932720420735, 0.12938004408844117, 0.12938004408844117, 0.12938004408844117, 0.055524473787845974, 0.055524473787845974, 0.055524473787845974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08192266673054405, 0.08192266673054405, 0.08192266673054405, 0.021487596712135737, 0.021487596712135737, 0.021487596712135737, 0.05173288513897589, 0.05173288513897589, 0.05173288513897589, 0.034325251077472196, 0.034325251077472196, 0.034325251077472196, 0.022339057206389623, 0.022339057206389623, 0.022339057206389623, 0.02252286659655689, 0.02252286659655689, 0.02252286659655689, 0.08443818671572068, 0.08443818671572068, 0.08443818671572068, 0.07192224526491153, 0.07192224526491153, 0.07192224526491153, 0.07028137508498133, 0.07028137508498133, 0.07028137508498133, 0.4063886707094091, 0.4063886707094091, 0.4063886707094091, 0.3704552612507669, 0.3704552612507669, 0.3704552612507669, 0.37620831379815567, 0.37620831379815567, 0.37620831379815567, 0.1088889842159817, 0.1088889842159817, 0.1088889842159817, 0.08440835049708362, 0.08440835049708362, 0.08440835049708362, 0.08190514237931024, 0.08190514237931024, 0.08190514237931024, 0.16253155709085898, 0.16253155709085898, 0.16253155709085898, 0.1724604282048009, 0.1724604282048009, 0.1724604282048009, 0.1588656966858869, 0.1588656966858869, 0.1588656966858869, 0.26326169166994673, 0.26326169166994673, 0.26326169166994673, 0.23478109383397572, 0.23478109383397572, 0.23478109383397572, 0.26428021544511426, 0.26428021544511426, 0.26428021544511426, 0.1517227465143729, 0.1517227465143729, 0.1517227465143729, 0.15306178986938446, 0.15306178986938446, 0.15306178986938446, 0.15605095876831643, 0.15605095876831643, 0.15605095876831643, 0.17994435623424665, 0.17994435623424665, 0.17994435623424665, 0.17878859030136396, 0.17878859030136396, 0.17878859030136396, 0.18571444295263717, 0.18571444295263717, 0.18571444295263717, 0.18253855820063336, 0.18253855820063336, 0.18253855820063336, 0.18126691251067906, 0.18126691251067906, 0.18126691251067906, 0.18753938326554265, 0.18753938326554265, 0.18753938326554265, 0.5767820932387091, 0.5767820932387091, 0.5767820932387091, 0.1531748203964225, 0.1531748203964225, 0.1531748203964225, 0.12185408638330719, 0.12185408638330719, 0.12185408638330719, 0.16477259674647227, 0.16477259674647227, 0.16477259674647227, 0.2048456257213328, 0.2048456257213328, 0.2048456257213328, 0.1529929421302142, 0.1529929421302142, 0.1529929421302142, 0.18306770549925044, 0.18306770549925044, 0.18306770549925044, 0.16303795134779286, 0.16303795134779286, 0.16303795134779286, 0.18703606825620678, 0.18703606825620678, 0.18703606825620678, 0.07221764061190428, 0.07221764061190428, 0.07221764061190428, 0.06582895870934335, 0.06582895870934335, 0.06582895870934335, 0.07458367716560443, 0.07458367716560443, 0.07458367716560443]}, "mutation_prompt": null}
{"id": "6821ff3c-0de5-441e-80b2-2e40f1018d66", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "62df63ce-0124-4178-a1ea-f4d685c5da42", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "a8918b81-86bb-4f36-80ed-cdb86e039925", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "979b0373-e080-406e-8c81-188334ad5252", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "6e5890d5-b1bd-4ac6-abec-977206168a4b", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * np.cos((evaluations / self.budget) * (np.pi / 2))  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance the adaptive inertia weight strategy by making it nonlinear for improved convergence.", "configspace": "", "generation": 39, "fitness": 0.18469611294053395, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.40283553556144247, 0.40283553556144247, 0.40283553556144247, 0.4500871089843307, 0.4500871089843307, 0.4500871089843307, 0.4820431584370044, 0.4820431584370044, 0.4820431584370044, 0.04517711648607614, 0.04517711648607614, 0.04517711648607614, 0.13868616930634692, 0.13868616930634692, 0.13868616930634692, 0.02479374167111359, 0.02479374167111359, 0.02479374167111359, 0.09128202627362336, 0.09128202627362336, 0.09128202627362336, 0.10093756420087485, 0.10093756420087485, 0.10093756420087485, 0.08459600321577032, 0.08459600321577032, 0.08459600321577032, 0.05928885531056716, 0.05928885531056716, 0.05928885531056716, 0.06916074837240771, 0.06916074837240771, 0.06916074837240771, 0.08207495894006078, 0.08207495894006078, 0.08207495894006078, 0.9422622310772922, 0.9422622310772922, 0.9422622310772922, 0.9490627202375225, 0.9490627202375225, 0.9490627202375225, 0.9458391673145861, 0.9458391673145861, 0.9458391673145861, 0.17407595402057796, 0.17407595402057796, 0.17407595402057796, 0.15429861067144468, 0.15429861067144468, 0.15429861067144468, 0.20677619338221476, 0.20677619338221476, 0.20677619338221476, 0.2173575982581739, 0.2173575982581739, 0.2173575982581739, 0.1702882911014929, 0.1702882911014929, 0.1702882911014929, 0.19883119345202327, 0.19883119345202327, 0.19883119345202327, 0.12490493820790582, 0.12490493820790582, 0.12490493820790582, 0.10902070826953736, 0.10902070826953736, 0.10902070826953736, 0.10018944625907467, 0.10018944625907467, 0.10018944625907467, 0.10887826805562129, 0.10887826805562129, 0.10887826805562129, 0.11302544774067413, 0.11302544774067413, 0.11302544774067413, 0.06530649972984992, 0.06530649972984992, 0.06530649972984992, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034126067353514755, 0.034126067353514755, 0.034126067353514755, 0.007817539174560073, 0.007817539174560073, 0.007817539174560073, 0.046247546724542565, 0.046247546724542565, 0.046247546724542565, 0.02526595559483724, 0.02526595559483724, 0.02526595559483724, 0.018689094793116978, 0.018689094793116978, 0.018689094793116978, 0.014881298747768557, 0.014881298747768557, 0.014881298747768557, 0.0758496742783129, 0.0758496742783129, 0.0758496742783129, 0.03424195071821445, 0.03424195071821445, 0.03424195071821445, 0.07647208219502832, 0.07647208219502832, 0.07647208219502832, 0.34282036397968196, 0.34282036397968196, 0.34282036397968196, 0.37236132572756253, 0.37236132572756253, 0.37236132572756253, 0.3826172016939773, 0.3826172016939773, 0.3826172016939773, 0.07817912452452469, 0.07817912452452469, 0.07817912452452469, 0.08001660634207186, 0.08001660634207186, 0.08001660634207186, 0.08110102475006842, 0.08110102475006842, 0.08110102475006842, 0.14233265188536082, 0.14233265188536082, 0.14233265188536082, 0.16685816779292595, 0.16685816779292595, 0.16685816779292595, 0.14202016702070763, 0.14202016702070763, 0.14202016702070763, 0.25818223823121333, 0.25818223823121333, 0.25818223823121333, 0.26094967385469103, 0.26094967385469103, 0.26094967385469103, 0.25455602734183447, 0.25455602734183447, 0.25455602734183447, 0.13374263338548753, 0.13374263338548753, 0.13374263338548753, 0.14576172313978364, 0.14576172313978364, 0.14576172313978364, 0.14493467477230237, 0.14493467477230237, 0.14493467477230237, 0.18834814858915305, 0.18834814858915305, 0.18834814858915305, 0.19265159497154116, 0.19265159497154116, 0.19265159497154116, 0.1787456898800327, 0.1787456898800327, 0.1787456898800327, 0.17795247678026993, 0.17795247678026993, 0.17795247678026993, 0.16967789282500012, 0.16967789282500012, 0.16967789282500012, 0.2281158188582605, 0.2281158188582605, 0.2281158188582605, 0.6568410795235864, 0.6568410795235864, 0.6568410795235864, 0.1547863088530419, 0.1547863088530419, 0.1547863088530419, 0.12139066986269076, 0.12139066986269076, 0.12139066986269076, 0.19085058120777898, 0.19085058120777898, 0.19085058120777898, 0.20284891270140415, 0.20284891270140415, 0.20284891270140415, 0.15287083253998246, 0.15287083253998246, 0.15287083253998246, 0.17483349955547123, 0.17483349955547123, 0.17483349955547123, 0.1716585312238874, 0.1716585312238874, 0.1716585312238874, 0.17864910096703968, 0.17864910096703968, 0.17864910096703968, 0.07783784111343361, 0.07783784111343361, 0.07783784111343361, 0.07819428770072168, 0.07819428770072168, 0.07819428770072168, 0.07046179600545033, 0.07046179600545033, 0.07046179600545033]}, "mutation_prompt": null}
{"id": "964bf49b-1301-499c-a55e-f305d0d5c975", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "9ea0e0d9-23c6-4844-b51e-35897475d2b8", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "a70f2b0f-f81b-46ce-8ea8-edadf2a178c6", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation  # Changed line\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive inertia weight in PSO to enhance convergence by linearly decreasing it over iterations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.5665206250424174, 0.5665206250424174, 0.5665206250424174, 0.5571949283807196, 0.5571949283807196, 0.5571949283807196, 0.5137930180984832, 0.5137930180984832, 0.5137930180984832, 0.25611686767939656, 0.25611686767939656, 0.25611686767939656, 0.1845841234990585, 0.1845841234990585, 0.1845841234990585, 0.25501128151500474, 0.25501128151500474, 0.25501128151500474, 0.09909340807115263, 0.09909340807115263, 0.09909340807115263, 0.0858404425519611, 0.0858404425519611, 0.0858404425519611, 0.12543944125943562, 0.12543944125943562, 0.12543944125943562, 0.08640194945209623, 0.08640194945209623, 0.08640194945209623, 0.08938869253411685, 0.08938869253411685, 0.08938869253411685, 0.10955879391929191, 0.10955879391929191, 0.10955879391929191, 0.9421352595425215, 0.9421352595425215, 0.9421352595425215, 0.9490460580874432, 0.9490460580874432, 0.9490460580874432, 0.9457998130972354, 0.9457998130972354, 0.9457998130972354, 0.24054986571615555, 0.24054986571615555, 0.24054986571615555, 0.2745927214244809, 0.2745927214244809, 0.2745927214244809, 0.28264823623577795, 0.28264823623577795, 0.28264823623577795, 0.18566249258306367, 0.18566249258306367, 0.18566249258306367, 0.188105586607624, 0.188105586607624, 0.188105586607624, 0.13613820797817966, 0.13613820797817966, 0.13613820797817966, 0.13284152185562237, 0.13284152185562237, 0.13284152185562237, 0.11759449032615776, 0.11759449032615776, 0.11759449032615776, 0.11147465779064336, 0.11147465779064336, 0.11147465779064336, 0.1719256876889369, 0.1719256876889369, 0.1719256876889369, 0.11223779436641323, 0.11223779436641323, 0.11223779436641323, 0.04324346959490488, 0.04324346959490488, 0.04324346959490488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00032624679608384, 0.00032624679608384, 0.00032624679608384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07514959569421353, 0.07514959569421353, 0.07514959569421353, 0.011981725230892692, 0.011981725230892692, 0.011981725230892692, 0.054251581113707426, 0.054251581113707426, 0.054251581113707426, 0.06490624829729219, 0.06490624829729219, 0.06490624829729219, 0.08623809315478104, 0.08623809315478104, 0.08623809315478104, 0.043424518022896375, 0.043424518022896375, 0.043424518022896375, 0.06099029102075093, 0.06099029102075093, 0.06099029102075093, 0.06473379829954906, 0.06473379829954906, 0.06473379829954906, 0.0832778525308635, 0.0832778525308635, 0.0832778525308635, 0.4346860519075051, 0.4346860519075051, 0.4346860519075051, 0.4003149016110745, 0.4003149016110745, 0.4003149016110745, 0.420881296585384, 0.420881296585384, 0.420881296585384, 0.10831047264191529, 0.10831047264191529, 0.10831047264191529, 0.09152777862369932, 0.09152777862369932, 0.09152777862369932, 0.08787651900766469, 0.08787651900766469, 0.08787651900766469, 0.17042263067595553, 0.17042263067595553, 0.17042263067595553, 0.1786818021170824, 0.1786818021170824, 0.1786818021170824, 0.1989890682694896, 0.1989890682694896, 0.1989890682694896, 0.3121470806930777, 0.3121470806930777, 0.3121470806930777, 0.29114524192325186, 0.29114524192325186, 0.29114524192325186, 0.2991831224776863, 0.2991831224776863, 0.2991831224776863, 0.12930983076839642, 0.12930983076839642, 0.12930983076839642, 0.1599238628301577, 0.1599238628301577, 0.1599238628301577, 0.18692105850465424, 0.18692105850465424, 0.18692105850465424, 0.204382553981585, 0.204382553981585, 0.204382553981585, 0.1865566875568051, 0.1865566875568051, 0.1865566875568051, 0.19908784640385835, 0.19908784640385835, 0.19908784640385835, 0.19882243890543372, 0.19882243890543372, 0.19882243890543372, 0.26691061841234565, 0.26691061841234565, 0.26691061841234565, 0.19435058523530502, 0.19435058523530502, 0.19435058523530502, 0.7221105253856068, 0.7221105253856068, 0.7221105253856068, 0.1559516082229011, 0.1559516082229011, 0.1559516082229011, 0.12167362691584926, 0.12167362691584926, 0.12167362691584926, 0.16486213692997664, 0.16486213692997664, 0.16486213692997664, 0.20208238422132252, 0.20208238422132252, 0.20208238422132252, 0.15331383950192434, 0.15331383950192434, 0.15331383950192434, 0.18319742176703335, 0.18319742176703335, 0.18319742176703335, 0.18246763738434468, 0.18246763738434468, 0.18246763738434468, 0.18047953456453247, 0.18047953456453247, 0.18047953456453247, 0.07826364432408295, 0.07826364432408295, 0.07826364432408295, 0.08377346471565639, 0.08377346471565639, 0.08377346471565639, 0.08314476131651372, 0.08314476131651372, 0.08314476131651372]}, "mutation_prompt": null}
{"id": "fcad87bf-575b-4808-bbe3-4c03e76f0e84", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce a diversity-enhancing Gaussian mutation in DE mutation to improve exploration capabilities.", "configspace": "", "generation": 43, "fitness": 0.22701883534675946, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "86cfea49-6da3-4fd4-add6-8e5fc193188e", "metadata": {"aucs": [0.552085823810665, 0.552085823810665, 0.552085823810665, 0.6202507735754084, 0.6202507735754084, 0.6202507735754084, 0.587778571252177, 0.587778571252177, 0.587778571252177, 0.29811612595322134, 0.29811612595322134, 0.29811612595322134, 0.3006222184592636, 0.3006222184592636, 0.3006222184592636, 0.26120419731768985, 0.26120419731768985, 0.26120419731768985, 0.1076565501390283, 0.1076565501390283, 0.1076565501390283, 0.10072743626133873, 0.10072743626133873, 0.10072743626133873, 0.09758529448034337, 0.09758529448034337, 0.09758529448034337, 0.0867896712927404, 0.0867896712927404, 0.0867896712927404, 0.1237006318956948, 0.1237006318956948, 0.1237006318956948, 0.07566475062979494, 0.07566475062979494, 0.07566475062979494, 0.9556354249563217, 0.9556354249563217, 0.9556354249563217, 0.960215013351506, 0.960215013351506, 0.960215013351506, 0.9560135138259097, 0.9560135138259097, 0.9560135138259097, 0.1990176162012578, 0.1990176162012578, 0.1990176162012578, 0.261046399877378, 0.261046399877378, 0.261046399877378, 0.2521408737950155, 0.2521408737950155, 0.2521408737950155, 0.2071949737208787, 0.2071949737208787, 0.2071949737208787, 0.17642560975347477, 0.17642560975347477, 0.17642560975347477, 0.22080503616382974, 0.22080503616382974, 0.22080503616382974, 0.147864896313311, 0.147864896313311, 0.147864896313311, 0.11952436398004229, 0.11952436398004229, 0.11952436398004229, 0.15284058901744302, 0.15284058901744302, 0.15284058901744302, 0.11991162429348479, 0.11991162429348479, 0.11991162429348479, 0.1267579082069249, 0.1267579082069249, 0.1267579082069249, 0.14979203641072558, 0.14979203641072558, 0.14979203641072558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010773589634688552, 0.010773589634688552, 0.010773589634688552, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14267542573117775, 0.14267542573117775, 0.14267542573117775, 0.012324581489144282, 0.012324581489144282, 0.012324581489144282, 0.0601589282422339, 0.0601589282422339, 0.0601589282422339, 0.056427639801164386, 0.056427639801164386, 0.056427639801164386, 0.10099194561360669, 0.10099194561360669, 0.10099194561360669, 0.048795794253564284, 0.048795794253564284, 0.048795794253564284, 0.11820153861041693, 0.11820153861041693, 0.11820153861041693, 0.12213012108338184, 0.12213012108338184, 0.12213012108338184, 0.10307222214009126, 0.10307222214009126, 0.10307222214009126, 0.39296108901466664, 0.39296108901466664, 0.39296108901466664, 0.39385008443546965, 0.39385008443546965, 0.39385008443546965, 0.4245136436727095, 0.4245136436727095, 0.4245136436727095, 0.0894263898795411, 0.0894263898795411, 0.0894263898795411, 0.09936470946814424, 0.09936470946814424, 0.09936470946814424, 0.11581619255728604, 0.11581619255728604, 0.11581619255728604, 0.1593026664992654, 0.1593026664992654, 0.1593026664992654, 0.18308686181142242, 0.18308686181142242, 0.18308686181142242, 0.2641965945913882, 0.2641965945913882, 0.2641965945913882, 0.29863158800332446, 0.29863158800332446, 0.29863158800332446, 0.3081525804178077, 0.3081525804178077, 0.3081525804178077, 0.3314331635296789, 0.3314331635296789, 0.3314331635296789, 0.15047842046854953, 0.15047842046854953, 0.15047842046854953, 0.19563596664007732, 0.19563596664007732, 0.19563596664007732, 0.20808564564205434, 0.20808564564205434, 0.20808564564205434, 0.1972044282373513, 0.1972044282373513, 0.1972044282373513, 0.2142959222490558, 0.2142959222490558, 0.2142959222490558, 0.18804515580549475, 0.18804515580549475, 0.18804515580549475, 0.1999191188745434, 0.1999191188745434, 0.1999191188745434, 0.17592029405592546, 0.17592029405592546, 0.17592029405592546, 0.18529116989325622, 0.18529116989325622, 0.18529116989325622, 0.7756065483521987, 0.7756065483521987, 0.7756065483521987, 0.15787883303079286, 0.15787883303079286, 0.15787883303079286, 0.16702707931595906, 0.16702707931595906, 0.16702707931595906, 0.16600530175795247, 0.16600530175795247, 0.16600530175795247, 0.39122656613730833, 0.39122656613730833, 0.39122656613730833, 0.15268190424549466, 0.15268190424549466, 0.15268190424549466, 0.1742177115548531, 0.1742177115548531, 0.1742177115548531, 0.17827556200640393, 0.17827556200640393, 0.17827556200640393, 0.17169083883387481, 0.17169083883387481, 0.17169083883387481, 0.07544292793242169, 0.07544292793242169, 0.07544292793242169, 0.07904984501706858, 0.07904984501706858, 0.07904984501706858, 0.08752162950100462, 0.08752162950100462, 0.08752162950100462]}, "mutation_prompt": null}
{"id": "67dbf345-f328-423e-8a6f-2ecc4154f639", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)  # Changed line\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce an adaptive crossover probability to enhance the DE phase's adaptation to diverse landscapes.", "configspace": "", "generation": 44, "fitness": 0.22743442778586132, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "fcad87bf-575b-4808-bbe3-4c03e76f0e84", "metadata": {"aucs": [0.4849594867270346, 0.4849594867270346, 0.4849594867270346, 0.5716056990966336, 0.5716056990966336, 0.5716056990966336, 0.6764517194129238, 0.6764517194129238, 0.6764517194129238, 0.28492477569652497, 0.28492477569652497, 0.28492477569652497, 0.23759434045506123, 0.23759434045506123, 0.23759434045506123, 0.28084850444038734, 0.28084850444038734, 0.28084850444038734, 0.10514249844379642, 0.10514249844379642, 0.10514249844379642, 0.09879990286730811, 0.09879990286730811, 0.09879990286730811, 0.08754330817988665, 0.08754330817988665, 0.08754330817988665, 0.09282046730834848, 0.09282046730834848, 0.09282046730834848, 0.09338007632553058, 0.09338007632553058, 0.09338007632553058, 0.08571151024020529, 0.08571151024020529, 0.08571151024020529, 0.9556265773509698, 0.9556265773509698, 0.9556265773509698, 0.9602205009682139, 0.9602205009682139, 0.9602205009682139, 0.9560135138259097, 0.9560135138259097, 0.9560135138259097, 0.23590197272467717, 0.23590197272467717, 0.23590197272467717, 0.25263873669817527, 0.25263873669817527, 0.25263873669817527, 0.23183933447025296, 0.23183933447025296, 0.23183933447025296, 0.27338146674100827, 0.27338146674100827, 0.27338146674100827, 0.23280826228429352, 0.23280826228429352, 0.23280826228429352, 0.205265645417964, 0.205265645417964, 0.205265645417964, 0.1709283027840406, 0.1709283027840406, 0.1709283027840406, 0.1429921938604768, 0.1429921938604768, 0.1429921938604768, 0.15063644297278733, 0.15063644297278733, 0.15063644297278733, 0.1356707231952008, 0.1356707231952008, 0.1356707231952008, 0.15169321699505656, 0.15169321699505656, 0.15169321699505656, 0.15714734491894944, 0.15714734491894944, 0.15714734491894944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009265731999313909, 0.0009265731999313909, 0.0009265731999313909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09200253799260139, 0.09200253799260139, 0.09200253799260139, 0.019072964661191016, 0.019072964661191016, 0.019072964661191016, 0.05583037696789528, 0.05583037696789528, 0.05583037696789528, 0.13712914253697472, 0.13712914253697472, 0.13712914253697472, 0.06762416430971385, 0.06762416430971385, 0.06762416430971385, 0.08314244709554586, 0.08314244709554586, 0.08314244709554586, 0.10978664383598857, 0.10978664383598857, 0.10978664383598857, 0.04412100065217839, 0.04412100065217839, 0.04412100065217839, 0.15416242254485402, 0.15416242254485402, 0.15416242254485402, 0.3998830681224055, 0.3998830681224055, 0.3998830681224055, 0.43954724605036066, 0.43954724605036066, 0.43954724605036066, 0.40157525960284135, 0.40157525960284135, 0.40157525960284135, 0.10524236321104652, 0.10524236321104652, 0.10524236321104652, 0.11745083178153437, 0.11745083178153437, 0.11745083178153437, 0.08267550926366751, 0.08267550926366751, 0.08267550926366751, 0.18582843080448952, 0.18582843080448952, 0.18582843080448952, 0.18226184037250837, 0.18226184037250837, 0.18226184037250837, 0.13958059090273145, 0.13958059090273145, 0.13958059090273145, 0.24112087606782473, 0.24112087606782473, 0.24112087606782473, 0.3081408668464174, 0.3081408668464174, 0.3081408668464174, 0.3423457460884043, 0.3423457460884043, 0.3423457460884043, 0.14949553059917164, 0.14949553059917164, 0.14949553059917164, 0.19125761221278104, 0.19125761221278104, 0.19125761221278104, 0.22936795139155075, 0.22936795139155075, 0.22936795139155075, 0.20452960166247947, 0.20452960166247947, 0.20452960166247947, 0.1885370129417795, 0.1885370129417795, 0.1885370129417795, 0.23845953102152206, 0.23845953102152206, 0.23845953102152206, 0.2290788612164052, 0.2290788612164052, 0.2290788612164052, 0.1750860495210672, 0.1750860495210672, 0.1750860495210672, 0.2026728956463314, 0.2026728956463314, 0.2026728956463314, 0.626817306203196, 0.626817306203196, 0.626817306203196, 0.15744098936873197, 0.15744098936873197, 0.15744098936873197, 0.16620038259401593, 0.16620038259401593, 0.16620038259401593, 0.16556939013861938, 0.16556939013861938, 0.16556939013861938, 0.4600481254366904, 0.4600481254366904, 0.4600481254366904, 0.15072777070271826, 0.15072777070271826, 0.15072777070271826, 0.1912554618786988, 0.1912554618786988, 0.1912554618786988, 0.18088010548238964, 0.18088010548238964, 0.18088010548238964, 0.17569656034278103, 0.17569656034278103, 0.17569656034278103, 0.08051273619287369, 0.08051273619287369, 0.08051273619287369, 0.09076538628605069, 0.09076538628605069, 0.09076538628605069, 0.09868211242944036, 0.09868211242944036, 0.09868211242944036]}, "mutation_prompt": null}
{"id": "b306297e-e643-499a-a4c7-f7b97535db32", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)  # Changed line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity + social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)  # Changed line\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)  # Changed line\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce an adaptive crossover probability to enhance the DE phase's adaptation to diverse landscapes.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "67dbf345-f328-423e-8a6f-2ecc4154f639", "metadata": {"aucs": [0.4849594867270346, 0.4849594867270346, 0.4849594867270346, 0.5716056990966336, 0.5716056990966336, 0.5716056990966336, 0.6764517194129238, 0.6764517194129238, 0.6764517194129238, 0.28492477569652497, 0.28492477569652497, 0.28492477569652497, 0.23759434045506123, 0.23759434045506123, 0.23759434045506123, 0.28084850444038734, 0.28084850444038734, 0.28084850444038734, 0.10514249844379642, 0.10514249844379642, 0.10514249844379642, 0.09879990286730811, 0.09879990286730811, 0.09879990286730811, 0.08754330817988665, 0.08754330817988665, 0.08754330817988665, 0.09282046730834848, 0.09282046730834848, 0.09282046730834848, 0.09338007632553058, 0.09338007632553058, 0.09338007632553058, 0.08571151024020529, 0.08571151024020529, 0.08571151024020529, 0.9556265773509698, 0.9556265773509698, 0.9556265773509698, 0.9602205009682139, 0.9602205009682139, 0.9602205009682139, 0.9560135138259097, 0.9560135138259097, 0.9560135138259097, 0.23590197272467717, 0.23590197272467717, 0.23590197272467717, 0.25263873669817527, 0.25263873669817527, 0.25263873669817527, 0.23183933447025296, 0.23183933447025296, 0.23183933447025296, 0.27338146674100827, 0.27338146674100827, 0.27338146674100827, 0.23280826228429352, 0.23280826228429352, 0.23280826228429352, 0.205265645417964, 0.205265645417964, 0.205265645417964, 0.1709283027840406, 0.1709283027840406, 0.1709283027840406, 0.1429921938604768, 0.1429921938604768, 0.1429921938604768, 0.15063644297278733, 0.15063644297278733, 0.15063644297278733, 0.1356707231952008, 0.1356707231952008, 0.1356707231952008, 0.15169321699505656, 0.15169321699505656, 0.15169321699505656, 0.15714734491894944, 0.15714734491894944, 0.15714734491894944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009265731999313909, 0.0009265731999313909, 0.0009265731999313909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09200253799260139, 0.09200253799260139, 0.09200253799260139, 0.019072964661191016, 0.019072964661191016, 0.019072964661191016, 0.05583037696789528, 0.05583037696789528, 0.05583037696789528, 0.13712914253697472, 0.13712914253697472, 0.13712914253697472, 0.06762416430971385, 0.06762416430971385, 0.06762416430971385, 0.08314244709554586, 0.08314244709554586, 0.08314244709554586, 0.10978664383598857, 0.10978664383598857, 0.10978664383598857, 0.04412100065217839, 0.04412100065217839, 0.04412100065217839, 0.15416242254485402, 0.15416242254485402, 0.15416242254485402, 0.3998830681224055, 0.3998830681224055, 0.3998830681224055, 0.43954724605036066, 0.43954724605036066, 0.43954724605036066, 0.40157525960284135, 0.40157525960284135, 0.40157525960284135, 0.10524236321104652, 0.10524236321104652, 0.10524236321104652, 0.11745083178153437, 0.11745083178153437, 0.11745083178153437, 0.08267550926366751, 0.08267550926366751, 0.08267550926366751, 0.18582843080448952, 0.18582843080448952, 0.18582843080448952, 0.18226184037250837, 0.18226184037250837, 0.18226184037250837, 0.13958059090273145, 0.13958059090273145, 0.13958059090273145, 0.24112087606782473, 0.24112087606782473, 0.24112087606782473, 0.3081408668464174, 0.3081408668464174, 0.3081408668464174, 0.3423457460884043, 0.3423457460884043, 0.3423457460884043, 0.14949553059917164, 0.14949553059917164, 0.14949553059917164, 0.19125761221278104, 0.19125761221278104, 0.19125761221278104, 0.22936795139155075, 0.22936795139155075, 0.22936795139155075, 0.20452960166247947, 0.20452960166247947, 0.20452960166247947, 0.1885370129417795, 0.1885370129417795, 0.1885370129417795, 0.23845953102152206, 0.23845953102152206, 0.23845953102152206, 0.2290788612164052, 0.2290788612164052, 0.2290788612164052, 0.1750860495210672, 0.1750860495210672, 0.1750860495210672, 0.2026728956463314, 0.2026728956463314, 0.2026728956463314, 0.626817306203196, 0.626817306203196, 0.626817306203196, 0.15744098936873197, 0.15744098936873197, 0.15744098936873197, 0.16620038259401593, 0.16620038259401593, 0.16620038259401593, 0.16556939013861938, 0.16556939013861938, 0.16556939013861938, 0.4600481254366904, 0.4600481254366904, 0.4600481254366904, 0.15072777070271826, 0.15072777070271826, 0.15072777070271826, 0.1912554618786988, 0.1912554618786988, 0.1912554618786988, 0.18088010548238964, 0.18088010548238964, 0.18088010548238964, 0.17569656034278103, 0.17569656034278103, 0.17569656034278103, 0.08051273619287369, 0.08051273619287369, 0.08051273619287369, 0.09076538628605069, 0.09076538628605069, 0.09076538628605069, 0.09868211242944036, 0.09868211242944036, 0.09868211242944036]}, "mutation_prompt": null}
{"id": "3a4a349d-9e5a-4a56-936b-75f26470fd56", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity * (1 - evaluations / self.budget) +  # Changed line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce a decayed cognitive component in PSO to encourage exploration early and exploitation later.", "configspace": "", "generation": 46, "fitness": 0.23016431171820126, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "67dbf345-f328-423e-8a6f-2ecc4154f639", "metadata": {"aucs": [0.5325917336696381, 0.5325917336696381, 0.5325917336696381, 0.6027784745425168, 0.6027784745425168, 0.6027784745425168, 0.6077768148267196, 0.6077768148267196, 0.6077768148267196, 0.22176397698709205, 0.22176397698709205, 0.22176397698709205, 0.2941500231782287, 0.2941500231782287, 0.2941500231782287, 0.1779081960229505, 0.1779081960229505, 0.1779081960229505, 0.11931903088578, 0.11931903088578, 0.11931903088578, 0.09937326796710733, 0.09937326796710733, 0.09937326796710733, 0.09656216206904245, 0.09656216206904245, 0.09656216206904245, 0.11624182823142715, 0.11624182823142715, 0.11624182823142715, 0.09022421561421012, 0.09022421561421012, 0.09022421561421012, 0.08574605708744798, 0.08574605708744798, 0.08574605708744798, 0.9556265773509698, 0.9556265773509698, 0.9556265773509698, 0.9602205009682139, 0.9602205009682139, 0.9602205009682139, 0.9560135138259097, 0.9560135138259097, 0.9560135138259097, 0.3014715343420886, 0.3014715343420886, 0.3014715343420886, 0.3196408788877253, 0.3196408788877253, 0.3196408788877253, 0.28405587555085066, 0.28405587555085066, 0.28405587555085066, 0.21012371288769227, 0.21012371288769227, 0.21012371288769227, 0.15634277224608828, 0.15634277224608828, 0.15634277224608828, 0.31429772320706784, 0.31429772320706784, 0.31429772320706784, 0.1288578338558356, 0.1288578338558356, 0.1288578338558356, 0.14153401215187533, 0.14153401215187533, 0.14153401215187533, 0.16343468373194392, 0.16343468373194392, 0.16343468373194392, 0.12701093033330613, 0.12701093033330613, 0.12701093033330613, 0.18085288789771703, 0.18085288789771703, 0.18085288789771703, 0.15438207345754384, 0.15438207345754384, 0.15438207345754384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003532347571817418, 0.003532347571817418, 0.003532347571817418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07526060194931128, 0.07526060194931128, 0.07526060194931128, 0.031840043112670746, 0.031840043112670746, 0.031840043112670746, 0.06172510091151362, 0.06172510091151362, 0.06172510091151362, 0.12304421394229681, 0.12304421394229681, 0.12304421394229681, 0.1079256835843051, 0.1079256835843051, 0.1079256835843051, 0.07819345490446628, 0.07819345490446628, 0.07819345490446628, 0.07381402403857051, 0.07381402403857051, 0.07381402403857051, 0.05183359600973092, 0.05183359600973092, 0.05183359600973092, 0.10635837602950704, 0.10635837602950704, 0.10635837602950704, 0.4382460763691509, 0.4382460763691509, 0.4382460763691509, 0.46793969892021736, 0.46793969892021736, 0.46793969892021736, 0.42778475473425437, 0.42778475473425437, 0.42778475473425437, 0.1209099720850163, 0.1209099720850163, 0.1209099720850163, 0.1260629178191297, 0.1260629178191297, 0.1260629178191297, 0.10689036225338155, 0.10689036225338155, 0.10689036225338155, 0.22959481466757492, 0.22959481466757492, 0.22959481466757492, 0.19036389382690155, 0.19036389382690155, 0.19036389382690155, 0.26752232277744115, 0.26752232277744115, 0.26752232277744115, 0.23578544781657207, 0.23578544781657207, 0.23578544781657207, 0.3243556551133816, 0.3243556551133816, 0.3243556551133816, 0.33248516789793137, 0.33248516789793137, 0.33248516789793137, 0.1559615147304395, 0.1559615147304395, 0.1559615147304395, 0.18358901956956486, 0.18358901956956486, 0.18358901956956486, 0.14065893289030684, 0.14065893289030684, 0.14065893289030684, 0.18978914139550762, 0.18978914139550762, 0.18978914139550762, 0.21927740794215556, 0.21927740794215556, 0.21927740794215556, 0.19680513190514526, 0.19680513190514526, 0.19680513190514526, 0.17612803700251867, 0.17612803700251867, 0.17612803700251867, 0.18536289461792987, 0.18536289461792987, 0.18536289461792987, 0.1918712184709085, 0.1918712184709085, 0.1918712184709085, 0.6908960437606887, 0.6908960437606887, 0.6908960437606887, 0.15584577044412584, 0.15584577044412584, 0.15584577044412584, 0.16498773937454458, 0.16498773937454458, 0.16498773937454458, 0.1652059552326931, 0.1652059552326931, 0.1652059552326931, 0.44068929300410775, 0.44068929300410775, 0.44068929300410775, 0.15258653184461324, 0.15258653184461324, 0.15258653184461324, 0.17256169747050787, 0.17256169747050787, 0.17256169747050787, 0.1785034492547587, 0.1785034492547587, 0.1785034492547587, 0.18416407653127131, 0.18416407653127131, 0.18416407653127131, 0.07848129857111397, 0.07848129857111397, 0.07848129857111397, 0.07261533099281636, 0.07261533099281636, 0.07261533099281636, 0.09588014059264227, 0.09588014059264227, 0.09588014059264227]}, "mutation_prompt": null}
{"id": "89e857b6-d156-4e02-ab22-537cb391291c", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity * (1 - evaluations / self.budget) +  # Changed line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce a decayed cognitive component in PSO to encourage exploration early and exploitation later.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a4a349d-9e5a-4a56-936b-75f26470fd56", "metadata": {"aucs": [0.5325917336696381, 0.5325917336696381, 0.5325917336696381, 0.6027784745425168, 0.6027784745425168, 0.6027784745425168, 0.6077768148267196, 0.6077768148267196, 0.6077768148267196, 0.22176397698709205, 0.22176397698709205, 0.22176397698709205, 0.2941500231782287, 0.2941500231782287, 0.2941500231782287, 0.1779081960229505, 0.1779081960229505, 0.1779081960229505, 0.11931903088578, 0.11931903088578, 0.11931903088578, 0.09937326796710733, 0.09937326796710733, 0.09937326796710733, 0.09656216206904245, 0.09656216206904245, 0.09656216206904245, 0.11624182823142715, 0.11624182823142715, 0.11624182823142715, 0.09022421561421012, 0.09022421561421012, 0.09022421561421012, 0.08574605708744798, 0.08574605708744798, 0.08574605708744798, 0.9556265773509698, 0.9556265773509698, 0.9556265773509698, 0.9602205009682139, 0.9602205009682139, 0.9602205009682139, 0.9560135138259097, 0.9560135138259097, 0.9560135138259097, 0.3014715343420886, 0.3014715343420886, 0.3014715343420886, 0.3196408788877253, 0.3196408788877253, 0.3196408788877253, 0.28405587555085066, 0.28405587555085066, 0.28405587555085066, 0.21012371288769227, 0.21012371288769227, 0.21012371288769227, 0.15634277224608828, 0.15634277224608828, 0.15634277224608828, 0.31429772320706784, 0.31429772320706784, 0.31429772320706784, 0.1288578338558356, 0.1288578338558356, 0.1288578338558356, 0.14153401215187533, 0.14153401215187533, 0.14153401215187533, 0.16343468373194392, 0.16343468373194392, 0.16343468373194392, 0.12701093033330613, 0.12701093033330613, 0.12701093033330613, 0.18085288789771703, 0.18085288789771703, 0.18085288789771703, 0.15438207345754384, 0.15438207345754384, 0.15438207345754384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003532347571817418, 0.003532347571817418, 0.003532347571817418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07526060194931128, 0.07526060194931128, 0.07526060194931128, 0.031840043112670746, 0.031840043112670746, 0.031840043112670746, 0.06172510091151362, 0.06172510091151362, 0.06172510091151362, 0.12304421394229681, 0.12304421394229681, 0.12304421394229681, 0.1079256835843051, 0.1079256835843051, 0.1079256835843051, 0.07819345490446628, 0.07819345490446628, 0.07819345490446628, 0.07381402403857051, 0.07381402403857051, 0.07381402403857051, 0.05183359600973092, 0.05183359600973092, 0.05183359600973092, 0.10635837602950704, 0.10635837602950704, 0.10635837602950704, 0.4382460763691509, 0.4382460763691509, 0.4382460763691509, 0.46793969892021736, 0.46793969892021736, 0.46793969892021736, 0.42778475473425437, 0.42778475473425437, 0.42778475473425437, 0.1209099720850163, 0.1209099720850163, 0.1209099720850163, 0.1260629178191297, 0.1260629178191297, 0.1260629178191297, 0.10689036225338155, 0.10689036225338155, 0.10689036225338155, 0.22959481466757492, 0.22959481466757492, 0.22959481466757492, 0.19036389382690155, 0.19036389382690155, 0.19036389382690155, 0.26752232277744115, 0.26752232277744115, 0.26752232277744115, 0.23578544781657207, 0.23578544781657207, 0.23578544781657207, 0.3243556551133816, 0.3243556551133816, 0.3243556551133816, 0.33248516789793137, 0.33248516789793137, 0.33248516789793137, 0.1559615147304395, 0.1559615147304395, 0.1559615147304395, 0.18358901956956486, 0.18358901956956486, 0.18358901956956486, 0.14065893289030684, 0.14065893289030684, 0.14065893289030684, 0.18978914139550762, 0.18978914139550762, 0.18978914139550762, 0.21927740794215556, 0.21927740794215556, 0.21927740794215556, 0.19680513190514526, 0.19680513190514526, 0.19680513190514526, 0.17612803700251867, 0.17612803700251867, 0.17612803700251867, 0.18536289461792987, 0.18536289461792987, 0.18536289461792987, 0.1918712184709085, 0.1918712184709085, 0.1918712184709085, 0.6908960437606887, 0.6908960437606887, 0.6908960437606887, 0.15584577044412584, 0.15584577044412584, 0.15584577044412584, 0.16498773937454458, 0.16498773937454458, 0.16498773937454458, 0.1652059552326931, 0.1652059552326931, 0.1652059552326931, 0.44068929300410775, 0.44068929300410775, 0.44068929300410775, 0.15258653184461324, 0.15258653184461324, 0.15258653184461324, 0.17256169747050787, 0.17256169747050787, 0.17256169747050787, 0.1785034492547587, 0.1785034492547587, 0.1785034492547587, 0.18416407653127131, 0.18416407653127131, 0.18416407653127131, 0.07848129857111397, 0.07848129857111397, 0.07848129857111397, 0.07261533099281636, 0.07261533099281636, 0.07261533099281636, 0.09588014059264227, 0.09588014059264227, 0.09588014059264227]}, "mutation_prompt": null}
{"id": "ee184dd2-f357-4c0a-b14a-fc9cc97a6343", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_velocity = self.cognitive_component * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity * (1 - evaluations / self.budget) +  # Changed line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce a decayed cognitive component in PSO to encourage exploration early and exploitation later.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3a4a349d-9e5a-4a56-936b-75f26470fd56", "metadata": {"aucs": [0.5325917336696381, 0.5325917336696381, 0.5325917336696381, 0.6027784745425168, 0.6027784745425168, 0.6027784745425168, 0.6077768148267196, 0.6077768148267196, 0.6077768148267196, 0.22176397698709205, 0.22176397698709205, 0.22176397698709205, 0.2941500231782287, 0.2941500231782287, 0.2941500231782287, 0.1779081960229505, 0.1779081960229505, 0.1779081960229505, 0.11931903088578, 0.11931903088578, 0.11931903088578, 0.09937326796710733, 0.09937326796710733, 0.09937326796710733, 0.09656216206904245, 0.09656216206904245, 0.09656216206904245, 0.11624182823142715, 0.11624182823142715, 0.11624182823142715, 0.09022421561421012, 0.09022421561421012, 0.09022421561421012, 0.08574605708744798, 0.08574605708744798, 0.08574605708744798, 0.9556265773509698, 0.9556265773509698, 0.9556265773509698, 0.9602205009682139, 0.9602205009682139, 0.9602205009682139, 0.9560135138259097, 0.9560135138259097, 0.9560135138259097, 0.3014715343420886, 0.3014715343420886, 0.3014715343420886, 0.3196408788877253, 0.3196408788877253, 0.3196408788877253, 0.28405587555085066, 0.28405587555085066, 0.28405587555085066, 0.21012371288769227, 0.21012371288769227, 0.21012371288769227, 0.15634277224608828, 0.15634277224608828, 0.15634277224608828, 0.31429772320706784, 0.31429772320706784, 0.31429772320706784, 0.1288578338558356, 0.1288578338558356, 0.1288578338558356, 0.14153401215187533, 0.14153401215187533, 0.14153401215187533, 0.16343468373194392, 0.16343468373194392, 0.16343468373194392, 0.12701093033330613, 0.12701093033330613, 0.12701093033330613, 0.18085288789771703, 0.18085288789771703, 0.18085288789771703, 0.15438207345754384, 0.15438207345754384, 0.15438207345754384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003532347571817418, 0.003532347571817418, 0.003532347571817418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07526060194931128, 0.07526060194931128, 0.07526060194931128, 0.031840043112670746, 0.031840043112670746, 0.031840043112670746, 0.06172510091151362, 0.06172510091151362, 0.06172510091151362, 0.12304421394229681, 0.12304421394229681, 0.12304421394229681, 0.1079256835843051, 0.1079256835843051, 0.1079256835843051, 0.07819345490446628, 0.07819345490446628, 0.07819345490446628, 0.07381402403857051, 0.07381402403857051, 0.07381402403857051, 0.05183359600973092, 0.05183359600973092, 0.05183359600973092, 0.10635837602950704, 0.10635837602950704, 0.10635837602950704, 0.4382460763691509, 0.4382460763691509, 0.4382460763691509, 0.46793969892021736, 0.46793969892021736, 0.46793969892021736, 0.42778475473425437, 0.42778475473425437, 0.42778475473425437, 0.1209099720850163, 0.1209099720850163, 0.1209099720850163, 0.1260629178191297, 0.1260629178191297, 0.1260629178191297, 0.10689036225338155, 0.10689036225338155, 0.10689036225338155, 0.22959481466757492, 0.22959481466757492, 0.22959481466757492, 0.19036389382690155, 0.19036389382690155, 0.19036389382690155, 0.26752232277744115, 0.26752232277744115, 0.26752232277744115, 0.23578544781657207, 0.23578544781657207, 0.23578544781657207, 0.3243556551133816, 0.3243556551133816, 0.3243556551133816, 0.33248516789793137, 0.33248516789793137, 0.33248516789793137, 0.1559615147304395, 0.1559615147304395, 0.1559615147304395, 0.18358901956956486, 0.18358901956956486, 0.18358901956956486, 0.14065893289030684, 0.14065893289030684, 0.14065893289030684, 0.18978914139550762, 0.18978914139550762, 0.18978914139550762, 0.21927740794215556, 0.21927740794215556, 0.21927740794215556, 0.19680513190514526, 0.19680513190514526, 0.19680513190514526, 0.17612803700251867, 0.17612803700251867, 0.17612803700251867, 0.18536289461792987, 0.18536289461792987, 0.18536289461792987, 0.1918712184709085, 0.1918712184709085, 0.1918712184709085, 0.6908960437606887, 0.6908960437606887, 0.6908960437606887, 0.15584577044412584, 0.15584577044412584, 0.15584577044412584, 0.16498773937454458, 0.16498773937454458, 0.16498773937454458, 0.1652059552326931, 0.1652059552326931, 0.1652059552326931, 0.44068929300410775, 0.44068929300410775, 0.44068929300410775, 0.15258653184461324, 0.15258653184461324, 0.15258653184461324, 0.17256169747050787, 0.17256169747050787, 0.17256169747050787, 0.1785034492547587, 0.1785034492547587, 0.1785034492547587, 0.18416407653127131, 0.18416407653127131, 0.18416407653127131, 0.07848129857111397, 0.07848129857111397, 0.07848129857111397, 0.07261533099281636, 0.07261533099281636, 0.07261533099281636, 0.09588014059264227, 0.09588014059264227, 0.09588014059264227]}, "mutation_prompt": null}
{"id": "38876c72-6a46-4b1d-9db1-2781aea9520a", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                mutant = 0.5 * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive cognitive and social components in PSO to enhance dynamic adaptation.", "configspace": "", "generation": 49, "fitness": 0.2301643117184104, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "3a4a349d-9e5a-4a56-936b-75f26470fd56", "metadata": {"aucs": [0.5325917336696289, 0.5325917336696289, 0.5325917336696289, 0.6027784745425575, 0.6027784745425575, 0.6027784745425575, 0.6077768148266762, 0.6077768148266762, 0.6077768148266762, 0.2217639769888795, 0.2217639769888795, 0.2217639769888795, 0.2941500231868597, 0.2941500231868597, 0.2941500231868597, 0.1779081960279646, 0.1779081960279646, 0.1779081960279646, 0.11931903088578, 0.11931903088578, 0.11931903088578, 0.09937326796710733, 0.09937326796710733, 0.09937326796710733, 0.09656216206904245, 0.09656216206904245, 0.09656216206904245, 0.11624182823142715, 0.11624182823142715, 0.11624182823142715, 0.09022421561421012, 0.09022421561421012, 0.09022421561421012, 0.08574605708744798, 0.08574605708744798, 0.08574605708744798, 0.9556265773509698, 0.9556265773509698, 0.9556265773509698, 0.9602205009682139, 0.9602205009682139, 0.9602205009682139, 0.9560135138259097, 0.9560135138259097, 0.9560135138259097, 0.3014715343421296, 0.3014715343421296, 0.3014715343421296, 0.3196408788877253, 0.3196408788877253, 0.3196408788877253, 0.2840558755508863, 0.2840558755508863, 0.2840558755508863, 0.21012371288769227, 0.21012371288769227, 0.21012371288769227, 0.15634277224608828, 0.15634277224608828, 0.15634277224608828, 0.31429772320706784, 0.31429772320706784, 0.31429772320706784, 0.1288578338558356, 0.1288578338558356, 0.1288578338558356, 0.14153401215187533, 0.14153401215187533, 0.14153401215187533, 0.16343468373194392, 0.16343468373194392, 0.16343468373194392, 0.12701093033330613, 0.12701093033330613, 0.12701093033330613, 0.18085288789771703, 0.18085288789771703, 0.18085288789771703, 0.15438207345754384, 0.15438207345754384, 0.15438207345754384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003532347571817418, 0.003532347571817418, 0.003532347571817418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07526060194931128, 0.07526060194931128, 0.07526060194931128, 0.031840043112670746, 0.031840043112670746, 0.031840043112670746, 0.06172510091151362, 0.06172510091151362, 0.06172510091151362, 0.1230442139423058, 0.1230442139423058, 0.1230442139423058, 0.10792568358427757, 0.10792568358427757, 0.10792568358427757, 0.07819345490447194, 0.07819345490447194, 0.07819345490447194, 0.07381402403857051, 0.07381402403857051, 0.07381402403857051, 0.05183359600973092, 0.05183359600973092, 0.05183359600973092, 0.10635837602950704, 0.10635837602950704, 0.10635837602950704, 0.438246076369153, 0.438246076369153, 0.438246076369153, 0.4679396989202075, 0.4679396989202075, 0.4679396989202075, 0.4277847547342135, 0.4277847547342135, 0.4277847547342135, 0.1209099720850163, 0.1209099720850163, 0.1209099720850163, 0.1260629178191297, 0.1260629178191297, 0.1260629178191297, 0.10689036225338155, 0.10689036225338155, 0.10689036225338155, 0.22959481466758125, 0.22959481466758125, 0.22959481466758125, 0.19036389382688146, 0.19036389382688146, 0.19036389382688146, 0.2675223227774409, 0.2675223227774409, 0.2675223227774409, 0.23578544781657207, 0.23578544781657207, 0.23578544781657207, 0.3243556551133816, 0.3243556551133816, 0.3243556551133816, 0.33248516789758464, 0.33248516789758464, 0.33248516789758464, 0.1559615147304395, 0.1559615147304395, 0.1559615147304395, 0.183589019569521, 0.183589019569521, 0.183589019569521, 0.14065893289030684, 0.14065893289030684, 0.14065893289030684, 0.1897891413955093, 0.1897891413955093, 0.1897891413955093, 0.2192774079421772, 0.2192774079421772, 0.2192774079421772, 0.19680513190514637, 0.19680513190514637, 0.19680513190514637, 0.17612803700251867, 0.17612803700251867, 0.17612803700251867, 0.18536289461792987, 0.18536289461792987, 0.18536289461792987, 0.1918712184709085, 0.1918712184709085, 0.1918712184709085, 0.6908960437606887, 0.6908960437606887, 0.6908960437606887, 0.15584577044412584, 0.15584577044412584, 0.15584577044412584, 0.16498773937454458, 0.16498773937454458, 0.16498773937454458, 0.1652059552326931, 0.1652059552326931, 0.1652059552326931, 0.44068929300410775, 0.44068929300410775, 0.44068929300410775, 0.15258653184461324, 0.15258653184461324, 0.15258653184461324, 0.17256169747050787, 0.17256169747050787, 0.17256169747050787, 0.1785034492547587, 0.1785034492547587, 0.1785034492547587, 0.18416407653127131, 0.18416407653127131, 0.18416407653127131, 0.07848129857111397, 0.07848129857111397, 0.07848129857111397, 0.07261533099281636, 0.07261533099281636, 0.07261533099281636, 0.09588014059264227, 0.09588014059264227, 0.09588014059264227]}, "mutation_prompt": null}
{"id": "8422c71c-11a4-4eab-b397-bf4b66a341c8", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce a dynamic scaling factor in DE to further adaptively balance exploration and exploitation.", "configspace": "", "generation": 50, "fitness": 0.23550957685072826, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "38876c72-6a46-4b1d-9db1-2781aea9520a", "metadata": {"aucs": [0.5786403840777552, 0.5786403840777552, 0.5786403840777552, 0.6446564785117905, 0.6446564785117905, 0.6446564785117905, 0.6127942794563618, 0.6127942794563618, 0.6127942794563618, 0.2728764891596194, 0.2728764891596194, 0.2728764891596194, 0.28681545719834056, 0.28681545719834056, 0.28681545719834056, 0.31346917642539096, 0.31346917642539096, 0.31346917642539096, 0.10007228656998046, 0.10007228656998046, 0.10007228656998046, 0.09815574504333013, 0.09815574504333013, 0.09815574504333013, 0.10182645797460987, 0.10182645797460987, 0.10182645797460987, 0.09641461735726842, 0.09641461735726842, 0.09641461735726842, 0.10226775848146408, 0.10226775848146408, 0.10226775848146408, 0.08366162248421483, 0.08366162248421483, 0.08366162248421483, 0.9467035333972027, 0.9467035333972027, 0.9467035333972027, 0.9592322471513182, 0.9592322471513182, 0.9592322471513182, 0.955642761567373, 0.955642761567373, 0.955642761567373, 0.30055773449936907, 0.30055773449936907, 0.30055773449936907, 0.2582651955019948, 0.2582651955019948, 0.2582651955019948, 0.3710883259564266, 0.3710883259564266, 0.3710883259564266, 0.18708884605435905, 0.18708884605435905, 0.18708884605435905, 0.24404164162905562, 0.24404164162905562, 0.24404164162905562, 0.2143091910567516, 0.2143091910567516, 0.2143091910567516, 0.1551721327874449, 0.1551721327874449, 0.1551721327874449, 0.14697357131945976, 0.14697357131945976, 0.14697357131945976, 0.1704258568288589, 0.1704258568288589, 0.1704258568288589, 0.15678011659813296, 0.15678011659813296, 0.15678011659813296, 0.1721413269305072, 0.1721413269305072, 0.1721413269305072, 0.17436093173890677, 0.17436093173890677, 0.17436093173890677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036538873448449527, 0.0036538873448449527, 0.0036538873448449527, 0.004108147307229415, 0.004108147307229415, 0.004108147307229415, 0.1043362772163573, 0.1043362772163573, 0.1043362772163573, 0.025945917390727824, 0.025945917390727824, 0.025945917390727824, 0.0729964778131782, 0.0729964778131782, 0.0729964778131782, 0.1180001329746847, 0.1180001329746847, 0.1180001329746847, 0.11329085256802351, 0.11329085256802351, 0.11329085256802351, 0.07897123168265985, 0.07897123168265985, 0.07897123168265985, 0.1739124367422803, 0.1739124367422803, 0.1739124367422803, 0.1055751219190264, 0.1055751219190264, 0.1055751219190264, 0.07151696432247168, 0.07151696432247168, 0.07151696432247168, 0.4446271510677209, 0.4446271510677209, 0.4446271510677209, 0.4487096804183218, 0.4487096804183218, 0.4487096804183218, 0.4510818677273263, 0.4510818677273263, 0.4510818677273263, 0.08264643289652218, 0.08264643289652218, 0.08264643289652218, 0.10233835131938618, 0.10233835131938618, 0.10233835131938618, 0.12751086235571074, 0.12751086235571074, 0.12751086235571074, 0.15263607826195313, 0.15263607826195313, 0.15263607826195313, 0.16316490851890808, 0.16316490851890808, 0.16316490851890808, 0.21833431504080847, 0.21833431504080847, 0.21833431504080847, 0.26720465153274864, 0.26720465153274864, 0.26720465153274864, 0.32371742053323993, 0.32371742053323993, 0.32371742053323993, 0.32448061240625714, 0.32448061240625714, 0.32448061240625714, 0.16970556401336012, 0.16970556401336012, 0.16970556401336012, 0.16718014723214114, 0.16718014723214114, 0.16718014723214114, 0.2170586191747258, 0.2170586191747258, 0.2170586191747258, 0.18740019542620334, 0.18740019542620334, 0.18740019542620334, 0.20602831660548937, 0.20602831660548937, 0.20602831660548937, 0.2214591756512715, 0.2214591756512715, 0.2214591756512715, 0.17145862999121186, 0.17145862999121186, 0.17145862999121186, 0.1940681440883809, 0.1940681440883809, 0.1940681440883809, 0.1820860701701239, 0.1820860701701239, 0.1820860701701239, 0.6989555199983802, 0.6989555199983802, 0.6989555199983802, 0.1587330580060785, 0.1587330580060785, 0.1587330580060785, 0.16346458147371667, 0.16346458147371667, 0.16346458147371667, 0.16628683496652807, 0.16628683496652807, 0.16628683496652807, 0.4595938842664047, 0.4595938842664047, 0.4595938842664047, 0.1524876306711409, 0.1524876306711409, 0.1524876306711409, 0.17486287429194614, 0.17486287429194614, 0.17486287429194614, 0.17347779774561967, 0.17347779774561967, 0.17347779774561967, 0.17727003977858513, 0.17727003977858513, 0.17727003977858513, 0.0713998184003165, 0.0713998184003165, 0.0713998184003165, 0.0762661084493198, 0.0762661084493198, 0.0762661084493198, 0.08415257773381579, 0.08415257773381579, 0.08415257773381579]}, "mutation_prompt": null}
{"id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  # Added line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE synergy by introducing dimension-wise adaptive inertia weight for better balance.", "configspace": "", "generation": 51, "fitness": 0.26725252638042374, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "8422c71c-11a4-4eab-b397-bf4b66a341c8", "metadata": {"aucs": [0.770436170170237, 0.770436170170237, 0.770436170170237, 0.7564533449931781, 0.7564533449931781, 0.7564533449931781, 0.7626643017459818, 0.7626643017459818, 0.7626643017459818, 0.48269267849956, 0.48269267849956, 0.48269267849956, 0.47534364082842007, 0.47534364082842007, 0.47534364082842007, 0.4835218094124629, 0.4835218094124629, 0.4835218094124629, 0.129354987194231, 0.129354987194231, 0.129354987194231, 0.09980844423614876, 0.09980844423614876, 0.09980844423614876, 0.13931053613506517, 0.13931053613506517, 0.13931053613506517, 0.10656262983761322, 0.10656262983761322, 0.10656262983761322, 0.07943700646739438, 0.07943700646739438, 0.07943700646739438, 0.09355943270916045, 0.09355943270916045, 0.09355943270916045, 0.9293337518897272, 0.9293337518897272, 0.9293337518897272, 0.9455372965727629, 0.9455372965727629, 0.9455372965727629, 0.9474846687618191, 0.9474846687618191, 0.9474846687618191, 0.4276021916561431, 0.4276021916561431, 0.4276021916561431, 0.4056014359310979, 0.4056014359310979, 0.4056014359310979, 0.3891773232819168, 0.3891773232819168, 0.3891773232819168, 0.21874726935481348, 0.21874726935481348, 0.21874726935481348, 0.19068010826008286, 0.19068010826008286, 0.19068010826008286, 0.224685535980368, 0.224685535980368, 0.224685535980368, 0.16531663584902212, 0.16531663584902212, 0.16531663584902212, 0.14985930758679356, 0.14985930758679356, 0.14985930758679356, 0.12471644865661924, 0.12471644865661924, 0.12471644865661924, 0.20675397051151478, 0.20675397051151478, 0.20675397051151478, 0.17134259115025396, 0.17134259115025396, 0.17134259115025396, 0.18906450271512654, 0.18906450271512654, 0.18906450271512654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04949209086986173, 0.04949209086986173, 0.04949209086986173, 0.04425696797796608, 0.04425696797796608, 0.04425696797796608, 0.08106336618651167, 0.08106336618651167, 0.08106336618651167, 0.019229916755393983, 0.019229916755393983, 0.019229916755393983, 0.10125560462785943, 0.10125560462785943, 0.10125560462785943, 0.11603305954110987, 0.11603305954110987, 0.11603305954110987, 0.07955008372276606, 0.07955008372276606, 0.07955008372276606, 0.17049378163514572, 0.17049378163514572, 0.17049378163514572, 0.12083400558188473, 0.12083400558188473, 0.12083400558188473, 0.09624655396353154, 0.09624655396353154, 0.09624655396353154, 0.2729937720034349, 0.2729937720034349, 0.2729937720034349, 0.4760343416396441, 0.4760343416396441, 0.4760343416396441, 0.4831403131489723, 0.4831403131489723, 0.4831403131489723, 0.49488585949942465, 0.49488585949942465, 0.49488585949942465, 0.11418620881757635, 0.11418620881757635, 0.11418620881757635, 0.1325588323837763, 0.1325588323837763, 0.1325588323837763, 0.07123556914927065, 0.07123556914927065, 0.07123556914927065, 0.2641478652853396, 0.2641478652853396, 0.2641478652853396, 0.18933979452298377, 0.18933979452298377, 0.18933979452298377, 0.2989237412771546, 0.2989237412771546, 0.2989237412771546, 0.33235795606652063, 0.33235795606652063, 0.33235795606652063, 0.36442665033558697, 0.36442665033558697, 0.36442665033558697, 0.29747066157045454, 0.29747066157045454, 0.29747066157045454, 0.14303066926002284, 0.14303066926002284, 0.14303066926002284, 0.1753897145120027, 0.1753897145120027, 0.1753897145120027, 0.19190710461870408, 0.19190710461870408, 0.19190710461870408, 0.20756981663251184, 0.20756981663251184, 0.20756981663251184, 0.2632979077449844, 0.2632979077449844, 0.2632979077449844, 0.195716182049832, 0.195716182049832, 0.195716182049832, 0.19960005024693817, 0.19960005024693817, 0.19960005024693817, 0.21361626668293732, 0.21361626668293732, 0.21361626668293732, 0.18834335407540026, 0.18834335407540026, 0.18834335407540026, 0.7686617952083661, 0.7686617952083661, 0.7686617952083661, 0.15850888628935444, 0.15850888628935444, 0.15850888628935444, 0.16856496447286207, 0.16856496447286207, 0.16856496447286207, 0.46963662424742336, 0.46963662424742336, 0.46963662424742336, 0.20482410499092163, 0.20482410499092163, 0.20482410499092163, 0.15402070356535202, 0.15402070356535202, 0.15402070356535202, 0.18447418492995016, 0.18447418492995016, 0.18447418492995016, 0.18108885779331008, 0.18108885779331008, 0.18108885779331008, 0.17686777963552447, 0.17686777963552447, 0.17686777963552447, 0.08713248219827441, 0.08713248219827441, 0.08713248219827441, 0.08462970958946714, 0.08462970958946714, 0.08462970958946714, 0.08999572369668529, 0.08999572369668529, 0.08999572369668529]}, "mutation_prompt": null}
{"id": "b1540211-fa7b-4ae5-bdc2-3d4f72c7563c", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  # Added line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE synergy by introducing dimension-wise adaptive inertia weight for better balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "metadata": {"aucs": [0.770436170170237, 0.770436170170237, 0.770436170170237, 0.7564533449931781, 0.7564533449931781, 0.7564533449931781, 0.7626643017459818, 0.7626643017459818, 0.7626643017459818, 0.48269267849956, 0.48269267849956, 0.48269267849956, 0.47534364082842007, 0.47534364082842007, 0.47534364082842007, 0.4835218094124629, 0.4835218094124629, 0.4835218094124629, 0.129354987194231, 0.129354987194231, 0.129354987194231, 0.09980844423614876, 0.09980844423614876, 0.09980844423614876, 0.13931053613506517, 0.13931053613506517, 0.13931053613506517, 0.10656262983761322, 0.10656262983761322, 0.10656262983761322, 0.07943700646739438, 0.07943700646739438, 0.07943700646739438, 0.09355943270916045, 0.09355943270916045, 0.09355943270916045, 0.9293337518897272, 0.9293337518897272, 0.9293337518897272, 0.9455372965727629, 0.9455372965727629, 0.9455372965727629, 0.9474846687618191, 0.9474846687618191, 0.9474846687618191, 0.4276021916561431, 0.4276021916561431, 0.4276021916561431, 0.4056014359310979, 0.4056014359310979, 0.4056014359310979, 0.3891773232819168, 0.3891773232819168, 0.3891773232819168, 0.21874726935481348, 0.21874726935481348, 0.21874726935481348, 0.19068010826008286, 0.19068010826008286, 0.19068010826008286, 0.224685535980368, 0.224685535980368, 0.224685535980368, 0.16531663584902212, 0.16531663584902212, 0.16531663584902212, 0.14985930758679356, 0.14985930758679356, 0.14985930758679356, 0.12471644865661924, 0.12471644865661924, 0.12471644865661924, 0.20675397051151478, 0.20675397051151478, 0.20675397051151478, 0.17134259115025396, 0.17134259115025396, 0.17134259115025396, 0.18906450271512654, 0.18906450271512654, 0.18906450271512654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04949209086986173, 0.04949209086986173, 0.04949209086986173, 0.04425696797796608, 0.04425696797796608, 0.04425696797796608, 0.08106336618651167, 0.08106336618651167, 0.08106336618651167, 0.019229916755393983, 0.019229916755393983, 0.019229916755393983, 0.10125560462785943, 0.10125560462785943, 0.10125560462785943, 0.11603305954110987, 0.11603305954110987, 0.11603305954110987, 0.07955008372276606, 0.07955008372276606, 0.07955008372276606, 0.17049378163514572, 0.17049378163514572, 0.17049378163514572, 0.12083400558188473, 0.12083400558188473, 0.12083400558188473, 0.09624655396353154, 0.09624655396353154, 0.09624655396353154, 0.2729937720034349, 0.2729937720034349, 0.2729937720034349, 0.4760343416396441, 0.4760343416396441, 0.4760343416396441, 0.4831403131489723, 0.4831403131489723, 0.4831403131489723, 0.49488585949942465, 0.49488585949942465, 0.49488585949942465, 0.11418620881757635, 0.11418620881757635, 0.11418620881757635, 0.1325588323837763, 0.1325588323837763, 0.1325588323837763, 0.07123556914927065, 0.07123556914927065, 0.07123556914927065, 0.2641478652853396, 0.2641478652853396, 0.2641478652853396, 0.18933979452298377, 0.18933979452298377, 0.18933979452298377, 0.2989237412771546, 0.2989237412771546, 0.2989237412771546, 0.33235795606652063, 0.33235795606652063, 0.33235795606652063, 0.36442665033558697, 0.36442665033558697, 0.36442665033558697, 0.29747066157045454, 0.29747066157045454, 0.29747066157045454, 0.14303066926002284, 0.14303066926002284, 0.14303066926002284, 0.1753897145120027, 0.1753897145120027, 0.1753897145120027, 0.19190710461870408, 0.19190710461870408, 0.19190710461870408, 0.20756981663251184, 0.20756981663251184, 0.20756981663251184, 0.2632979077449844, 0.2632979077449844, 0.2632979077449844, 0.195716182049832, 0.195716182049832, 0.195716182049832, 0.19960005024693817, 0.19960005024693817, 0.19960005024693817, 0.21361626668293732, 0.21361626668293732, 0.21361626668293732, 0.18834335407540026, 0.18834335407540026, 0.18834335407540026, 0.7686617952083661, 0.7686617952083661, 0.7686617952083661, 0.15850888628935444, 0.15850888628935444, 0.15850888628935444, 0.16856496447286207, 0.16856496447286207, 0.16856496447286207, 0.46963662424742336, 0.46963662424742336, 0.46963662424742336, 0.20482410499092163, 0.20482410499092163, 0.20482410499092163, 0.15402070356535202, 0.15402070356535202, 0.15402070356535202, 0.18447418492995016, 0.18447418492995016, 0.18447418492995016, 0.18108885779331008, 0.18108885779331008, 0.18108885779331008, 0.17686777963552447, 0.17686777963552447, 0.17686777963552447, 0.08713248219827441, 0.08713248219827441, 0.08713248219827441, 0.08462970958946714, 0.08462970958946714, 0.08462970958946714, 0.08999572369668529, 0.08999572369668529, 0.08999572369668529]}, "mutation_prompt": null}
{"id": "4f1da1c0-4a25-4448-bef1-61b6810bf086", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  # Added line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE synergy by introducing dimension-wise adaptive inertia weight for better balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "metadata": {"aucs": [0.770436170170237, 0.770436170170237, 0.770436170170237, 0.7564533449931781, 0.7564533449931781, 0.7564533449931781, 0.7626643017459818, 0.7626643017459818, 0.7626643017459818, 0.48269267849956, 0.48269267849956, 0.48269267849956, 0.47534364082842007, 0.47534364082842007, 0.47534364082842007, 0.4835218094124629, 0.4835218094124629, 0.4835218094124629, 0.129354987194231, 0.129354987194231, 0.129354987194231, 0.09980844423614876, 0.09980844423614876, 0.09980844423614876, 0.13931053613506517, 0.13931053613506517, 0.13931053613506517, 0.10656262983761322, 0.10656262983761322, 0.10656262983761322, 0.07943700646739438, 0.07943700646739438, 0.07943700646739438, 0.09355943270916045, 0.09355943270916045, 0.09355943270916045, 0.9293337518897272, 0.9293337518897272, 0.9293337518897272, 0.9455372965727629, 0.9455372965727629, 0.9455372965727629, 0.9474846687618191, 0.9474846687618191, 0.9474846687618191, 0.4276021916561431, 0.4276021916561431, 0.4276021916561431, 0.4056014359310979, 0.4056014359310979, 0.4056014359310979, 0.3891773232819168, 0.3891773232819168, 0.3891773232819168, 0.21874726935481348, 0.21874726935481348, 0.21874726935481348, 0.19068010826008286, 0.19068010826008286, 0.19068010826008286, 0.224685535980368, 0.224685535980368, 0.224685535980368, 0.16531663584902212, 0.16531663584902212, 0.16531663584902212, 0.14985930758679356, 0.14985930758679356, 0.14985930758679356, 0.12471644865661924, 0.12471644865661924, 0.12471644865661924, 0.20675397051151478, 0.20675397051151478, 0.20675397051151478, 0.17134259115025396, 0.17134259115025396, 0.17134259115025396, 0.18906450271512654, 0.18906450271512654, 0.18906450271512654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04949209086986173, 0.04949209086986173, 0.04949209086986173, 0.04425696797796608, 0.04425696797796608, 0.04425696797796608, 0.08106336618651167, 0.08106336618651167, 0.08106336618651167, 0.019229916755393983, 0.019229916755393983, 0.019229916755393983, 0.10125560462785943, 0.10125560462785943, 0.10125560462785943, 0.11603305954110987, 0.11603305954110987, 0.11603305954110987, 0.07955008372276606, 0.07955008372276606, 0.07955008372276606, 0.17049378163514572, 0.17049378163514572, 0.17049378163514572, 0.12083400558188473, 0.12083400558188473, 0.12083400558188473, 0.09624655396353154, 0.09624655396353154, 0.09624655396353154, 0.2729937720034349, 0.2729937720034349, 0.2729937720034349, 0.4760343416396441, 0.4760343416396441, 0.4760343416396441, 0.4831403131489723, 0.4831403131489723, 0.4831403131489723, 0.49488585949942465, 0.49488585949942465, 0.49488585949942465, 0.11418620881757635, 0.11418620881757635, 0.11418620881757635, 0.1325588323837763, 0.1325588323837763, 0.1325588323837763, 0.07123556914927065, 0.07123556914927065, 0.07123556914927065, 0.2641478652853396, 0.2641478652853396, 0.2641478652853396, 0.18933979452298377, 0.18933979452298377, 0.18933979452298377, 0.2989237412771546, 0.2989237412771546, 0.2989237412771546, 0.33235795606652063, 0.33235795606652063, 0.33235795606652063, 0.36442665033558697, 0.36442665033558697, 0.36442665033558697, 0.29747066157045454, 0.29747066157045454, 0.29747066157045454, 0.14303066926002284, 0.14303066926002284, 0.14303066926002284, 0.1753897145120027, 0.1753897145120027, 0.1753897145120027, 0.19190710461870408, 0.19190710461870408, 0.19190710461870408, 0.20756981663251184, 0.20756981663251184, 0.20756981663251184, 0.2632979077449844, 0.2632979077449844, 0.2632979077449844, 0.195716182049832, 0.195716182049832, 0.195716182049832, 0.19960005024693817, 0.19960005024693817, 0.19960005024693817, 0.21361626668293732, 0.21361626668293732, 0.21361626668293732, 0.18834335407540026, 0.18834335407540026, 0.18834335407540026, 0.7686617952083661, 0.7686617952083661, 0.7686617952083661, 0.15850888628935444, 0.15850888628935444, 0.15850888628935444, 0.16856496447286207, 0.16856496447286207, 0.16856496447286207, 0.46963662424742336, 0.46963662424742336, 0.46963662424742336, 0.20482410499092163, 0.20482410499092163, 0.20482410499092163, 0.15402070356535202, 0.15402070356535202, 0.15402070356535202, 0.18447418492995016, 0.18447418492995016, 0.18447418492995016, 0.18108885779331008, 0.18108885779331008, 0.18108885779331008, 0.17686777963552447, 0.17686777963552447, 0.17686777963552447, 0.08713248219827441, 0.08713248219827441, 0.08713248219827441, 0.08462970958946714, 0.08462970958946714, 0.08462970958946714, 0.08999572369668529, 0.08999572369668529, 0.08999572369668529]}, "mutation_prompt": null}
{"id": "75a56f73-fb50-40a7-886d-59e253c729a1", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  # Added line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE synergy by introducing dimension-wise adaptive inertia weight for better balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "metadata": {"aucs": [0.770436170170237, 0.770436170170237, 0.770436170170237, 0.7564533449931781, 0.7564533449931781, 0.7564533449931781, 0.7626643017459818, 0.7626643017459818, 0.7626643017459818, 0.48269267849956, 0.48269267849956, 0.48269267849956, 0.47534364082842007, 0.47534364082842007, 0.47534364082842007, 0.4835218094124629, 0.4835218094124629, 0.4835218094124629, 0.129354987194231, 0.129354987194231, 0.129354987194231, 0.09980844423614876, 0.09980844423614876, 0.09980844423614876, 0.13931053613506517, 0.13931053613506517, 0.13931053613506517, 0.10656262983761322, 0.10656262983761322, 0.10656262983761322, 0.07943700646739438, 0.07943700646739438, 0.07943700646739438, 0.09355943270916045, 0.09355943270916045, 0.09355943270916045, 0.9293337518897272, 0.9293337518897272, 0.9293337518897272, 0.9455372965727629, 0.9455372965727629, 0.9455372965727629, 0.9474846687618191, 0.9474846687618191, 0.9474846687618191, 0.4276021916561431, 0.4276021916561431, 0.4276021916561431, 0.4056014359310979, 0.4056014359310979, 0.4056014359310979, 0.3891773232819168, 0.3891773232819168, 0.3891773232819168, 0.21874726935481348, 0.21874726935481348, 0.21874726935481348, 0.19068010826008286, 0.19068010826008286, 0.19068010826008286, 0.224685535980368, 0.224685535980368, 0.224685535980368, 0.16531663584902212, 0.16531663584902212, 0.16531663584902212, 0.14985930758679356, 0.14985930758679356, 0.14985930758679356, 0.12471644865661924, 0.12471644865661924, 0.12471644865661924, 0.20675397051151478, 0.20675397051151478, 0.20675397051151478, 0.17134259115025396, 0.17134259115025396, 0.17134259115025396, 0.18906450271512654, 0.18906450271512654, 0.18906450271512654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04949209086986173, 0.04949209086986173, 0.04949209086986173, 0.04425696797796608, 0.04425696797796608, 0.04425696797796608, 0.08106336618651167, 0.08106336618651167, 0.08106336618651167, 0.019229916755393983, 0.019229916755393983, 0.019229916755393983, 0.10125560462785943, 0.10125560462785943, 0.10125560462785943, 0.11603305954110987, 0.11603305954110987, 0.11603305954110987, 0.07955008372276606, 0.07955008372276606, 0.07955008372276606, 0.17049378163514572, 0.17049378163514572, 0.17049378163514572, 0.12083400558188473, 0.12083400558188473, 0.12083400558188473, 0.09624655396353154, 0.09624655396353154, 0.09624655396353154, 0.2729937720034349, 0.2729937720034349, 0.2729937720034349, 0.4760343416396441, 0.4760343416396441, 0.4760343416396441, 0.4831403131489723, 0.4831403131489723, 0.4831403131489723, 0.49488585949942465, 0.49488585949942465, 0.49488585949942465, 0.11418620881757635, 0.11418620881757635, 0.11418620881757635, 0.1325588323837763, 0.1325588323837763, 0.1325588323837763, 0.07123556914927065, 0.07123556914927065, 0.07123556914927065, 0.2641478652853396, 0.2641478652853396, 0.2641478652853396, 0.18933979452298377, 0.18933979452298377, 0.18933979452298377, 0.2989237412771546, 0.2989237412771546, 0.2989237412771546, 0.33235795606652063, 0.33235795606652063, 0.33235795606652063, 0.36442665033558697, 0.36442665033558697, 0.36442665033558697, 0.29747066157045454, 0.29747066157045454, 0.29747066157045454, 0.14303066926002284, 0.14303066926002284, 0.14303066926002284, 0.1753897145120027, 0.1753897145120027, 0.1753897145120027, 0.19190710461870408, 0.19190710461870408, 0.19190710461870408, 0.20756981663251184, 0.20756981663251184, 0.20756981663251184, 0.2632979077449844, 0.2632979077449844, 0.2632979077449844, 0.195716182049832, 0.195716182049832, 0.195716182049832, 0.19960005024693817, 0.19960005024693817, 0.19960005024693817, 0.21361626668293732, 0.21361626668293732, 0.21361626668293732, 0.18834335407540026, 0.18834335407540026, 0.18834335407540026, 0.7686617952083661, 0.7686617952083661, 0.7686617952083661, 0.15850888628935444, 0.15850888628935444, 0.15850888628935444, 0.16856496447286207, 0.16856496447286207, 0.16856496447286207, 0.46963662424742336, 0.46963662424742336, 0.46963662424742336, 0.20482410499092163, 0.20482410499092163, 0.20482410499092163, 0.15402070356535202, 0.15402070356535202, 0.15402070356535202, 0.18447418492995016, 0.18447418492995016, 0.18447418492995016, 0.18108885779331008, 0.18108885779331008, 0.18108885779331008, 0.17686777963552447, 0.17686777963552447, 0.17686777963552447, 0.08713248219827441, 0.08713248219827441, 0.08713248219827441, 0.08462970958946714, 0.08462970958946714, 0.08462970958946714, 0.08999572369668529, 0.08999572369668529, 0.08999572369668529]}, "mutation_prompt": null}
{"id": "7ad5f625-a6ba-4c01-b792-08e5d8813e53", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n        chaos_param = np.random.rand()  # Added line\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  \n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                chaos_param = 4 * chaos_param * (1 - chaos_param)  # Logistic map update, Added line\n                dynamic_f = self.f * (1 - evaluations / self.budget) * chaos_param  # Modified line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget) * chaos_param  # Modified line\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce chaotic maps for parameter adaptation to enhance exploration-exploitation balance in PSO-DE.", "configspace": "", "generation": 55, "fitness": 0.2597422745387915, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "metadata": {"aucs": [0.7335532446043639, 0.7335532446043639, 0.7335532446043639, 0.7418325682079666, 0.7418325682079666, 0.7418325682079666, 0.6982190950368341, 0.6982190950368341, 0.6982190950368341, 0.4292054479401676, 0.4292054479401676, 0.4292054479401676, 0.42888004723542705, 0.42888004723542705, 0.42888004723542705, 0.4453507918191736, 0.4453507918191736, 0.4453507918191736, 0.09170161290402812, 0.09170161290402812, 0.09170161290402812, 0.1027172687819119, 0.1027172687819119, 0.1027172687819119, 0.11435986242916696, 0.11435986242916696, 0.11435986242916696, 0.08819761321834452, 0.08819761321834452, 0.08819761321834452, 0.09521443800111995, 0.09521443800111995, 0.09521443800111995, 0.10057577422414687, 0.10057577422414687, 0.10057577422414687, 0.9596595776532921, 0.9596595776532921, 0.9596595776532921, 0.9595373586119352, 0.9595373586119352, 0.9595373586119352, 0.9560081090817246, 0.9560081090817246, 0.9560081090817246, 0.3860330528827519, 0.3860330528827519, 0.3860330528827519, 0.46659146989831446, 0.46659146989831446, 0.46659146989831446, 0.44415239858524747, 0.44415239858524747, 0.44415239858524747, 0.29255994820903475, 0.29255994820903475, 0.29255994820903475, 0.18990904599817504, 0.18990904599817504, 0.18990904599817504, 0.16995573375210826, 0.16995573375210826, 0.16995573375210826, 0.16555198715219344, 0.16555198715219344, 0.16555198715219344, 0.16588315922386387, 0.16588315922386387, 0.16588315922386387, 0.1523569140498373, 0.1523569140498373, 0.1523569140498373, 0.201702516342965, 0.201702516342965, 0.201702516342965, 0.12389707592926347, 0.12389707592926347, 0.12389707592926347, 0.2006086758322756, 0.2006086758322756, 0.2006086758322756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03166926220669375, 0.03166926220669375, 0.03166926220669375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12196404933007488, 0.12196404933007488, 0.12196404933007488, 0.04323156471481848, 0.04323156471481848, 0.04323156471481848, 0.11819984686047336, 0.11819984686047336, 0.11819984686047336, 0.09213100938579044, 0.09213100938579044, 0.09213100938579044, 0.1558593413292565, 0.1558593413292565, 0.1558593413292565, 0.11136737619380022, 0.11136737619380022, 0.11136737619380022, 0.2195052146558164, 0.2195052146558164, 0.2195052146558164, 0.0867986104148899, 0.0867986104148899, 0.0867986104148899, 0.14958393854031748, 0.14958393854031748, 0.14958393854031748, 0.49431058715450593, 0.49431058715450593, 0.49431058715450593, 0.5026859956733718, 0.5026859956733718, 0.5026859956733718, 0.4633187952126243, 0.4633187952126243, 0.4633187952126243, 0.1082029607374354, 0.1082029607374354, 0.1082029607374354, 0.09366587358077016, 0.09366587358077016, 0.09366587358077016, 0.1337475772191663, 0.1337475772191663, 0.1337475772191663, 0.17927095369028045, 0.17927095369028045, 0.17927095369028045, 0.17972515950022605, 0.17972515950022605, 0.17972515950022605, 0.2349096793094685, 0.2349096793094685, 0.2349096793094685, 0.30946442875384716, 0.30946442875384716, 0.30946442875384716, 0.33661768761350186, 0.33661768761350186, 0.33661768761350186, 0.34802653083070445, 0.34802653083070445, 0.34802653083070445, 0.20519925145807105, 0.20519925145807105, 0.20519925145807105, 0.16848037743884725, 0.16848037743884725, 0.16848037743884725, 0.21331524665656865, 0.21331524665656865, 0.21331524665656865, 0.21999834190342116, 0.21999834190342116, 0.21999834190342116, 0.23632512862107802, 0.23632512862107802, 0.23632512862107802, 0.21004368298139842, 0.21004368298139842, 0.21004368298139842, 0.17940186355751175, 0.17940186355751175, 0.17940186355751175, 0.17634887256374854, 0.17634887256374854, 0.17634887256374854, 0.2069838079848194, 0.2069838079848194, 0.2069838079848194, 0.7822224838113848, 0.7822224838113848, 0.7822224838113848, 0.156478039847455, 0.156478039847455, 0.156478039847455, 0.16830576877558323, 0.16830576877558323, 0.16830576877558323, 0.20684683430950868, 0.20684683430950868, 0.20684683430950868, 0.20289809373404089, 0.20289809373404089, 0.20289809373404089, 0.15329056698280907, 0.15329056698280907, 0.15329056698280907, 0.17899162667221447, 0.17899162667221447, 0.17899162667221447, 0.17423776527996504, 0.17423776527996504, 0.17423776527996504, 0.17813136533365437, 0.17813136533365437, 0.17813136533365437, 0.08165853577049531, 0.08165853577049531, 0.08165853577049531, 0.074809780956262, 0.074809780956262, 0.074809780956262, 0.10880510164068469, 0.10880510164068469, 0.10880510164068469]}, "mutation_prompt": null}
{"id": "1c719f1c-b1e9-4e22-a818-c9007255dbf2", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  # Added line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE synergy by introducing dimension-wise adaptive inertia weight for better balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "metadata": {"aucs": [0.770436170170237, 0.770436170170237, 0.770436170170237, 0.7564533449931781, 0.7564533449931781, 0.7564533449931781, 0.7626643017459818, 0.7626643017459818, 0.7626643017459818, 0.48269267849956, 0.48269267849956, 0.48269267849956, 0.47534364082842007, 0.47534364082842007, 0.47534364082842007, 0.4835218094124629, 0.4835218094124629, 0.4835218094124629, 0.129354987194231, 0.129354987194231, 0.129354987194231, 0.09980844423614876, 0.09980844423614876, 0.09980844423614876, 0.13931053613506517, 0.13931053613506517, 0.13931053613506517, 0.10656262983761322, 0.10656262983761322, 0.10656262983761322, 0.07943700646739438, 0.07943700646739438, 0.07943700646739438, 0.09355943270916045, 0.09355943270916045, 0.09355943270916045, 0.9293337518897272, 0.9293337518897272, 0.9293337518897272, 0.9455372965727629, 0.9455372965727629, 0.9455372965727629, 0.9474846687618191, 0.9474846687618191, 0.9474846687618191, 0.4276021916561431, 0.4276021916561431, 0.4276021916561431, 0.4056014359310979, 0.4056014359310979, 0.4056014359310979, 0.3891773232819168, 0.3891773232819168, 0.3891773232819168, 0.21874726935481348, 0.21874726935481348, 0.21874726935481348, 0.19068010826008286, 0.19068010826008286, 0.19068010826008286, 0.224685535980368, 0.224685535980368, 0.224685535980368, 0.16531663584902212, 0.16531663584902212, 0.16531663584902212, 0.14985930758679356, 0.14985930758679356, 0.14985930758679356, 0.12471644865661924, 0.12471644865661924, 0.12471644865661924, 0.20675397051151478, 0.20675397051151478, 0.20675397051151478, 0.17134259115025396, 0.17134259115025396, 0.17134259115025396, 0.18906450271512654, 0.18906450271512654, 0.18906450271512654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04949209086986173, 0.04949209086986173, 0.04949209086986173, 0.04425696797796608, 0.04425696797796608, 0.04425696797796608, 0.08106336618651167, 0.08106336618651167, 0.08106336618651167, 0.019229916755393983, 0.019229916755393983, 0.019229916755393983, 0.10125560462785943, 0.10125560462785943, 0.10125560462785943, 0.11603305954110987, 0.11603305954110987, 0.11603305954110987, 0.07955008372276606, 0.07955008372276606, 0.07955008372276606, 0.17049378163514572, 0.17049378163514572, 0.17049378163514572, 0.12083400558188473, 0.12083400558188473, 0.12083400558188473, 0.09624655396353154, 0.09624655396353154, 0.09624655396353154, 0.2729937720034349, 0.2729937720034349, 0.2729937720034349, 0.4760343416396441, 0.4760343416396441, 0.4760343416396441, 0.4831403131489723, 0.4831403131489723, 0.4831403131489723, 0.49488585949942465, 0.49488585949942465, 0.49488585949942465, 0.11418620881757635, 0.11418620881757635, 0.11418620881757635, 0.1325588323837763, 0.1325588323837763, 0.1325588323837763, 0.07123556914927065, 0.07123556914927065, 0.07123556914927065, 0.2641478652853396, 0.2641478652853396, 0.2641478652853396, 0.18933979452298377, 0.18933979452298377, 0.18933979452298377, 0.2989237412771546, 0.2989237412771546, 0.2989237412771546, 0.33235795606652063, 0.33235795606652063, 0.33235795606652063, 0.36442665033558697, 0.36442665033558697, 0.36442665033558697, 0.29747066157045454, 0.29747066157045454, 0.29747066157045454, 0.14303066926002284, 0.14303066926002284, 0.14303066926002284, 0.1753897145120027, 0.1753897145120027, 0.1753897145120027, 0.19190710461870408, 0.19190710461870408, 0.19190710461870408, 0.20756981663251184, 0.20756981663251184, 0.20756981663251184, 0.2632979077449844, 0.2632979077449844, 0.2632979077449844, 0.195716182049832, 0.195716182049832, 0.195716182049832, 0.19960005024693817, 0.19960005024693817, 0.19960005024693817, 0.21361626668293732, 0.21361626668293732, 0.21361626668293732, 0.18834335407540026, 0.18834335407540026, 0.18834335407540026, 0.7686617952083661, 0.7686617952083661, 0.7686617952083661, 0.15850888628935444, 0.15850888628935444, 0.15850888628935444, 0.16856496447286207, 0.16856496447286207, 0.16856496447286207, 0.46963662424742336, 0.46963662424742336, 0.46963662424742336, 0.20482410499092163, 0.20482410499092163, 0.20482410499092163, 0.15402070356535202, 0.15402070356535202, 0.15402070356535202, 0.18447418492995016, 0.18447418492995016, 0.18447418492995016, 0.18108885779331008, 0.18108885779331008, 0.18108885779331008, 0.17686777963552447, 0.17686777963552447, 0.17686777963552447, 0.08713248219827441, 0.08713248219827441, 0.08713248219827441, 0.08462970958946714, 0.08462970958946714, 0.08462970958946714, 0.08999572369668529, 0.08999572369668529, 0.08999572369668529]}, "mutation_prompt": null}
{"id": "2928f99f-ce01-4633-b0d0-5c311ea8c2b8", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  # Added line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE synergy by introducing dimension-wise adaptive inertia weight for better balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "metadata": {"aucs": [0.770436170170237, 0.770436170170237, 0.770436170170237, 0.7564533449931781, 0.7564533449931781, 0.7564533449931781, 0.7626643017459818, 0.7626643017459818, 0.7626643017459818, 0.48269267849956, 0.48269267849956, 0.48269267849956, 0.47534364082842007, 0.47534364082842007, 0.47534364082842007, 0.4835218094124629, 0.4835218094124629, 0.4835218094124629, 0.129354987194231, 0.129354987194231, 0.129354987194231, 0.09980844423614876, 0.09980844423614876, 0.09980844423614876, 0.13931053613506517, 0.13931053613506517, 0.13931053613506517, 0.10656262983761322, 0.10656262983761322, 0.10656262983761322, 0.07943700646739438, 0.07943700646739438, 0.07943700646739438, 0.09355943270916045, 0.09355943270916045, 0.09355943270916045, 0.9293337518897272, 0.9293337518897272, 0.9293337518897272, 0.9455372965727629, 0.9455372965727629, 0.9455372965727629, 0.9474846687618191, 0.9474846687618191, 0.9474846687618191, 0.4276021916561431, 0.4276021916561431, 0.4276021916561431, 0.4056014359310979, 0.4056014359310979, 0.4056014359310979, 0.3891773232819168, 0.3891773232819168, 0.3891773232819168, 0.21874726935481348, 0.21874726935481348, 0.21874726935481348, 0.19068010826008286, 0.19068010826008286, 0.19068010826008286, 0.224685535980368, 0.224685535980368, 0.224685535980368, 0.16531663584902212, 0.16531663584902212, 0.16531663584902212, 0.14985930758679356, 0.14985930758679356, 0.14985930758679356, 0.12471644865661924, 0.12471644865661924, 0.12471644865661924, 0.20675397051151478, 0.20675397051151478, 0.20675397051151478, 0.17134259115025396, 0.17134259115025396, 0.17134259115025396, 0.18906450271512654, 0.18906450271512654, 0.18906450271512654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04949209086986173, 0.04949209086986173, 0.04949209086986173, 0.04425696797796608, 0.04425696797796608, 0.04425696797796608, 0.08106336618651167, 0.08106336618651167, 0.08106336618651167, 0.019229916755393983, 0.019229916755393983, 0.019229916755393983, 0.10125560462785943, 0.10125560462785943, 0.10125560462785943, 0.11603305954110987, 0.11603305954110987, 0.11603305954110987, 0.07955008372276606, 0.07955008372276606, 0.07955008372276606, 0.17049378163514572, 0.17049378163514572, 0.17049378163514572, 0.12083400558188473, 0.12083400558188473, 0.12083400558188473, 0.09624655396353154, 0.09624655396353154, 0.09624655396353154, 0.2729937720034349, 0.2729937720034349, 0.2729937720034349, 0.4760343416396441, 0.4760343416396441, 0.4760343416396441, 0.4831403131489723, 0.4831403131489723, 0.4831403131489723, 0.49488585949942465, 0.49488585949942465, 0.49488585949942465, 0.11418620881757635, 0.11418620881757635, 0.11418620881757635, 0.1325588323837763, 0.1325588323837763, 0.1325588323837763, 0.07123556914927065, 0.07123556914927065, 0.07123556914927065, 0.2641478652853396, 0.2641478652853396, 0.2641478652853396, 0.18933979452298377, 0.18933979452298377, 0.18933979452298377, 0.2989237412771546, 0.2989237412771546, 0.2989237412771546, 0.33235795606652063, 0.33235795606652063, 0.33235795606652063, 0.36442665033558697, 0.36442665033558697, 0.36442665033558697, 0.29747066157045454, 0.29747066157045454, 0.29747066157045454, 0.14303066926002284, 0.14303066926002284, 0.14303066926002284, 0.1753897145120027, 0.1753897145120027, 0.1753897145120027, 0.19190710461870408, 0.19190710461870408, 0.19190710461870408, 0.20756981663251184, 0.20756981663251184, 0.20756981663251184, 0.2632979077449844, 0.2632979077449844, 0.2632979077449844, 0.195716182049832, 0.195716182049832, 0.195716182049832, 0.19960005024693817, 0.19960005024693817, 0.19960005024693817, 0.21361626668293732, 0.21361626668293732, 0.21361626668293732, 0.18834335407540026, 0.18834335407540026, 0.18834335407540026, 0.7686617952083661, 0.7686617952083661, 0.7686617952083661, 0.15850888628935444, 0.15850888628935444, 0.15850888628935444, 0.16856496447286207, 0.16856496447286207, 0.16856496447286207, 0.46963662424742336, 0.46963662424742336, 0.46963662424742336, 0.20482410499092163, 0.20482410499092163, 0.20482410499092163, 0.15402070356535202, 0.15402070356535202, 0.15402070356535202, 0.18447418492995016, 0.18447418492995016, 0.18447418492995016, 0.18108885779331008, 0.18108885779331008, 0.18108885779331008, 0.17686777963552447, 0.17686777963552447, 0.17686777963552447, 0.08713248219827441, 0.08713248219827441, 0.08713248219827441, 0.08462970958946714, 0.08462970958946714, 0.08462970958946714, 0.08999572369668529, 0.08999572369668529, 0.08999572369668529]}, "mutation_prompt": null}
{"id": "dc85579f-ebd4-4dde-bbe8-d010ec516d63", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  # Added line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE synergy by introducing dimension-wise adaptive inertia weight for better balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "metadata": {"aucs": [0.770436170170237, 0.770436170170237, 0.770436170170237, 0.7564533449931781, 0.7564533449931781, 0.7564533449931781, 0.7626643017459818, 0.7626643017459818, 0.7626643017459818, 0.48269267849956, 0.48269267849956, 0.48269267849956, 0.47534364082842007, 0.47534364082842007, 0.47534364082842007, 0.4835218094124629, 0.4835218094124629, 0.4835218094124629, 0.129354987194231, 0.129354987194231, 0.129354987194231, 0.09980844423614876, 0.09980844423614876, 0.09980844423614876, 0.13931053613506517, 0.13931053613506517, 0.13931053613506517, 0.10656262983761322, 0.10656262983761322, 0.10656262983761322, 0.07943700646739438, 0.07943700646739438, 0.07943700646739438, 0.09355943270916045, 0.09355943270916045, 0.09355943270916045, 0.9293337518897272, 0.9293337518897272, 0.9293337518897272, 0.9455372965727629, 0.9455372965727629, 0.9455372965727629, 0.9474846687618191, 0.9474846687618191, 0.9474846687618191, 0.4276021916561431, 0.4276021916561431, 0.4276021916561431, 0.4056014359310979, 0.4056014359310979, 0.4056014359310979, 0.3891773232819168, 0.3891773232819168, 0.3891773232819168, 0.21874726935481348, 0.21874726935481348, 0.21874726935481348, 0.19068010826008286, 0.19068010826008286, 0.19068010826008286, 0.224685535980368, 0.224685535980368, 0.224685535980368, 0.16531663584902212, 0.16531663584902212, 0.16531663584902212, 0.14985930758679356, 0.14985930758679356, 0.14985930758679356, 0.12471644865661924, 0.12471644865661924, 0.12471644865661924, 0.20675397051151478, 0.20675397051151478, 0.20675397051151478, 0.17134259115025396, 0.17134259115025396, 0.17134259115025396, 0.18906450271512654, 0.18906450271512654, 0.18906450271512654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04949209086986173, 0.04949209086986173, 0.04949209086986173, 0.04425696797796608, 0.04425696797796608, 0.04425696797796608, 0.08106336618651167, 0.08106336618651167, 0.08106336618651167, 0.019229916755393983, 0.019229916755393983, 0.019229916755393983, 0.10125560462785943, 0.10125560462785943, 0.10125560462785943, 0.11603305954110987, 0.11603305954110987, 0.11603305954110987, 0.07955008372276606, 0.07955008372276606, 0.07955008372276606, 0.17049378163514572, 0.17049378163514572, 0.17049378163514572, 0.12083400558188473, 0.12083400558188473, 0.12083400558188473, 0.09624655396353154, 0.09624655396353154, 0.09624655396353154, 0.2729937720034349, 0.2729937720034349, 0.2729937720034349, 0.4760343416396441, 0.4760343416396441, 0.4760343416396441, 0.4831403131489723, 0.4831403131489723, 0.4831403131489723, 0.49488585949942465, 0.49488585949942465, 0.49488585949942465, 0.11418620881757635, 0.11418620881757635, 0.11418620881757635, 0.1325588323837763, 0.1325588323837763, 0.1325588323837763, 0.07123556914927065, 0.07123556914927065, 0.07123556914927065, 0.2641478652853396, 0.2641478652853396, 0.2641478652853396, 0.18933979452298377, 0.18933979452298377, 0.18933979452298377, 0.2989237412771546, 0.2989237412771546, 0.2989237412771546, 0.33235795606652063, 0.33235795606652063, 0.33235795606652063, 0.36442665033558697, 0.36442665033558697, 0.36442665033558697, 0.29747066157045454, 0.29747066157045454, 0.29747066157045454, 0.14303066926002284, 0.14303066926002284, 0.14303066926002284, 0.1753897145120027, 0.1753897145120027, 0.1753897145120027, 0.19190710461870408, 0.19190710461870408, 0.19190710461870408, 0.20756981663251184, 0.20756981663251184, 0.20756981663251184, 0.2632979077449844, 0.2632979077449844, 0.2632979077449844, 0.195716182049832, 0.195716182049832, 0.195716182049832, 0.19960005024693817, 0.19960005024693817, 0.19960005024693817, 0.21361626668293732, 0.21361626668293732, 0.21361626668293732, 0.18834335407540026, 0.18834335407540026, 0.18834335407540026, 0.7686617952083661, 0.7686617952083661, 0.7686617952083661, 0.15850888628935444, 0.15850888628935444, 0.15850888628935444, 0.16856496447286207, 0.16856496447286207, 0.16856496447286207, 0.46963662424742336, 0.46963662424742336, 0.46963662424742336, 0.20482410499092163, 0.20482410499092163, 0.20482410499092163, 0.15402070356535202, 0.15402070356535202, 0.15402070356535202, 0.18447418492995016, 0.18447418492995016, 0.18447418492995016, 0.18108885779331008, 0.18108885779331008, 0.18108885779331008, 0.17686777963552447, 0.17686777963552447, 0.17686777963552447, 0.08713248219827441, 0.08713248219827441, 0.08713248219827441, 0.08462970958946714, 0.08462970958946714, 0.08462970958946714, 0.08999572369668529, 0.08999572369668529, 0.08999572369668529]}, "mutation_prompt": null}
{"id": "52cea539-2e45-40b8-8d42-2127b14df85a", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  # Added line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE synergy by introducing dimension-wise adaptive inertia weight for better balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "metadata": {"aucs": [0.770436170170237, 0.770436170170237, 0.770436170170237, 0.7564533449931781, 0.7564533449931781, 0.7564533449931781, 0.7626643017459818, 0.7626643017459818, 0.7626643017459818, 0.48269267849956, 0.48269267849956, 0.48269267849956, 0.47534364082842007, 0.47534364082842007, 0.47534364082842007, 0.4835218094124629, 0.4835218094124629, 0.4835218094124629, 0.129354987194231, 0.129354987194231, 0.129354987194231, 0.09980844423614876, 0.09980844423614876, 0.09980844423614876, 0.13931053613506517, 0.13931053613506517, 0.13931053613506517, 0.10656262983761322, 0.10656262983761322, 0.10656262983761322, 0.07943700646739438, 0.07943700646739438, 0.07943700646739438, 0.09355943270916045, 0.09355943270916045, 0.09355943270916045, 0.9293337518897272, 0.9293337518897272, 0.9293337518897272, 0.9455372965727629, 0.9455372965727629, 0.9455372965727629, 0.9474846687618191, 0.9474846687618191, 0.9474846687618191, 0.4276021916561431, 0.4276021916561431, 0.4276021916561431, 0.4056014359310979, 0.4056014359310979, 0.4056014359310979, 0.3891773232819168, 0.3891773232819168, 0.3891773232819168, 0.21874726935481348, 0.21874726935481348, 0.21874726935481348, 0.19068010826008286, 0.19068010826008286, 0.19068010826008286, 0.224685535980368, 0.224685535980368, 0.224685535980368, 0.16531663584902212, 0.16531663584902212, 0.16531663584902212, 0.14985930758679356, 0.14985930758679356, 0.14985930758679356, 0.12471644865661924, 0.12471644865661924, 0.12471644865661924, 0.20675397051151478, 0.20675397051151478, 0.20675397051151478, 0.17134259115025396, 0.17134259115025396, 0.17134259115025396, 0.18906450271512654, 0.18906450271512654, 0.18906450271512654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04949209086986173, 0.04949209086986173, 0.04949209086986173, 0.04425696797796608, 0.04425696797796608, 0.04425696797796608, 0.08106336618651167, 0.08106336618651167, 0.08106336618651167, 0.019229916755393983, 0.019229916755393983, 0.019229916755393983, 0.10125560462785943, 0.10125560462785943, 0.10125560462785943, 0.11603305954110987, 0.11603305954110987, 0.11603305954110987, 0.07955008372276606, 0.07955008372276606, 0.07955008372276606, 0.17049378163514572, 0.17049378163514572, 0.17049378163514572, 0.12083400558188473, 0.12083400558188473, 0.12083400558188473, 0.09624655396353154, 0.09624655396353154, 0.09624655396353154, 0.2729937720034349, 0.2729937720034349, 0.2729937720034349, 0.4760343416396441, 0.4760343416396441, 0.4760343416396441, 0.4831403131489723, 0.4831403131489723, 0.4831403131489723, 0.49488585949942465, 0.49488585949942465, 0.49488585949942465, 0.11418620881757635, 0.11418620881757635, 0.11418620881757635, 0.1325588323837763, 0.1325588323837763, 0.1325588323837763, 0.07123556914927065, 0.07123556914927065, 0.07123556914927065, 0.2641478652853396, 0.2641478652853396, 0.2641478652853396, 0.18933979452298377, 0.18933979452298377, 0.18933979452298377, 0.2989237412771546, 0.2989237412771546, 0.2989237412771546, 0.33235795606652063, 0.33235795606652063, 0.33235795606652063, 0.36442665033558697, 0.36442665033558697, 0.36442665033558697, 0.29747066157045454, 0.29747066157045454, 0.29747066157045454, 0.14303066926002284, 0.14303066926002284, 0.14303066926002284, 0.1753897145120027, 0.1753897145120027, 0.1753897145120027, 0.19190710461870408, 0.19190710461870408, 0.19190710461870408, 0.20756981663251184, 0.20756981663251184, 0.20756981663251184, 0.2632979077449844, 0.2632979077449844, 0.2632979077449844, 0.195716182049832, 0.195716182049832, 0.195716182049832, 0.19960005024693817, 0.19960005024693817, 0.19960005024693817, 0.21361626668293732, 0.21361626668293732, 0.21361626668293732, 0.18834335407540026, 0.18834335407540026, 0.18834335407540026, 0.7686617952083661, 0.7686617952083661, 0.7686617952083661, 0.15850888628935444, 0.15850888628935444, 0.15850888628935444, 0.16856496447286207, 0.16856496447286207, 0.16856496447286207, 0.46963662424742336, 0.46963662424742336, 0.46963662424742336, 0.20482410499092163, 0.20482410499092163, 0.20482410499092163, 0.15402070356535202, 0.15402070356535202, 0.15402070356535202, 0.18447418492995016, 0.18447418492995016, 0.18447418492995016, 0.18108885779331008, 0.18108885779331008, 0.18108885779331008, 0.17686777963552447, 0.17686777963552447, 0.17686777963552447, 0.08713248219827441, 0.08713248219827441, 0.08713248219827441, 0.08462970958946714, 0.08462970958946714, 0.08462970958946714, 0.08999572369668529, 0.08999572369668529, 0.08999572369668529]}, "mutation_prompt": null}
{"id": "d9ac0f5c-035a-42ff-b998-e661280e6dfe", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  # Added line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1, self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE synergy by introducing dimension-wise adaptive inertia weight for better balance.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "metadata": {"aucs": [0.770436170170237, 0.770436170170237, 0.770436170170237, 0.7564533449931781, 0.7564533449931781, 0.7564533449931781, 0.7626643017459818, 0.7626643017459818, 0.7626643017459818, 0.48269267849956, 0.48269267849956, 0.48269267849956, 0.47534364082842007, 0.47534364082842007, 0.47534364082842007, 0.4835218094124629, 0.4835218094124629, 0.4835218094124629, 0.129354987194231, 0.129354987194231, 0.129354987194231, 0.09980844423614876, 0.09980844423614876, 0.09980844423614876, 0.13931053613506517, 0.13931053613506517, 0.13931053613506517, 0.10656262983761322, 0.10656262983761322, 0.10656262983761322, 0.07943700646739438, 0.07943700646739438, 0.07943700646739438, 0.09355943270916045, 0.09355943270916045, 0.09355943270916045, 0.9293337518897272, 0.9293337518897272, 0.9293337518897272, 0.9455372965727629, 0.9455372965727629, 0.9455372965727629, 0.9474846687618191, 0.9474846687618191, 0.9474846687618191, 0.4276021916561431, 0.4276021916561431, 0.4276021916561431, 0.4056014359310979, 0.4056014359310979, 0.4056014359310979, 0.3891773232819168, 0.3891773232819168, 0.3891773232819168, 0.21874726935481348, 0.21874726935481348, 0.21874726935481348, 0.19068010826008286, 0.19068010826008286, 0.19068010826008286, 0.224685535980368, 0.224685535980368, 0.224685535980368, 0.16531663584902212, 0.16531663584902212, 0.16531663584902212, 0.14985930758679356, 0.14985930758679356, 0.14985930758679356, 0.12471644865661924, 0.12471644865661924, 0.12471644865661924, 0.20675397051151478, 0.20675397051151478, 0.20675397051151478, 0.17134259115025396, 0.17134259115025396, 0.17134259115025396, 0.18906450271512654, 0.18906450271512654, 0.18906450271512654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04949209086986173, 0.04949209086986173, 0.04949209086986173, 0.04425696797796608, 0.04425696797796608, 0.04425696797796608, 0.08106336618651167, 0.08106336618651167, 0.08106336618651167, 0.019229916755393983, 0.019229916755393983, 0.019229916755393983, 0.10125560462785943, 0.10125560462785943, 0.10125560462785943, 0.11603305954110987, 0.11603305954110987, 0.11603305954110987, 0.07955008372276606, 0.07955008372276606, 0.07955008372276606, 0.17049378163514572, 0.17049378163514572, 0.17049378163514572, 0.12083400558188473, 0.12083400558188473, 0.12083400558188473, 0.09624655396353154, 0.09624655396353154, 0.09624655396353154, 0.2729937720034349, 0.2729937720034349, 0.2729937720034349, 0.4760343416396441, 0.4760343416396441, 0.4760343416396441, 0.4831403131489723, 0.4831403131489723, 0.4831403131489723, 0.49488585949942465, 0.49488585949942465, 0.49488585949942465, 0.11418620881757635, 0.11418620881757635, 0.11418620881757635, 0.1325588323837763, 0.1325588323837763, 0.1325588323837763, 0.07123556914927065, 0.07123556914927065, 0.07123556914927065, 0.2641478652853396, 0.2641478652853396, 0.2641478652853396, 0.18933979452298377, 0.18933979452298377, 0.18933979452298377, 0.2989237412771546, 0.2989237412771546, 0.2989237412771546, 0.33235795606652063, 0.33235795606652063, 0.33235795606652063, 0.36442665033558697, 0.36442665033558697, 0.36442665033558697, 0.29747066157045454, 0.29747066157045454, 0.29747066157045454, 0.14303066926002284, 0.14303066926002284, 0.14303066926002284, 0.1753897145120027, 0.1753897145120027, 0.1753897145120027, 0.19190710461870408, 0.19190710461870408, 0.19190710461870408, 0.20756981663251184, 0.20756981663251184, 0.20756981663251184, 0.2632979077449844, 0.2632979077449844, 0.2632979077449844, 0.195716182049832, 0.195716182049832, 0.195716182049832, 0.19960005024693817, 0.19960005024693817, 0.19960005024693817, 0.21361626668293732, 0.21361626668293732, 0.21361626668293732, 0.18834335407540026, 0.18834335407540026, 0.18834335407540026, 0.7686617952083661, 0.7686617952083661, 0.7686617952083661, 0.15850888628935444, 0.15850888628935444, 0.15850888628935444, 0.16856496447286207, 0.16856496447286207, 0.16856496447286207, 0.46963662424742336, 0.46963662424742336, 0.46963662424742336, 0.20482410499092163, 0.20482410499092163, 0.20482410499092163, 0.15402070356535202, 0.15402070356535202, 0.15402070356535202, 0.18447418492995016, 0.18447418492995016, 0.18447418492995016, 0.18108885779331008, 0.18108885779331008, 0.18108885779331008, 0.17686777963552447, 0.17686777963552447, 0.17686777963552447, 0.08713248219827441, 0.08713248219827441, 0.08713248219827441, 0.08462970958946714, 0.08462970958946714, 0.08462970958946714, 0.08999572369668529, 0.08999572369668529, 0.08999572369668529]}, "mutation_prompt": null}
{"id": "f24fd7c8-f50e-4df5-8c6a-170bc5bada8d", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)  # Changed line\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                social_velocity = self.social_component * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight  # Added line\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +  # Original line\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)  # Changed line\n                dynamic_f = self.f * (1 - evaluations / self.budget)  # Changed line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE synergy by introducing adaptive Gaussian mutation factor for better exploration.", "configspace": "", "generation": 61, "fitness": 0.26799963765398666, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "6ab18f6d-e036-4cce-b183-ebc44d29c929", "metadata": {"aucs": [0.7396861201024281, 0.7396861201024281, 0.7396861201024281, 0.7161055583525496, 0.7161055583525496, 0.7161055583525496, 0.7627784815733268, 0.7627784815733268, 0.7627784815733268, 0.5612497800643124, 0.5612497800643124, 0.5612497800643124, 0.5190835630787463, 0.5190835630787463, 0.5190835630787463, 0.4735162205582586, 0.4735162205582586, 0.4735162205582586, 0.13261589575117705, 0.13261589575117705, 0.13261589575117705, 0.08737646073260552, 0.08737646073260552, 0.08737646073260552, 0.12865101010239655, 0.12865101010239655, 0.12865101010239655, 0.1226206167552999, 0.1226206167552999, 0.1226206167552999, 0.09628142771489134, 0.09628142771489134, 0.09628142771489134, 0.08448757938279527, 0.08448757938279527, 0.08448757938279527, 0.9293260507757356, 0.9293260507757356, 0.9293260507757356, 0.9455358348043901, 0.9455358348043901, 0.9455358348043901, 0.9474592702341604, 0.9474592702341604, 0.9474592702341604, 0.39631544425266285, 0.39631544425266285, 0.39631544425266285, 0.30257557491077613, 0.30257557491077613, 0.30257557491077613, 0.3924117321183742, 0.3924117321183742, 0.3924117321183742, 0.13620573168425631, 0.13620573168425631, 0.13620573168425631, 0.1909224085328075, 0.1909224085328075, 0.1909224085328075, 0.3301131999150133, 0.3301131999150133, 0.3301131999150133, 0.1624443366620879, 0.1624443366620879, 0.1624443366620879, 0.14381668428891625, 0.14381668428891625, 0.14381668428891625, 0.12329634810476386, 0.12329634810476386, 0.12329634810476386, 0.11717853239771847, 0.11717853239771847, 0.11717853239771847, 0.18796687887876018, 0.18796687887876018, 0.18796687887876018, 0.18474816930279792, 0.18474816930279792, 0.18474816930279792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034277864923823786, 0.034277864923823786, 0.034277864923823786, 0.004962934131433783, 0.004962934131433783, 0.004962934131433783, 0.09556747660888287, 0.09556747660888287, 0.09556747660888287, 0.019460831548279933, 0.019460831548279933, 0.019460831548279933, 0.10368387074615404, 0.10368387074615404, 0.10368387074615404, 0.12644560645519431, 0.12644560645519431, 0.12644560645519431, 0.08218260859371818, 0.08218260859371818, 0.08218260859371818, 0.12109658418116165, 0.12109658418116165, 0.12109658418116165, 0.12066538491260637, 0.12066538491260637, 0.12066538491260637, 0.09265178365044413, 0.09265178365044413, 0.09265178365044413, 0.2222836768044676, 0.2222836768044676, 0.2222836768044676, 0.46236099497050454, 0.46236099497050454, 0.46236099497050454, 0.4846493815404693, 0.4846493815404693, 0.4846493815404693, 0.5242054911737771, 0.5242054911737771, 0.5242054911737771, 0.13182474792801857, 0.13182474792801857, 0.13182474792801857, 0.09415431821347064, 0.09415431821347064, 0.09415431821347064, 0.07164623125394032, 0.07164623125394032, 0.07164623125394032, 0.21458142725402973, 0.21458142725402973, 0.21458142725402973, 0.21576753575953211, 0.21576753575953211, 0.21576753575953211, 0.30290087014184497, 0.30290087014184497, 0.30290087014184497, 0.34988565451467113, 0.34988565451467113, 0.34988565451467113, 0.3811785599142209, 0.3811785599142209, 0.3811785599142209, 0.4067601867269124, 0.4067601867269124, 0.4067601867269124, 0.15528115169711632, 0.15528115169711632, 0.15528115169711632, 0.18975262142164473, 0.18975262142164473, 0.18975262142164473, 0.17926037342554613, 0.17926037342554613, 0.17926037342554613, 0.20263145868954346, 0.20263145868954346, 0.20263145868954346, 0.2338833473951213, 0.2338833473951213, 0.2338833473951213, 0.2430036268943654, 0.2430036268943654, 0.2430036268943654, 0.19324012663055912, 0.19324012663055912, 0.19324012663055912, 0.20917995846757642, 0.20917995846757642, 0.20917995846757642, 0.20058993298253835, 0.20058993298253835, 0.20058993298253835, 0.7891600360857747, 0.7891600360857747, 0.7891600360857747, 0.15874655563741236, 0.15874655563741236, 0.15874655563741236, 0.16857593050597175, 0.16857593050597175, 0.16857593050597175, 0.6454032986020435, 0.6454032986020435, 0.6454032986020435, 0.2046667378007062, 0.2046667378007062, 0.2046667378007062, 0.15403885436537001, 0.15403885436537001, 0.15403885436537001, 0.1722345834255632, 0.1722345834255632, 0.1722345834255632, 0.17800665395250703, 0.17800665395250703, 0.17800665395250703, 0.17071795198151285, 0.17071795198151285, 0.17071795198151285, 0.08256034712038696, 0.08256034712038696, 0.08256034712038696, 0.08366592659301841, 0.08366592659301841, 0.08366592659301841, 0.10331150443319637, 0.10331150443319637, 0.10331150443319637]}, "mutation_prompt": null}
{"id": "761dc929-a363-47a8-9931-3b7468bd34f5", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                # Changed line: Introduce adaptive social component\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce an adaptive social component in PSO to improve convergence speed.", "configspace": "", "generation": 62, "fitness": 0.27527929283153446, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "f24fd7c8-f50e-4df5-8c6a-170bc5bada8d", "metadata": {"aucs": [0.7807392400433681, 0.7807392400433681, 0.7807392400433681, 0.7831518993323534, 0.7831518993323534, 0.7831518993323534, 0.780637393966667, 0.780637393966667, 0.780637393966667, 0.5485897098418366, 0.5485897098418366, 0.5485897098418366, 0.45407382190825185, 0.45407382190825185, 0.45407382190825185, 0.5011899159789144, 0.5011899159789144, 0.5011899159789144, 0.11499601897944323, 0.11499601897944323, 0.11499601897944323, 0.12104702636722575, 0.12104702636722575, 0.12104702636722575, 0.11216390567264822, 0.11216390567264822, 0.11216390567264822, 0.09902731655630526, 0.09902731655630526, 0.09902731655630526, 0.07842352768913785, 0.07842352768913785, 0.07842352768913785, 0.08238763760435919, 0.08238763760435919, 0.08238763760435919, 0.92894711431897, 0.92894711431897, 0.92894711431897, 0.9454591239448847, 0.9454591239448847, 0.9454591239448847, 0.9474437437647353, 0.9474437437647353, 0.9474437437647353, 0.4624799984937561, 0.4624799984937561, 0.4624799984937561, 0.37094271945023816, 0.37094271945023816, 0.37094271945023816, 0.5135685850991699, 0.5135685850991699, 0.5135685850991699, 0.6224317925799234, 0.6224317925799234, 0.6224317925799234, 0.19101488161032987, 0.19101488161032987, 0.19101488161032987, 0.3131534881532222, 0.3131534881532222, 0.3131534881532222, 0.18151537377902938, 0.18151537377902938, 0.18151537377902938, 0.14429469973384002, 0.14429469973384002, 0.14429469973384002, 0.16755937511930097, 0.16755937511930097, 0.16755937511930097, 0.20095944077521122, 0.20095944077521122, 0.20095944077521122, 0.17399183542583907, 0.17399183542583907, 0.17399183542583907, 0.2146570648009123, 0.2146570648009123, 0.2146570648009123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033901476146178555, 0.033901476146178555, 0.033901476146178555, 0.013444924584019802, 0.013444924584019802, 0.013444924584019802, 0.08972468619062546, 0.08972468619062546, 0.08972468619062546, 0.027975012274370936, 0.027975012274370936, 0.027975012274370936, 0.0741523318674352, 0.0741523318674352, 0.0741523318674352, 0.09986615740044513, 0.09986615740044513, 0.09986615740044513, 0.08055396782630508, 0.08055396782630508, 0.08055396782630508, 0.1309853728192929, 0.1309853728192929, 0.1309853728192929, 0.10815121823708163, 0.10815121823708163, 0.10815121823708163, 0.05586746798838227, 0.05586746798838227, 0.05586746798838227, 0.08989169976567901, 0.08989169976567901, 0.08989169976567901, 0.49271656651787, 0.49271656651787, 0.49271656651787, 0.5235906034380118, 0.5235906034380118, 0.5235906034380118, 0.4941708464823861, 0.4941708464823861, 0.4941708464823861, 0.09670549067473089, 0.09670549067473089, 0.09670549067473089, 0.08820369230144265, 0.08820369230144265, 0.08820369230144265, 0.12748670618591063, 0.12748670618591063, 0.12748670618591063, 0.27903251224854575, 0.27903251224854575, 0.27903251224854575, 0.17511101509537985, 0.17511101509537985, 0.17511101509537985, 0.30439801212362805, 0.30439801212362805, 0.30439801212362805, 0.4329508926740976, 0.4329508926740976, 0.4329508926740976, 0.35714983817245505, 0.35714983817245505, 0.35714983817245505, 0.24400852808689533, 0.24400852808689533, 0.24400852808689533, 0.13590755265684407, 0.13590755265684407, 0.13590755265684407, 0.19504078740223552, 0.19504078740223552, 0.19504078740223552, 0.16576731658224564, 0.16576731658224564, 0.16576731658224564, 0.2092147768696776, 0.2092147768696776, 0.2092147768696776, 0.24094673509439024, 0.24094673509439024, 0.24094673509439024, 0.1904415974389676, 0.1904415974389676, 0.1904415974389676, 0.18091275625324532, 0.18091275625324532, 0.18091275625324532, 0.21309320226722994, 0.21309320226722994, 0.21309320226722994, 0.19273202469616812, 0.19273202469616812, 0.19273202469616812, 0.8265184485923367, 0.8265184485923367, 0.8265184485923367, 0.15884534742981615, 0.15884534742981615, 0.15884534742981615, 0.1685288836863198, 0.1685288836863198, 0.1685288836863198, 0.4893047191676556, 0.4893047191676556, 0.4893047191676556, 0.20423185255412413, 0.20423185255412413, 0.20423185255412413, 0.15448304778209077, 0.15448304778209077, 0.15448304778209077, 0.18615209442064273, 0.18615209442064273, 0.18615209442064273, 0.19487719993374042, 0.19487719993374042, 0.19487719993374042, 0.19504586928468604, 0.19504586928468604, 0.19504586928468604, 0.08134616261076644, 0.08134616261076644, 0.08134616261076644, 0.08838262943894037, 0.08838262943894037, 0.08838262943894037, 0.09335040961731611, 0.09335040961731611, 0.09335040961731611]}, "mutation_prompt": null}
{"id": "4304b096-44b1-42ae-816c-f5a845b3d158", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                # Changed line: Introduce adaptive social component\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic scaling factor\n                dynamic_f = self.f * (0.5 + 0.5 * (global_best_score / (personal_best_scores[i] + 1e-10)))\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance exploitation by incorporating a dynamic scaling factor into the DE-like mutation mechanism.", "configspace": "", "generation": 63, "fitness": 0.2639836158881089, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.7659831937530122, 0.7659831937530122, 0.7659831937530122, 0.7302638809615765, 0.7302638809615765, 0.7302638809615765, 0.7540644051199854, 0.7540644051199854, 0.7540644051199854, 0.4885524680870421, 0.4885524680870421, 0.4885524680870421, 0.5807648564813452, 0.5807648564813452, 0.5807648564813452, 0.27982567229537914, 0.27982567229537914, 0.27982567229537914, 0.10496146972968945, 0.10496146972968945, 0.10496146972968945, 0.1017030109171706, 0.1017030109171706, 0.1017030109171706, 0.10738560248979157, 0.10738560248979157, 0.10738560248979157, 0.10651235505140177, 0.10651235505140177, 0.10651235505140177, 0.09929178551489726, 0.09929178551489726, 0.09929178551489726, 0.11508248079697236, 0.11508248079697236, 0.11508248079697236, 0.9574504319051492, 0.9574504319051492, 0.9574504319051492, 0.9399426394346954, 0.9399426394346954, 0.9399426394346954, 0.9338047602039734, 0.9338047602039734, 0.9338047602039734, 0.35740530672843185, 0.35740530672843185, 0.35740530672843185, 0.4289452754171077, 0.4289452754171077, 0.4289452754171077, 0.44322336999355627, 0.44322336999355627, 0.44322336999355627, 0.16879531987646756, 0.16879531987646756, 0.16879531987646756, 0.20952704045481574, 0.20952704045481574, 0.20952704045481574, 0.2111463297656413, 0.2111463297656413, 0.2111463297656413, 0.20207390604147835, 0.20207390604147835, 0.20207390604147835, 0.12186548799933661, 0.12186548799933661, 0.12186548799933661, 0.2958304334075884, 0.2958304334075884, 0.2958304334075884, 0.2067284848658948, 0.2067284848658948, 0.2067284848658948, 0.1840954669947943, 0.1840954669947943, 0.1840954669947943, 0.17864798834519136, 0.17864798834519136, 0.17864798834519136, 0.00818142733063687, 0.00818142733063687, 0.00818142733063687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027904972920574478, 0.027904972920574478, 0.027904972920574478, 0.1144658065541434, 0.1144658065541434, 0.1144658065541434, 0.058345732214344914, 0.058345732214344914, 0.058345732214344914, 0.0873345901085808, 0.0873345901085808, 0.0873345901085808, 0.1338561948046907, 0.1338561948046907, 0.1338561948046907, 0.06362445025808883, 0.06362445025808883, 0.06362445025808883, 0.16394196761157132, 0.16394196761157132, 0.16394196761157132, 0.19654957316094146, 0.19654957316094146, 0.19654957316094146, 0.11168560925104665, 0.11168560925104665, 0.11168560925104665, 0.1543046339368126, 0.1543046339368126, 0.1543046339368126, 0.46745134318683446, 0.46745134318683446, 0.46745134318683446, 0.5699142272935137, 0.5699142272935137, 0.5699142272935137, 0.5149402037073185, 0.5149402037073185, 0.5149402037073185, 0.11123528621625922, 0.11123528621625922, 0.11123528621625922, 0.12912239903125922, 0.12912239903125922, 0.12912239903125922, 0.06879783282249408, 0.06879783282249408, 0.06879783282249408, 0.25822516460963996, 0.25822516460963996, 0.25822516460963996, 0.1835778104150566, 0.1835778104150566, 0.1835778104150566, 0.16479542934122726, 0.16479542934122726, 0.16479542934122726, 0.22666371314558675, 0.22666371314558675, 0.22666371314558675, 0.2859142673884535, 0.2859142673884535, 0.2859142673884535, 0.1644644546115538, 0.1644644546115538, 0.1644644546115538, 0.17216674780849284, 0.17216674780849284, 0.17216674780849284, 0.2763784046458899, 0.2763784046458899, 0.2763784046458899, 0.1551609559016095, 0.1551609559016095, 0.1551609559016095, 0.17161825073138348, 0.17161825073138348, 0.17161825073138348, 0.21641275641955515, 0.21641275641955515, 0.21641275641955515, 0.1980175889976553, 0.1980175889976553, 0.1980175889976553, 0.18093496122251151, 0.18093496122251151, 0.18093496122251151, 0.21688645941630713, 0.21688645941630713, 0.21688645941630713, 0.2406723369544358, 0.2406723369544358, 0.2406723369544358, 0.8356513414850033, 0.8356513414850033, 0.8356513414850033, 0.11441167913102612, 0.11441167913102612, 0.11441167913102612, 0.16735638673654885, 0.16735638673654885, 0.16735638673654885, 0.542013945729092, 0.542013945729092, 0.542013945729092, 0.21006872097848484, 0.21006872097848484, 0.21006872097848484, 0.15117906879689236, 0.15117906879689236, 0.15117906879689236, 0.19968709351520653, 0.19968709351520653, 0.19968709351520653, 0.17609202413920666, 0.17609202413920666, 0.17609202413920666, 0.17298788120906794, 0.17298788120906794, 0.17298788120906794, 0.0927021846251479, 0.0927021846251479, 0.0927021846251479, 0.07667606073413757, 0.07667606073413757, 0.07667606073413757, 0.1004749822131753, 0.1004749822131753, 0.1004749822131753]}, "mutation_prompt": null}
{"id": "2c719b25-8957-415e-bbb6-6a9b0834aaf2", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                # Changed line: Introduce adaptive social component\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce an adaptive social component in PSO to improve convergence speed.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.7807392400433681, 0.7807392400433681, 0.7807392400433681, 0.7831518993323534, 0.7831518993323534, 0.7831518993323534, 0.780637393966667, 0.780637393966667, 0.780637393966667, 0.5485897098418366, 0.5485897098418366, 0.5485897098418366, 0.45407382190825185, 0.45407382190825185, 0.45407382190825185, 0.5011899159789144, 0.5011899159789144, 0.5011899159789144, 0.11499601897944323, 0.11499601897944323, 0.11499601897944323, 0.12104702636722575, 0.12104702636722575, 0.12104702636722575, 0.11216390567264822, 0.11216390567264822, 0.11216390567264822, 0.09902731655630526, 0.09902731655630526, 0.09902731655630526, 0.07842352768913785, 0.07842352768913785, 0.07842352768913785, 0.08238763760435919, 0.08238763760435919, 0.08238763760435919, 0.92894711431897, 0.92894711431897, 0.92894711431897, 0.9454591239448847, 0.9454591239448847, 0.9454591239448847, 0.9474437437647353, 0.9474437437647353, 0.9474437437647353, 0.4624799984937561, 0.4624799984937561, 0.4624799984937561, 0.37094271945023816, 0.37094271945023816, 0.37094271945023816, 0.5135685850991699, 0.5135685850991699, 0.5135685850991699, 0.6224317925799234, 0.6224317925799234, 0.6224317925799234, 0.19101488161032987, 0.19101488161032987, 0.19101488161032987, 0.3131534881532222, 0.3131534881532222, 0.3131534881532222, 0.18151537377902938, 0.18151537377902938, 0.18151537377902938, 0.14429469973384002, 0.14429469973384002, 0.14429469973384002, 0.16755937511930097, 0.16755937511930097, 0.16755937511930097, 0.20095944077521122, 0.20095944077521122, 0.20095944077521122, 0.17399183542583907, 0.17399183542583907, 0.17399183542583907, 0.2146570648009123, 0.2146570648009123, 0.2146570648009123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033901476146178555, 0.033901476146178555, 0.033901476146178555, 0.013444924584019802, 0.013444924584019802, 0.013444924584019802, 0.08972468619062546, 0.08972468619062546, 0.08972468619062546, 0.027975012274370936, 0.027975012274370936, 0.027975012274370936, 0.0741523318674352, 0.0741523318674352, 0.0741523318674352, 0.09986615740044513, 0.09986615740044513, 0.09986615740044513, 0.08055396782630508, 0.08055396782630508, 0.08055396782630508, 0.1309853728192929, 0.1309853728192929, 0.1309853728192929, 0.10815121823708163, 0.10815121823708163, 0.10815121823708163, 0.05586746798838227, 0.05586746798838227, 0.05586746798838227, 0.08989169976567901, 0.08989169976567901, 0.08989169976567901, 0.49271656651787, 0.49271656651787, 0.49271656651787, 0.5235906034380118, 0.5235906034380118, 0.5235906034380118, 0.4941708464823861, 0.4941708464823861, 0.4941708464823861, 0.09670549067473089, 0.09670549067473089, 0.09670549067473089, 0.08820369230144265, 0.08820369230144265, 0.08820369230144265, 0.12748670618591063, 0.12748670618591063, 0.12748670618591063, 0.27903251224854575, 0.27903251224854575, 0.27903251224854575, 0.17511101509537985, 0.17511101509537985, 0.17511101509537985, 0.30439801212362805, 0.30439801212362805, 0.30439801212362805, 0.4329508926740976, 0.4329508926740976, 0.4329508926740976, 0.35714983817245505, 0.35714983817245505, 0.35714983817245505, 0.24400852808689533, 0.24400852808689533, 0.24400852808689533, 0.13590755265684407, 0.13590755265684407, 0.13590755265684407, 0.19504078740223552, 0.19504078740223552, 0.19504078740223552, 0.16576731658224564, 0.16576731658224564, 0.16576731658224564, 0.2092147768696776, 0.2092147768696776, 0.2092147768696776, 0.24094673509439024, 0.24094673509439024, 0.24094673509439024, 0.1904415974389676, 0.1904415974389676, 0.1904415974389676, 0.18091275625324532, 0.18091275625324532, 0.18091275625324532, 0.21309320226722994, 0.21309320226722994, 0.21309320226722994, 0.19273202469616812, 0.19273202469616812, 0.19273202469616812, 0.8265184485923367, 0.8265184485923367, 0.8265184485923367, 0.15884534742981615, 0.15884534742981615, 0.15884534742981615, 0.1685288836863198, 0.1685288836863198, 0.1685288836863198, 0.4893047191676556, 0.4893047191676556, 0.4893047191676556, 0.20423185255412413, 0.20423185255412413, 0.20423185255412413, 0.15448304778209077, 0.15448304778209077, 0.15448304778209077, 0.18615209442064273, 0.18615209442064273, 0.18615209442064273, 0.19487719993374042, 0.19487719993374042, 0.19487719993374042, 0.19504586928468604, 0.19504586928468604, 0.19504586928468604, 0.08134616261076644, 0.08134616261076644, 0.08134616261076644, 0.08838262943894037, 0.08838262943894037, 0.08838262943894037, 0.09335040961731611, 0.09335040961731611, 0.09335040961731611]}, "mutation_prompt": null}
{"id": "071660aa-5b51-4c60-9675-bf3ce416f77a", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                # Changed line: Introduce dynamic scaling factor for velocity\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                dynamic_inertia_weight = np.random.uniform(0.5, 0.9 + 0.1 * np.sin(2 * np.pi * evaluations/self.budget), self.dim)\n                particle_velocities[i] = (dynamic_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce a dynamic scaling factor for velocities in PSO to enhance exploration without compromising convergence speed.", "configspace": "", "generation": 65, "fitness": 0.19278748568740364, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.3993740236833009, 0.3993740236833009, 0.3993740236833009, 0.504509350801823, 0.504509350801823, 0.504509350801823, 0.474600114790932, 0.474600114790932, 0.474600114790932, 0.09631071480914366, 0.09631071480914366, 0.09631071480914366, 0.1075681677345971, 0.1075681677345971, 0.1075681677345971, 0.07699575853440621, 0.07699575853440621, 0.07699575853440621, 0.08146008432018204, 0.08146008432018204, 0.08146008432018204, 0.08410504557737697, 0.08410504557737697, 0.08410504557737697, 0.09162153156875452, 0.09162153156875452, 0.09162153156875452, 0.06798320104641553, 0.06798320104641553, 0.06798320104641553, 0.06476634726162922, 0.06476634726162922, 0.06476634726162922, 0.06386789016215022, 0.06386789016215022, 0.06386789016215022, 0.9356590289920793, 0.9356590289920793, 0.9356590289920793, 0.945460062748735, 0.945460062748735, 0.945460062748735, 0.9483829071854307, 0.9483829071854307, 0.9483829071854307, 0.22530101419291182, 0.22530101419291182, 0.22530101419291182, 0.19283783582361724, 0.19283783582361724, 0.19283783582361724, 0.22372330468813606, 0.22372330468813606, 0.22372330468813606, 0.2846570869126134, 0.2846570869126134, 0.2846570869126134, 0.2191321416526003, 0.2191321416526003, 0.2191321416526003, 0.18750889512574753, 0.18750889512574753, 0.18750889512574753, 0.10344766932603855, 0.10344766932603855, 0.10344766932603855, 0.10631843783912576, 0.10631843783912576, 0.10631843783912576, 0.17543842097436413, 0.17543842097436413, 0.17543842097436413, 0.11295915208705332, 0.11295915208705332, 0.11295915208705332, 0.14216062783185313, 0.14216062783185313, 0.14216062783185313, 0.06963239120263531, 0.06963239120263531, 0.06963239120263531, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022286349875862976, 0.0022286349875862976, 0.0022286349875862976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08257809262164373, 0.08257809262164373, 0.08257809262164373, 0.02545222076390452, 0.02545222076390452, 0.02545222076390452, 0.10848655757941528, 0.10848655757941528, 0.10848655757941528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004079207343843927, 0.004079207343843927, 0.004079207343843927, 0.01442296617220673, 0.01442296617220673, 0.01442296617220673, 0.07336242383437097, 0.07336242383437097, 0.07336242383437097, 0.054286027411113214, 0.054286027411113214, 0.054286027411113214, 0.0999314268935908, 0.0999314268935908, 0.0999314268935908, 0.37337890561328324, 0.37337890561328324, 0.37337890561328324, 0.3656580701844667, 0.3656580701844667, 0.3656580701844667, 0.3212392831049248, 0.3212392831049248, 0.3212392831049248, 0.08063161323411916, 0.08063161323411916, 0.08063161323411916, 0.09033264691468723, 0.09033264691468723, 0.09033264691468723, 0.09926797179817859, 0.09926797179817859, 0.09926797179817859, 0.17090348703618385, 0.17090348703618385, 0.17090348703618385, 0.12907352431596997, 0.12907352431596997, 0.12907352431596997, 0.26140532068803546, 0.26140532068803546, 0.26140532068803546, 0.23635081662446766, 0.23635081662446766, 0.23635081662446766, 0.2508785545133675, 0.2508785545133675, 0.2508785545133675, 0.2261841254747976, 0.2261841254747976, 0.2261841254747976, 0.1417071281022485, 0.1417071281022485, 0.1417071281022485, 0.1540270651217559, 0.1540270651217559, 0.1540270651217559, 0.13944724825726496, 0.13944724825726496, 0.13944724825726496, 0.22226056168618624, 0.22226056168618624, 0.22226056168618624, 0.18637908578650542, 0.18637908578650542, 0.18637908578650542, 0.20125216381046818, 0.20125216381046818, 0.20125216381046818, 0.1719905684075682, 0.1719905684075682, 0.1719905684075682, 0.17111386199331624, 0.17111386199331624, 0.17111386199331624, 0.1762800988893496, 0.1762800988893496, 0.1762800988893496, 0.5257011905040465, 0.5257011905040465, 0.5257011905040465, 0.15365781223371833, 0.15365781223371833, 0.15365781223371833, 0.16536611970571446, 0.16536611970571446, 0.16536611970571446, 0.2609643598000313, 0.2609643598000313, 0.2609643598000313, 0.19769533122064686, 0.19769533122064686, 0.19769533122064686, 0.15401006994582056, 0.15401006994582056, 0.15401006994582056, 0.18075682679865546, 0.18075682679865546, 0.18075682679865546, 0.19450766126950103, 0.19450766126950103, 0.19450766126950103, 0.17689156071212075, 0.17689156071212075, 0.17689156071212075, 0.08733576654260466, 0.08733576654260466, 0.08733576654260466, 0.08552121293054227, 0.08552121293054227, 0.08552121293054227, 0.0776201917911874, 0.0776201917911874, 0.0776201917911874]}, "mutation_prompt": null}
{"id": "edb1afc8-686e-427a-ba0a-99ee00863d45", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                # Changed line: Introduce adaptive social component\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * (0.5 + 0.5 * (global_best_score - np.min(personal_best_scores)) / (global_best_score + 1e-8))  # Change line\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance the mutation strategy by dynamically adjusting the DE scaling factor based on feedback from the search progress.", "configspace": "", "generation": 66, "fitness": 0.264945225942271, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.7824541828975219, 0.7824541828975219, 0.7824541828975219, 0.7630571822839095, 0.7630571822839095, 0.7630571822839095, 0.7501353774802303, 0.7501353774802303, 0.7501353774802303, 0.5173385904548531, 0.5173385904548531, 0.5173385904548531, 0.5167936290624096, 0.5167936290624096, 0.5167936290624096, 0.5365708318119298, 0.5365708318119298, 0.5365708318119298, 0.15747276284003875, 0.15747276284003875, 0.15747276284003875, 0.11903589165069783, 0.11903589165069783, 0.11903589165069783, 0.14698889069289967, 0.14698889069289967, 0.14698889069289967, 0.09305615067414796, 0.09305615067414796, 0.09305615067414796, 0.08476724578075212, 0.08476724578075212, 0.08476724578075212, 0.10939307986424429, 0.10939307986424429, 0.10939307986424429, 0.9616341128676603, 0.9616341128676603, 0.9616341128676603, 0.9507347100730946, 0.9507347100730946, 0.9507347100730946, 0.9435698914811201, 0.9435698914811201, 0.9435698914811201, 0.26567480190272774, 0.26567480190272774, 0.26567480190272774, 0.2342115326869071, 0.2342115326869071, 0.2342115326869071, 0.4302780182248752, 0.4302780182248752, 0.4302780182248752, 0.14050115066410818, 0.14050115066410818, 0.14050115066410818, 0.18469796471767064, 0.18469796471767064, 0.18469796471767064, 0.22520751729099275, 0.22520751729099275, 0.22520751729099275, 0.15628743517905497, 0.15628743517905497, 0.15628743517905497, 0.1211326730169956, 0.1211326730169956, 0.1211326730169956, 0.15379503675860307, 0.15379503675860307, 0.15379503675860307, 0.18649862089275093, 0.18649862089275093, 0.18649862089275093, 0.20946559565003775, 0.20946559565003775, 0.20946559565003775, 0.2605657572089396, 0.2605657572089396, 0.2605657572089396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06888093568287712, 0.06888093568287712, 0.06888093568287712, 0.14594922302284774, 0.14594922302284774, 0.14594922302284774, 0.04620709126792921, 0.04620709126792921, 0.04620709126792921, 0.14560725127692475, 0.14560725127692475, 0.14560725127692475, 0.221721468326468, 0.221721468326468, 0.221721468326468, 0.22279308755707106, 0.22279308755707106, 0.22279308755707106, 0.09454140142197609, 0.09454140142197609, 0.09454140142197609, 0.0575712645665557, 0.0575712645665557, 0.0575712645665557, 0.03348421882939778, 0.03348421882939778, 0.03348421882939778, 0.08707220759667123, 0.08707220759667123, 0.08707220759667123, 0.5311327580462963, 0.5311327580462963, 0.5311327580462963, 0.4789274188826371, 0.4789274188826371, 0.4789274188826371, 0.5333352674925338, 0.5333352674925338, 0.5333352674925338, 0.0969242416216286, 0.0969242416216286, 0.0969242416216286, 0.11400386091849213, 0.11400386091849213, 0.11400386091849213, 0.06534935629207317, 0.06534935629207317, 0.06534935629207317, 0.171029749319919, 0.171029749319919, 0.171029749319919, 0.30327392160968214, 0.30327392160968214, 0.30327392160968214, 0.15913302273083174, 0.15913302273083174, 0.15913302273083174, 0.2762365675350582, 0.2762365675350582, 0.2762365675350582, 0.28371366410743504, 0.28371366410743504, 0.28371366410743504, 0.4090028742409757, 0.4090028742409757, 0.4090028742409757, 0.19012822684323516, 0.19012822684323516, 0.19012822684323516, 0.2308457679014303, 0.2308457679014303, 0.2308457679014303, 0.139393815189658, 0.139393815189658, 0.139393815189658, 0.23826439624460327, 0.23826439624460327, 0.23826439624460327, 0.25173739163866127, 0.25173739163866127, 0.25173739163866127, 0.23576911539206968, 0.23576911539206968, 0.23576911539206968, 0.18934828819385308, 0.18934828819385308, 0.18934828819385308, 0.17117093764959024, 0.17117093764959024, 0.17117093764959024, 0.174496974378322, 0.174496974378322, 0.174496974378322, 0.8095842119030414, 0.8095842119030414, 0.8095842119030414, 0.11474863038083782, 0.11474863038083782, 0.11474863038083782, 0.16599330091474296, 0.16599330091474296, 0.16599330091474296, 0.5035088620503925, 0.5035088620503925, 0.5035088620503925, 0.2055194922473389, 0.2055194922473389, 0.2055194922473389, 0.15311744785685244, 0.15311744785685244, 0.15311744785685244, 0.1761307292663774, 0.1761307292663774, 0.1761307292663774, 0.18970471509171627, 0.18970471509171627, 0.18970471509171627, 0.17094777365045188, 0.17094777365045188, 0.17094777365045188, 0.07347516768421336, 0.07347516768421336, 0.07347516768421336, 0.07688513678537934, 0.07688513678537934, 0.07688513678537934, 0.06787640012529117, 0.06787640012529117, 0.06787640012529117]}, "mutation_prompt": null}
{"id": "46979ded-cdb8-4235-8787-0981c2d17a1b", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                # Changed line: Introduce adaptive social component\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce an adaptive social component in PSO to improve convergence speed.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.7807392400433681, 0.7807392400433681, 0.7807392400433681, 0.7831518993323534, 0.7831518993323534, 0.7831518993323534, 0.780637393966667, 0.780637393966667, 0.780637393966667, 0.5485897098418366, 0.5485897098418366, 0.5485897098418366, 0.45407382190825185, 0.45407382190825185, 0.45407382190825185, 0.5011899159789144, 0.5011899159789144, 0.5011899159789144, 0.11499601897944323, 0.11499601897944323, 0.11499601897944323, 0.12104702636722575, 0.12104702636722575, 0.12104702636722575, 0.11216390567264822, 0.11216390567264822, 0.11216390567264822, 0.09902731655630526, 0.09902731655630526, 0.09902731655630526, 0.07842352768913785, 0.07842352768913785, 0.07842352768913785, 0.08238763760435919, 0.08238763760435919, 0.08238763760435919, 0.92894711431897, 0.92894711431897, 0.92894711431897, 0.9454591239448847, 0.9454591239448847, 0.9454591239448847, 0.9474437437647353, 0.9474437437647353, 0.9474437437647353, 0.4624799984937561, 0.4624799984937561, 0.4624799984937561, 0.37094271945023816, 0.37094271945023816, 0.37094271945023816, 0.5135685850991699, 0.5135685850991699, 0.5135685850991699, 0.6224317925799234, 0.6224317925799234, 0.6224317925799234, 0.19101488161032987, 0.19101488161032987, 0.19101488161032987, 0.3131534881532222, 0.3131534881532222, 0.3131534881532222, 0.18151537377902938, 0.18151537377902938, 0.18151537377902938, 0.14429469973384002, 0.14429469973384002, 0.14429469973384002, 0.16755937511930097, 0.16755937511930097, 0.16755937511930097, 0.20095944077521122, 0.20095944077521122, 0.20095944077521122, 0.17399183542583907, 0.17399183542583907, 0.17399183542583907, 0.2146570648009123, 0.2146570648009123, 0.2146570648009123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033901476146178555, 0.033901476146178555, 0.033901476146178555, 0.013444924584019802, 0.013444924584019802, 0.013444924584019802, 0.08972468619062546, 0.08972468619062546, 0.08972468619062546, 0.027975012274370936, 0.027975012274370936, 0.027975012274370936, 0.0741523318674352, 0.0741523318674352, 0.0741523318674352, 0.09986615740044513, 0.09986615740044513, 0.09986615740044513, 0.08055396782630508, 0.08055396782630508, 0.08055396782630508, 0.1309853728192929, 0.1309853728192929, 0.1309853728192929, 0.10815121823708163, 0.10815121823708163, 0.10815121823708163, 0.05586746798838227, 0.05586746798838227, 0.05586746798838227, 0.08989169976567901, 0.08989169976567901, 0.08989169976567901, 0.49271656651787, 0.49271656651787, 0.49271656651787, 0.5235906034380118, 0.5235906034380118, 0.5235906034380118, 0.4941708464823861, 0.4941708464823861, 0.4941708464823861, 0.09670549067473089, 0.09670549067473089, 0.09670549067473089, 0.08820369230144265, 0.08820369230144265, 0.08820369230144265, 0.12748670618591063, 0.12748670618591063, 0.12748670618591063, 0.27903251224854575, 0.27903251224854575, 0.27903251224854575, 0.17511101509537985, 0.17511101509537985, 0.17511101509537985, 0.30439801212362805, 0.30439801212362805, 0.30439801212362805, 0.4329508926740976, 0.4329508926740976, 0.4329508926740976, 0.35714983817245505, 0.35714983817245505, 0.35714983817245505, 0.24400852808689533, 0.24400852808689533, 0.24400852808689533, 0.13590755265684407, 0.13590755265684407, 0.13590755265684407, 0.19504078740223552, 0.19504078740223552, 0.19504078740223552, 0.16576731658224564, 0.16576731658224564, 0.16576731658224564, 0.2092147768696776, 0.2092147768696776, 0.2092147768696776, 0.24094673509439024, 0.24094673509439024, 0.24094673509439024, 0.1904415974389676, 0.1904415974389676, 0.1904415974389676, 0.18091275625324532, 0.18091275625324532, 0.18091275625324532, 0.21309320226722994, 0.21309320226722994, 0.21309320226722994, 0.19273202469616812, 0.19273202469616812, 0.19273202469616812, 0.8265184485923367, 0.8265184485923367, 0.8265184485923367, 0.15884534742981615, 0.15884534742981615, 0.15884534742981615, 0.1685288836863198, 0.1685288836863198, 0.1685288836863198, 0.4893047191676556, 0.4893047191676556, 0.4893047191676556, 0.20423185255412413, 0.20423185255412413, 0.20423185255412413, 0.15448304778209077, 0.15448304778209077, 0.15448304778209077, 0.18615209442064273, 0.18615209442064273, 0.18615209442064273, 0.19487719993374042, 0.19487719993374042, 0.19487719993374042, 0.19504586928468604, 0.19504586928468604, 0.19504586928468604, 0.08134616261076644, 0.08134616261076644, 0.08134616261076644, 0.08838262943894037, 0.08838262943894037, 0.08838262943894037, 0.09335040961731611, 0.09335040961731611, 0.09335040961731611]}, "mutation_prompt": null}
{"id": "18ea46e3-5f26-46fd-b960-4a0c4d02f4fe", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                # Changed line: Introduce adaptive social component\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce an adaptive social component in PSO to improve convergence speed.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.7807392400433681, 0.7807392400433681, 0.7807392400433681, 0.7831518993323534, 0.7831518993323534, 0.7831518993323534, 0.780637393966667, 0.780637393966667, 0.780637393966667, 0.5485897098418366, 0.5485897098418366, 0.5485897098418366, 0.45407382190825185, 0.45407382190825185, 0.45407382190825185, 0.5011899159789144, 0.5011899159789144, 0.5011899159789144, 0.11499601897944323, 0.11499601897944323, 0.11499601897944323, 0.12104702636722575, 0.12104702636722575, 0.12104702636722575, 0.11216390567264822, 0.11216390567264822, 0.11216390567264822, 0.09902731655630526, 0.09902731655630526, 0.09902731655630526, 0.07842352768913785, 0.07842352768913785, 0.07842352768913785, 0.08238763760435919, 0.08238763760435919, 0.08238763760435919, 0.92894711431897, 0.92894711431897, 0.92894711431897, 0.9454591239448847, 0.9454591239448847, 0.9454591239448847, 0.9474437437647353, 0.9474437437647353, 0.9474437437647353, 0.4624799984937561, 0.4624799984937561, 0.4624799984937561, 0.37094271945023816, 0.37094271945023816, 0.37094271945023816, 0.5135685850991699, 0.5135685850991699, 0.5135685850991699, 0.6224317925799234, 0.6224317925799234, 0.6224317925799234, 0.19101488161032987, 0.19101488161032987, 0.19101488161032987, 0.3131534881532222, 0.3131534881532222, 0.3131534881532222, 0.18151537377902938, 0.18151537377902938, 0.18151537377902938, 0.14429469973384002, 0.14429469973384002, 0.14429469973384002, 0.16755937511930097, 0.16755937511930097, 0.16755937511930097, 0.20095944077521122, 0.20095944077521122, 0.20095944077521122, 0.17399183542583907, 0.17399183542583907, 0.17399183542583907, 0.2146570648009123, 0.2146570648009123, 0.2146570648009123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033901476146178555, 0.033901476146178555, 0.033901476146178555, 0.013444924584019802, 0.013444924584019802, 0.013444924584019802, 0.08972468619062546, 0.08972468619062546, 0.08972468619062546, 0.027975012274370936, 0.027975012274370936, 0.027975012274370936, 0.0741523318674352, 0.0741523318674352, 0.0741523318674352, 0.09986615740044513, 0.09986615740044513, 0.09986615740044513, 0.08055396782630508, 0.08055396782630508, 0.08055396782630508, 0.1309853728192929, 0.1309853728192929, 0.1309853728192929, 0.10815121823708163, 0.10815121823708163, 0.10815121823708163, 0.05586746798838227, 0.05586746798838227, 0.05586746798838227, 0.08989169976567901, 0.08989169976567901, 0.08989169976567901, 0.49271656651787, 0.49271656651787, 0.49271656651787, 0.5235906034380118, 0.5235906034380118, 0.5235906034380118, 0.4941708464823861, 0.4941708464823861, 0.4941708464823861, 0.09670549067473089, 0.09670549067473089, 0.09670549067473089, 0.08820369230144265, 0.08820369230144265, 0.08820369230144265, 0.12748670618591063, 0.12748670618591063, 0.12748670618591063, 0.27903251224854575, 0.27903251224854575, 0.27903251224854575, 0.17511101509537985, 0.17511101509537985, 0.17511101509537985, 0.30439801212362805, 0.30439801212362805, 0.30439801212362805, 0.4329508926740976, 0.4329508926740976, 0.4329508926740976, 0.35714983817245505, 0.35714983817245505, 0.35714983817245505, 0.24400852808689533, 0.24400852808689533, 0.24400852808689533, 0.13590755265684407, 0.13590755265684407, 0.13590755265684407, 0.19504078740223552, 0.19504078740223552, 0.19504078740223552, 0.16576731658224564, 0.16576731658224564, 0.16576731658224564, 0.2092147768696776, 0.2092147768696776, 0.2092147768696776, 0.24094673509439024, 0.24094673509439024, 0.24094673509439024, 0.1904415974389676, 0.1904415974389676, 0.1904415974389676, 0.18091275625324532, 0.18091275625324532, 0.18091275625324532, 0.21309320226722994, 0.21309320226722994, 0.21309320226722994, 0.19273202469616812, 0.19273202469616812, 0.19273202469616812, 0.8265184485923367, 0.8265184485923367, 0.8265184485923367, 0.15884534742981615, 0.15884534742981615, 0.15884534742981615, 0.1685288836863198, 0.1685288836863198, 0.1685288836863198, 0.4893047191676556, 0.4893047191676556, 0.4893047191676556, 0.20423185255412413, 0.20423185255412413, 0.20423185255412413, 0.15448304778209077, 0.15448304778209077, 0.15448304778209077, 0.18615209442064273, 0.18615209442064273, 0.18615209442064273, 0.19487719993374042, 0.19487719993374042, 0.19487719993374042, 0.19504586928468604, 0.19504586928468604, 0.19504586928468604, 0.08134616261076644, 0.08134616261076644, 0.08134616261076644, 0.08838262943894037, 0.08838262943894037, 0.08838262943894037, 0.09335040961731611, 0.09335040961731611, 0.09335040961731611]}, "mutation_prompt": null}
{"id": "052648df-6e7e-4ed0-9afc-3d72d0ffb9f1", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)\n                # Modified line: Use a weighted combination of a and b for mutation\n                mutant = dynamic_f * ((0.5 * particle_positions[a] + 0.5 * particle_positions[b]) - particle_positions[c]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Refine the mutation strategy in DE-like mutation for improved exploration.", "configspace": "", "generation": 69, "fitness": 0.26461130404289684, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.7968440615634896, 0.7968440615634896, 0.7968440615634896, 0.7569380435952761, 0.7569380435952761, 0.7569380435952761, 0.7813915004301025, 0.7813915004301025, 0.7813915004301025, 0.5578149308777046, 0.5578149308777046, 0.5578149308777046, 0.5314363333732423, 0.5314363333732423, 0.5314363333732423, 0.5114451320689959, 0.5114451320689959, 0.5114451320689959, 0.10367849346289026, 0.10367849346289026, 0.10367849346289026, 0.11306012335867033, 0.11306012335867033, 0.11306012335867033, 0.12489366764823606, 0.12489366764823606, 0.12489366764823606, 0.10425094188277528, 0.10425094188277528, 0.10425094188277528, 0.10662619422871722, 0.10662619422871722, 0.10662619422871722, 0.11861961408847088, 0.11861961408847088, 0.11861961408847088, 0.9660891229722356, 0.9660891229722356, 0.9660891229722356, 0.9580326920774331, 0.9580326920774331, 0.9580326920774331, 0.9501206507357107, 0.9501206507357107, 0.9501206507357107, 0.5109805041516213, 0.5109805041516213, 0.5109805041516213, 0.1454641658629835, 0.1454641658629835, 0.1454641658629835, 0.4436359098271564, 0.4436359098271564, 0.4436359098271564, 0.139973507451992, 0.139973507451992, 0.139973507451992, 0.15850567970580665, 0.15850567970580665, 0.15850567970580665, 0.1448097493613928, 0.1448097493613928, 0.1448097493613928, 0.24418001182347548, 0.24418001182347548, 0.24418001182347548, 0.14145059578665842, 0.14145059578665842, 0.14145059578665842, 0.12740187717311402, 0.12740187717311402, 0.12740187717311402, 0.19683477632064883, 0.19683477632064883, 0.19683477632064883, 0.1809752257276711, 0.1809752257276711, 0.1809752257276711, 0.1929265102958735, 0.1929265102958735, 0.1929265102958735, 0.04023802674903432, 0.04023802674903432, 0.04023802674903432, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05362288631916656, 0.05362288631916656, 0.05362288631916656, 0.09856488707938549, 0.09856488707938549, 0.09856488707938549, 0.06293445225615191, 0.06293445225615191, 0.06293445225615191, 0.1558246678027665, 0.1558246678027665, 0.1558246678027665, 0.09257452187275217, 0.09257452187275217, 0.09257452187275217, 0.09070520558606754, 0.09070520558606754, 0.09070520558606754, 0.07834766757220257, 0.07834766757220257, 0.07834766757220257, 0.08171582565958746, 0.08171582565958746, 0.08171582565958746, 0.035542722978508245, 0.035542722978508245, 0.035542722978508245, 0.05238658470400004, 0.05238658470400004, 0.05238658470400004, 0.5032231768617292, 0.5032231768617292, 0.5032231768617292, 0.49623238604507947, 0.49623238604507947, 0.49623238604507947, 0.49267162466422154, 0.49267162466422154, 0.49267162466422154, 0.124015571330933, 0.124015571330933, 0.124015571330933, 0.09804840593662789, 0.09804840593662789, 0.09804840593662789, 0.09000042619465332, 0.09000042619465332, 0.09000042619465332, 0.23130422895735214, 0.23130422895735214, 0.23130422895735214, 0.2247324892262914, 0.2247324892262914, 0.2247324892262914, 0.1490779029158955, 0.1490779029158955, 0.1490779029158955, 0.2002410252056288, 0.2002410252056288, 0.2002410252056288, 0.35767052326180016, 0.35767052326180016, 0.35767052326180016, 0.3471177891164471, 0.3471177891164471, 0.3471177891164471, 0.23915199108375018, 0.23915199108375018, 0.23915199108375018, 0.27657536545926664, 0.27657536545926664, 0.27657536545926664, 0.12925987224312407, 0.12925987224312407, 0.12925987224312407, 0.23922118321390995, 0.23922118321390995, 0.23922118321390995, 0.23165575358347956, 0.23165575358347956, 0.23165575358347956, 0.2591600128502768, 0.2591600128502768, 0.2591600128502768, 0.17363631125918377, 0.17363631125918377, 0.17363631125918377, 0.17770902484360884, 0.17770902484360884, 0.17770902484360884, 0.18328544709680583, 0.18328544709680583, 0.18328544709680583, 0.8127833677990824, 0.8127833677990824, 0.8127833677990824, 0.11317061483166924, 0.11317061483166924, 0.11317061483166924, 0.1625920091717037, 0.1625920091717037, 0.1625920091717037, 0.6233791693051314, 0.6233791693051314, 0.6233791693051314, 0.22080147465065947, 0.22080147465065947, 0.22080147465065947, 0.1519683254110551, 0.1519683254110551, 0.1519683254110551, 0.19354284424029344, 0.19354284424029344, 0.19354284424029344, 0.19242228035081366, 0.19242228035081366, 0.19242228035081366, 0.187182496296871, 0.187182496296871, 0.187182496296871, 0.06740960298981757, 0.06740960298981757, 0.06740960298981757, 0.07073184143698852, 0.07073184143698852, 0.07073184143698852, 0.08110188882245473, 0.08110188882245473, 0.08110188882245473]}, "mutation_prompt": null}
{"id": "09b5d9f0-46b6-4dff-99f9-e5c398680abf", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                # Changed line: Introduce adaptive social component\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce an adaptive social component in PSO to improve convergence speed.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.7807392400433681, 0.7807392400433681, 0.7807392400433681, 0.7831518993323534, 0.7831518993323534, 0.7831518993323534, 0.780637393966667, 0.780637393966667, 0.780637393966667, 0.5485897098418366, 0.5485897098418366, 0.5485897098418366, 0.45407382190825185, 0.45407382190825185, 0.45407382190825185, 0.5011899159789144, 0.5011899159789144, 0.5011899159789144, 0.11499601897944323, 0.11499601897944323, 0.11499601897944323, 0.12104702636722575, 0.12104702636722575, 0.12104702636722575, 0.11216390567264822, 0.11216390567264822, 0.11216390567264822, 0.09902731655630526, 0.09902731655630526, 0.09902731655630526, 0.07842352768913785, 0.07842352768913785, 0.07842352768913785, 0.08238763760435919, 0.08238763760435919, 0.08238763760435919, 0.92894711431897, 0.92894711431897, 0.92894711431897, 0.9454591239448847, 0.9454591239448847, 0.9454591239448847, 0.9474437437647353, 0.9474437437647353, 0.9474437437647353, 0.4624799984937561, 0.4624799984937561, 0.4624799984937561, 0.37094271945023816, 0.37094271945023816, 0.37094271945023816, 0.5135685850991699, 0.5135685850991699, 0.5135685850991699, 0.6224317925799234, 0.6224317925799234, 0.6224317925799234, 0.19101488161032987, 0.19101488161032987, 0.19101488161032987, 0.3131534881532222, 0.3131534881532222, 0.3131534881532222, 0.18151537377902938, 0.18151537377902938, 0.18151537377902938, 0.14429469973384002, 0.14429469973384002, 0.14429469973384002, 0.16755937511930097, 0.16755937511930097, 0.16755937511930097, 0.20095944077521122, 0.20095944077521122, 0.20095944077521122, 0.17399183542583907, 0.17399183542583907, 0.17399183542583907, 0.2146570648009123, 0.2146570648009123, 0.2146570648009123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033901476146178555, 0.033901476146178555, 0.033901476146178555, 0.013444924584019802, 0.013444924584019802, 0.013444924584019802, 0.08972468619062546, 0.08972468619062546, 0.08972468619062546, 0.027975012274370936, 0.027975012274370936, 0.027975012274370936, 0.0741523318674352, 0.0741523318674352, 0.0741523318674352, 0.09986615740044513, 0.09986615740044513, 0.09986615740044513, 0.08055396782630508, 0.08055396782630508, 0.08055396782630508, 0.1309853728192929, 0.1309853728192929, 0.1309853728192929, 0.10815121823708163, 0.10815121823708163, 0.10815121823708163, 0.05586746798838227, 0.05586746798838227, 0.05586746798838227, 0.08989169976567901, 0.08989169976567901, 0.08989169976567901, 0.49271656651787, 0.49271656651787, 0.49271656651787, 0.5235906034380118, 0.5235906034380118, 0.5235906034380118, 0.4941708464823861, 0.4941708464823861, 0.4941708464823861, 0.09670549067473089, 0.09670549067473089, 0.09670549067473089, 0.08820369230144265, 0.08820369230144265, 0.08820369230144265, 0.12748670618591063, 0.12748670618591063, 0.12748670618591063, 0.27903251224854575, 0.27903251224854575, 0.27903251224854575, 0.17511101509537985, 0.17511101509537985, 0.17511101509537985, 0.30439801212362805, 0.30439801212362805, 0.30439801212362805, 0.4329508926740976, 0.4329508926740976, 0.4329508926740976, 0.35714983817245505, 0.35714983817245505, 0.35714983817245505, 0.24400852808689533, 0.24400852808689533, 0.24400852808689533, 0.13590755265684407, 0.13590755265684407, 0.13590755265684407, 0.19504078740223552, 0.19504078740223552, 0.19504078740223552, 0.16576731658224564, 0.16576731658224564, 0.16576731658224564, 0.2092147768696776, 0.2092147768696776, 0.2092147768696776, 0.24094673509439024, 0.24094673509439024, 0.24094673509439024, 0.1904415974389676, 0.1904415974389676, 0.1904415974389676, 0.18091275625324532, 0.18091275625324532, 0.18091275625324532, 0.21309320226722994, 0.21309320226722994, 0.21309320226722994, 0.19273202469616812, 0.19273202469616812, 0.19273202469616812, 0.8265184485923367, 0.8265184485923367, 0.8265184485923367, 0.15884534742981615, 0.15884534742981615, 0.15884534742981615, 0.1685288836863198, 0.1685288836863198, 0.1685288836863198, 0.4893047191676556, 0.4893047191676556, 0.4893047191676556, 0.20423185255412413, 0.20423185255412413, 0.20423185255412413, 0.15448304778209077, 0.15448304778209077, 0.15448304778209077, 0.18615209442064273, 0.18615209442064273, 0.18615209442064273, 0.19487719993374042, 0.19487719993374042, 0.19487719993374042, 0.19504586928468604, 0.19504586928468604, 0.19504586928468604, 0.08134616261076644, 0.08134616261076644, 0.08134616261076644, 0.08838262943894037, 0.08838262943894037, 0.08838262943894037, 0.09335040961731611, 0.09335040961731611, 0.09335040961731611]}, "mutation_prompt": null}
{"id": "c2287dcb-131c-4d42-b652-47d1354816b3", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                # Changed line: Introduce adaptive social component\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: dynamic_f now uses a blend of past information\n                dynamic_f = self.f * (1 - evaluations / self.budget) + 0.2 * (particle_positions[a] - particle_positions[c])\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Modify the DE mutation strategy to incorporate a blend of past and current particle information for enhanced exploration.", "configspace": "", "generation": 71, "fitness": 0.26921014842511565, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.7701285508417659, 0.7701285508417659, 0.7701285508417659, 0.7569447597508885, 0.7569447597508885, 0.7569447597508885, 0.7668252675343653, 0.7668252675343653, 0.7668252675343653, 0.4928240489812572, 0.4928240489812572, 0.4928240489812572, 0.6004598096814902, 0.6004598096814902, 0.6004598096814902, 0.5029655360677778, 0.5029655360677778, 0.5029655360677778, 0.11657214165474739, 0.11657214165474739, 0.11657214165474739, 0.12642633572647977, 0.12642633572647977, 0.12642633572647977, 0.11603938230177357, 0.11603938230177357, 0.11603938230177357, 0.10935377947373925, 0.10935377947373925, 0.10935377947373925, 0.07561016259139308, 0.07561016259139308, 0.07561016259139308, 0.090712628555907, 0.090712628555907, 0.090712628555907, 0.9628482095438241, 0.9628482095438241, 0.9628482095438241, 0.937293186311197, 0.937293186311197, 0.937293186311197, 0.9480062957812441, 0.9480062957812441, 0.9480062957812441, 0.33208350499716877, 0.33208350499716877, 0.33208350499716877, 0.3584048435906739, 0.3584048435906739, 0.3584048435906739, 0.4199827458312049, 0.4199827458312049, 0.4199827458312049, 0.13946950681843573, 0.13946950681843573, 0.13946950681843573, 0.20835647355921472, 0.20835647355921472, 0.20835647355921472, 0.3134600586126226, 0.3134600586126226, 0.3134600586126226, 0.16467211334046183, 0.16467211334046183, 0.16467211334046183, 0.17804763707649107, 0.17804763707649107, 0.17804763707649107, 0.12931737255874576, 0.12931737255874576, 0.12931737255874576, 0.24715842389575948, 0.24715842389575948, 0.24715842389575948, 0.18861697890459894, 0.18861697890459894, 0.18861697890459894, 0.20473625555788355, 0.20473625555788355, 0.20473625555788355, 0.0276407817526666, 0.0276407817526666, 0.0276407817526666, 0.02150869577543868, 0.02150869577543868, 0.02150869577543868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13205181355990758, 0.13205181355990758, 0.13205181355990758, 0.041547701900102374, 0.041547701900102374, 0.041547701900102374, 0.06953209927134851, 0.06953209927134851, 0.06953209927134851, 0.037740843347631725, 0.037740843347631725, 0.037740843347631725, 0.10455540826786547, 0.10455540826786547, 0.10455540826786547, 0.07962564320989207, 0.07962564320989207, 0.07962564320989207, 0.061722353483459336, 0.061722353483459336, 0.061722353483459336, 0.04710160960928822, 0.04710160960928822, 0.04710160960928822, 0.3874278928493353, 0.3874278928493353, 0.3874278928493353, 0.4571937413367806, 0.4571937413367806, 0.4571937413367806, 0.5956945573131449, 0.5956945573131449, 0.5956945573131449, 0.44156784474714617, 0.44156784474714617, 0.44156784474714617, 0.10648888788445876, 0.10648888788445876, 0.10648888788445876, 0.09854755829985329, 0.09854755829985329, 0.09854755829985329, 0.11606925170907523, 0.11606925170907523, 0.11606925170907523, 0.18246534976522388, 0.18246534976522388, 0.18246534976522388, 0.1390317806257293, 0.1390317806257293, 0.1390317806257293, 0.1938770398147872, 0.1938770398147872, 0.1938770398147872, 0.39724871231537584, 0.39724871231537584, 0.39724871231537584, 0.35769146096285853, 0.35769146096285853, 0.35769146096285853, 0.27841567350460517, 0.27841567350460517, 0.27841567350460517, 0.1775879352032571, 0.1775879352032571, 0.1775879352032571, 0.2545531722255069, 0.2545531722255069, 0.2545531722255069, 0.172211211639829, 0.172211211639829, 0.172211211639829, 0.2172974448947509, 0.2172974448947509, 0.2172974448947509, 0.24086630854707414, 0.24086630854707414, 0.24086630854707414, 0.22132650872831572, 0.22132650872831572, 0.22132650872831572, 0.17659981824317006, 0.17659981824317006, 0.17659981824317006, 0.18244749253260462, 0.18244749253260462, 0.18244749253260462, 0.1907391636387441, 0.1907391636387441, 0.1907391636387441, 0.8399759806357371, 0.8399759806357371, 0.8399759806357371, 0.15347896121367577, 0.15347896121367577, 0.15347896121367577, 0.1672786947355297, 0.1672786947355297, 0.1672786947355297, 0.20420680269937908, 0.20420680269937908, 0.20420680269937908, 0.20606363285472384, 0.20606363285472384, 0.20606363285472384, 0.4786896310947384, 0.4786896310947384, 0.4786896310947384, 0.1873260126136157, 0.1873260126136157, 0.1873260126136157, 0.2065928779961742, 0.2065928779961742, 0.2065928779961742, 0.2070720043936809, 0.2070720043936809, 0.2070720043936809, 0.08207243649019036, 0.08207243649019036, 0.08207243649019036, 0.07629567880822119, 0.07629567880822119, 0.07629567880822119, 0.10828620657232368, 0.10828620657232368, 0.10828620657232368]}, "mutation_prompt": null}
{"id": "5608de6a-2da3-4859-b296-4cc71b99b45f", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                # Changed line: Introduce adaptive social component\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce an adaptive social component in PSO to improve convergence speed.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.7807392400433681, 0.7807392400433681, 0.7807392400433681, 0.7831518993323534, 0.7831518993323534, 0.7831518993323534, 0.780637393966667, 0.780637393966667, 0.780637393966667, 0.5485897098418366, 0.5485897098418366, 0.5485897098418366, 0.45407382190825185, 0.45407382190825185, 0.45407382190825185, 0.5011899159789144, 0.5011899159789144, 0.5011899159789144, 0.11499601897944323, 0.11499601897944323, 0.11499601897944323, 0.12104702636722575, 0.12104702636722575, 0.12104702636722575, 0.11216390567264822, 0.11216390567264822, 0.11216390567264822, 0.09902731655630526, 0.09902731655630526, 0.09902731655630526, 0.07842352768913785, 0.07842352768913785, 0.07842352768913785, 0.08238763760435919, 0.08238763760435919, 0.08238763760435919, 0.92894711431897, 0.92894711431897, 0.92894711431897, 0.9454591239448847, 0.9454591239448847, 0.9454591239448847, 0.9474437437647353, 0.9474437437647353, 0.9474437437647353, 0.4624799984937561, 0.4624799984937561, 0.4624799984937561, 0.37094271945023816, 0.37094271945023816, 0.37094271945023816, 0.5135685850991699, 0.5135685850991699, 0.5135685850991699, 0.6224317925799234, 0.6224317925799234, 0.6224317925799234, 0.19101488161032987, 0.19101488161032987, 0.19101488161032987, 0.3131534881532222, 0.3131534881532222, 0.3131534881532222, 0.18151537377902938, 0.18151537377902938, 0.18151537377902938, 0.14429469973384002, 0.14429469973384002, 0.14429469973384002, 0.16755937511930097, 0.16755937511930097, 0.16755937511930097, 0.20095944077521122, 0.20095944077521122, 0.20095944077521122, 0.17399183542583907, 0.17399183542583907, 0.17399183542583907, 0.2146570648009123, 0.2146570648009123, 0.2146570648009123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033901476146178555, 0.033901476146178555, 0.033901476146178555, 0.013444924584019802, 0.013444924584019802, 0.013444924584019802, 0.08972468619062546, 0.08972468619062546, 0.08972468619062546, 0.027975012274370936, 0.027975012274370936, 0.027975012274370936, 0.0741523318674352, 0.0741523318674352, 0.0741523318674352, 0.09986615740044513, 0.09986615740044513, 0.09986615740044513, 0.08055396782630508, 0.08055396782630508, 0.08055396782630508, 0.1309853728192929, 0.1309853728192929, 0.1309853728192929, 0.10815121823708163, 0.10815121823708163, 0.10815121823708163, 0.05586746798838227, 0.05586746798838227, 0.05586746798838227, 0.08989169976567901, 0.08989169976567901, 0.08989169976567901, 0.49271656651787, 0.49271656651787, 0.49271656651787, 0.5235906034380118, 0.5235906034380118, 0.5235906034380118, 0.4941708464823861, 0.4941708464823861, 0.4941708464823861, 0.09670549067473089, 0.09670549067473089, 0.09670549067473089, 0.08820369230144265, 0.08820369230144265, 0.08820369230144265, 0.12748670618591063, 0.12748670618591063, 0.12748670618591063, 0.27903251224854575, 0.27903251224854575, 0.27903251224854575, 0.17511101509537985, 0.17511101509537985, 0.17511101509537985, 0.30439801212362805, 0.30439801212362805, 0.30439801212362805, 0.4329508926740976, 0.4329508926740976, 0.4329508926740976, 0.35714983817245505, 0.35714983817245505, 0.35714983817245505, 0.24400852808689533, 0.24400852808689533, 0.24400852808689533, 0.13590755265684407, 0.13590755265684407, 0.13590755265684407, 0.19504078740223552, 0.19504078740223552, 0.19504078740223552, 0.16576731658224564, 0.16576731658224564, 0.16576731658224564, 0.2092147768696776, 0.2092147768696776, 0.2092147768696776, 0.24094673509439024, 0.24094673509439024, 0.24094673509439024, 0.1904415974389676, 0.1904415974389676, 0.1904415974389676, 0.18091275625324532, 0.18091275625324532, 0.18091275625324532, 0.21309320226722994, 0.21309320226722994, 0.21309320226722994, 0.19273202469616812, 0.19273202469616812, 0.19273202469616812, 0.8265184485923367, 0.8265184485923367, 0.8265184485923367, 0.15884534742981615, 0.15884534742981615, 0.15884534742981615, 0.1685288836863198, 0.1685288836863198, 0.1685288836863198, 0.4893047191676556, 0.4893047191676556, 0.4893047191676556, 0.20423185255412413, 0.20423185255412413, 0.20423185255412413, 0.15448304778209077, 0.15448304778209077, 0.15448304778209077, 0.18615209442064273, 0.18615209442064273, 0.18615209442064273, 0.19487719993374042, 0.19487719993374042, 0.19487719993374042, 0.19504586928468604, 0.19504586928468604, 0.19504586928468604, 0.08134616261076644, 0.08134616261076644, 0.08134616261076644, 0.08838262943894037, 0.08838262943894037, 0.08838262943894037, 0.09335040961731611, 0.09335040961731611, 0.09335040961731611]}, "mutation_prompt": null}
{"id": "5d279477-788e-4320-afd7-9366c233f86f", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce dynamic adaptation of DE parameters and velocity boundary control to enhance exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": 0.2784904387682466, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "761dc929-a363-47a8-9931-3b7468bd34f5", "metadata": {"aucs": [0.7557243436881815, 0.7557243436881815, 0.7557243436881815, 0.7397120400929669, 0.7397120400929669, 0.7397120400929669, 0.7655805864478371, 0.7655805864478371, 0.7655805864478371, 0.5153438302033988, 0.5153438302033988, 0.5153438302033988, 0.5360340705925497, 0.5360340705925497, 0.5360340705925497, 0.5730400061745754, 0.5730400061745754, 0.5730400061745754, 0.14788492572007494, 0.14788492572007494, 0.14788492572007494, 0.09795820237981911, 0.09795820237981911, 0.09795820237981911, 0.10303307257839711, 0.10303307257839711, 0.10303307257839711, 0.09385935040985682, 0.09385935040985682, 0.09385935040985682, 0.13451945009306332, 0.13451945009306332, 0.13451945009306332, 0.10572331674989088, 0.10572331674989088, 0.10572331674989088, 0.8483489982067064, 0.8483489982067064, 0.8483489982067064, 0.8502592189002323, 0.8502592189002323, 0.8502592189002323, 0.8290387881005351, 0.8290387881005351, 0.8290387881005351, 0.4927939302015678, 0.4927939302015678, 0.4927939302015678, 0.31903887793920005, 0.31903887793920005, 0.31903887793920005, 0.5158618684078949, 0.5158618684078949, 0.5158618684078949, 0.17094832118221204, 0.17094832118221204, 0.17094832118221204, 0.2711061515392508, 0.2711061515392508, 0.2711061515392508, 0.20864906859988452, 0.20864906859988452, 0.20864906859988452, 0.18802697902296617, 0.18802697902296617, 0.18802697902296617, 0.19773724274904292, 0.19773724274904292, 0.19773724274904292, 0.172476035323478, 0.172476035323478, 0.172476035323478, 0.1922601061769107, 0.1922601061769107, 0.1922601061769107, 0.16333032350871157, 0.16333032350871157, 0.16333032350871157, 0.19777984601765153, 0.19777984601765153, 0.19777984601765153, 0.1327086193241459, 0.1327086193241459, 0.1327086193241459, 0.06933548373145737, 0.06933548373145737, 0.06933548373145737, 0.11234498568047857, 0.11234498568047857, 0.11234498568047857, 0.13582301941914832, 0.13582301941914832, 0.13582301941914832, 0.05068844570052611, 0.05068844570052611, 0.05068844570052611, 0.15811852360834477, 0.15811852360834477, 0.15811852360834477, 0.0659665199449464, 0.0659665199449464, 0.0659665199449464, 0.11455357872491911, 0.11455357872491911, 0.11455357872491911, 0.21162735175022596, 0.21162735175022596, 0.21162735175022596, 0.17293183149939484, 0.17293183149939484, 0.17293183149939484, 0.07122662948565883, 0.07122662948565883, 0.07122662948565883, 0.24026336885959487, 0.24026336885959487, 0.24026336885959487, 0.5133221234464287, 0.5133221234464287, 0.5133221234464287, 0.5214424849034389, 0.5214424849034389, 0.5214424849034389, 0.5023243296045778, 0.5023243296045778, 0.5023243296045778, 0.11425971210116281, 0.11425971210116281, 0.11425971210116281, 0.10818958003481693, 0.10818958003481693, 0.10818958003481693, 0.10269245723278597, 0.10269245723278597, 0.10269245723278597, 0.23526009443687956, 0.23526009443687956, 0.23526009443687956, 0.22165442360123655, 0.22165442360123655, 0.22165442360123655, 0.21961003533243084, 0.21961003533243084, 0.21961003533243084, 0.18609367276010114, 0.18609367276010114, 0.18609367276010114, 0.35930948503134785, 0.35930948503134785, 0.35930948503134785, 0.4022157819359877, 0.4022157819359877, 0.4022157819359877, 0.17878576044640448, 0.17878576044640448, 0.17878576044640448, 0.25955742146605987, 0.25955742146605987, 0.25955742146605987, 0.17280714335354674, 0.17280714335354674, 0.17280714335354674, 0.2787202811054942, 0.2787202811054942, 0.2787202811054942, 0.2171234725141925, 0.2171234725141925, 0.2171234725141925, 0.24422684266702643, 0.24422684266702643, 0.24422684266702643, 0.19465814505025336, 0.19465814505025336, 0.19465814505025336, 0.1792521448895099, 0.1792521448895099, 0.1792521448895099, 0.1728663822685792, 0.1728663822685792, 0.1728663822685792, 0.18771523506456955, 0.18771523506456955, 0.18771523506456955, 0.16978371189810582, 0.16978371189810582, 0.16978371189810582, 0.846992031454183, 0.846992031454183, 0.846992031454183, 0.5630243671592827, 0.5630243671592827, 0.5630243671592827, 0.20836000179270697, 0.20836000179270697, 0.20836000179270697, 0.16012916989743664, 0.16012916989743664, 0.16012916989743664, 0.18102196228488265, 0.18102196228488265, 0.18102196228488265, 0.17827677459854874, 0.17827677459854874, 0.17827677459854874, 0.18702122622975537, 0.18702122622975537, 0.18702122622975537, 0.0863471223638076, 0.0863471223638076, 0.0863471223638076, 0.08438122776924684, 0.08438122776924684, 0.08438122776924684, 0.09222967788326963, 0.09222967788326963, 0.09222967788326963]}, "mutation_prompt": null}
{"id": "8c202ae3-6489-44fa-85d2-b58e777b0402", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Introduce adaptive velocity decay\n                particle_velocities[i] *= (1 - evaluations / (2 * self.budget))\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                # Changed line: Scale dynamic perturbation with adaptive factor\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - 0.5 * evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive velocity decay and mutation perturbation scaling to fine-tune exploration-exploitation balance for improved convergence.", "configspace": "", "generation": 74, "fitness": 0.26330690105018517, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7875769994307185, 0.7875769994307185, 0.7875769994307185, 0.7714702008420447, 0.7714702008420447, 0.7714702008420447, 0.7705301785554808, 0.7705301785554808, 0.7705301785554808, 0.5751703283813854, 0.5751703283813854, 0.5751703283813854, 0.31400178003448787, 0.31400178003448787, 0.31400178003448787, 0.36678883749419033, 0.36678883749419033, 0.36678883749419033, 0.12843206949842811, 0.12843206949842811, 0.12843206949842811, 0.09507674210179207, 0.09507674210179207, 0.09507674210179207, 0.12678567599470114, 0.12678567599470114, 0.12678567599470114, 0.09095412346141896, 0.09095412346141896, 0.09095412346141896, 0.09643057226356944, 0.09643057226356944, 0.09643057226356944, 0.13533375846971718, 0.13533375846971718, 0.13533375846971718, 0.9600159990450166, 0.9600159990450166, 0.9600159990450166, 0.9507883751219591, 0.9507883751219591, 0.9507883751219591, 0.9512926846068598, 0.9512926846068598, 0.9512926846068598, 0.4105873017113548, 0.4105873017113548, 0.4105873017113548, 0.2983979362177892, 0.2983979362177892, 0.2983979362177892, 0.3999501211130835, 0.3999501211130835, 0.3999501211130835, 0.16898479739520955, 0.16898479739520955, 0.16898479739520955, 0.18624412621374364, 0.18624412621374364, 0.18624412621374364, 0.16608880467232323, 0.16608880467232323, 0.16608880467232323, 0.11287161718271677, 0.11287161718271677, 0.11287161718271677, 0.14643319817926836, 0.14643319817926836, 0.14643319817926836, 0.1808076320100077, 0.1808076320100077, 0.1808076320100077, 0.19600161732654586, 0.19600161732654586, 0.19600161732654586, 0.18444382046548735, 0.18444382046548735, 0.18444382046548735, 0.19901890863454585, 0.19901890863454585, 0.19901890863454585, 0.008338568670506197, 0.008338568670506197, 0.008338568670506197, 0.03404389268865249, 0.03404389268865249, 0.03404389268865249, 0.12651570652656574, 0.12651570652656574, 0.12651570652656574, 0.13640619822903577, 0.13640619822903577, 0.13640619822903577, 0.03510808537605026, 0.03510808537605026, 0.03510808537605026, 0.08232646293205437, 0.08232646293205437, 0.08232646293205437, 0.06048632532189635, 0.06048632532189635, 0.06048632532189635, 0.09239441340854715, 0.09239441340854715, 0.09239441340854715, 0.06929607909536006, 0.06929607909536006, 0.06929607909536006, 0.17072517278570054, 0.17072517278570054, 0.17072517278570054, 0.11163310496728718, 0.11163310496728718, 0.11163310496728718, 0.29187003331690053, 0.29187003331690053, 0.29187003331690053, 0.4671416288047314, 0.4671416288047314, 0.4671416288047314, 0.4932621327289194, 0.4932621327289194, 0.4932621327289194, 0.4861802403250691, 0.4861802403250691, 0.4861802403250691, 0.10694980664015163, 0.10694980664015163, 0.10694980664015163, 0.1314605334245793, 0.1314605334245793, 0.1314605334245793, 0.11306936083861852, 0.11306936083861852, 0.11306936083861852, 0.16693717239824146, 0.16693717239824146, 0.16693717239824146, 0.27475937806428696, 0.27475937806428696, 0.27475937806428696, 0.23775844964543102, 0.23775844964543102, 0.23775844964543102, 0.29741649089505895, 0.29741649089505895, 0.29741649089505895, 0.31723322402728804, 0.31723322402728804, 0.31723322402728804, 0.22376543270863747, 0.22376543270863747, 0.22376543270863747, 0.18375528720772538, 0.18375528720772538, 0.18375528720772538, 0.3099800751394387, 0.3099800751394387, 0.3099800751394387, 0.18167251572835774, 0.18167251572835774, 0.18167251572835774, 0.24411857069026033, 0.24411857069026033, 0.24411857069026033, 0.25838049587847367, 0.25838049587847367, 0.25838049587847367, 0.2410150483720207, 0.2410150483720207, 0.2410150483720207, 0.21955152582828463, 0.21955152582828463, 0.21955152582828463, 0.17874216999686554, 0.17874216999686554, 0.17874216999686554, 0.21252610186394572, 0.21252610186394572, 0.21252610186394572, 0.8466598799494448, 0.8466598799494448, 0.8466598799494448, 0.15709731107294034, 0.15709731107294034, 0.15709731107294034, 0.1675809472385894, 0.1675809472385894, 0.1675809472385894, 0.20817087702878823, 0.20817087702878823, 0.20817087702878823, 0.2063524904634827, 0.2063524904634827, 0.2063524904634827, 0.16153293992332196, 0.16153293992332196, 0.16153293992332196, 0.19133097213339945, 0.19133097213339945, 0.19133097213339945, 0.18011020985618476, 0.18011020985618476, 0.18011020985618476, 0.18049269066855778, 0.18049269066855778, 0.18049269066855778, 0.08671269651542202, 0.08671269651542202, 0.08671269651542202, 0.09851303937127998, 0.09851303937127998, 0.09851303937127998, 0.1382449304431339, 0.1382449304431339, 0.1382449304431339]}, "mutation_prompt": null}
{"id": "81f528db-8173-4474-9e8f-e579e03e503e", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce dynamic adaptation of DE parameters and velocity boundary control to enhance exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7557243436881815, 0.7557243436881815, 0.7557243436881815, 0.7397120400929669, 0.7397120400929669, 0.7397120400929669, 0.7655805864478371, 0.7655805864478371, 0.7655805864478371, 0.5153438302033988, 0.5153438302033988, 0.5153438302033988, 0.5360340705925497, 0.5360340705925497, 0.5360340705925497, 0.5730400061745754, 0.5730400061745754, 0.5730400061745754, 0.14788492572007494, 0.14788492572007494, 0.14788492572007494, 0.09795820237981911, 0.09795820237981911, 0.09795820237981911, 0.10303307257839711, 0.10303307257839711, 0.10303307257839711, 0.09385935040985682, 0.09385935040985682, 0.09385935040985682, 0.13451945009306332, 0.13451945009306332, 0.13451945009306332, 0.10572331674989088, 0.10572331674989088, 0.10572331674989088, 0.8483489982067064, 0.8483489982067064, 0.8483489982067064, 0.8502592189002323, 0.8502592189002323, 0.8502592189002323, 0.8290387881005351, 0.8290387881005351, 0.8290387881005351, 0.4927939302015678, 0.4927939302015678, 0.4927939302015678, 0.31903887793920005, 0.31903887793920005, 0.31903887793920005, 0.5158618684078949, 0.5158618684078949, 0.5158618684078949, 0.17094832118221204, 0.17094832118221204, 0.17094832118221204, 0.2711061515392508, 0.2711061515392508, 0.2711061515392508, 0.20864906859988452, 0.20864906859988452, 0.20864906859988452, 0.18802697902296617, 0.18802697902296617, 0.18802697902296617, 0.19773724274904292, 0.19773724274904292, 0.19773724274904292, 0.172476035323478, 0.172476035323478, 0.172476035323478, 0.1922601061769107, 0.1922601061769107, 0.1922601061769107, 0.16333032350871157, 0.16333032350871157, 0.16333032350871157, 0.19777984601765153, 0.19777984601765153, 0.19777984601765153, 0.1327086193241459, 0.1327086193241459, 0.1327086193241459, 0.06933548373145737, 0.06933548373145737, 0.06933548373145737, 0.11234498568047857, 0.11234498568047857, 0.11234498568047857, 0.13582301941914832, 0.13582301941914832, 0.13582301941914832, 0.05068844570052611, 0.05068844570052611, 0.05068844570052611, 0.15811852360834477, 0.15811852360834477, 0.15811852360834477, 0.0659665199449464, 0.0659665199449464, 0.0659665199449464, 0.11455357872491911, 0.11455357872491911, 0.11455357872491911, 0.21162735175022596, 0.21162735175022596, 0.21162735175022596, 0.17293183149939484, 0.17293183149939484, 0.17293183149939484, 0.07122662948565883, 0.07122662948565883, 0.07122662948565883, 0.24026336885959487, 0.24026336885959487, 0.24026336885959487, 0.5133221234464287, 0.5133221234464287, 0.5133221234464287, 0.5214424849034389, 0.5214424849034389, 0.5214424849034389, 0.5023243296045778, 0.5023243296045778, 0.5023243296045778, 0.11425971210116281, 0.11425971210116281, 0.11425971210116281, 0.10818958003481693, 0.10818958003481693, 0.10818958003481693, 0.10269245723278597, 0.10269245723278597, 0.10269245723278597, 0.23526009443687956, 0.23526009443687956, 0.23526009443687956, 0.22165442360123655, 0.22165442360123655, 0.22165442360123655, 0.21961003533243084, 0.21961003533243084, 0.21961003533243084, 0.18609367276010114, 0.18609367276010114, 0.18609367276010114, 0.35930948503134785, 0.35930948503134785, 0.35930948503134785, 0.4022157819359877, 0.4022157819359877, 0.4022157819359877, 0.17878576044640448, 0.17878576044640448, 0.17878576044640448, 0.25955742146605987, 0.25955742146605987, 0.25955742146605987, 0.17280714335354674, 0.17280714335354674, 0.17280714335354674, 0.2787202811054942, 0.2787202811054942, 0.2787202811054942, 0.2171234725141925, 0.2171234725141925, 0.2171234725141925, 0.24422684266702643, 0.24422684266702643, 0.24422684266702643, 0.19465814505025336, 0.19465814505025336, 0.19465814505025336, 0.1792521448895099, 0.1792521448895099, 0.1792521448895099, 0.1728663822685792, 0.1728663822685792, 0.1728663822685792, 0.18771523506456955, 0.18771523506456955, 0.18771523506456955, 0.16978371189810582, 0.16978371189810582, 0.16978371189810582, 0.846992031454183, 0.846992031454183, 0.846992031454183, 0.5630243671592827, 0.5630243671592827, 0.5630243671592827, 0.20836000179270697, 0.20836000179270697, 0.20836000179270697, 0.16012916989743664, 0.16012916989743664, 0.16012916989743664, 0.18102196228488265, 0.18102196228488265, 0.18102196228488265, 0.17827677459854874, 0.17827677459854874, 0.17827677459854874, 0.18702122622975537, 0.18702122622975537, 0.18702122622975537, 0.0863471223638076, 0.0863471223638076, 0.0863471223638076, 0.08438122776924684, 0.08438122776924684, 0.08438122776924684, 0.09222967788326963, 0.09222967788326963, 0.09222967788326963]}, "mutation_prompt": null}
{"id": "d2a9843b-a7be-4d02-8ba7-86ee9cbe2600", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                # Changed line: Adaptively vary inertia weight range\n                adaptive_inertia_weight = np.random.uniform(0.4, 1.1, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Periodically reinitialize velocities for diversity\n                if evaluations % (self.budget // 4) == 0:\n                    particle_velocities[i] = np.random.uniform(-1, 1, self.dim)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance search diversity by introducing a periodic reinitialization of velocities and adaptively varying the inertia weight range.", "configspace": "", "generation": 76, "fitness": 0.26371568365377035, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7195293763767083, 0.7195293763767083, 0.7195293763767083, 0.7536791628430548, 0.7536791628430548, 0.7536791628430548, 0.7188091754021497, 0.7188091754021497, 0.7188091754021497, 0.5345473737753789, 0.5345473737753789, 0.5345473737753789, 0.29304209705815953, 0.29304209705815953, 0.29304209705815953, 0.5368594383264873, 0.5368594383264873, 0.5368594383264873, 0.12528757535127788, 0.12528757535127788, 0.12528757535127788, 0.1140958827257964, 0.1140958827257964, 0.1140958827257964, 0.1234600589799657, 0.1234600589799657, 0.1234600589799657, 0.10364568436139854, 0.10364568436139854, 0.10364568436139854, 0.12597888549168323, 0.12597888549168323, 0.12597888549168323, 0.08964285595140153, 0.08964285595140153, 0.08964285595140153, 0.9623714272538654, 0.9623714272538654, 0.9623714272538654, 0.9497531219319482, 0.9497531219319482, 0.9497531219319482, 0.9513041543958658, 0.9513041543958658, 0.9513041543958658, 0.4441075514774958, 0.4441075514774958, 0.4441075514774958, 0.28127140571150266, 0.28127140571150266, 0.28127140571150266, 0.4846743586253456, 0.4846743586253456, 0.4846743586253456, 0.21282320371465846, 0.21282320371465846, 0.21282320371465846, 0.21046734119588018, 0.21046734119588018, 0.21046734119588018, 0.22003797134465886, 0.22003797134465886, 0.22003797134465886, 0.23503741805124378, 0.23503741805124378, 0.23503741805124378, 0.21151067776964916, 0.21151067776964916, 0.21151067776964916, 0.17523686081458456, 0.17523686081458456, 0.17523686081458456, 0.19547767421221884, 0.19547767421221884, 0.19547767421221884, 0.20704755360116955, 0.20704755360116955, 0.20704755360116955, 0.2371936001967877, 0.2371936001967877, 0.2371936001967877, 0.038977816584673364, 0.038977816584673364, 0.038977816584673364, 0.02094315302927463, 0.02094315302927463, 0.02094315302927463, 0.05640751124895882, 0.05640751124895882, 0.05640751124895882, 0.15711759839471995, 0.15711759839471995, 0.15711759839471995, 0.049196786360756084, 0.049196786360756084, 0.049196786360756084, 0.20271387410285024, 0.20271387410285024, 0.20271387410285024, 0.05909258000855966, 0.05909258000855966, 0.05909258000855966, 0.07946441445449415, 0.07946441445449415, 0.07946441445449415, 0.06293737551819956, 0.06293737551819956, 0.06293737551819956, 0.22615789079182935, 0.22615789079182935, 0.22615789079182935, 0.09812066906954164, 0.09812066906954164, 0.09812066906954164, 0.2335815182710892, 0.2335815182710892, 0.2335815182710892, 0.5425226557081912, 0.5425226557081912, 0.5425226557081912, 0.4624276427064148, 0.4624276427064148, 0.4624276427064148, 0.5080770451316889, 0.5080770451316889, 0.5080770451316889, 0.12266026522819085, 0.12266026522819085, 0.12266026522819085, 0.08769318838247486, 0.08769318838247486, 0.08769318838247486, 0.07215024959194638, 0.07215024959194638, 0.07215024959194638, 0.20908990256478943, 0.20908990256478943, 0.20908990256478943, 0.1459767997830308, 0.1459767997830308, 0.1459767997830308, 0.17828850686551434, 0.17828850686551434, 0.17828850686551434, 0.2660420745436466, 0.2660420745436466, 0.2660420745436466, 0.37403074770904843, 0.37403074770904843, 0.37403074770904843, 0.2221558660073657, 0.2221558660073657, 0.2221558660073657, 0.14678805969846143, 0.14678805969846143, 0.14678805969846143, 0.23834422994305415, 0.23834422994305415, 0.23834422994305415, 0.13410563451903967, 0.13410563451903967, 0.13410563451903967, 0.22521148096992682, 0.22521148096992682, 0.22521148096992682, 0.22212948639650187, 0.22212948639650187, 0.22212948639650187, 0.25381649658495586, 0.25381649658495586, 0.25381649658495586, 0.21604108017402635, 0.21604108017402635, 0.21604108017402635, 0.18109037201376, 0.18109037201376, 0.18109037201376, 0.1847661890887522, 0.1847661890887522, 0.1847661890887522, 0.7714627332126275, 0.7714627332126275, 0.7714627332126275, 0.15573469892843972, 0.15573469892843972, 0.15573469892843972, 0.16849339684618114, 0.16849339684618114, 0.16849339684618114, 0.20913391353142163, 0.20913391353142163, 0.20913391353142163, 0.20602848280562436, 0.20602848280562436, 0.20602848280562436, 0.1661441763431185, 0.1661441763431185, 0.1661441763431185, 0.18626075165767064, 0.18626075165767064, 0.18626075165767064, 0.19654533423691423, 0.19654533423691423, 0.19654533423691423, 0.17806194525974117, 0.17806194525974117, 0.17806194525974117, 0.08114953619892462, 0.08114953619892462, 0.08114953619892462, 0.07206032771080151, 0.07206032771080151, 0.07206032771080151, 0.10144287795393536, 0.10144287795393536, 0.10144287795393536]}, "mutation_prompt": null}
{"id": "164c12f3-4715-43d0-8c27-b31fa022d8eb", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce dynamic adaptation of DE parameters and velocity boundary control to enhance exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7557243436881815, 0.7557243436881815, 0.7557243436881815, 0.7397120400929669, 0.7397120400929669, 0.7397120400929669, 0.7655805864478371, 0.7655805864478371, 0.7655805864478371, 0.5153438302033988, 0.5153438302033988, 0.5153438302033988, 0.5360340705925497, 0.5360340705925497, 0.5360340705925497, 0.5730400061745754, 0.5730400061745754, 0.5730400061745754, 0.14788492572007494, 0.14788492572007494, 0.14788492572007494, 0.09795820237981911, 0.09795820237981911, 0.09795820237981911, 0.10303307257839711, 0.10303307257839711, 0.10303307257839711, 0.09385935040985682, 0.09385935040985682, 0.09385935040985682, 0.13451945009306332, 0.13451945009306332, 0.13451945009306332, 0.10572331674989088, 0.10572331674989088, 0.10572331674989088, 0.8483489982067064, 0.8483489982067064, 0.8483489982067064, 0.8502592189002323, 0.8502592189002323, 0.8502592189002323, 0.8290387881005351, 0.8290387881005351, 0.8290387881005351, 0.4927939302015678, 0.4927939302015678, 0.4927939302015678, 0.31903887793920005, 0.31903887793920005, 0.31903887793920005, 0.5158618684078949, 0.5158618684078949, 0.5158618684078949, 0.17094832118221204, 0.17094832118221204, 0.17094832118221204, 0.2711061515392508, 0.2711061515392508, 0.2711061515392508, 0.20864906859988452, 0.20864906859988452, 0.20864906859988452, 0.18802697902296617, 0.18802697902296617, 0.18802697902296617, 0.19773724274904292, 0.19773724274904292, 0.19773724274904292, 0.172476035323478, 0.172476035323478, 0.172476035323478, 0.1922601061769107, 0.1922601061769107, 0.1922601061769107, 0.16333032350871157, 0.16333032350871157, 0.16333032350871157, 0.19777984601765153, 0.19777984601765153, 0.19777984601765153, 0.1327086193241459, 0.1327086193241459, 0.1327086193241459, 0.06933548373145737, 0.06933548373145737, 0.06933548373145737, 0.11234498568047857, 0.11234498568047857, 0.11234498568047857, 0.13582301941914832, 0.13582301941914832, 0.13582301941914832, 0.05068844570052611, 0.05068844570052611, 0.05068844570052611, 0.15811852360834477, 0.15811852360834477, 0.15811852360834477, 0.0659665199449464, 0.0659665199449464, 0.0659665199449464, 0.11455357872491911, 0.11455357872491911, 0.11455357872491911, 0.21162735175022596, 0.21162735175022596, 0.21162735175022596, 0.17293183149939484, 0.17293183149939484, 0.17293183149939484, 0.07122662948565883, 0.07122662948565883, 0.07122662948565883, 0.24026336885959487, 0.24026336885959487, 0.24026336885959487, 0.5133221234464287, 0.5133221234464287, 0.5133221234464287, 0.5214424849034389, 0.5214424849034389, 0.5214424849034389, 0.5023243296045778, 0.5023243296045778, 0.5023243296045778, 0.11425971210116281, 0.11425971210116281, 0.11425971210116281, 0.10818958003481693, 0.10818958003481693, 0.10818958003481693, 0.10269245723278597, 0.10269245723278597, 0.10269245723278597, 0.23526009443687956, 0.23526009443687956, 0.23526009443687956, 0.22165442360123655, 0.22165442360123655, 0.22165442360123655, 0.21961003533243084, 0.21961003533243084, 0.21961003533243084, 0.18609367276010114, 0.18609367276010114, 0.18609367276010114, 0.35930948503134785, 0.35930948503134785, 0.35930948503134785, 0.4022157819359877, 0.4022157819359877, 0.4022157819359877, 0.17878576044640448, 0.17878576044640448, 0.17878576044640448, 0.25955742146605987, 0.25955742146605987, 0.25955742146605987, 0.17280714335354674, 0.17280714335354674, 0.17280714335354674, 0.2787202811054942, 0.2787202811054942, 0.2787202811054942, 0.2171234725141925, 0.2171234725141925, 0.2171234725141925, 0.24422684266702643, 0.24422684266702643, 0.24422684266702643, 0.19465814505025336, 0.19465814505025336, 0.19465814505025336, 0.1792521448895099, 0.1792521448895099, 0.1792521448895099, 0.1728663822685792, 0.1728663822685792, 0.1728663822685792, 0.18771523506456955, 0.18771523506456955, 0.18771523506456955, 0.16978371189810582, 0.16978371189810582, 0.16978371189810582, 0.846992031454183, 0.846992031454183, 0.846992031454183, 0.5630243671592827, 0.5630243671592827, 0.5630243671592827, 0.20836000179270697, 0.20836000179270697, 0.20836000179270697, 0.16012916989743664, 0.16012916989743664, 0.16012916989743664, 0.18102196228488265, 0.18102196228488265, 0.18102196228488265, 0.17827677459854874, 0.17827677459854874, 0.17827677459854874, 0.18702122622975537, 0.18702122622975537, 0.18702122622975537, 0.0863471223638076, 0.0863471223638076, 0.0863471223638076, 0.08438122776924684, 0.08438122776924684, 0.08438122776924684, 0.09222967788326963, 0.09222967788326963, 0.09222967788326963]}, "mutation_prompt": null}
{"id": "940de83e-bd8b-44f3-8cb1-5fe113e95767", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce dynamic adaptation of DE parameters and velocity boundary control to enhance exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7557243436881815, 0.7557243436881815, 0.7557243436881815, 0.7397120400929669, 0.7397120400929669, 0.7397120400929669, 0.7655805864478371, 0.7655805864478371, 0.7655805864478371, 0.5153438302033988, 0.5153438302033988, 0.5153438302033988, 0.5360340705925497, 0.5360340705925497, 0.5360340705925497, 0.5730400061745754, 0.5730400061745754, 0.5730400061745754, 0.14788492572007494, 0.14788492572007494, 0.14788492572007494, 0.09795820237981911, 0.09795820237981911, 0.09795820237981911, 0.10303307257839711, 0.10303307257839711, 0.10303307257839711, 0.09385935040985682, 0.09385935040985682, 0.09385935040985682, 0.13451945009306332, 0.13451945009306332, 0.13451945009306332, 0.10572331674989088, 0.10572331674989088, 0.10572331674989088, 0.8483489982067064, 0.8483489982067064, 0.8483489982067064, 0.8502592189002323, 0.8502592189002323, 0.8502592189002323, 0.8290387881005351, 0.8290387881005351, 0.8290387881005351, 0.4927939302015678, 0.4927939302015678, 0.4927939302015678, 0.31903887793920005, 0.31903887793920005, 0.31903887793920005, 0.5158618684078949, 0.5158618684078949, 0.5158618684078949, 0.17094832118221204, 0.17094832118221204, 0.17094832118221204, 0.2711061515392508, 0.2711061515392508, 0.2711061515392508, 0.20864906859988452, 0.20864906859988452, 0.20864906859988452, 0.18802697902296617, 0.18802697902296617, 0.18802697902296617, 0.19773724274904292, 0.19773724274904292, 0.19773724274904292, 0.172476035323478, 0.172476035323478, 0.172476035323478, 0.1922601061769107, 0.1922601061769107, 0.1922601061769107, 0.16333032350871157, 0.16333032350871157, 0.16333032350871157, 0.19777984601765153, 0.19777984601765153, 0.19777984601765153, 0.1327086193241459, 0.1327086193241459, 0.1327086193241459, 0.06933548373145737, 0.06933548373145737, 0.06933548373145737, 0.11234498568047857, 0.11234498568047857, 0.11234498568047857, 0.13582301941914832, 0.13582301941914832, 0.13582301941914832, 0.05068844570052611, 0.05068844570052611, 0.05068844570052611, 0.15811852360834477, 0.15811852360834477, 0.15811852360834477, 0.0659665199449464, 0.0659665199449464, 0.0659665199449464, 0.11455357872491911, 0.11455357872491911, 0.11455357872491911, 0.21162735175022596, 0.21162735175022596, 0.21162735175022596, 0.17293183149939484, 0.17293183149939484, 0.17293183149939484, 0.07122662948565883, 0.07122662948565883, 0.07122662948565883, 0.24026336885959487, 0.24026336885959487, 0.24026336885959487, 0.5133221234464287, 0.5133221234464287, 0.5133221234464287, 0.5214424849034389, 0.5214424849034389, 0.5214424849034389, 0.5023243296045778, 0.5023243296045778, 0.5023243296045778, 0.11425971210116281, 0.11425971210116281, 0.11425971210116281, 0.10818958003481693, 0.10818958003481693, 0.10818958003481693, 0.10269245723278597, 0.10269245723278597, 0.10269245723278597, 0.23526009443687956, 0.23526009443687956, 0.23526009443687956, 0.22165442360123655, 0.22165442360123655, 0.22165442360123655, 0.21961003533243084, 0.21961003533243084, 0.21961003533243084, 0.18609367276010114, 0.18609367276010114, 0.18609367276010114, 0.35930948503134785, 0.35930948503134785, 0.35930948503134785, 0.4022157819359877, 0.4022157819359877, 0.4022157819359877, 0.17878576044640448, 0.17878576044640448, 0.17878576044640448, 0.25955742146605987, 0.25955742146605987, 0.25955742146605987, 0.17280714335354674, 0.17280714335354674, 0.17280714335354674, 0.2787202811054942, 0.2787202811054942, 0.2787202811054942, 0.2171234725141925, 0.2171234725141925, 0.2171234725141925, 0.24422684266702643, 0.24422684266702643, 0.24422684266702643, 0.19465814505025336, 0.19465814505025336, 0.19465814505025336, 0.1792521448895099, 0.1792521448895099, 0.1792521448895099, 0.1728663822685792, 0.1728663822685792, 0.1728663822685792, 0.18771523506456955, 0.18771523506456955, 0.18771523506456955, 0.16978371189810582, 0.16978371189810582, 0.16978371189810582, 0.846992031454183, 0.846992031454183, 0.846992031454183, 0.5630243671592827, 0.5630243671592827, 0.5630243671592827, 0.20836000179270697, 0.20836000179270697, 0.20836000179270697, 0.16012916989743664, 0.16012916989743664, 0.16012916989743664, 0.18102196228488265, 0.18102196228488265, 0.18102196228488265, 0.17827677459854874, 0.17827677459854874, 0.17827677459854874, 0.18702122622975537, 0.18702122622975537, 0.18702122622975537, 0.0863471223638076, 0.0863471223638076, 0.0863471223638076, 0.08438122776924684, 0.08438122776924684, 0.08438122776924684, 0.09222967788326963, 0.09222967788326963, 0.09222967788326963]}, "mutation_prompt": null}
{"id": "aad3a717-f027-4893-ac6a-6f3032bbf80e", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce dynamic adaptation of DE parameters and velocity boundary control to enhance exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7557243436881815, 0.7557243436881815, 0.7557243436881815, 0.7397120400929669, 0.7397120400929669, 0.7397120400929669, 0.7655805864478371, 0.7655805864478371, 0.7655805864478371, 0.5153438302033988, 0.5153438302033988, 0.5153438302033988, 0.5360340705925497, 0.5360340705925497, 0.5360340705925497, 0.5730400061745754, 0.5730400061745754, 0.5730400061745754, 0.14788492572007494, 0.14788492572007494, 0.14788492572007494, 0.09795820237981911, 0.09795820237981911, 0.09795820237981911, 0.10303307257839711, 0.10303307257839711, 0.10303307257839711, 0.09385935040985682, 0.09385935040985682, 0.09385935040985682, 0.13451945009306332, 0.13451945009306332, 0.13451945009306332, 0.10572331674989088, 0.10572331674989088, 0.10572331674989088, 0.8483489982067064, 0.8483489982067064, 0.8483489982067064, 0.8502592189002323, 0.8502592189002323, 0.8502592189002323, 0.8290387881005351, 0.8290387881005351, 0.8290387881005351, 0.4927939302015678, 0.4927939302015678, 0.4927939302015678, 0.31903887793920005, 0.31903887793920005, 0.31903887793920005, 0.5158618684078949, 0.5158618684078949, 0.5158618684078949, 0.17094832118221204, 0.17094832118221204, 0.17094832118221204, 0.2711061515392508, 0.2711061515392508, 0.2711061515392508, 0.20864906859988452, 0.20864906859988452, 0.20864906859988452, 0.18802697902296617, 0.18802697902296617, 0.18802697902296617, 0.19773724274904292, 0.19773724274904292, 0.19773724274904292, 0.172476035323478, 0.172476035323478, 0.172476035323478, 0.1922601061769107, 0.1922601061769107, 0.1922601061769107, 0.16333032350871157, 0.16333032350871157, 0.16333032350871157, 0.19777984601765153, 0.19777984601765153, 0.19777984601765153, 0.1327086193241459, 0.1327086193241459, 0.1327086193241459, 0.06933548373145737, 0.06933548373145737, 0.06933548373145737, 0.11234498568047857, 0.11234498568047857, 0.11234498568047857, 0.13582301941914832, 0.13582301941914832, 0.13582301941914832, 0.05068844570052611, 0.05068844570052611, 0.05068844570052611, 0.15811852360834477, 0.15811852360834477, 0.15811852360834477, 0.0659665199449464, 0.0659665199449464, 0.0659665199449464, 0.11455357872491911, 0.11455357872491911, 0.11455357872491911, 0.21162735175022596, 0.21162735175022596, 0.21162735175022596, 0.17293183149939484, 0.17293183149939484, 0.17293183149939484, 0.07122662948565883, 0.07122662948565883, 0.07122662948565883, 0.24026336885959487, 0.24026336885959487, 0.24026336885959487, 0.5133221234464287, 0.5133221234464287, 0.5133221234464287, 0.5214424849034389, 0.5214424849034389, 0.5214424849034389, 0.5023243296045778, 0.5023243296045778, 0.5023243296045778, 0.11425971210116281, 0.11425971210116281, 0.11425971210116281, 0.10818958003481693, 0.10818958003481693, 0.10818958003481693, 0.10269245723278597, 0.10269245723278597, 0.10269245723278597, 0.23526009443687956, 0.23526009443687956, 0.23526009443687956, 0.22165442360123655, 0.22165442360123655, 0.22165442360123655, 0.21961003533243084, 0.21961003533243084, 0.21961003533243084, 0.18609367276010114, 0.18609367276010114, 0.18609367276010114, 0.35930948503134785, 0.35930948503134785, 0.35930948503134785, 0.4022157819359877, 0.4022157819359877, 0.4022157819359877, 0.17878576044640448, 0.17878576044640448, 0.17878576044640448, 0.25955742146605987, 0.25955742146605987, 0.25955742146605987, 0.17280714335354674, 0.17280714335354674, 0.17280714335354674, 0.2787202811054942, 0.2787202811054942, 0.2787202811054942, 0.2171234725141925, 0.2171234725141925, 0.2171234725141925, 0.24422684266702643, 0.24422684266702643, 0.24422684266702643, 0.19465814505025336, 0.19465814505025336, 0.19465814505025336, 0.1792521448895099, 0.1792521448895099, 0.1792521448895099, 0.1728663822685792, 0.1728663822685792, 0.1728663822685792, 0.18771523506456955, 0.18771523506456955, 0.18771523506456955, 0.16978371189810582, 0.16978371189810582, 0.16978371189810582, 0.846992031454183, 0.846992031454183, 0.846992031454183, 0.5630243671592827, 0.5630243671592827, 0.5630243671592827, 0.20836000179270697, 0.20836000179270697, 0.20836000179270697, 0.16012916989743664, 0.16012916989743664, 0.16012916989743664, 0.18102196228488265, 0.18102196228488265, 0.18102196228488265, 0.17827677459854874, 0.17827677459854874, 0.17827677459854874, 0.18702122622975537, 0.18702122622975537, 0.18702122622975537, 0.0863471223638076, 0.0863471223638076, 0.0863471223638076, 0.08438122776924684, 0.08438122776924684, 0.08438122776924684, 0.09222967788326963, 0.09222967788326963, 0.09222967788326963]}, "mutation_prompt": null}
{"id": "f9b87968-92b4-48f4-b7c4-6e63390549cc", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce dynamic adaptation of DE parameters and velocity boundary control to enhance exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7557243436881815, 0.7557243436881815, 0.7557243436881815, 0.7397120400929669, 0.7397120400929669, 0.7397120400929669, 0.7655805864478371, 0.7655805864478371, 0.7655805864478371, 0.5153438302033988, 0.5153438302033988, 0.5153438302033988, 0.5360340705925497, 0.5360340705925497, 0.5360340705925497, 0.5730400061745754, 0.5730400061745754, 0.5730400061745754, 0.14788492572007494, 0.14788492572007494, 0.14788492572007494, 0.09795820237981911, 0.09795820237981911, 0.09795820237981911, 0.10303307257839711, 0.10303307257839711, 0.10303307257839711, 0.09385935040985682, 0.09385935040985682, 0.09385935040985682, 0.13451945009306332, 0.13451945009306332, 0.13451945009306332, 0.10572331674989088, 0.10572331674989088, 0.10572331674989088, 0.8483489982067064, 0.8483489982067064, 0.8483489982067064, 0.8502592189002323, 0.8502592189002323, 0.8502592189002323, 0.8290387881005351, 0.8290387881005351, 0.8290387881005351, 0.4927939302015678, 0.4927939302015678, 0.4927939302015678, 0.31903887793920005, 0.31903887793920005, 0.31903887793920005, 0.5158618684078949, 0.5158618684078949, 0.5158618684078949, 0.17094832118221204, 0.17094832118221204, 0.17094832118221204, 0.2711061515392508, 0.2711061515392508, 0.2711061515392508, 0.20864906859988452, 0.20864906859988452, 0.20864906859988452, 0.18802697902296617, 0.18802697902296617, 0.18802697902296617, 0.19773724274904292, 0.19773724274904292, 0.19773724274904292, 0.172476035323478, 0.172476035323478, 0.172476035323478, 0.1922601061769107, 0.1922601061769107, 0.1922601061769107, 0.16333032350871157, 0.16333032350871157, 0.16333032350871157, 0.19777984601765153, 0.19777984601765153, 0.19777984601765153, 0.1327086193241459, 0.1327086193241459, 0.1327086193241459, 0.06933548373145737, 0.06933548373145737, 0.06933548373145737, 0.11234498568047857, 0.11234498568047857, 0.11234498568047857, 0.13582301941914832, 0.13582301941914832, 0.13582301941914832, 0.05068844570052611, 0.05068844570052611, 0.05068844570052611, 0.15811852360834477, 0.15811852360834477, 0.15811852360834477, 0.0659665199449464, 0.0659665199449464, 0.0659665199449464, 0.11455357872491911, 0.11455357872491911, 0.11455357872491911, 0.21162735175022596, 0.21162735175022596, 0.21162735175022596, 0.17293183149939484, 0.17293183149939484, 0.17293183149939484, 0.07122662948565883, 0.07122662948565883, 0.07122662948565883, 0.24026336885959487, 0.24026336885959487, 0.24026336885959487, 0.5133221234464287, 0.5133221234464287, 0.5133221234464287, 0.5214424849034389, 0.5214424849034389, 0.5214424849034389, 0.5023243296045778, 0.5023243296045778, 0.5023243296045778, 0.11425971210116281, 0.11425971210116281, 0.11425971210116281, 0.10818958003481693, 0.10818958003481693, 0.10818958003481693, 0.10269245723278597, 0.10269245723278597, 0.10269245723278597, 0.23526009443687956, 0.23526009443687956, 0.23526009443687956, 0.22165442360123655, 0.22165442360123655, 0.22165442360123655, 0.21961003533243084, 0.21961003533243084, 0.21961003533243084, 0.18609367276010114, 0.18609367276010114, 0.18609367276010114, 0.35930948503134785, 0.35930948503134785, 0.35930948503134785, 0.4022157819359877, 0.4022157819359877, 0.4022157819359877, 0.17878576044640448, 0.17878576044640448, 0.17878576044640448, 0.25955742146605987, 0.25955742146605987, 0.25955742146605987, 0.17280714335354674, 0.17280714335354674, 0.17280714335354674, 0.2787202811054942, 0.2787202811054942, 0.2787202811054942, 0.2171234725141925, 0.2171234725141925, 0.2171234725141925, 0.24422684266702643, 0.24422684266702643, 0.24422684266702643, 0.19465814505025336, 0.19465814505025336, 0.19465814505025336, 0.1792521448895099, 0.1792521448895099, 0.1792521448895099, 0.1728663822685792, 0.1728663822685792, 0.1728663822685792, 0.18771523506456955, 0.18771523506456955, 0.18771523506456955, 0.16978371189810582, 0.16978371189810582, 0.16978371189810582, 0.846992031454183, 0.846992031454183, 0.846992031454183, 0.5630243671592827, 0.5630243671592827, 0.5630243671592827, 0.20836000179270697, 0.20836000179270697, 0.20836000179270697, 0.16012916989743664, 0.16012916989743664, 0.16012916989743664, 0.18102196228488265, 0.18102196228488265, 0.18102196228488265, 0.17827677459854874, 0.17827677459854874, 0.17827677459854874, 0.18702122622975537, 0.18702122622975537, 0.18702122622975537, 0.0863471223638076, 0.0863471223638076, 0.0863471223638076, 0.08438122776924684, 0.08438122776924684, 0.08438122776924684, 0.09222967788326963, 0.09222967788326963, 0.09222967788326963]}, "mutation_prompt": null}
{"id": "2c1935fb-06de-443a-9329-8612d87e6e35", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce dynamic adaptation of DE parameters and velocity boundary control to enhance exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7557243436881815, 0.7557243436881815, 0.7557243436881815, 0.7397120400929669, 0.7397120400929669, 0.7397120400929669, 0.7655805864478371, 0.7655805864478371, 0.7655805864478371, 0.5153438302033988, 0.5153438302033988, 0.5153438302033988, 0.5360340705925497, 0.5360340705925497, 0.5360340705925497, 0.5730400061745754, 0.5730400061745754, 0.5730400061745754, 0.14788492572007494, 0.14788492572007494, 0.14788492572007494, 0.09795820237981911, 0.09795820237981911, 0.09795820237981911, 0.10303307257839711, 0.10303307257839711, 0.10303307257839711, 0.09385935040985682, 0.09385935040985682, 0.09385935040985682, 0.13451945009306332, 0.13451945009306332, 0.13451945009306332, 0.10572331674989088, 0.10572331674989088, 0.10572331674989088, 0.8483489982067064, 0.8483489982067064, 0.8483489982067064, 0.8502592189002323, 0.8502592189002323, 0.8502592189002323, 0.8290387881005351, 0.8290387881005351, 0.8290387881005351, 0.4927939302015678, 0.4927939302015678, 0.4927939302015678, 0.31903887793920005, 0.31903887793920005, 0.31903887793920005, 0.5158618684078949, 0.5158618684078949, 0.5158618684078949, 0.17094832118221204, 0.17094832118221204, 0.17094832118221204, 0.2711061515392508, 0.2711061515392508, 0.2711061515392508, 0.20864906859988452, 0.20864906859988452, 0.20864906859988452, 0.18802697902296617, 0.18802697902296617, 0.18802697902296617, 0.19773724274904292, 0.19773724274904292, 0.19773724274904292, 0.172476035323478, 0.172476035323478, 0.172476035323478, 0.1922601061769107, 0.1922601061769107, 0.1922601061769107, 0.16333032350871157, 0.16333032350871157, 0.16333032350871157, 0.19777984601765153, 0.19777984601765153, 0.19777984601765153, 0.1327086193241459, 0.1327086193241459, 0.1327086193241459, 0.06933548373145737, 0.06933548373145737, 0.06933548373145737, 0.11234498568047857, 0.11234498568047857, 0.11234498568047857, 0.13582301941914832, 0.13582301941914832, 0.13582301941914832, 0.05068844570052611, 0.05068844570052611, 0.05068844570052611, 0.15811852360834477, 0.15811852360834477, 0.15811852360834477, 0.0659665199449464, 0.0659665199449464, 0.0659665199449464, 0.11455357872491911, 0.11455357872491911, 0.11455357872491911, 0.21162735175022596, 0.21162735175022596, 0.21162735175022596, 0.17293183149939484, 0.17293183149939484, 0.17293183149939484, 0.07122662948565883, 0.07122662948565883, 0.07122662948565883, 0.24026336885959487, 0.24026336885959487, 0.24026336885959487, 0.5133221234464287, 0.5133221234464287, 0.5133221234464287, 0.5214424849034389, 0.5214424849034389, 0.5214424849034389, 0.5023243296045778, 0.5023243296045778, 0.5023243296045778, 0.11425971210116281, 0.11425971210116281, 0.11425971210116281, 0.10818958003481693, 0.10818958003481693, 0.10818958003481693, 0.10269245723278597, 0.10269245723278597, 0.10269245723278597, 0.23526009443687956, 0.23526009443687956, 0.23526009443687956, 0.22165442360123655, 0.22165442360123655, 0.22165442360123655, 0.21961003533243084, 0.21961003533243084, 0.21961003533243084, 0.18609367276010114, 0.18609367276010114, 0.18609367276010114, 0.35930948503134785, 0.35930948503134785, 0.35930948503134785, 0.4022157819359877, 0.4022157819359877, 0.4022157819359877, 0.17878576044640448, 0.17878576044640448, 0.17878576044640448, 0.25955742146605987, 0.25955742146605987, 0.25955742146605987, 0.17280714335354674, 0.17280714335354674, 0.17280714335354674, 0.2787202811054942, 0.2787202811054942, 0.2787202811054942, 0.2171234725141925, 0.2171234725141925, 0.2171234725141925, 0.24422684266702643, 0.24422684266702643, 0.24422684266702643, 0.19465814505025336, 0.19465814505025336, 0.19465814505025336, 0.1792521448895099, 0.1792521448895099, 0.1792521448895099, 0.1728663822685792, 0.1728663822685792, 0.1728663822685792, 0.18771523506456955, 0.18771523506456955, 0.18771523506456955, 0.16978371189810582, 0.16978371189810582, 0.16978371189810582, 0.846992031454183, 0.846992031454183, 0.846992031454183, 0.5630243671592827, 0.5630243671592827, 0.5630243671592827, 0.20836000179270697, 0.20836000179270697, 0.20836000179270697, 0.16012916989743664, 0.16012916989743664, 0.16012916989743664, 0.18102196228488265, 0.18102196228488265, 0.18102196228488265, 0.17827677459854874, 0.17827677459854874, 0.17827677459854874, 0.18702122622975537, 0.18702122622975537, 0.18702122622975537, 0.0863471223638076, 0.0863471223638076, 0.0863471223638076, 0.08438122776924684, 0.08438122776924684, 0.08438122776924684, 0.09222967788326963, 0.09222967788326963, 0.09222967788326963]}, "mutation_prompt": null}
{"id": "ee4dfd57-04fa-43af-9985-f618463c4440", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Integrate a dynamic learning rate to enhance convergence speed and improve solution quality.", "configspace": "", "generation": 82, "fitness": 0.2784904387682466, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7557243436881815, 0.7557243436881815, 0.7557243436881815, 0.7397120400929669, 0.7397120400929669, 0.7397120400929669, 0.7655805864478371, 0.7655805864478371, 0.7655805864478371, 0.5153438302033988, 0.5153438302033988, 0.5153438302033988, 0.5360340705925497, 0.5360340705925497, 0.5360340705925497, 0.5730400061745754, 0.5730400061745754, 0.5730400061745754, 0.14788492572007494, 0.14788492572007494, 0.14788492572007494, 0.09795820237981911, 0.09795820237981911, 0.09795820237981911, 0.10303307257839711, 0.10303307257839711, 0.10303307257839711, 0.09385935040985682, 0.09385935040985682, 0.09385935040985682, 0.13451945009306332, 0.13451945009306332, 0.13451945009306332, 0.10572331674989088, 0.10572331674989088, 0.10572331674989088, 0.8483489982067064, 0.8483489982067064, 0.8483489982067064, 0.8502592189002323, 0.8502592189002323, 0.8502592189002323, 0.8290387881005351, 0.8290387881005351, 0.8290387881005351, 0.4927939302015678, 0.4927939302015678, 0.4927939302015678, 0.31903887793920005, 0.31903887793920005, 0.31903887793920005, 0.5158618684078949, 0.5158618684078949, 0.5158618684078949, 0.17094832118221204, 0.17094832118221204, 0.17094832118221204, 0.2711061515392508, 0.2711061515392508, 0.2711061515392508, 0.20864906859988452, 0.20864906859988452, 0.20864906859988452, 0.18802697902296617, 0.18802697902296617, 0.18802697902296617, 0.19773724274904292, 0.19773724274904292, 0.19773724274904292, 0.172476035323478, 0.172476035323478, 0.172476035323478, 0.1922601061769107, 0.1922601061769107, 0.1922601061769107, 0.16333032350871157, 0.16333032350871157, 0.16333032350871157, 0.19777984601765153, 0.19777984601765153, 0.19777984601765153, 0.1327086193241459, 0.1327086193241459, 0.1327086193241459, 0.06933548373145737, 0.06933548373145737, 0.06933548373145737, 0.11234498568047857, 0.11234498568047857, 0.11234498568047857, 0.13582301941914832, 0.13582301941914832, 0.13582301941914832, 0.05068844570052611, 0.05068844570052611, 0.05068844570052611, 0.15811852360834477, 0.15811852360834477, 0.15811852360834477, 0.0659665199449464, 0.0659665199449464, 0.0659665199449464, 0.11455357872491911, 0.11455357872491911, 0.11455357872491911, 0.21162735175022596, 0.21162735175022596, 0.21162735175022596, 0.17293183149939484, 0.17293183149939484, 0.17293183149939484, 0.07122662948565883, 0.07122662948565883, 0.07122662948565883, 0.24026336885959487, 0.24026336885959487, 0.24026336885959487, 0.5133221234464287, 0.5133221234464287, 0.5133221234464287, 0.5214424849034389, 0.5214424849034389, 0.5214424849034389, 0.5023243296045778, 0.5023243296045778, 0.5023243296045778, 0.11425971210116281, 0.11425971210116281, 0.11425971210116281, 0.10818958003481693, 0.10818958003481693, 0.10818958003481693, 0.10269245723278597, 0.10269245723278597, 0.10269245723278597, 0.23526009443687956, 0.23526009443687956, 0.23526009443687956, 0.22165442360123655, 0.22165442360123655, 0.22165442360123655, 0.21961003533243084, 0.21961003533243084, 0.21961003533243084, 0.18609367276010114, 0.18609367276010114, 0.18609367276010114, 0.35930948503134785, 0.35930948503134785, 0.35930948503134785, 0.4022157819359877, 0.4022157819359877, 0.4022157819359877, 0.17878576044640448, 0.17878576044640448, 0.17878576044640448, 0.25955742146605987, 0.25955742146605987, 0.25955742146605987, 0.17280714335354674, 0.17280714335354674, 0.17280714335354674, 0.2787202811054942, 0.2787202811054942, 0.2787202811054942, 0.2171234725141925, 0.2171234725141925, 0.2171234725141925, 0.24422684266702643, 0.24422684266702643, 0.24422684266702643, 0.19465814505025336, 0.19465814505025336, 0.19465814505025336, 0.1792521448895099, 0.1792521448895099, 0.1792521448895099, 0.1728663822685792, 0.1728663822685792, 0.1728663822685792, 0.18771523506456955, 0.18771523506456955, 0.18771523506456955, 0.16978371189810582, 0.16978371189810582, 0.16978371189810582, 0.846992031454183, 0.846992031454183, 0.846992031454183, 0.5630243671592827, 0.5630243671592827, 0.5630243671592827, 0.20836000179270697, 0.20836000179270697, 0.20836000179270697, 0.16012916989743664, 0.16012916989743664, 0.16012916989743664, 0.18102196228488265, 0.18102196228488265, 0.18102196228488265, 0.17827677459854874, 0.17827677459854874, 0.17827677459854874, 0.18702122622975537, 0.18702122622975537, 0.18702122622975537, 0.0863471223638076, 0.0863471223638076, 0.0863471223638076, 0.08438122776924684, 0.08438122776924684, 0.08438122776924684, 0.09222967788326963, 0.09222967788326963, 0.09222967788326963]}, "mutation_prompt": null}
{"id": "79305f45-5eb3-487c-bd7b-628eb256dfe9", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Introduce Levy flight for enhanced exploration\n                levy_exponent = 1.5 + np.random.rand(self.dim) * 2\n                levy_step = np.random.standard_cauchy(self.dim) / np.power(abs(np.random.rand(self.dim)), 1/levy_exponent)\n                particle_positions[i] += particle_velocities[i] + levy_step\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance exploration by introducing Levy flight adjustments to particle position updates in PSO.", "configspace": "", "generation": 83, "fitness": 0.14350652449997034, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.2067217908098743, 0.2067217908098743, 0.2067217908098743, 0.19145436694331397, 0.19145436694331397, 0.19145436694331397, 0.1868999931891846, 0.1868999931891846, 0.1868999931891846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05675426067204459, 0.05675426067204459, 0.05675426067204459, 0.08804532738830806, 0.08804532738830806, 0.08804532738830806, 0.058109960606978706, 0.058109960606978706, 0.058109960606978706, 0.04654133923608894, 0.04654133923608894, 0.04654133923608894, 0.05021888583570222, 0.05021888583570222, 0.05021888583570222, 0.04161516249205688, 0.04161516249205688, 0.04161516249205688, 0.9562570298881079, 0.9562570298881079, 0.9562570298881079, 0.9617329792590228, 0.9617329792590228, 0.9617329792590228, 0.9745487288718401, 0.9745487288718401, 0.9745487288718401, 0.12855002561872697, 0.12855002561872697, 0.12855002561872697, 0.09651561811352949, 0.09651561811352949, 0.09651561811352949, 0.10911489059915969, 0.10911489059915969, 0.10911489059915969, 0.16245482600588623, 0.16245482600588623, 0.16245482600588623, 0.17650567540415707, 0.17650567540415707, 0.17650567540415707, 0.1459684660379751, 0.1459684660379751, 0.1459684660379751, 0.013433402672445527, 0.013433402672445527, 0.013433402672445527, 0.05136424506892712, 0.05136424506892712, 0.05136424506892712, 0.07333067524475012, 0.07333067524475012, 0.07333067524475012, 0.08803692724158518, 0.08803692724158518, 0.08803692724158518, 0.03662903792362504, 0.03662903792362504, 0.03662903792362504, 0.02979511006834179, 0.02979511006834179, 0.02979511006834179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06633917020788394, 0.06633917020788394, 0.06633917020788394, 0.0224631806424761, 0.0224631806424761, 0.0224631806424761, 0.055114550093007475, 0.055114550093007475, 0.055114550093007475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036174904634253435, 0.036174904634253435, 0.036174904634253435, 0.031046799889753895, 0.031046799889753895, 0.031046799889753895, 0.0008223726741143356, 0.0008223726741143356, 0.0008223726741143356, 0.23500064143542654, 0.23500064143542654, 0.23500064143542654, 0.20053035222635351, 0.20053035222635351, 0.20053035222635351, 0.24992997598216748, 0.24992997598216748, 0.24992997598216748, 0.050711829294842525, 0.050711829294842525, 0.050711829294842525, 0.060884772627317396, 0.060884772627317396, 0.060884772627317396, 0.05962318767416308, 0.05962318767416308, 0.05962318767416308, 0.150546376757691, 0.150546376757691, 0.150546376757691, 0.1570545001755982, 0.1570545001755982, 0.1570545001755982, 0.1249741716262468, 0.1249741716262468, 0.1249741716262468, 0.17593253965673905, 0.17593253965673905, 0.17593253965673905, 0.18827135066117162, 0.18827135066117162, 0.18827135066117162, 0.16454949141163489, 0.16454949141163489, 0.16454949141163489, 0.11346870697539657, 0.11346870697539657, 0.11346870697539657, 0.14127436000787585, 0.14127436000787585, 0.14127436000787585, 0.13298965937767693, 0.13298965937767693, 0.13298965937767693, 0.1674422216925281, 0.1674422216925281, 0.1674422216925281, 0.18574808614881955, 0.18574808614881955, 0.18574808614881955, 0.1722666618725721, 0.1722666618725721, 0.1722666618725721, 0.15653058777748396, 0.15653058777748396, 0.15653058777748396, 0.16593024480826535, 0.16593024480826535, 0.16593024480826535, 0.16562941118286256, 0.16562941118286256, 0.16562941118286256, 0.22829832629837832, 0.22829832629837832, 0.22829832629837832, 0.1550605782919905, 0.1550605782919905, 0.1550605782919905, 0.1592363960294173, 0.1592363960294173, 0.1592363960294173, 0.28749787731530063, 0.28749787731530063, 0.28749787731530063, 0.17988404391364843, 0.17988404391364843, 0.17988404391364843, 0.20071477811589478, 0.20071477811589478, 0.20071477811589478, 0.2001297231099478, 0.2001297231099478, 0.2001297231099478, 0.18145598872614987, 0.18145598872614987, 0.18145598872614987, 0.18700633864523675, 0.18700633864523675, 0.18700633864523675, 0.07650266175627807, 0.07650266175627807, 0.07650266175627807, 0.058184784222113706, 0.058184784222113706, 0.058184784222113706, 0.05574943486755224, 0.05574943486755224, 0.05574943486755224]}, "mutation_prompt": null}
{"id": "0a3b09c4-f2fa-48de-b209-e778b4d41833", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce dynamic adaptation of DE parameters and velocity boundary control to enhance exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7557243436881815, 0.7557243436881815, 0.7557243436881815, 0.7397120400929669, 0.7397120400929669, 0.7397120400929669, 0.7655805864478371, 0.7655805864478371, 0.7655805864478371, 0.5153438302033988, 0.5153438302033988, 0.5153438302033988, 0.5360340705925497, 0.5360340705925497, 0.5360340705925497, 0.5730400061745754, 0.5730400061745754, 0.5730400061745754, 0.14788492572007494, 0.14788492572007494, 0.14788492572007494, 0.09795820237981911, 0.09795820237981911, 0.09795820237981911, 0.10303307257839711, 0.10303307257839711, 0.10303307257839711, 0.09385935040985682, 0.09385935040985682, 0.09385935040985682, 0.13451945009306332, 0.13451945009306332, 0.13451945009306332, 0.10572331674989088, 0.10572331674989088, 0.10572331674989088, 0.8483489982067064, 0.8483489982067064, 0.8483489982067064, 0.8502592189002323, 0.8502592189002323, 0.8502592189002323, 0.8290387881005351, 0.8290387881005351, 0.8290387881005351, 0.4927939302015678, 0.4927939302015678, 0.4927939302015678, 0.31903887793920005, 0.31903887793920005, 0.31903887793920005, 0.5158618684078949, 0.5158618684078949, 0.5158618684078949, 0.17094832118221204, 0.17094832118221204, 0.17094832118221204, 0.2711061515392508, 0.2711061515392508, 0.2711061515392508, 0.20864906859988452, 0.20864906859988452, 0.20864906859988452, 0.18802697902296617, 0.18802697902296617, 0.18802697902296617, 0.19773724274904292, 0.19773724274904292, 0.19773724274904292, 0.172476035323478, 0.172476035323478, 0.172476035323478, 0.1922601061769107, 0.1922601061769107, 0.1922601061769107, 0.16333032350871157, 0.16333032350871157, 0.16333032350871157, 0.19777984601765153, 0.19777984601765153, 0.19777984601765153, 0.1327086193241459, 0.1327086193241459, 0.1327086193241459, 0.06933548373145737, 0.06933548373145737, 0.06933548373145737, 0.11234498568047857, 0.11234498568047857, 0.11234498568047857, 0.13582301941914832, 0.13582301941914832, 0.13582301941914832, 0.05068844570052611, 0.05068844570052611, 0.05068844570052611, 0.15811852360834477, 0.15811852360834477, 0.15811852360834477, 0.0659665199449464, 0.0659665199449464, 0.0659665199449464, 0.11455357872491911, 0.11455357872491911, 0.11455357872491911, 0.21162735175022596, 0.21162735175022596, 0.21162735175022596, 0.17293183149939484, 0.17293183149939484, 0.17293183149939484, 0.07122662948565883, 0.07122662948565883, 0.07122662948565883, 0.24026336885959487, 0.24026336885959487, 0.24026336885959487, 0.5133221234464287, 0.5133221234464287, 0.5133221234464287, 0.5214424849034389, 0.5214424849034389, 0.5214424849034389, 0.5023243296045778, 0.5023243296045778, 0.5023243296045778, 0.11425971210116281, 0.11425971210116281, 0.11425971210116281, 0.10818958003481693, 0.10818958003481693, 0.10818958003481693, 0.10269245723278597, 0.10269245723278597, 0.10269245723278597, 0.23526009443687956, 0.23526009443687956, 0.23526009443687956, 0.22165442360123655, 0.22165442360123655, 0.22165442360123655, 0.21961003533243084, 0.21961003533243084, 0.21961003533243084, 0.18609367276010114, 0.18609367276010114, 0.18609367276010114, 0.35930948503134785, 0.35930948503134785, 0.35930948503134785, 0.4022157819359877, 0.4022157819359877, 0.4022157819359877, 0.17878576044640448, 0.17878576044640448, 0.17878576044640448, 0.25955742146605987, 0.25955742146605987, 0.25955742146605987, 0.17280714335354674, 0.17280714335354674, 0.17280714335354674, 0.2787202811054942, 0.2787202811054942, 0.2787202811054942, 0.2171234725141925, 0.2171234725141925, 0.2171234725141925, 0.24422684266702643, 0.24422684266702643, 0.24422684266702643, 0.19465814505025336, 0.19465814505025336, 0.19465814505025336, 0.1792521448895099, 0.1792521448895099, 0.1792521448895099, 0.1728663822685792, 0.1728663822685792, 0.1728663822685792, 0.18771523506456955, 0.18771523506456955, 0.18771523506456955, 0.16978371189810582, 0.16978371189810582, 0.16978371189810582, 0.846992031454183, 0.846992031454183, 0.846992031454183, 0.5630243671592827, 0.5630243671592827, 0.5630243671592827, 0.20836000179270697, 0.20836000179270697, 0.20836000179270697, 0.16012916989743664, 0.16012916989743664, 0.16012916989743664, 0.18102196228488265, 0.18102196228488265, 0.18102196228488265, 0.17827677459854874, 0.17827677459854874, 0.17827677459854874, 0.18702122622975537, 0.18702122622975537, 0.18702122622975537, 0.0863471223638076, 0.0863471223638076, 0.0863471223638076, 0.08438122776924684, 0.08438122776924684, 0.08438122776924684, 0.09222967788326963, 0.09222967788326963, 0.09222967788326963]}, "mutation_prompt": null}
{"id": "aa259a7b-d594-4d91-a79a-30f942791e8e", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                # Changed line: Introduce adaptive inertia weight with stochastic ranking influence\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget) * np.cos(scores[i])\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor influenced by ranking\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0) * np.sin(scores[i])\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive learning rates and stochastic ranking to improve convergence and diversity in PSO_DE.", "configspace": "", "generation": 85, "fitness": 0.22009294854563227, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.17.", "error": "", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.5620390759035914, 0.5620390759035914, 0.5620390759035914, 0.7963834176243966, 0.7963834176243966, 0.7963834176243966, 0.6647750273469941, 0.6647750273469941, 0.6647750273469941, 0.1758530826097362, 0.1758530826097362, 0.1758530826097362, 0.25386746651375025, 0.25386746651375025, 0.25386746651375025, 0.5726021537730741, 0.5726021537730741, 0.5726021537730741, 0.08172560334381684, 0.08172560334381684, 0.08172560334381684, 0.10086638693671957, 0.10086638693671957, 0.10086638693671957, 0.15076393554376788, 0.15076393554376788, 0.15076393554376788, 0.053276408830722155, 0.053276408830722155, 0.053276408830722155, 0.110782969537503, 0.110782969537503, 0.110782969537503, 0.04521897973061206, 0.04521897973061206, 0.04521897973061206, 0.16377765493496177, 0.16377765493496177, 0.16377765493496177, 0.1446010606671534, 0.1446010606671534, 0.1446010606671534, 0.2733736507538681, 0.2733736507538681, 0.2733736507538681, 0.13970680215923492, 0.13970680215923492, 0.13970680215923492, 0.44484381808734563, 0.44484381808734563, 0.44484381808734563, 0.3522942478978017, 0.3522942478978017, 0.3522942478978017, 0.1706505261922533, 0.1706505261922533, 0.1706505261922533, 0.20775381197734355, 0.20775381197734355, 0.20775381197734355, 0.21839562553084801, 0.21839562553084801, 0.21839562553084801, 0.2587608309220202, 0.2587608309220202, 0.2587608309220202, 0.12949817765950078, 0.12949817765950078, 0.12949817765950078, 0.12880855924873358, 0.12880855924873358, 0.12880855924873358, 0.21347793373413304, 0.21347793373413304, 0.21347793373413304, 0.1874633416471012, 0.1874633416471012, 0.1874633416471012, 0.21373569395144287, 0.21373569395144287, 0.21373569395144287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07240835256455613, 0.07240835256455613, 0.07240835256455613, 0.036248867757911474, 0.036248867757911474, 0.036248867757911474, 0.15781276897680052, 0.15781276897680052, 0.15781276897680052, 0.0647146376901977, 0.0647146376901977, 0.0647146376901977, 0.10349679743613505, 0.10349679743613505, 0.10349679743613505, 0.1556662999488122, 0.1556662999488122, 0.1556662999488122, 0.10973356286007296, 0.10973356286007296, 0.10973356286007296, 0.21344564909947816, 0.21344564909947816, 0.21344564909947816, 0.1299079442135509, 0.1299079442135509, 0.1299079442135509, 0.03479498561112593, 0.03479498561112593, 0.03479498561112593, 0.15111738684160225, 0.15111738684160225, 0.15111738684160225, 0.42995540517541964, 0.42995540517541964, 0.42995540517541964, 0.40724310656105545, 0.40724310656105545, 0.40724310656105545, 0.3751916277700613, 0.3751916277700613, 0.3751916277700613, 0.08949832351494535, 0.08949832351494535, 0.08949832351494535, 0.061304323846646525, 0.061304323846646525, 0.061304323846646525, 0.06444286593605397, 0.06444286593605397, 0.06444286593605397, 0.1752897072811891, 0.1752897072811891, 0.1752897072811891, 0.14076562015529326, 0.14076562015529326, 0.14076562015529326, 0.17214412278530034, 0.17214412278530034, 0.17214412278530034, 0.24858305362586774, 0.24858305362586774, 0.24858305362586774, 0.2952039892920778, 0.2952039892920778, 0.2952039892920778, 0.2367055396798995, 0.2367055396798995, 0.2367055396798995, 0.15192950648041748, 0.15192950648041748, 0.15192950648041748, 0.24866922251895696, 0.24866922251895696, 0.24866922251895696, 0.2189243779655825, 0.2189243779655825, 0.2189243779655825, 0.27170515540709617, 0.27170515540709617, 0.27170515540709617, 0.25724813562448023, 0.25724813562448023, 0.25724813562448023, 0.28232675966217136, 0.28232675966217136, 0.28232675966217136, 0.21662930543380676, 0.21662930543380676, 0.21662930543380676, 0.17778628614160186, 0.17778628614160186, 0.17778628614160186, 0.17271912150372115, 0.17271912150372115, 0.17271912150372115, 0.721784425007162, 0.721784425007162, 0.721784425007162, 0.14252276876679748, 0.14252276876679748, 0.14252276876679748, 0.7247458216347522, 0.7247458216347522, 0.7247458216347522, 0.37532921065652525, 0.37532921065652525, 0.37532921065652525, 0.20743894780304406, 0.20743894780304406, 0.20743894780304406, 0.16119111613868664, 0.16119111613868664, 0.16119111613868664, 0.18553954215600466, 0.18553954215600466, 0.18553954215600466, 0.19026656251253649, 0.19026656251253649, 0.19026656251253649, 0.17994207418164876, 0.17994207418164876, 0.17994207418164876, 0.10063061073127011, 0.10063061073127011, 0.10063061073127011, 0.05469447594962096, 0.05469447594962096, 0.05469447594962096, 0.06359768732716342, 0.06359768732716342, 0.06359768732716342]}, "mutation_prompt": null}
{"id": "727c4a5f-140e-4390-a984-6119aa0e368f", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def levy_flights(self, size):\n        beta = 1.5\n        sigma_u = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) /\n                   (np.math.gamma((1 + beta) / 2) * beta * np.power(2, (beta - 1) / 2)))**(1/beta)\n        u = np.random.normal(0, sigma_u, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.power(np.abs(v), 1/beta)\n        return step\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                # Changed line: Clip particle velocities to control velocity boundaries\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                # Changed line: Introduce dynamic DE scaling factor\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                mutant = dynamic_f * (particle_positions[a] + particle_positions[b]) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n            # Changed line: Apply Levy flights to enhance exploration\n            if evaluations % (self.budget // 10) == 0:\n                levy_step = self.levy_flights(self.dim)\n                particle_positions += levy_step\n                particle_positions = np.clip(particle_positions, self.lower_bound, self.upper_bound)\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce diversity enhancement by integrating Levy flights to help escape local optima.", "configspace": "", "generation": 86, "fitness": 0.2776046961884682, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7557243436881815, 0.7557243436881815, 0.7557243436881815, 0.7397120400929669, 0.7397120400929669, 0.7397120400929669, 0.7655805864478371, 0.7655805864478371, 0.7655805864478371, 0.5153438302033988, 0.5153438302033988, 0.5153438302033988, 0.5360340705925497, 0.5360340705925497, 0.5360340705925497, 0.5730400061745754, 0.5730400061745754, 0.5730400061745754, 0.14788492572007494, 0.14788492572007494, 0.14788492572007494, 0.09795820237981911, 0.09795820237981911, 0.09795820237981911, 0.10303307257839711, 0.10303307257839711, 0.10303307257839711, 0.09385935040985682, 0.09385935040985682, 0.09385935040985682, 0.13451945009306332, 0.13451945009306332, 0.13451945009306332, 0.10572331674989088, 0.10572331674989088, 0.10572331674989088, 0.8483489982067064, 0.8483489982067064, 0.8483489982067064, 0.8502592189002323, 0.8502592189002323, 0.8502592189002323, 0.8290387881005351, 0.8290387881005351, 0.8290387881005351, 0.4927939302015678, 0.4927939302015678, 0.4927939302015678, 0.25530748416099436, 0.25530748416099436, 0.25530748416099436, 0.5158618684078949, 0.5158618684078949, 0.5158618684078949, 0.17094832118221204, 0.17094832118221204, 0.17094832118221204, 0.2711061515392508, 0.2711061515392508, 0.2711061515392508, 0.20864906859988452, 0.20864906859988452, 0.20864906859988452, 0.18802697902296617, 0.18802697902296617, 0.18802697902296617, 0.19773724274904292, 0.19773724274904292, 0.19773724274904292, 0.172476035323478, 0.172476035323478, 0.172476035323478, 0.1922601061769107, 0.1922601061769107, 0.1922601061769107, 0.16333032350871157, 0.16333032350871157, 0.16333032350871157, 0.19777984601765153, 0.19777984601765153, 0.19777984601765153, 0.13270658255320156, 0.13270658255320156, 0.13270658255320156, 0.06933548373145737, 0.06933548373145737, 0.06933548373145737, 0.11234498568047857, 0.11234498568047857, 0.11234498568047857, 0.13582301941914832, 0.13582301941914832, 0.13582301941914832, 0.05068844570052611, 0.05068844570052611, 0.05068844570052611, 0.15811852360834477, 0.15811852360834477, 0.15811852360834477, 0.0659665199449464, 0.0659665199449464, 0.0659665199449464, 0.11455357872491911, 0.11455357872491911, 0.11455357872491911, 0.21162735175022596, 0.21162735175022596, 0.21162735175022596, 0.17293183149939484, 0.17293183149939484, 0.17293183149939484, 0.07122662948565883, 0.07122662948565883, 0.07122662948565883, 0.24026336885959487, 0.24026336885959487, 0.24026336885959487, 0.5133221234464287, 0.5133221234464287, 0.5133221234464287, 0.5214424849034389, 0.5214424849034389, 0.5214424849034389, 0.5023243296045778, 0.5023243296045778, 0.5023243296045778, 0.11425971210116281, 0.11425971210116281, 0.11425971210116281, 0.10818958003481693, 0.10818958003481693, 0.10818958003481693, 0.10269245723278597, 0.10269245723278597, 0.10269245723278597, 0.23526009443687956, 0.23526009443687956, 0.23526009443687956, 0.22165442360123655, 0.22165442360123655, 0.22165442360123655, 0.21961003533243084, 0.21961003533243084, 0.21961003533243084, 0.1860536375652071, 0.1860536375652071, 0.1860536375652071, 0.35930948503134785, 0.35930948503134785, 0.35930948503134785, 0.4022157819359877, 0.4022157819359877, 0.4022157819359877, 0.17878576044640448, 0.17878576044640448, 0.17878576044640448, 0.25955742146605987, 0.25955742146605987, 0.25955742146605987, 0.17280714335354674, 0.17280714335354674, 0.17280714335354674, 0.2787202811054942, 0.2787202811054942, 0.2787202811054942, 0.2171234725141925, 0.2171234725141925, 0.2171234725141925, 0.24422684266702643, 0.24422684266702643, 0.24422684266702643, 0.19465814505025336, 0.19465814505025336, 0.19465814505025336, 0.1792521448895099, 0.1792521448895099, 0.1792521448895099, 0.1728663822685792, 0.1728663822685792, 0.1728663822685792, 0.18771523506456955, 0.18771523506456955, 0.18771523506456955, 0.16978371189810582, 0.16978371189810582, 0.16978371189810582, 0.846992031454183, 0.846992031454183, 0.846992031454183, 0.5630243671592827, 0.5630243671592827, 0.5630243671592827, 0.20836000179270697, 0.20836000179270697, 0.20836000179270697, 0.16012916989743664, 0.16012916989743664, 0.16012916989743664, 0.18102196228488265, 0.18102196228488265, 0.18102196228488265, 0.17827677459854874, 0.17827677459854874, 0.17827677459854874, 0.18702122622975537, 0.18702122622975537, 0.18702122622975537, 0.0863471223638076, 0.0863471223638076, 0.0863471223638076, 0.08438122776924684, 0.08438122776924684, 0.08438122776924684, 0.09222967788326963, 0.09222967788326963, 0.09222967788326963]}, "mutation_prompt": null}
{"id": "f8a1f477-db97-4178-8704-1e3aebc3c007", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                # Changed line: Introduce stronger focus on local search\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Integrate adaptive mutation step size and enhanced local search to strengthen convergence speed and accuracy.", "configspace": "", "generation": 87, "fitness": 0.28329140333085323, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "5d279477-788e-4320-afd7-9366c233f86f", "metadata": {"aucs": [0.7939329105372199, 0.7939329105372199, 0.7939329105372199, 0.7590798933336428, 0.7590798933336428, 0.7590798933336428, 0.7711932459671167, 0.7711932459671167, 0.7711932459671167, 0.5427637997918733, 0.5427637997918733, 0.5427637997918733, 0.5746563413644846, 0.5746563413644846, 0.5746563413644846, 0.5446336146623041, 0.5446336146623041, 0.5446336146623041, 0.1265473032701222, 0.1265473032701222, 0.1265473032701222, 0.1080267327986768, 0.1080267327986768, 0.1080267327986768, 0.11030656797367666, 0.11030656797367666, 0.11030656797367666, 0.07350547918858175, 0.07350547918858175, 0.07350547918858175, 0.10906991319632708, 0.10906991319632708, 0.10906991319632708, 0.12781741458589568, 0.12781741458589568, 0.12781741458589568, 0.8696645515369318, 0.8696645515369318, 0.8696645515369318, 0.8526898836133805, 0.8526898836133805, 0.8526898836133805, 0.8477820906549834, 0.8477820906549834, 0.8477820906549834, 0.5005894727018478, 0.5005894727018478, 0.5005894727018478, 0.20283571482382923, 0.20283571482382923, 0.20283571482382923, 0.47875176060655034, 0.47875176060655034, 0.47875176060655034, 0.2179729997562042, 0.2179729997562042, 0.2179729997562042, 0.2645507006068524, 0.2645507006068524, 0.2645507006068524, 0.2224994197289315, 0.2224994197289315, 0.2224994197289315, 0.16018252189484516, 0.16018252189484516, 0.16018252189484516, 0.30905488741971776, 0.30905488741971776, 0.30905488741971776, 0.16758467153261192, 0.16758467153261192, 0.16758467153261192, 0.20868353830637776, 0.20868353830637776, 0.20868353830637776, 0.21270703467244612, 0.21270703467244612, 0.21270703467244612, 0.19845483558185306, 0.19845483558185306, 0.19845483558185306, 0.07182167530651185, 0.07182167530651185, 0.07182167530651185, 0.03484738722345626, 0.03484738722345626, 0.03484738722345626, 0.00742392481799381, 0.00742392481799381, 0.00742392481799381, 0.10516473344670596, 0.10516473344670596, 0.10516473344670596, 0.04295495048568687, 0.04295495048568687, 0.04295495048568687, 0.16622606449906474, 0.16622606449906474, 0.16622606449906474, 0.04888282546141087, 0.04888282546141087, 0.04888282546141087, 0.0638817970735186, 0.0638817970735186, 0.0638817970735186, 0.11854049373461661, 0.11854049373461661, 0.11854049373461661, 0.137869788599988, 0.137869788599988, 0.137869788599988, 0.16809622382461875, 0.16809622382461875, 0.16809622382461875, 0.07492866457775649, 0.07492866457775649, 0.07492866457775649, 0.5063494615494746, 0.5063494615494746, 0.5063494615494746, 0.5348402871803237, 0.5348402871803237, 0.5348402871803237, 0.5025951202070187, 0.5025951202070187, 0.5025951202070187, 0.09475206576596484, 0.09475206576596484, 0.09475206576596484, 0.09938844876688713, 0.09938844876688713, 0.09938844876688713, 0.0818544730824613, 0.0818544730824613, 0.0818544730824613, 0.1645947839167995, 0.1645947839167995, 0.1645947839167995, 0.18233038593280904, 0.18233038593280904, 0.18233038593280904, 0.28845602867130615, 0.28845602867130615, 0.28845602867130615, 0.3768980201528791, 0.3768980201528791, 0.3768980201528791, 0.3504174387938055, 0.3504174387938055, 0.3504174387938055, 0.3723909217978516, 0.3723909217978516, 0.3723909217978516, 0.19631674713490443, 0.19631674713490443, 0.19631674713490443, 0.22945306308604452, 0.22945306308604452, 0.22945306308604452, 0.25332203938511033, 0.25332203938511033, 0.25332203938511033, 0.2574221138532704, 0.2574221138532704, 0.2574221138532704, 0.2716101576113168, 0.2716101576113168, 0.2716101576113168, 0.22662818729235445, 0.22662818729235445, 0.22662818729235445, 0.17218726358541447, 0.17218726358541447, 0.17218726358541447, 0.1758083943670815, 0.1758083943670815, 0.1758083943670815, 0.18622101731210783, 0.18622101731210783, 0.18622101731210783, 0.8405198857316863, 0.8405198857316863, 0.8405198857316863, 0.16973079596763785, 0.16973079596763785, 0.16973079596763785, 0.8563544170728142, 0.8563544170728142, 0.8563544170728142, 0.4698730346166142, 0.4698730346166142, 0.4698730346166142, 0.2078826995725983, 0.2078826995725983, 0.2078826995725983, 0.1610719248368403, 0.1610719248368403, 0.1610719248368403, 0.18388951193249015, 0.18388951193249015, 0.18388951193249015, 0.18031295876211717, 0.18031295876211717, 0.18031295876211717, 0.17819986437389013, 0.17819986437389013, 0.17819986437389013, 0.07830048494472541, 0.07830048494472541, 0.07830048494472541, 0.07166937180286825, 0.07166937180286825, 0.07166937180286825, 0.079163841603348, 0.079163841603348, 0.079163841603348]}, "mutation_prompt": null}
{"id": "8b26d24b-4777-48c2-bd1b-b26e05b3d606", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.9\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget)\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (0.5 + 0.5 * evaluations / self.budget)  # Modified line\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -0.5, 0.5)  # Modified line\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n            # Elitism: Keep best particle always  # New line for elitism\n            best_particle_index = np.argmin(scores)  # New line for elitism\n            particle_positions[0] = global_best_position  # New line for elitism\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhance convergence by dynamic inertia and introducing elitism to retain the best particles.", "configspace": "", "generation": 88, "fitness": 0.24991282109749413, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "f8a1f477-db97-4178-8704-1e3aebc3c007", "metadata": {"aucs": [0.8259060243947669, 0.8259060243947669, 0.8259060243947669, 0.7629212859877557, 0.7629212859877557, 0.7629212859877557, 0.8101447321298623, 0.8101447321298623, 0.8101447321298623, 0.6088265837562193, 0.6088265837562193, 0.6088265837562193, 0.5967837530915263, 0.5967837530915263, 0.5967837530915263, 0.5649584682759619, 0.5649584682759619, 0.5649584682759619, 0.10642045222753926, 0.10642045222753926, 0.10642045222753926, 0.0922233975499881, 0.0922233975499881, 0.0922233975499881, 0.12654014519825763, 0.12654014519825763, 0.12654014519825763, 0.08186346077099205, 0.08186346077099205, 0.08186346077099205, 0.08291400987590491, 0.08291400987590491, 0.08291400987590491, 0.09078903906057201, 0.09078903906057201, 0.09078903906057201, 0.1968881363437488, 0.1968881363437488, 0.1968881363437488, 0.37180046345306883, 0.37180046345306883, 0.37180046345306883, 0.4225440095254127, 0.4225440095254127, 0.4225440095254127, 0.2761529476312966, 0.2761529476312966, 0.2761529476312966, 0.2569832778513702, 0.2569832778513702, 0.2569832778513702, 0.28493411280638836, 0.28493411280638836, 0.28493411280638836, 0.17022556199457828, 0.17022556199457828, 0.17022556199457828, 0.15141588487353985, 0.15141588487353985, 0.15141588487353985, 0.11977374832896204, 0.11977374832896204, 0.11977374832896204, 0.1821144240542414, 0.1821144240542414, 0.1821144240542414, 0.130509277142013, 0.130509277142013, 0.130509277142013, 0.13402456824364128, 0.13402456824364128, 0.13402456824364128, 0.17939965216893106, 0.17939965216893106, 0.17939965216893106, 0.21661532795356475, 0.21661532795356475, 0.21661532795356475, 0.24710729872573423, 0.24710729872573423, 0.24710729872573423, 0.08936199393963873, 0.08936199393963873, 0.08936199393963873, 0.021789706880683712, 0.021789706880683712, 0.021789706880683712, 0.07657116541455433, 0.07657116541455433, 0.07657116541455433, 0.11818866165801267, 0.11818866165801267, 0.11818866165801267, 0.052948553187086134, 0.052948553187086134, 0.052948553187086134, 0.12688584226884758, 0.12688584226884758, 0.12688584226884758, 0.08450953585216325, 0.08450953585216325, 0.08450953585216325, 0.12829019938792297, 0.12829019938792297, 0.12829019938792297, 0.14829248124926653, 0.14829248124926653, 0.14829248124926653, 0.17307191955658674, 0.17307191955658674, 0.17307191955658674, 0.08226797595808333, 0.08226797595808333, 0.08226797595808333, 0.09904622102030791, 0.09904622102030791, 0.09904622102030791, 0.5260900126514352, 0.5260900126514352, 0.5260900126514352, 0.45885482780576914, 0.45885482780576914, 0.45885482780576914, 0.606401584204165, 0.606401584204165, 0.606401584204165, 0.08531787255843759, 0.08531787255843759, 0.08531787255843759, 0.05034706044253601, 0.05034706044253601, 0.05034706044253601, 0.06444903477910391, 0.06444903477910391, 0.06444903477910391, 0.20886815382108104, 0.20886815382108104, 0.20886815382108104, 0.12669750682974223, 0.12669750682974223, 0.12669750682974223, 0.20269461175700432, 0.20269461175700432, 0.20269461175700432, 0.19838357552963182, 0.19838357552963182, 0.19838357552963182, 0.3006841096600008, 0.3006841096600008, 0.3006841096600008, 0.18525740823402015, 0.18525740823402015, 0.18525740823402015, 0.1554146769534286, 0.1554146769534286, 0.1554146769534286, 0.19599299423161287, 0.19599299423161287, 0.19599299423161287, 0.16337939641667198, 0.16337939641667198, 0.16337939641667198, 0.26494187190516627, 0.26494187190516627, 0.26494187190516627, 0.24330659179180403, 0.24330659179180403, 0.24330659179180403, 0.3132533512314155, 0.3132533512314155, 0.3132533512314155, 0.179986408556987, 0.179986408556987, 0.179986408556987, 0.16984511640327327, 0.16984511640327327, 0.16984511640327327, 0.17618459385281204, 0.17618459385281204, 0.17618459385281204, 0.848912181922076, 0.848912181922076, 0.848912181922076, 0.1698972364175756, 0.1698972364175756, 0.1698972364175756, 0.8074911646987702, 0.8074911646987702, 0.8074911646987702, 0.6495422223821767, 0.6495422223821767, 0.6495422223821767, 0.20427114502166355, 0.20427114502166355, 0.20427114502166355, 0.4097291499740273, 0.4097291499740273, 0.4097291499740273, 0.18597692325312887, 0.18597692325312887, 0.18597692325312887, 0.16734785267568208, 0.16734785267568208, 0.16734785267568208, 0.1733843301581346, 0.1733843301581346, 0.1733843301581346, 0.08167969268697284, 0.08167969268697284, 0.08167969268697284, 0.06619381409214253, 0.06619381409214253, 0.06619381409214253, 0.06094234633213835, 0.06094234633213835, 0.06094234633213835]}, "mutation_prompt": null}
{"id": "529c4337-88ca-4d47-b879-f74000ae8119", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 2  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Enhanced focus on promising regions by dynamically adjusting the social component.", "configspace": "", "generation": 89, "fitness": 0.2876289249626178, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "f8a1f477-db97-4178-8704-1e3aebc3c007", "metadata": {"aucs": [0.8164115100062915, 0.8164115100062915, 0.8164115100062915, 0.7805026789439885, 0.7805026789439885, 0.7805026789439885, 0.7855667014839256, 0.7855667014839256, 0.7855667014839256, 0.38993614748079775, 0.38993614748079775, 0.38993614748079775, 0.5810170689888993, 0.5810170689888993, 0.5810170689888993, 0.588731604238958, 0.588731604238958, 0.588731604238958, 0.13739476837758358, 0.13739476837758358, 0.13739476837758358, 0.11067000756465695, 0.11067000756465695, 0.11067000756465695, 0.11532538776556378, 0.11532538776556378, 0.11532538776556378, 0.07467728732818957, 0.07467728732818957, 0.07467728732818957, 0.1026533700057678, 0.1026533700057678, 0.1026533700057678, 0.11127426230243076, 0.11127426230243076, 0.11127426230243076, 0.8693675516289583, 0.8693675516289583, 0.8693675516289583, 0.8554399292038428, 0.8554399292038428, 0.8554399292038428, 0.8368960535991016, 0.8368960535991016, 0.8368960535991016, 0.5728492490160614, 0.5728492490160614, 0.5728492490160614, 0.14502657818907316, 0.14502657818907316, 0.14502657818907316, 0.4554173895298701, 0.4554173895298701, 0.4554173895298701, 0.2224672403845821, 0.2224672403845821, 0.2224672403845821, 0.21123293970213508, 0.21123293970213508, 0.21123293970213508, 0.1485264357466527, 0.1485264357466527, 0.1485264357466527, 0.1496835682111709, 0.1496835682111709, 0.1496835682111709, 0.3546400702485164, 0.3546400702485164, 0.3546400702485164, 0.1772949787786683, 0.1772949787786683, 0.1772949787786683, 0.21498822249512206, 0.21498822249512206, 0.21498822249512206, 0.20296482302960261, 0.20296482302960261, 0.20296482302960261, 0.2062826506248986, 0.2062826506248986, 0.2062826506248986, 0.052898205174844226, 0.052898205174844226, 0.052898205174844226, 0.0682304312124179, 0.0682304312124179, 0.0682304312124179, 0.11598996003948359, 0.11598996003948359, 0.11598996003948359, 0.08040730110493532, 0.08040730110493532, 0.08040730110493532, 0.05217875376109127, 0.05217875376109127, 0.05217875376109127, 0.16569378628393372, 0.16569378628393372, 0.16569378628393372, 0.050858253728689906, 0.050858253728689906, 0.050858253728689906, 0.06772097090647078, 0.06772097090647078, 0.06772097090647078, 0.1241027195605433, 0.1241027195605433, 0.1241027195605433, 0.22042164414941934, 0.22042164414941934, 0.22042164414941934, 0.15899979245702944, 0.15899979245702944, 0.15899979245702944, 0.07837210712648868, 0.07837210712648868, 0.07837210712648868, 0.5429294383914304, 0.5429294383914304, 0.5429294383914304, 0.5471729278652856, 0.5471729278652856, 0.5471729278652856, 0.5034311416984592, 0.5034311416984592, 0.5034311416984592, 0.08045844061691665, 0.08045844061691665, 0.08045844061691665, 0.10380396742316211, 0.10380396742316211, 0.10380396742316211, 0.08153086368494555, 0.08153086368494555, 0.08153086368494555, 0.2583466503525116, 0.2583466503525116, 0.2583466503525116, 0.22677716209594778, 0.22677716209594778, 0.22677716209594778, 0.20763497857084345, 0.20763497857084345, 0.20763497857084345, 0.4494938886614226, 0.4494938886614226, 0.4494938886614226, 0.30012498242549224, 0.30012498242549224, 0.30012498242549224, 0.36510550004382036, 0.36510550004382036, 0.36510550004382036, 0.18997869176804938, 0.18997869176804938, 0.18997869176804938, 0.23560957186229525, 0.23560957186229525, 0.23560957186229525, 0.24818686189381556, 0.24818686189381556, 0.24818686189381556, 0.2764799121415529, 0.2764799121415529, 0.2764799121415529, 0.27105529109475146, 0.27105529109475146, 0.27105529109475146, 0.2905103607796484, 0.2905103607796484, 0.2905103607796484, 0.17544634996866204, 0.17544634996866204, 0.17544634996866204, 0.16919643900285775, 0.16919643900285775, 0.16919643900285775, 0.1853815546095351, 0.1853815546095351, 0.1853815546095351, 0.8562147316776392, 0.8562147316776392, 0.8562147316776392, 0.16968231590779193, 0.16968231590779193, 0.16968231590779193, 0.8396822852397595, 0.8396822852397595, 0.8396822852397595, 0.5170892424741325, 0.5170892424741325, 0.5170892424741325, 0.20813221383601233, 0.20813221383601233, 0.20813221383601233, 0.16293371009569835, 0.16293371009569835, 0.16293371009569835, 0.1956543366704232, 0.1956543366704232, 0.1956543366704232, 0.17423332121725055, 0.17423332121725055, 0.17423332121725055, 0.18369826857482963, 0.18369826857482963, 0.18369826857482963, 0.0934675115482072, 0.0934675115482072, 0.0934675115482072, 0.0707821351475495, 0.0707821351475495, 0.0707821351475495, 0.07594514958712584, 0.07594514958712584, 0.07594514958712584]}, "mutation_prompt": null}
{"id": "da822745-c3cc-4912-974c-238ad1891bb9", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 3  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive scaling for social component to enhance convergence speed.", "configspace": "", "generation": 90, "fitness": 0.2879733698603802, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "529c4337-88ca-4d47-b879-f74000ae8119", "metadata": {"aucs": [0.8130258531127874, 0.8130258531127874, 0.8130258531127874, 0.7895119579509435, 0.7895119579509435, 0.7895119579509435, 0.790376505328539, 0.790376505328539, 0.790376505328539, 0.2906349780449532, 0.2906349780449532, 0.2906349780449532, 0.21724706474195832, 0.21724706474195832, 0.21724706474195832, 0.5974397134889461, 0.5974397134889461, 0.5974397134889461, 0.12939695900297943, 0.12939695900297943, 0.12939695900297943, 0.1096213622574731, 0.1096213622574731, 0.1096213622574731, 0.14982785532345244, 0.14982785532345244, 0.14982785532345244, 0.06284428632394501, 0.06284428632394501, 0.06284428632394501, 0.11583148304636048, 0.11583148304636048, 0.11583148304636048, 0.08626237913440105, 0.08626237913440105, 0.08626237913440105, 0.8670389645831639, 0.8670389645831639, 0.8670389645831639, 0.8597475566924128, 0.8597475566924128, 0.8597475566924128, 0.8396933507078537, 0.8396933507078537, 0.8396933507078537, 0.4190882229932157, 0.4190882229932157, 0.4190882229932157, 0.3305527151154751, 0.3305527151154751, 0.3305527151154751, 0.5474901692534182, 0.5474901692534182, 0.5474901692534182, 0.6908887055668884, 0.6908887055668884, 0.6908887055668884, 0.2041546389204345, 0.2041546389204345, 0.2041546389204345, 0.2245437868884793, 0.2245437868884793, 0.2245437868884793, 0.19303621861714193, 0.19303621861714193, 0.19303621861714193, 0.27407584547578967, 0.27407584547578967, 0.27407584547578967, 0.18003273494373684, 0.18003273494373684, 0.18003273494373684, 0.1937450584283823, 0.1937450584283823, 0.1937450584283823, 0.21039487537420332, 0.21039487537420332, 0.21039487537420332, 0.21332125769742272, 0.21332125769742272, 0.21332125769742272, 0.1504666466605571, 0.1504666466605571, 0.1504666466605571, 0.0034422368540343307, 0.0034422368540343307, 0.0034422368540343307, 0.18055190772782348, 0.18055190772782348, 0.18055190772782348, 0.0949005896532068, 0.0949005896532068, 0.0949005896532068, 0.043561492949686365, 0.043561492949686365, 0.043561492949686365, 0.14679318378384065, 0.14679318378384065, 0.14679318378384065, 0.06145067964188855, 0.06145067964188855, 0.06145067964188855, 0.08491301683505059, 0.08491301683505059, 0.08491301683505059, 0.12348405383721495, 0.12348405383721495, 0.12348405383721495, 0.14809721778829732, 0.14809721778829732, 0.14809721778829732, 0.12774449003719168, 0.12774449003719168, 0.12774449003719168, 0.07794037620518324, 0.07794037620518324, 0.07794037620518324, 0.6305919284952162, 0.6305919284952162, 0.6305919284952162, 0.5162674444885483, 0.5162674444885483, 0.5162674444885483, 0.4987596112163183, 0.4987596112163183, 0.4987596112163183, 0.10012850977200016, 0.10012850977200016, 0.10012850977200016, 0.08182608162505367, 0.08182608162505367, 0.08182608162505367, 0.0767673431966619, 0.0767673431966619, 0.0767673431966619, 0.16664751568939862, 0.16664751568939862, 0.16664751568939862, 0.18421149872829, 0.18421149872829, 0.18421149872829, 0.18884098799079607, 0.18884098799079607, 0.18884098799079607, 0.20930125532289034, 0.20930125532289034, 0.20930125532289034, 0.392312590218455, 0.392312590218455, 0.392312590218455, 0.2827795128976641, 0.2827795128976641, 0.2827795128976641, 0.2002870179797036, 0.2002870179797036, 0.2002870179797036, 0.2001112603296461, 0.2001112603296461, 0.2001112603296461, 0.25352297140498814, 0.25352297140498814, 0.25352297140498814, 0.2505354560566897, 0.2505354560566897, 0.2505354560566897, 0.25262821715735573, 0.25262821715735573, 0.25262821715735573, 0.3044142410810723, 0.3044142410810723, 0.3044142410810723, 0.1804657908836247, 0.1804657908836247, 0.1804657908836247, 0.16579216332319469, 0.16579216332319469, 0.16579216332319469, 0.17925759441508848, 0.17925759441508848, 0.17925759441508848, 0.8602133491063817, 0.8602133491063817, 0.8602133491063817, 0.328970540162832, 0.328970540162832, 0.328970540162832, 0.8541303297100621, 0.8541303297100621, 0.8541303297100621, 0.5590177110548791, 0.5590177110548791, 0.5590177110548791, 0.20776735028046767, 0.20776735028046767, 0.20776735028046767, 0.1621618675493428, 0.1621618675493428, 0.1621618675493428, 0.19834644369351906, 0.19834644369351906, 0.19834644369351906, 0.1785729008488559, 0.1785729008488559, 0.1785729008488559, 0.1916975142689804, 0.1916975142689804, 0.1916975142689804, 0.08434997364524299, 0.08434997364524299, 0.08434997364524299, 0.07109764745992797, 0.07109764745992797, 0.07109764745992797, 0.07913761890549487, 0.07913761890549487, 0.07913761890549487]}, "mutation_prompt": null}
{"id": "c987748c-f48b-416e-9d66-dfdbcb6ab7ac", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 3  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive scaling for social component to enhance convergence speed.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da822745-c3cc-4912-974c-238ad1891bb9", "metadata": {"aucs": [0.8130258531127874, 0.8130258531127874, 0.8130258531127874, 0.7895119579509435, 0.7895119579509435, 0.7895119579509435, 0.790376505328539, 0.790376505328539, 0.790376505328539, 0.2906349780449532, 0.2906349780449532, 0.2906349780449532, 0.21724706474195832, 0.21724706474195832, 0.21724706474195832, 0.5974397134889461, 0.5974397134889461, 0.5974397134889461, 0.12939695900297943, 0.12939695900297943, 0.12939695900297943, 0.1096213622574731, 0.1096213622574731, 0.1096213622574731, 0.14982785532345244, 0.14982785532345244, 0.14982785532345244, 0.06284428632394501, 0.06284428632394501, 0.06284428632394501, 0.11583148304636048, 0.11583148304636048, 0.11583148304636048, 0.08626237913440105, 0.08626237913440105, 0.08626237913440105, 0.8670389645831639, 0.8670389645831639, 0.8670389645831639, 0.8597475566924128, 0.8597475566924128, 0.8597475566924128, 0.8396933507078537, 0.8396933507078537, 0.8396933507078537, 0.4190882229932157, 0.4190882229932157, 0.4190882229932157, 0.3305527151154751, 0.3305527151154751, 0.3305527151154751, 0.5474901692534182, 0.5474901692534182, 0.5474901692534182, 0.6908887055668884, 0.6908887055668884, 0.6908887055668884, 0.2041546389204345, 0.2041546389204345, 0.2041546389204345, 0.2245437868884793, 0.2245437868884793, 0.2245437868884793, 0.19303621861714193, 0.19303621861714193, 0.19303621861714193, 0.27407584547578967, 0.27407584547578967, 0.27407584547578967, 0.18003273494373684, 0.18003273494373684, 0.18003273494373684, 0.1937450584283823, 0.1937450584283823, 0.1937450584283823, 0.21039487537420332, 0.21039487537420332, 0.21039487537420332, 0.21332125769742272, 0.21332125769742272, 0.21332125769742272, 0.1504666466605571, 0.1504666466605571, 0.1504666466605571, 0.0034422368540343307, 0.0034422368540343307, 0.0034422368540343307, 0.18055190772782348, 0.18055190772782348, 0.18055190772782348, 0.0949005896532068, 0.0949005896532068, 0.0949005896532068, 0.043561492949686365, 0.043561492949686365, 0.043561492949686365, 0.14679318378384065, 0.14679318378384065, 0.14679318378384065, 0.06145067964188855, 0.06145067964188855, 0.06145067964188855, 0.08491301683505059, 0.08491301683505059, 0.08491301683505059, 0.12348405383721495, 0.12348405383721495, 0.12348405383721495, 0.14809721778829732, 0.14809721778829732, 0.14809721778829732, 0.12774449003719168, 0.12774449003719168, 0.12774449003719168, 0.07794037620518324, 0.07794037620518324, 0.07794037620518324, 0.6305919284952162, 0.6305919284952162, 0.6305919284952162, 0.5162674444885483, 0.5162674444885483, 0.5162674444885483, 0.4987596112163183, 0.4987596112163183, 0.4987596112163183, 0.10012850977200016, 0.10012850977200016, 0.10012850977200016, 0.08182608162505367, 0.08182608162505367, 0.08182608162505367, 0.0767673431966619, 0.0767673431966619, 0.0767673431966619, 0.16664751568939862, 0.16664751568939862, 0.16664751568939862, 0.18421149872829, 0.18421149872829, 0.18421149872829, 0.18884098799079607, 0.18884098799079607, 0.18884098799079607, 0.20930125532289034, 0.20930125532289034, 0.20930125532289034, 0.392312590218455, 0.392312590218455, 0.392312590218455, 0.2827795128976641, 0.2827795128976641, 0.2827795128976641, 0.2002870179797036, 0.2002870179797036, 0.2002870179797036, 0.2001112603296461, 0.2001112603296461, 0.2001112603296461, 0.25352297140498814, 0.25352297140498814, 0.25352297140498814, 0.2505354560566897, 0.2505354560566897, 0.2505354560566897, 0.25262821715735573, 0.25262821715735573, 0.25262821715735573, 0.3044142410810723, 0.3044142410810723, 0.3044142410810723, 0.1804657908836247, 0.1804657908836247, 0.1804657908836247, 0.16579216332319469, 0.16579216332319469, 0.16579216332319469, 0.17925759441508848, 0.17925759441508848, 0.17925759441508848, 0.8602133491063817, 0.8602133491063817, 0.8602133491063817, 0.328970540162832, 0.328970540162832, 0.328970540162832, 0.8541303297100621, 0.8541303297100621, 0.8541303297100621, 0.5590177110548791, 0.5590177110548791, 0.5590177110548791, 0.20776735028046767, 0.20776735028046767, 0.20776735028046767, 0.1621618675493428, 0.1621618675493428, 0.1621618675493428, 0.19834644369351906, 0.19834644369351906, 0.19834644369351906, 0.1785729008488559, 0.1785729008488559, 0.1785729008488559, 0.1916975142689804, 0.1916975142689804, 0.1916975142689804, 0.08434997364524299, 0.08434997364524299, 0.08434997364524299, 0.07109764745992797, 0.07109764745992797, 0.07109764745992797, 0.07913761890549487, 0.07913761890549487, 0.07913761890549487]}, "mutation_prompt": null}
{"id": "59d00630-b4d0-42d0-9889-8b5dfc3db4f0", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 3  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.2, 0.2, self.dim) * (1 - evaluations / self.budget)\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Introduce adaptive scaling for social component to enhance convergence speed.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "da822745-c3cc-4912-974c-238ad1891bb9", "metadata": {"aucs": [0.8130258531127874, 0.8130258531127874, 0.8130258531127874, 0.7895119579509435, 0.7895119579509435, 0.7895119579509435, 0.790376505328539, 0.790376505328539, 0.790376505328539, 0.2906349780449532, 0.2906349780449532, 0.2906349780449532, 0.21724706474195832, 0.21724706474195832, 0.21724706474195832, 0.5974397134889461, 0.5974397134889461, 0.5974397134889461, 0.12939695900297943, 0.12939695900297943, 0.12939695900297943, 0.1096213622574731, 0.1096213622574731, 0.1096213622574731, 0.14982785532345244, 0.14982785532345244, 0.14982785532345244, 0.06284428632394501, 0.06284428632394501, 0.06284428632394501, 0.11583148304636048, 0.11583148304636048, 0.11583148304636048, 0.08626237913440105, 0.08626237913440105, 0.08626237913440105, 0.8670389645831639, 0.8670389645831639, 0.8670389645831639, 0.8597475566924128, 0.8597475566924128, 0.8597475566924128, 0.8396933507078537, 0.8396933507078537, 0.8396933507078537, 0.4190882229932157, 0.4190882229932157, 0.4190882229932157, 0.3305527151154751, 0.3305527151154751, 0.3305527151154751, 0.5474901692534182, 0.5474901692534182, 0.5474901692534182, 0.6908887055668884, 0.6908887055668884, 0.6908887055668884, 0.2041546389204345, 0.2041546389204345, 0.2041546389204345, 0.2245437868884793, 0.2245437868884793, 0.2245437868884793, 0.19303621861714193, 0.19303621861714193, 0.19303621861714193, 0.27407584547578967, 0.27407584547578967, 0.27407584547578967, 0.18003273494373684, 0.18003273494373684, 0.18003273494373684, 0.1937450584283823, 0.1937450584283823, 0.1937450584283823, 0.21039487537420332, 0.21039487537420332, 0.21039487537420332, 0.21332125769742272, 0.21332125769742272, 0.21332125769742272, 0.1504666466605571, 0.1504666466605571, 0.1504666466605571, 0.0034422368540343307, 0.0034422368540343307, 0.0034422368540343307, 0.18055190772782348, 0.18055190772782348, 0.18055190772782348, 0.0949005896532068, 0.0949005896532068, 0.0949005896532068, 0.043561492949686365, 0.043561492949686365, 0.043561492949686365, 0.14679318378384065, 0.14679318378384065, 0.14679318378384065, 0.06145067964188855, 0.06145067964188855, 0.06145067964188855, 0.08491301683505059, 0.08491301683505059, 0.08491301683505059, 0.12348405383721495, 0.12348405383721495, 0.12348405383721495, 0.14809721778829732, 0.14809721778829732, 0.14809721778829732, 0.12774449003719168, 0.12774449003719168, 0.12774449003719168, 0.07794037620518324, 0.07794037620518324, 0.07794037620518324, 0.6305919284952162, 0.6305919284952162, 0.6305919284952162, 0.5162674444885483, 0.5162674444885483, 0.5162674444885483, 0.4987596112163183, 0.4987596112163183, 0.4987596112163183, 0.10012850977200016, 0.10012850977200016, 0.10012850977200016, 0.08182608162505367, 0.08182608162505367, 0.08182608162505367, 0.0767673431966619, 0.0767673431966619, 0.0767673431966619, 0.16664751568939862, 0.16664751568939862, 0.16664751568939862, 0.18421149872829, 0.18421149872829, 0.18421149872829, 0.18884098799079607, 0.18884098799079607, 0.18884098799079607, 0.20930125532289034, 0.20930125532289034, 0.20930125532289034, 0.392312590218455, 0.392312590218455, 0.392312590218455, 0.2827795128976641, 0.2827795128976641, 0.2827795128976641, 0.2002870179797036, 0.2002870179797036, 0.2002870179797036, 0.2001112603296461, 0.2001112603296461, 0.2001112603296461, 0.25352297140498814, 0.25352297140498814, 0.25352297140498814, 0.2505354560566897, 0.2505354560566897, 0.2505354560566897, 0.25262821715735573, 0.25262821715735573, 0.25262821715735573, 0.3044142410810723, 0.3044142410810723, 0.3044142410810723, 0.1804657908836247, 0.1804657908836247, 0.1804657908836247, 0.16579216332319469, 0.16579216332319469, 0.16579216332319469, 0.17925759441508848, 0.17925759441508848, 0.17925759441508848, 0.8602133491063817, 0.8602133491063817, 0.8602133491063817, 0.328970540162832, 0.328970540162832, 0.328970540162832, 0.8541303297100621, 0.8541303297100621, 0.8541303297100621, 0.5590177110548791, 0.5590177110548791, 0.5590177110548791, 0.20776735028046767, 0.20776735028046767, 0.20776735028046767, 0.1621618675493428, 0.1621618675493428, 0.1621618675493428, 0.19834644369351906, 0.19834644369351906, 0.19834644369351906, 0.1785729008488559, 0.1785729008488559, 0.1785729008488559, 0.1916975142689804, 0.1916975142689804, 0.1916975142689804, 0.08434997364524299, 0.08434997364524299, 0.08434997364524299, 0.07109764745992797, 0.07109764745992797, 0.07109764745992797, 0.07913761890549487, 0.07913761890549487, 0.07913761890549487]}, "mutation_prompt": null}
{"id": "f636c6ef-68b3-4ed1-a0d8-b4d8683908f6", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 3  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.3, 0.3, self.dim) * (1 - evaluations / self.budget)  # Modified line\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Refine the dynamic perturbation in DE-like mutation to enhance diversity and exploration capability.", "configspace": "", "generation": 93, "fitness": 0.2961176015980299, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "da822745-c3cc-4912-974c-238ad1891bb9", "metadata": {"aucs": [0.8071867740755719, 0.8071867740755719, 0.8071867740755719, 0.7951837900719827, 0.7951837900719827, 0.7951837900719827, 0.7916530566335434, 0.7916530566335434, 0.7916530566335434, 0.32343102671141, 0.32343102671141, 0.32343102671141, 0.36086478527997734, 0.36086478527997734, 0.36086478527997734, 0.4437841545531632, 0.4437841545531632, 0.4437841545531632, 0.12495313715140688, 0.12495313715140688, 0.12495313715140688, 0.10293912874904854, 0.10293912874904854, 0.10293912874904854, 0.1486730312059279, 0.1486730312059279, 0.1486730312059279, 0.11355813394949876, 0.11355813394949876, 0.11355813394949876, 0.08399202374768988, 0.08399202374768988, 0.08399202374768988, 0.11559668205826346, 0.11559668205826346, 0.11559668205826346, 0.8651486958848186, 0.8651486958848186, 0.8651486958848186, 0.8527015687360768, 0.8527015687360768, 0.8527015687360768, 0.85484323986736, 0.85484323986736, 0.85484323986736, 0.4238734091061104, 0.4238734091061104, 0.4238734091061104, 0.32993890594496056, 0.32993890594496056, 0.32993890594496056, 0.34513829044133504, 0.34513829044133504, 0.34513829044133504, 0.17014285282947184, 0.17014285282947184, 0.17014285282947184, 0.25893911083854415, 0.25893911083854415, 0.25893911083854415, 0.8069750935972009, 0.8069750935972009, 0.8069750935972009, 0.13927423788766424, 0.13927423788766424, 0.13927423788766424, 0.30468138164490677, 0.30468138164490677, 0.30468138164490677, 0.19025400003905857, 0.19025400003905857, 0.19025400003905857, 0.15535302533917017, 0.15535302533917017, 0.15535302533917017, 0.20212933286809887, 0.20212933286809887, 0.20212933286809887, 0.22047708865373417, 0.22047708865373417, 0.22047708865373417, 0.009386764420712068, 0.009386764420712068, 0.009386764420712068, 0.015123932369408233, 0.015123932369408233, 0.015123932369408233, 0.05185087718671444, 0.05185087718671444, 0.05185087718671444, 0.11017734778620925, 0.11017734778620925, 0.11017734778620925, 0.06059161552975989, 0.06059161552975989, 0.06059161552975989, 0.1530989650413318, 0.1530989650413318, 0.1530989650413318, 0.07522183556183593, 0.07522183556183593, 0.07522183556183593, 0.07903961179825347, 0.07903961179825347, 0.07903961179825347, 0.17607160070317185, 0.17607160070317185, 0.17607160070317185, 0.19336505693932005, 0.19336505693932005, 0.19336505693932005, 0.30797606113398257, 0.30797606113398257, 0.30797606113398257, 0.07659613375949825, 0.07659613375949825, 0.07659613375949825, 0.467822965818133, 0.467822965818133, 0.467822965818133, 0.539693209105043, 0.539693209105043, 0.539693209105043, 0.5021488653988899, 0.5021488653988899, 0.5021488653988899, 0.09819829374280054, 0.09819829374280054, 0.09819829374280054, 0.09965956842846913, 0.09965956842846913, 0.09965956842846913, 0.08850475805666047, 0.08850475805666047, 0.08850475805666047, 0.40133168763323024, 0.40133168763323024, 0.40133168763323024, 0.18540130977886315, 0.18540130977886315, 0.18540130977886315, 0.23353005501166524, 0.23353005501166524, 0.23353005501166524, 0.188602870211798, 0.188602870211798, 0.188602870211798, 0.29614070230225487, 0.29614070230225487, 0.29614070230225487, 0.40485407302904175, 0.40485407302904175, 0.40485407302904175, 0.26565260091259013, 0.26565260091259013, 0.26565260091259013, 0.24823618407599568, 0.24823618407599568, 0.24823618407599568, 0.2887599921463718, 0.2887599921463718, 0.2887599921463718, 0.2654592573870932, 0.2654592573870932, 0.2654592573870932, 0.23897734407590232, 0.23897734407590232, 0.23897734407590232, 0.23543889690550535, 0.23543889690550535, 0.23543889690550535, 0.1953646779442353, 0.1953646779442353, 0.1953646779442353, 0.1692814375701509, 0.1692814375701509, 0.1692814375701509, 0.1791201972424813, 0.1791201972424813, 0.1791201972424813, 0.834016297328835, 0.834016297328835, 0.834016297328835, 0.8209536724596403, 0.8209536724596403, 0.8209536724596403, 0.8504592457402103, 0.8504592457402103, 0.8504592457402103, 0.4061442048305821, 0.4061442048305821, 0.4061442048305821, 0.2064316304067486, 0.2064316304067486, 0.2064316304067486, 0.20871410713392857, 0.20871410713392857, 0.20871410713392857, 0.1812301697904365, 0.1812301697904365, 0.1812301697904365, 0.18119444074760216, 0.18119444074760216, 0.18119444074760216, 0.18283326712919445, 0.18283326712919445, 0.18283326712919445, 0.07921237626206801, 0.07921237626206801, 0.07921237626206801, 0.06599921607226589, 0.06599921607226589, 0.06599921607226589, 0.07091398028327645, 0.07091398028327645, 0.07091398028327645]}, "mutation_prompt": null}
{"id": "83a73868-6620-416c-a52e-fa1391f0ab69", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 3  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.3, 0.3, self.dim) * (1 - evaluations / self.budget)  # Modified line\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Refine the dynamic perturbation in DE-like mutation to enhance diversity and exploration capability.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f636c6ef-68b3-4ed1-a0d8-b4d8683908f6", "metadata": {"aucs": [0.8071867740755719, 0.8071867740755719, 0.8071867740755719, 0.7951837900719827, 0.7951837900719827, 0.7951837900719827, 0.7916530566335434, 0.7916530566335434, 0.7916530566335434, 0.32343102671141, 0.32343102671141, 0.32343102671141, 0.36086478527997734, 0.36086478527997734, 0.36086478527997734, 0.4437841545531632, 0.4437841545531632, 0.4437841545531632, 0.12495313715140688, 0.12495313715140688, 0.12495313715140688, 0.10293912874904854, 0.10293912874904854, 0.10293912874904854, 0.1486730312059279, 0.1486730312059279, 0.1486730312059279, 0.11355813394949876, 0.11355813394949876, 0.11355813394949876, 0.08399202374768988, 0.08399202374768988, 0.08399202374768988, 0.11559668205826346, 0.11559668205826346, 0.11559668205826346, 0.8651486958848186, 0.8651486958848186, 0.8651486958848186, 0.8527015687360768, 0.8527015687360768, 0.8527015687360768, 0.85484323986736, 0.85484323986736, 0.85484323986736, 0.4238734091061104, 0.4238734091061104, 0.4238734091061104, 0.32993890594496056, 0.32993890594496056, 0.32993890594496056, 0.34513829044133504, 0.34513829044133504, 0.34513829044133504, 0.17014285282947184, 0.17014285282947184, 0.17014285282947184, 0.25893911083854415, 0.25893911083854415, 0.25893911083854415, 0.8069750935972009, 0.8069750935972009, 0.8069750935972009, 0.13927423788766424, 0.13927423788766424, 0.13927423788766424, 0.30468138164490677, 0.30468138164490677, 0.30468138164490677, 0.19025400003905857, 0.19025400003905857, 0.19025400003905857, 0.15535302533917017, 0.15535302533917017, 0.15535302533917017, 0.20212933286809887, 0.20212933286809887, 0.20212933286809887, 0.22047708865373417, 0.22047708865373417, 0.22047708865373417, 0.009386764420712068, 0.009386764420712068, 0.009386764420712068, 0.015123932369408233, 0.015123932369408233, 0.015123932369408233, 0.05185087718671444, 0.05185087718671444, 0.05185087718671444, 0.11017734778620925, 0.11017734778620925, 0.11017734778620925, 0.06059161552975989, 0.06059161552975989, 0.06059161552975989, 0.1530989650413318, 0.1530989650413318, 0.1530989650413318, 0.07522183556183593, 0.07522183556183593, 0.07522183556183593, 0.07903961179825347, 0.07903961179825347, 0.07903961179825347, 0.17607160070317185, 0.17607160070317185, 0.17607160070317185, 0.19336505693932005, 0.19336505693932005, 0.19336505693932005, 0.30797606113398257, 0.30797606113398257, 0.30797606113398257, 0.07659613375949825, 0.07659613375949825, 0.07659613375949825, 0.467822965818133, 0.467822965818133, 0.467822965818133, 0.539693209105043, 0.539693209105043, 0.539693209105043, 0.5021488653988899, 0.5021488653988899, 0.5021488653988899, 0.09819829374280054, 0.09819829374280054, 0.09819829374280054, 0.09965956842846913, 0.09965956842846913, 0.09965956842846913, 0.08850475805666047, 0.08850475805666047, 0.08850475805666047, 0.40133168763323024, 0.40133168763323024, 0.40133168763323024, 0.18540130977886315, 0.18540130977886315, 0.18540130977886315, 0.23353005501166524, 0.23353005501166524, 0.23353005501166524, 0.188602870211798, 0.188602870211798, 0.188602870211798, 0.29614070230225487, 0.29614070230225487, 0.29614070230225487, 0.40485407302904175, 0.40485407302904175, 0.40485407302904175, 0.26565260091259013, 0.26565260091259013, 0.26565260091259013, 0.24823618407599568, 0.24823618407599568, 0.24823618407599568, 0.2887599921463718, 0.2887599921463718, 0.2887599921463718, 0.2654592573870932, 0.2654592573870932, 0.2654592573870932, 0.23897734407590232, 0.23897734407590232, 0.23897734407590232, 0.23543889690550535, 0.23543889690550535, 0.23543889690550535, 0.1953646779442353, 0.1953646779442353, 0.1953646779442353, 0.1692814375701509, 0.1692814375701509, 0.1692814375701509, 0.1791201972424813, 0.1791201972424813, 0.1791201972424813, 0.834016297328835, 0.834016297328835, 0.834016297328835, 0.8209536724596403, 0.8209536724596403, 0.8209536724596403, 0.8504592457402103, 0.8504592457402103, 0.8504592457402103, 0.4061442048305821, 0.4061442048305821, 0.4061442048305821, 0.2064316304067486, 0.2064316304067486, 0.2064316304067486, 0.20871410713392857, 0.20871410713392857, 0.20871410713392857, 0.1812301697904365, 0.1812301697904365, 0.1812301697904365, 0.18119444074760216, 0.18119444074760216, 0.18119444074760216, 0.18283326712919445, 0.18283326712919445, 0.18283326712919445, 0.07921237626206801, 0.07921237626206801, 0.07921237626206801, 0.06599921607226589, 0.06599921607226589, 0.06599921607226589, 0.07091398028327645, 0.07091398028327645, 0.07091398028327645]}, "mutation_prompt": null}
{"id": "7c0319e7-1646-45f7-b494-c59346fd5c85", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 3  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.3, 0.3, self.dim) * (1 - evaluations / self.budget)  # Modified line\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Refine the dynamic perturbation in DE-like mutation to enhance diversity and exploration capability.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f636c6ef-68b3-4ed1-a0d8-b4d8683908f6", "metadata": {"aucs": [0.8071867740755719, 0.8071867740755719, 0.8071867740755719, 0.7951837900719827, 0.7951837900719827, 0.7951837900719827, 0.7916530566335434, 0.7916530566335434, 0.7916530566335434, 0.32343102671141, 0.32343102671141, 0.32343102671141, 0.36086478527997734, 0.36086478527997734, 0.36086478527997734, 0.4437841545531632, 0.4437841545531632, 0.4437841545531632, 0.12495313715140688, 0.12495313715140688, 0.12495313715140688, 0.10293912874904854, 0.10293912874904854, 0.10293912874904854, 0.1486730312059279, 0.1486730312059279, 0.1486730312059279, 0.11355813394949876, 0.11355813394949876, 0.11355813394949876, 0.08399202374768988, 0.08399202374768988, 0.08399202374768988, 0.11559668205826346, 0.11559668205826346, 0.11559668205826346, 0.8651486958848186, 0.8651486958848186, 0.8651486958848186, 0.8527015687360768, 0.8527015687360768, 0.8527015687360768, 0.85484323986736, 0.85484323986736, 0.85484323986736, 0.4238734091061104, 0.4238734091061104, 0.4238734091061104, 0.32993890594496056, 0.32993890594496056, 0.32993890594496056, 0.34513829044133504, 0.34513829044133504, 0.34513829044133504, 0.17014285282947184, 0.17014285282947184, 0.17014285282947184, 0.25893911083854415, 0.25893911083854415, 0.25893911083854415, 0.8069750935972009, 0.8069750935972009, 0.8069750935972009, 0.13927423788766424, 0.13927423788766424, 0.13927423788766424, 0.30468138164490677, 0.30468138164490677, 0.30468138164490677, 0.19025400003905857, 0.19025400003905857, 0.19025400003905857, 0.15535302533917017, 0.15535302533917017, 0.15535302533917017, 0.20212933286809887, 0.20212933286809887, 0.20212933286809887, 0.22047708865373417, 0.22047708865373417, 0.22047708865373417, 0.009386764420712068, 0.009386764420712068, 0.009386764420712068, 0.015123932369408233, 0.015123932369408233, 0.015123932369408233, 0.05185087718671444, 0.05185087718671444, 0.05185087718671444, 0.11017734778620925, 0.11017734778620925, 0.11017734778620925, 0.06059161552975989, 0.06059161552975989, 0.06059161552975989, 0.1530989650413318, 0.1530989650413318, 0.1530989650413318, 0.07522183556183593, 0.07522183556183593, 0.07522183556183593, 0.07903961179825347, 0.07903961179825347, 0.07903961179825347, 0.17607160070317185, 0.17607160070317185, 0.17607160070317185, 0.19336505693932005, 0.19336505693932005, 0.19336505693932005, 0.30797606113398257, 0.30797606113398257, 0.30797606113398257, 0.07659613375949825, 0.07659613375949825, 0.07659613375949825, 0.467822965818133, 0.467822965818133, 0.467822965818133, 0.539693209105043, 0.539693209105043, 0.539693209105043, 0.5021488653988899, 0.5021488653988899, 0.5021488653988899, 0.09819829374280054, 0.09819829374280054, 0.09819829374280054, 0.09965956842846913, 0.09965956842846913, 0.09965956842846913, 0.08850475805666047, 0.08850475805666047, 0.08850475805666047, 0.40133168763323024, 0.40133168763323024, 0.40133168763323024, 0.18540130977886315, 0.18540130977886315, 0.18540130977886315, 0.23353005501166524, 0.23353005501166524, 0.23353005501166524, 0.188602870211798, 0.188602870211798, 0.188602870211798, 0.29614070230225487, 0.29614070230225487, 0.29614070230225487, 0.40485407302904175, 0.40485407302904175, 0.40485407302904175, 0.26565260091259013, 0.26565260091259013, 0.26565260091259013, 0.24823618407599568, 0.24823618407599568, 0.24823618407599568, 0.2887599921463718, 0.2887599921463718, 0.2887599921463718, 0.2654592573870932, 0.2654592573870932, 0.2654592573870932, 0.23897734407590232, 0.23897734407590232, 0.23897734407590232, 0.23543889690550535, 0.23543889690550535, 0.23543889690550535, 0.1953646779442353, 0.1953646779442353, 0.1953646779442353, 0.1692814375701509, 0.1692814375701509, 0.1692814375701509, 0.1791201972424813, 0.1791201972424813, 0.1791201972424813, 0.834016297328835, 0.834016297328835, 0.834016297328835, 0.8209536724596403, 0.8209536724596403, 0.8209536724596403, 0.8504592457402103, 0.8504592457402103, 0.8504592457402103, 0.4061442048305821, 0.4061442048305821, 0.4061442048305821, 0.2064316304067486, 0.2064316304067486, 0.2064316304067486, 0.20871410713392857, 0.20871410713392857, 0.20871410713392857, 0.1812301697904365, 0.1812301697904365, 0.1812301697904365, 0.18119444074760216, 0.18119444074760216, 0.18119444074760216, 0.18283326712919445, 0.18283326712919445, 0.18283326712919445, 0.07921237626206801, 0.07921237626206801, 0.07921237626206801, 0.06599921607226589, 0.06599921607226589, 0.06599921607226589, 0.07091398028327645, 0.07091398028327645, 0.07091398028327645]}, "mutation_prompt": null}
{"id": "c72a015c-3119-41d4-8efe-f1d4ec675467", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 3  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.1, 0.1, self.dim) * (1 - evaluations / self.budget)  # Modified line\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Adjust the dynamic perturbation range to enhance adaptability and precision in later stages of search.", "configspace": "", "generation": 96, "fitness": 0.26024430209182536, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "f636c6ef-68b3-4ed1-a0d8-b4d8683908f6", "metadata": {"aucs": [0.8196167105428829, 0.8196167105428829, 0.8196167105428829, 0.7959536936903406, 0.7959536936903406, 0.7959536936903406, 0.80007079626598, 0.80007079626598, 0.80007079626598, 0.192966510117209, 0.192966510117209, 0.192966510117209, 0.1411531729566754, 0.1411531729566754, 0.1411531729566754, 0.5632623078067845, 0.5632623078067845, 0.5632623078067845, 0.13818518688657933, 0.13818518688657933, 0.13818518688657933, 0.09536972062059834, 0.09536972062059834, 0.09536972062059834, 0.09167093012552852, 0.09167093012552852, 0.09167093012552852, 0.061488262787527836, 0.061488262787527836, 0.061488262787527836, 0.09613327529134308, 0.09613327529134308, 0.09613327529134308, 0.10339442758196182, 0.10339442758196182, 0.10339442758196182, 0.8670588270711388, 0.8670588270711388, 0.8670588270711388, 0.8599451632316677, 0.8599451632316677, 0.8599451632316677, 0.8398374040637752, 0.8398374040637752, 0.8398374040637752, 0.37123115454067424, 0.37123115454067424, 0.37123115454067424, 0.3787784557249224, 0.3787784557249224, 0.3787784557249224, 0.3635245315902902, 0.3635245315902902, 0.3635245315902902, 0.1696190292041707, 0.1696190292041707, 0.1696190292041707, 0.20748415197699355, 0.20748415197699355, 0.20748415197699355, 0.16665276172930066, 0.16665276172930066, 0.16665276172930066, 0.14407701594183364, 0.14407701594183364, 0.14407701594183364, 0.30212162112634844, 0.30212162112634844, 0.30212162112634844, 0.20049552335246257, 0.20049552335246257, 0.20049552335246257, 0.19686491195008415, 0.19686491195008415, 0.19686491195008415, 0.20826100386341362, 0.20826100386341362, 0.20826100386341362, 0.1969040467995462, 0.1969040467995462, 0.1969040467995462, 0.20030657225577675, 0.20030657225577675, 0.20030657225577675, 0.013158832389639219, 0.013158832389639219, 0.013158832389639219, 0.11557276403632954, 0.11557276403632954, 0.11557276403632954, 0.07572062679070846, 0.07572062679070846, 0.07572062679070846, 0.04919932913858027, 0.04919932913858027, 0.04919932913858027, 0.17038767656556197, 0.17038767656556197, 0.17038767656556197, 0.04499677439882943, 0.04499677439882943, 0.04499677439882943, 0.06385703942046894, 0.06385703942046894, 0.06385703942046894, 0.11495951515314029, 0.11495951515314029, 0.11495951515314029, 0.14034468325249894, 0.14034468325249894, 0.14034468325249894, 0.11100857270374631, 0.11100857270374631, 0.11100857270374631, 0.07551560198139906, 0.07551560198139906, 0.07551560198139906, 0.4840375292347908, 0.4840375292347908, 0.4840375292347908, 0.5432813700085721, 0.5432813700085721, 0.5432813700085721, 0.5081074902123941, 0.5081074902123941, 0.5081074902123941, 0.10422703016242174, 0.10422703016242174, 0.10422703016242174, 0.1184856937909764, 0.1184856937909764, 0.1184856937909764, 0.09659322497654155, 0.09659322497654155, 0.09659322497654155, 0.2375235136177154, 0.2375235136177154, 0.2375235136177154, 0.15265329988882936, 0.15265329988882936, 0.15265329988882936, 0.2950859153407208, 0.2950859153407208, 0.2950859153407208, 0.2700130520371534, 0.2700130520371534, 0.2700130520371534, 0.2465147862521282, 0.2465147862521282, 0.2465147862521282, 0.2686154929064669, 0.2686154929064669, 0.2686154929064669, 0.19556181811472728, 0.19556181811472728, 0.19556181811472728, 0.239816125358582, 0.239816125358582, 0.239816125358582, 0.2138080705402059, 0.2138080705402059, 0.2138080705402059, 0.25116300068471653, 0.25116300068471653, 0.25116300068471653, 0.2896967296400489, 0.2896967296400489, 0.2896967296400489, 0.2809289497835966, 0.2809289497835966, 0.2809289497835966, 0.18127709319017227, 0.18127709319017227, 0.18127709319017227, 0.16709716634693372, 0.16709716634693372, 0.16709716634693372, 0.18621796989826833, 0.18621796989826833, 0.18621796989826833, 0.173933460338226, 0.173933460338226, 0.173933460338226, 0.1694312356374441, 0.1694312356374441, 0.1694312356374441, 0.8587473055207289, 0.8587473055207289, 0.8587473055207289, 0.41670199922964724, 0.41670199922964724, 0.41670199922964724, 0.21004957139486702, 0.21004957139486702, 0.21004957139486702, 0.21126181545023115, 0.21126181545023115, 0.21126181545023115, 0.18554768366552743, 0.18554768366552743, 0.18554768366552743, 0.19107320987052867, 0.19107320987052867, 0.19107320987052867, 0.1916800317551578, 0.1916800317551578, 0.1916800317551578, 0.07364823062132764, 0.07364823062132764, 0.07364823062132764, 0.09141772534406378, 0.09141772534406378, 0.09141772534406378, 0.08624357487100132, 0.08624357487100132, 0.08624357487100132]}, "mutation_prompt": null}
{"id": "5841ffba-043a-4754-8477-c11ad540e5cc", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 3  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.3, 0.3, self.dim) * (1 - evaluations / self.budget)  # Modified line\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Refine the dynamic perturbation in DE-like mutation to enhance diversity and exploration capability.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f636c6ef-68b3-4ed1-a0d8-b4d8683908f6", "metadata": {"aucs": [0.8071867740755719, 0.8071867740755719, 0.8071867740755719, 0.7951837900719827, 0.7951837900719827, 0.7951837900719827, 0.7916530566335434, 0.7916530566335434, 0.7916530566335434, 0.32343102671141, 0.32343102671141, 0.32343102671141, 0.36086478527997734, 0.36086478527997734, 0.36086478527997734, 0.4437841545531632, 0.4437841545531632, 0.4437841545531632, 0.12495313715140688, 0.12495313715140688, 0.12495313715140688, 0.10293912874904854, 0.10293912874904854, 0.10293912874904854, 0.1486730312059279, 0.1486730312059279, 0.1486730312059279, 0.11355813394949876, 0.11355813394949876, 0.11355813394949876, 0.08399202374768988, 0.08399202374768988, 0.08399202374768988, 0.11559668205826346, 0.11559668205826346, 0.11559668205826346, 0.8651486958848186, 0.8651486958848186, 0.8651486958848186, 0.8527015687360768, 0.8527015687360768, 0.8527015687360768, 0.85484323986736, 0.85484323986736, 0.85484323986736, 0.4238734091061104, 0.4238734091061104, 0.4238734091061104, 0.32993890594496056, 0.32993890594496056, 0.32993890594496056, 0.34513829044133504, 0.34513829044133504, 0.34513829044133504, 0.17014285282947184, 0.17014285282947184, 0.17014285282947184, 0.25893911083854415, 0.25893911083854415, 0.25893911083854415, 0.8069750935972009, 0.8069750935972009, 0.8069750935972009, 0.13927423788766424, 0.13927423788766424, 0.13927423788766424, 0.30468138164490677, 0.30468138164490677, 0.30468138164490677, 0.19025400003905857, 0.19025400003905857, 0.19025400003905857, 0.15535302533917017, 0.15535302533917017, 0.15535302533917017, 0.20212933286809887, 0.20212933286809887, 0.20212933286809887, 0.22047708865373417, 0.22047708865373417, 0.22047708865373417, 0.009386764420712068, 0.009386764420712068, 0.009386764420712068, 0.015123932369408233, 0.015123932369408233, 0.015123932369408233, 0.05185087718671444, 0.05185087718671444, 0.05185087718671444, 0.11017734778620925, 0.11017734778620925, 0.11017734778620925, 0.06059161552975989, 0.06059161552975989, 0.06059161552975989, 0.1530989650413318, 0.1530989650413318, 0.1530989650413318, 0.07522183556183593, 0.07522183556183593, 0.07522183556183593, 0.07903961179825347, 0.07903961179825347, 0.07903961179825347, 0.17607160070317185, 0.17607160070317185, 0.17607160070317185, 0.19336505693932005, 0.19336505693932005, 0.19336505693932005, 0.30797606113398257, 0.30797606113398257, 0.30797606113398257, 0.07659613375949825, 0.07659613375949825, 0.07659613375949825, 0.467822965818133, 0.467822965818133, 0.467822965818133, 0.539693209105043, 0.539693209105043, 0.539693209105043, 0.5021488653988899, 0.5021488653988899, 0.5021488653988899, 0.09819829374280054, 0.09819829374280054, 0.09819829374280054, 0.09965956842846913, 0.09965956842846913, 0.09965956842846913, 0.08850475805666047, 0.08850475805666047, 0.08850475805666047, 0.40133168763323024, 0.40133168763323024, 0.40133168763323024, 0.18540130977886315, 0.18540130977886315, 0.18540130977886315, 0.23353005501166524, 0.23353005501166524, 0.23353005501166524, 0.188602870211798, 0.188602870211798, 0.188602870211798, 0.29614070230225487, 0.29614070230225487, 0.29614070230225487, 0.40485407302904175, 0.40485407302904175, 0.40485407302904175, 0.26565260091259013, 0.26565260091259013, 0.26565260091259013, 0.24823618407599568, 0.24823618407599568, 0.24823618407599568, 0.2887599921463718, 0.2887599921463718, 0.2887599921463718, 0.2654592573870932, 0.2654592573870932, 0.2654592573870932, 0.23897734407590232, 0.23897734407590232, 0.23897734407590232, 0.23543889690550535, 0.23543889690550535, 0.23543889690550535, 0.1953646779442353, 0.1953646779442353, 0.1953646779442353, 0.1692814375701509, 0.1692814375701509, 0.1692814375701509, 0.1791201972424813, 0.1791201972424813, 0.1791201972424813, 0.834016297328835, 0.834016297328835, 0.834016297328835, 0.8209536724596403, 0.8209536724596403, 0.8209536724596403, 0.8504592457402103, 0.8504592457402103, 0.8504592457402103, 0.4061442048305821, 0.4061442048305821, 0.4061442048305821, 0.2064316304067486, 0.2064316304067486, 0.2064316304067486, 0.20871410713392857, 0.20871410713392857, 0.20871410713392857, 0.1812301697904365, 0.1812301697904365, 0.1812301697904365, 0.18119444074760216, 0.18119444074760216, 0.18119444074760216, 0.18283326712919445, 0.18283326712919445, 0.18283326712919445, 0.07921237626206801, 0.07921237626206801, 0.07921237626206801, 0.06599921607226589, 0.06599921607226589, 0.06599921607226589, 0.07091398028327645, 0.07091398028327645, 0.07091398028327645]}, "mutation_prompt": null}
{"id": "b54f74c3-74b4-4508-8dab-7682bd96422c", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 3  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.3, 0.3, self.dim) * (1 - evaluations / self.budget)  # Modified line\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Refine the dynamic perturbation in DE-like mutation to enhance diversity and exploration capability.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f636c6ef-68b3-4ed1-a0d8-b4d8683908f6", "metadata": {"aucs": [0.8071867740755719, 0.8071867740755719, 0.8071867740755719, 0.7951837900719827, 0.7951837900719827, 0.7951837900719827, 0.7916530566335434, 0.7916530566335434, 0.7916530566335434, 0.32343102671141, 0.32343102671141, 0.32343102671141, 0.36086478527997734, 0.36086478527997734, 0.36086478527997734, 0.4437841545531632, 0.4437841545531632, 0.4437841545531632, 0.12495313715140688, 0.12495313715140688, 0.12495313715140688, 0.10293912874904854, 0.10293912874904854, 0.10293912874904854, 0.1486730312059279, 0.1486730312059279, 0.1486730312059279, 0.11355813394949876, 0.11355813394949876, 0.11355813394949876, 0.08399202374768988, 0.08399202374768988, 0.08399202374768988, 0.11559668205826346, 0.11559668205826346, 0.11559668205826346, 0.8651486958848186, 0.8651486958848186, 0.8651486958848186, 0.8527015687360768, 0.8527015687360768, 0.8527015687360768, 0.85484323986736, 0.85484323986736, 0.85484323986736, 0.4238734091061104, 0.4238734091061104, 0.4238734091061104, 0.32993890594496056, 0.32993890594496056, 0.32993890594496056, 0.34513829044133504, 0.34513829044133504, 0.34513829044133504, 0.17014285282947184, 0.17014285282947184, 0.17014285282947184, 0.25893911083854415, 0.25893911083854415, 0.25893911083854415, 0.8069750935972009, 0.8069750935972009, 0.8069750935972009, 0.13927423788766424, 0.13927423788766424, 0.13927423788766424, 0.30468138164490677, 0.30468138164490677, 0.30468138164490677, 0.19025400003905857, 0.19025400003905857, 0.19025400003905857, 0.15535302533917017, 0.15535302533917017, 0.15535302533917017, 0.20212933286809887, 0.20212933286809887, 0.20212933286809887, 0.22047708865373417, 0.22047708865373417, 0.22047708865373417, 0.009386764420712068, 0.009386764420712068, 0.009386764420712068, 0.015123932369408233, 0.015123932369408233, 0.015123932369408233, 0.05185087718671444, 0.05185087718671444, 0.05185087718671444, 0.11017734778620925, 0.11017734778620925, 0.11017734778620925, 0.06059161552975989, 0.06059161552975989, 0.06059161552975989, 0.1530989650413318, 0.1530989650413318, 0.1530989650413318, 0.07522183556183593, 0.07522183556183593, 0.07522183556183593, 0.07903961179825347, 0.07903961179825347, 0.07903961179825347, 0.17607160070317185, 0.17607160070317185, 0.17607160070317185, 0.19336505693932005, 0.19336505693932005, 0.19336505693932005, 0.30797606113398257, 0.30797606113398257, 0.30797606113398257, 0.07659613375949825, 0.07659613375949825, 0.07659613375949825, 0.467822965818133, 0.467822965818133, 0.467822965818133, 0.539693209105043, 0.539693209105043, 0.539693209105043, 0.5021488653988899, 0.5021488653988899, 0.5021488653988899, 0.09819829374280054, 0.09819829374280054, 0.09819829374280054, 0.09965956842846913, 0.09965956842846913, 0.09965956842846913, 0.08850475805666047, 0.08850475805666047, 0.08850475805666047, 0.40133168763323024, 0.40133168763323024, 0.40133168763323024, 0.18540130977886315, 0.18540130977886315, 0.18540130977886315, 0.23353005501166524, 0.23353005501166524, 0.23353005501166524, 0.188602870211798, 0.188602870211798, 0.188602870211798, 0.29614070230225487, 0.29614070230225487, 0.29614070230225487, 0.40485407302904175, 0.40485407302904175, 0.40485407302904175, 0.26565260091259013, 0.26565260091259013, 0.26565260091259013, 0.24823618407599568, 0.24823618407599568, 0.24823618407599568, 0.2887599921463718, 0.2887599921463718, 0.2887599921463718, 0.2654592573870932, 0.2654592573870932, 0.2654592573870932, 0.23897734407590232, 0.23897734407590232, 0.23897734407590232, 0.23543889690550535, 0.23543889690550535, 0.23543889690550535, 0.1953646779442353, 0.1953646779442353, 0.1953646779442353, 0.1692814375701509, 0.1692814375701509, 0.1692814375701509, 0.1791201972424813, 0.1791201972424813, 0.1791201972424813, 0.834016297328835, 0.834016297328835, 0.834016297328835, 0.8209536724596403, 0.8209536724596403, 0.8209536724596403, 0.8504592457402103, 0.8504592457402103, 0.8504592457402103, 0.4061442048305821, 0.4061442048305821, 0.4061442048305821, 0.2064316304067486, 0.2064316304067486, 0.2064316304067486, 0.20871410713392857, 0.20871410713392857, 0.20871410713392857, 0.1812301697904365, 0.1812301697904365, 0.1812301697904365, 0.18119444074760216, 0.18119444074760216, 0.18119444074760216, 0.18283326712919445, 0.18283326712919445, 0.18283326712919445, 0.07921237626206801, 0.07921237626206801, 0.07921237626206801, 0.06599921607226589, 0.06599921607226589, 0.06599921607226589, 0.07091398028327645, 0.07091398028327645, 0.07091398028327645]}, "mutation_prompt": null}
{"id": "4327078b-f9d4-4178-973e-9ae38ee477dc", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.f = 0.5  # DE scaling factor\n        self.cr = 0.9  # DE crossover probability\n        self.inertia_weight = 0.7\n        self.cognitive_component = 1.5\n        self.social_component = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        np.random.seed(42)\n\n    def __call__(self, func):\n        # Initialize particles\n        particle_positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        particle_velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(particle_positions)\n        personal_best_scores = np.full(self.pop_size, np.inf)\n        global_best_position = None\n        global_best_score = np.inf\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate current particle positions\n            scores = np.array([func(x) for x in particle_positions])\n            evaluations += self.pop_size\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_positions[better_mask] = particle_positions[better_mask]\n            personal_best_scores[better_mask] = scores[better_mask]\n\n            if np.min(scores) < global_best_score:\n                global_best_score = np.min(scores)\n                global_best_position = particle_positions[np.argmin(scores)]\n\n            # PSO update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive = self.cognitive_component * (1 - evaluations / self.budget)\n                cognitive_velocity = adaptive_cognitive * r1 * (personal_best_positions[i] - particle_positions[i])\n                adaptive_social = self.social_component * (1 - evaluations / self.budget) ** 3  # Changed line\n                social_velocity = adaptive_social * r2 * (global_best_position - particle_positions[i])\n                adaptive_inertia_weight = self.inertia_weight * (1 - evaluations / self.budget)\n                adaptive_inertia_weight = np.random.uniform(0.5, 1.0, self.dim) * adaptive_inertia_weight\n                particle_velocities[i] = (adaptive_inertia_weight * particle_velocities[i] +\n                                          cognitive_velocity +\n                                          social_velocity)\n                particle_velocities[i] = np.clip(particle_velocities[i], -1, 1)\n                particle_positions[i] += particle_velocities[i]\n                particle_positions[i] = np.clip(particle_positions[i], self.lower_bound, self.upper_bound)\n\n            # DE-like mutation and crossover\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                dynamic_perturbation = np.random.uniform(-0.3, 0.3, self.dim) * (1 - evaluations / self.budget)  # Modified line\n                gaussian_mutation = np.random.normal(0, 0.1 * (1 - evaluations / self.budget), self.dim)\n                dynamic_f = self.f * np.random.uniform(0.5, 1.0)\n                local_search_intensity = 0.1 + 0.9 * (1 - evaluations / self.budget)\n                mutant = dynamic_f * (particle_positions[a] + local_search_intensity * (particle_positions[b] - particle_positions[c])) + dynamic_perturbation + gaussian_mutation\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability\n                adaptive_cr = self.cr * (1 - evaluations / self.budget)\n                trial = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, particle_positions[i])\n\n                if func(trial) < scores[i]:\n                    particle_positions[i] = trial\n                    scores[i] = func(trial)\n                    evaluations += 1\n\n        return global_best_position", "name": "PSO_DE_Optimizer", "description": "Refine the dynamic perturbation in DE-like mutation to enhance diversity and exploration capability.", "configspace": "", "generation": 94, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f636c6ef-68b3-4ed1-a0d8-b4d8683908f6", "metadata": {"aucs": [0.8071867740755719, 0.8071867740755719, 0.8071867740755719, 0.7951837900719827, 0.7951837900719827, 0.7951837900719827, 0.7916530566335434, 0.7916530566335434, 0.7916530566335434, 0.32343102671141, 0.32343102671141, 0.32343102671141, 0.36086478527997734, 0.36086478527997734, 0.36086478527997734, 0.4437841545531632, 0.4437841545531632, 0.4437841545531632, 0.12495313715140688, 0.12495313715140688, 0.12495313715140688, 0.10293912874904854, 0.10293912874904854, 0.10293912874904854, 0.1486730312059279, 0.1486730312059279, 0.1486730312059279, 0.11355813394949876, 0.11355813394949876, 0.11355813394949876, 0.08399202374768988, 0.08399202374768988, 0.08399202374768988, 0.11559668205826346, 0.11559668205826346, 0.11559668205826346, 0.8651486958848186, 0.8651486958848186, 0.8651486958848186, 0.8527015687360768, 0.8527015687360768, 0.8527015687360768, 0.85484323986736, 0.85484323986736, 0.85484323986736, 0.4238734091061104, 0.4238734091061104, 0.4238734091061104, 0.32993890594496056, 0.32993890594496056, 0.32993890594496056, 0.34513829044133504, 0.34513829044133504, 0.34513829044133504, 0.17014285282947184, 0.17014285282947184, 0.17014285282947184, 0.25893911083854415, 0.25893911083854415, 0.25893911083854415, 0.8069750935972009, 0.8069750935972009, 0.8069750935972009, 0.13927423788766424, 0.13927423788766424, 0.13927423788766424, 0.30468138164490677, 0.30468138164490677, 0.30468138164490677, 0.19025400003905857, 0.19025400003905857, 0.19025400003905857, 0.15535302533917017, 0.15535302533917017, 0.15535302533917017, 0.20212933286809887, 0.20212933286809887, 0.20212933286809887, 0.22047708865373417, 0.22047708865373417, 0.22047708865373417, 0.009386764420712068, 0.009386764420712068, 0.009386764420712068, 0.015123932369408233, 0.015123932369408233, 0.015123932369408233, 0.05185087718671444, 0.05185087718671444, 0.05185087718671444, 0.11017734778620925, 0.11017734778620925, 0.11017734778620925, 0.06059161552975989, 0.06059161552975989, 0.06059161552975989, 0.1530989650413318, 0.1530989650413318, 0.1530989650413318, 0.07522183556183593, 0.07522183556183593, 0.07522183556183593, 0.07903961179825347, 0.07903961179825347, 0.07903961179825347, 0.17607160070317185, 0.17607160070317185, 0.17607160070317185, 0.19336505693932005, 0.19336505693932005, 0.19336505693932005, 0.30797606113398257, 0.30797606113398257, 0.30797606113398257, 0.07659613375949825, 0.07659613375949825, 0.07659613375949825, 0.467822965818133, 0.467822965818133, 0.467822965818133, 0.539693209105043, 0.539693209105043, 0.539693209105043, 0.5021488653988899, 0.5021488653988899, 0.5021488653988899, 0.09819829374280054, 0.09819829374280054, 0.09819829374280054, 0.09965956842846913, 0.09965956842846913, 0.09965956842846913, 0.08850475805666047, 0.08850475805666047, 0.08850475805666047, 0.40133168763323024, 0.40133168763323024, 0.40133168763323024, 0.18540130977886315, 0.18540130977886315, 0.18540130977886315, 0.23353005501166524, 0.23353005501166524, 0.23353005501166524, 0.188602870211798, 0.188602870211798, 0.188602870211798, 0.29614070230225487, 0.29614070230225487, 0.29614070230225487, 0.40485407302904175, 0.40485407302904175, 0.40485407302904175, 0.26565260091259013, 0.26565260091259013, 0.26565260091259013, 0.24823618407599568, 0.24823618407599568, 0.24823618407599568, 0.2887599921463718, 0.2887599921463718, 0.2887599921463718, 0.2654592573870932, 0.2654592573870932, 0.2654592573870932, 0.23897734407590232, 0.23897734407590232, 0.23897734407590232, 0.23543889690550535, 0.23543889690550535, 0.23543889690550535, 0.1953646779442353, 0.1953646779442353, 0.1953646779442353, 0.1692814375701509, 0.1692814375701509, 0.1692814375701509, 0.1791201972424813, 0.1791201972424813, 0.1791201972424813, 0.834016297328835, 0.834016297328835, 0.834016297328835, 0.8209536724596403, 0.8209536724596403, 0.8209536724596403, 0.8504592457402103, 0.8504592457402103, 0.8504592457402103, 0.4061442048305821, 0.4061442048305821, 0.4061442048305821, 0.2064316304067486, 0.2064316304067486, 0.2064316304067486, 0.20871410713392857, 0.20871410713392857, 0.20871410713392857, 0.1812301697904365, 0.1812301697904365, 0.1812301697904365, 0.18119444074760216, 0.18119444074760216, 0.18119444074760216, 0.18283326712919445, 0.18283326712919445, 0.18283326712919445, 0.07921237626206801, 0.07921237626206801, 0.07921237626206801, 0.06599921607226589, 0.06599921607226589, 0.06599921607226589, 0.07091398028327645, 0.07091398028327645, 0.07091398028327645]}, "mutation_prompt": null}
