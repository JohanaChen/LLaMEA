{"id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.3131845801546831, "feedback": "The algorithm PSO_ALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "59a0a489-724f-42ae-9e97-e5e9adb92d21", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "f40c0051-fbc6-4923-bde8-aa32bbcde741", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "84c0bd6d-eb4f-465f-8976-5a4191c5cedc", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "4d855214-18a0-45e2-aff3-5e9849f7e4ec", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "29858dad-f94f-4c19-bccb-08dea60f6cb2", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "c0f6e7df-75be-443b-bfe6-1fd8647afae1", "solution": "import numpy as np\n\nclass PSO_ALS_DP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.differential_weight = 0.8\n        self.adaptive_weight_decay = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions with adaptive inertia\n                self.inertia_weight *= self.adaptive_weight_decay\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                \n                # Apply differential perturbation\n                idxs = np.random.choice(self.pop_size, 2, replace=False)\n                diff_perturbation = self.differential_weight * (positions[idxs[0]] - positions[idxs[1]])\n                velocities[i] += diff_perturbation\n                \n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search with differential perturbation\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim) + diff_perturbation\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS_DP", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search and Differential Perturbations (PSO-ALS-DP) introduces differential perturbations to enhance exploration and dynamic weight adjustment for balanced exploration and exploitation.", "configspace": "", "generation": 6, "fitness": 0.1273121598182016, "feedback": "The algorithm PSO_ALS_DP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.18584119112100395, 0.18584119112100395, 0.18584119112100395, 0.22794144425519824, 0.22794144425519824, 0.22794144425519824, 0.1932557761351852, 0.1932557761351852, 0.1932557761351852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0620027934213897, 0.0620027934213897, 0.0620027934213897, 0.05273680156175886, 0.05273680156175886, 0.05273680156175886, 0.06740604996493893, 0.06740604996493893, 0.06740604996493893, 0.02099791242852278, 0.02099791242852278, 0.02099791242852278, 0.027473580867899527, 0.027473580867899527, 0.027473580867899527, 0.028025580082663093, 0.028025580082663093, 0.028025580082663093, 0.9894131006920596, 0.9894131006920596, 0.9894131006920596, 0.9780430290232446, 0.9780430290232446, 0.9780430290232446, 0.9873816832969785, 0.9873816832969785, 0.9873816832969785, 0.08986328504453323, 0.08986328504453323, 0.08986328504453323, 0.08393745282135456, 0.08393745282135456, 0.08393745282135456, 0.09959372749085538, 0.09959372749085538, 0.09959372749085538, 0.12441619009914318, 0.12441619009914318, 0.12441619009914318, 0.13321272704102016, 0.13321272704102016, 0.13321272704102016, 0.15339840451637488, 0.15339840451637488, 0.15339840451637488, 0.005740779371159244, 0.005740779371159244, 0.005740779371159244, 0.00631333270300416, 0.00631333270300416, 0.00631333270300416, 0.0035807312392971413, 0.0035807312392971413, 0.0035807312392971413, 0.02286474015486617, 0.02286474015486617, 0.02286474015486617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04825906012613046, 0.04825906012613046, 0.04825906012613046, 0.011872747846110587, 0.011872747846110587, 0.011872747846110587, 0.03829615898397065, 0.03829615898397065, 0.03829615898397065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030135762612533146, 0.0030135762612533146, 0.0030135762612533146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00613776361485785, 0.00613776361485785, 0.00613776361485785, 0.2693810826176929, 0.2693810826176929, 0.2693810826176929, 0.23269740200290656, 0.23269740200290656, 0.23269740200290656, 0.1998393337563048, 0.1998393337563048, 0.1998393337563048, 0.06648788188562416, 0.06648788188562416, 0.06648788188562416, 0.04857516269815476, 0.04857516269815476, 0.04857516269815476, 0.04137930069695017, 0.04137930069695017, 0.04137930069695017, 0.16042747081879571, 0.16042747081879571, 0.16042747081879571, 0.12512755015981603, 0.12512755015981603, 0.12512755015981603, 0.15527205258531596, 0.15527205258531596, 0.15527205258531596, 0.1636918533008651, 0.1636918533008651, 0.1636918533008651, 0.14307578957810185, 0.14307578957810185, 0.14307578957810185, 0.17453180392238554, 0.17453180392238554, 0.17453180392238554, 0.13005704532591522, 0.13005704532591522, 0.13005704532591522, 0.09810507897262832, 0.09810507897262832, 0.09810507897262832, 0.10270686603182089, 0.10270686603182089, 0.10270686603182089, 0.1456886208837428, 0.1456886208837428, 0.1456886208837428, 0.15527599803021497, 0.15527599803021497, 0.15527599803021497, 0.1778773068606393, 0.1778773068606393, 0.1778773068606393, 0.11804036017914277, 0.11804036017914277, 0.11804036017914277, 0.12384335724526796, 0.12384335724526796, 0.12384335724526796, 0.13727581869307126, 0.13727581869307126, 0.13727581869307126, 0.13754942744384224, 0.13754942744384224, 0.13754942744384224, 0.16473772129203457, 0.16473772129203457, 0.16473772129203457, 0.15659147786425587, 0.15659147786425587, 0.15659147786425587, 0.1411691707359214, 0.1411691707359214, 0.1411691707359214, 0.11036641297327554, 0.11036641297327554, 0.11036641297327554, 0.11576946630844487, 0.11576946630844487, 0.11576946630844487, 0.1823441092298005, 0.1823441092298005, 0.1823441092298005, 0.19714026805000995, 0.19714026805000995, 0.19714026805000995, 0.1874568377643273, 0.1874568377643273, 0.1874568377643273, 0.05139293746322127, 0.05139293746322127, 0.05139293746322127, 0.048959713490697165, 0.048959713490697165, 0.048959713490697165, 0.05142120788455429, 0.05142120788455429, 0.05142120788455429]}, "mutation_prompt": null}
{"id": "550095dc-4b4a-439a-b146-96b4a8fe6481", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "474f04a1-4050-4f92-888a-5229a64f4b31", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "7b09cad5-43ae-4900-bf44-c3b28e5a566a", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "1ee35ee7-491b-4840-bf32-6ab1de12dfbf", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "2bcda210-0d42-4f85-ace0-879de4d8f159", "solution": "import numpy as np\n\nclass IPSO_DI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight_initial = 0.9\n        self.inertia_weight_final = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.evals = 0\n\n    def update_inertia_weight(self):\n        # Dynamic adjustment of inertia weight\n        progress = self.evals / self.budget\n        return self.inertia_weight_initial - (self.inertia_weight_initial - self.inertia_weight_final) * progress\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        self.evals = self.pop_size\n        \n        while self.evals < self.budget:\n            inertia_weight = self.update_inertia_weight()\n            \n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                self.evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if self.evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                self.evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "IPSO_DI", "description": "Improved Hybrid PSO with Dynamic Inertia (IPSO-DI) adjusts inertia weight dynamically based on convergence rate, enhancing exploration in early stages and exploitation as convergence improves.", "configspace": "", "generation": 11, "fitness": 0.28676498434649256, "feedback": "The algorithm IPSO_DI got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.7492019087321976, 0.7492019087321976, 0.7492019087321976, 0.7775935771239579, 0.7775935771239579, 0.7775935771239579, 0.7773360983338318, 0.7773360983338318, 0.7773360983338318, 0.55876888477047, 0.55876888477047, 0.55876888477047, 0.548592534819774, 0.548592534819774, 0.548592534819774, 0.003810857374366927, 0.003810857374366927, 0.003810857374366927, 0.648459580649114, 0.648459580649114, 0.648459580649114, 0.13034287671619404, 0.13034287671619404, 0.13034287671619404, 0.1432132867114153, 0.1432132867114153, 0.1432132867114153, 0.10265571153163833, 0.10265571153163833, 0.10265571153163833, 0.14394455014955365, 0.14394455014955365, 0.14394455014955365, 0.11822364152642073, 0.11822364152642073, 0.11822364152642073, 0.9964952294901364, 0.9964952294901364, 0.9964952294901364, 0.9949686003824362, 0.9949686003824362, 0.9949686003824362, 0.9945741874212739, 0.9945741874212739, 0.9945741874212739, 0.6013867011216834, 0.6013867011216834, 0.6013867011216834, 0.6516314734623537, 0.6516314734623537, 0.6516314734623537, 0.6317954043054007, 0.6317954043054007, 0.6317954043054007, 0.22165822809630564, 0.22165822809630564, 0.22165822809630564, 0.2648437513126404, 0.2648437513126404, 0.2648437513126404, 0.21582373501759755, 0.21582373501759755, 0.21582373501759755, 0.101169666616728, 0.101169666616728, 0.101169666616728, 0.20651584824842162, 0.20651584824842162, 0.20651584824842162, 0.11482758977128593, 0.11482758977128593, 0.11482758977128593, 0.18511124056736294, 0.18511124056736294, 0.18511124056736294, 0.17994281036117876, 0.17994281036117876, 0.17994281036117876, 0.19179077205503448, 0.19179077205503448, 0.19179077205503448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04688547309148161, 0.04688547309148161, 0.04688547309148161, 0.0007632683890180791, 0.0007632683890180791, 0.0007632683890180791, 0.0699692923562314, 0.0699692923562314, 0.0699692923562314, 0.07277586521709523, 0.07277586521709523, 0.07277586521709523, 0.050820396087148945, 0.050820396087148945, 0.050820396087148945, 0.03502249948626812, 0.03502249948626812, 0.03502249948626812, 0.07785568680304078, 0.07785568680304078, 0.07785568680304078, 0.07981307466607956, 0.07981307466607956, 0.07981307466607956, 0.04432496166708555, 0.04432496166708555, 0.04432496166708555, 0.04951611693180369, 0.04951611693180369, 0.04951611693180369, 0.10365034423910058, 0.10365034423910058, 0.10365034423910058, 0.4868482090974773, 0.4868482090974773, 0.4868482090974773, 0.5439753731553221, 0.5439753731553221, 0.5439753731553221, 0.5220768532577902, 0.5220768532577902, 0.5220768532577902, 0.06428513768479427, 0.06428513768479427, 0.06428513768479427, 0.08032605570461238, 0.08032605570461238, 0.08032605570461238, 0.13537132959341436, 0.13537132959341436, 0.13537132959341436, 0.2723154693050207, 0.2723154693050207, 0.2723154693050207, 0.24460442929416792, 0.24460442929416792, 0.24460442929416792, 0.26714229672401835, 0.26714229672401835, 0.26714229672401835, 0.22986020184557776, 0.22986020184557776, 0.22986020184557776, 0.32947678585732265, 0.32947678585732265, 0.32947678585732265, 0.22445474340516147, 0.22445474340516147, 0.22445474340516147, 0.18872012610303668, 0.18872012610303668, 0.18872012610303668, 0.25206326005926005, 0.25206326005926005, 0.25206326005926005, 0.2876023657732266, 0.2876023657732266, 0.2876023657732266, 0.21680934961166398, 0.21680934961166398, 0.21680934961166398, 0.1804354926758418, 0.1804354926758418, 0.1804354926758418, 0.20037915819980856, 0.20037915819980856, 0.20037915819980856, 0.21775786032806788, 0.21775786032806788, 0.21775786032806788, 0.6274548886141691, 0.6274548886141691, 0.6274548886141691, 0.22753279937524884, 0.22753279937524884, 0.22753279937524884, 0.16505663194179543, 0.16505663194179543, 0.16505663194179543, 0.7969627046079713, 0.7969627046079713, 0.7969627046079713, 0.15557664824496586, 0.15557664824496586, 0.15557664824496586, 0.535492881854031, 0.535492881854031, 0.535492881854031, 0.2088118553609951, 0.2088118553609951, 0.2088118553609951, 0.21428203815044222, 0.21428203815044222, 0.21428203815044222, 0.2055022336010095, 0.2055022336010095, 0.2055022336010095, 0.21119195179315697, 0.21119195179315697, 0.21119195179315697, 0.19464209429359602, 0.19464209429359602, 0.19464209429359602, 0.08648235244338232, 0.08648235244338232, 0.08648235244338232, 0.11903753674068362, 0.11903753674068362, 0.11903753674068362, 0.06837203264730451, 0.06837203264730451, 0.06837203264730451]}, "mutation_prompt": null}
{"id": "67526570-80b3-4991-94af-1dba89683c4d", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "037e221c-55a4-4e89-9d70-eec685a33c50", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "92de51f1-01a6-43bb-b283-d86dc5986722", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "ecb70a26-6679-4d68-b496-7ad6e708d808", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "5f37ebd6-32c3-4bee-b4a7-33ebabcc3e0a", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "0c01de5c-1349-44ff-92c9-c4a220c3f496", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "9bc5c401-9c5d-4f8e-97f0-ba6bac4e4182", "solution": "import numpy as np\n\nclass PSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Adaptive Local Search\n            if evals < self.budget:\n                local_positions = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n        \n        return global_best_score", "name": "PSO_ALS", "description": "Hybrid Particle Swarm Optimization with Adaptive Local Search (PSO-ALS) combines global search via PSO and local search using adaptive step sizes for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.8973719009298882, 0.8973719009298882, 0.8973719009298882, 0.8821519319784509, 0.8821519319784509, 0.8821519319784509, 0.8833108799467183, 0.8833108799467183, 0.8833108799467183, 0.07852953552080111, 0.07852953552080111, 0.07852953552080111, 0.700768560594423, 0.700768560594423, 0.700768560594423, 0.05101750552285189, 0.05101750552285189, 0.05101750552285189, 0.16008061581869992, 0.16008061581869992, 0.16008061581869992, 0.14441931588399037, 0.14441931588399037, 0.14441931588399037, 0.07384655709198595, 0.07384655709198595, 0.07384655709198595, 0.1553239712531329, 0.1553239712531329, 0.1553239712531329, 0.14408669340289582, 0.14408669340289582, 0.14408669340289582, 0.12194478932108543, 0.12194478932108543, 0.12194478932108543, 0.9964729558717373, 0.9964729558717373, 0.9964729558717373, 0.9946681135428055, 0.9946681135428055, 0.9946681135428055, 0.9948971556582665, 0.9948971556582665, 0.9948971556582665, 0.6983556881512791, 0.6983556881512791, 0.6983556881512791, 0.7230460357343325, 0.7230460357343325, 0.7230460357343325, 0.7646712672779064, 0.7646712672779064, 0.7646712672779064, 0.2315895207221622, 0.2315895207221622, 0.2315895207221622, 0.2828242952591997, 0.2828242952591997, 0.2828242952591997, 0.2381643906682941, 0.2381643906682941, 0.2381643906682941, 0.10091502388735685, 0.10091502388735685, 0.10091502388735685, 0.2359864258345027, 0.2359864258345027, 0.2359864258345027, 0.1342071381717015, 0.1342071381717015, 0.1342071381717015, 0.22123813744448195, 0.22123813744448195, 0.22123813744448195, 0.2659562616951665, 0.2659562616951665, 0.2659562616951665, 0.2686753545178978, 0.2686753545178978, 0.2686753545178978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00239736890659914, 0.00239736890659914, 0.00239736890659914, 0.007201925477912097, 0.007201925477912097, 0.007201925477912097, 0.030051442347144963, 0.030051442347144963, 0.030051442347144963, 0.07941859834062037, 0.07941859834062037, 0.07941859834062037, 0.09347525571730186, 0.09347525571730186, 0.09347525571730186, 0.06125477951627889, 0.06125477951627889, 0.06125477951627889, 0.0887076881345078, 0.0887076881345078, 0.0887076881345078, 0.07080184597182637, 0.07080184597182637, 0.07080184597182637, 0.04523713181008193, 0.04523713181008193, 0.04523713181008193, 0.1418030764871373, 0.1418030764871373, 0.1418030764871373, 0.084832298704695, 0.084832298704695, 0.084832298704695, 0.5638471956919442, 0.5638471956919442, 0.5638471956919442, 0.5956372735080125, 0.5956372735080125, 0.5956372735080125, 0.6271377431120975, 0.6271377431120975, 0.6271377431120975, 0.053706805268772584, 0.053706805268772584, 0.053706805268772584, 0.18701552147480094, 0.18701552147480094, 0.18701552147480094, 0.119352177858988, 0.119352177858988, 0.119352177858988, 0.17581857935124678, 0.17581857935124678, 0.17581857935124678, 0.4700055748005515, 0.4700055748005515, 0.4700055748005515, 0.18686469966998753, 0.18686469966998753, 0.18686469966998753, 0.4734245442003645, 0.4734245442003645, 0.4734245442003645, 0.3760496583681818, 0.3760496583681818, 0.3760496583681818, 0.24151748581478683, 0.24151748581478683, 0.24151748581478683, 0.24704228860360322, 0.24704228860360322, 0.24704228860360322, 0.32902690502737053, 0.32902690502737053, 0.32902690502737053, 0.2059378298715614, 0.2059378298715614, 0.2059378298715614, 0.22966495898770023, 0.22966495898770023, 0.22966495898770023, 0.2040681789083515, 0.2040681789083515, 0.2040681789083515, 0.2723662689251848, 0.2723662689251848, 0.2723662689251848, 0.2180425726759978, 0.2180425726759978, 0.2180425726759978, 0.19455768243270655, 0.19455768243270655, 0.19455768243270655, 0.19908497050781204, 0.19908497050781204, 0.19908497050781204, 0.9229484473799013, 0.9229484473799013, 0.9229484473799013, 0.9197561500863524, 0.9197561500863524, 0.9197561500863524, 0.1594884372461629, 0.1594884372461629, 0.1594884372461629, 0.861427518533914, 0.861427518533914, 0.861427518533914, 0.2123932915128165, 0.2123932915128165, 0.2123932915128165, 0.21393801233075715, 0.21393801233075715, 0.21393801233075715, 0.221401783721479, 0.221401783721479, 0.221401783721479, 0.19646583567736875, 0.19646583567736875, 0.19646583567736875, 0.19424647146800167, 0.19424647146800167, 0.19424647146800167, 0.0963645455467862, 0.0963645455467862, 0.0963645455467862, 0.11980785954522222, 0.11980785954522222, 0.11980785954522222, 0.11108106991227706, 0.11108106991227706, 0.11108106991227706]}, "mutation_prompt": null}
{"id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "solution": "import numpy as np\n\nclass EPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n            \n        return global_best_score", "name": "EPSO_AVC", "description": "Enhanced PSO with Adaptive Velocity Control and Local Search (EPSO-AVC) dynamically adapts velocity parameters and integrates a more frequent local search phase for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 19, "fitness": 0.3163201984585488, "feedback": "The algorithm EPSO_AVC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.29.", "error": "", "parent_id": "6f58e5c8-d7aa-4bb9-b203-b2182073fa77", "metadata": {"aucs": [0.9470866040231292, 0.9470866040231292, 0.9470866040231292, 0.9627659654688501, 0.9627659654688501, 0.9627659654688501, 0.9529012350760397, 0.9529012350760397, 0.9529012350760397, 0.8867061125048104, 0.8867061125048104, 0.8867061125048104, 0.9030170747740575, 0.9030170747740575, 0.9030170747740575, 0.9065447974675936, 0.9065447974675936, 0.9065447974675936, 0.1792876968141729, 0.1792876968141729, 0.1792876968141729, 0.1517769797512346, 0.1517769797512346, 0.1517769797512346, 0.5629666968012725, 0.5629666968012725, 0.5629666968012725, 0.11727018971134662, 0.11727018971134662, 0.11727018971134662, 0.42427915036306985, 0.42427915036306985, 0.42427915036306985, 0.1379252590372464, 0.1379252590372464, 0.1379252590372464, 0.9960178640206204, 0.9960178640206204, 0.9960178640206204, 0.9944266235595806, 0.9944266235595806, 0.9944266235595806, 0.9955565505632341, 0.9955565505632341, 0.9955565505632341, 0.5363496754063208, 0.5363496754063208, 0.5363496754063208, 0.4586717954164242, 0.4586717954164242, 0.4586717954164242, 0.40772776854191006, 0.40772776854191006, 0.40772776854191006, 0.3872382988055989, 0.3872382988055989, 0.3872382988055989, 0.2835729223235459, 0.2835729223235459, 0.2835729223235459, 0.35609863808746856, 0.35609863808746856, 0.35609863808746856, 0.13122570847870196, 0.13122570847870196, 0.13122570847870196, 0.1812794890796181, 0.1812794890796181, 0.1812794890796181, 0.1354320496479402, 0.1354320496479402, 0.1354320496479402, 0.22594458024108877, 0.22594458024108877, 0.22594458024108877, 0.13724080808450922, 0.13724080808450922, 0.13724080808450922, 0.20400734092886907, 0.20400734092886907, 0.20400734092886907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03756565372301357, 0.03756565372301357, 0.03756565372301357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1858677519878008, 0.1858677519878008, 0.1858677519878008, 0.08141792331288611, 0.08141792331288611, 0.08141792331288611, 0.07921979803077961, 0.07921979803077961, 0.07921979803077961, 0.054825936253037444, 0.054825936253037444, 0.054825936253037444, 0.19296627994223547, 0.19296627994223547, 0.19296627994223547, 0.1001112809387893, 0.1001112809387893, 0.1001112809387893, 0.09166069016431988, 0.09166069016431988, 0.09166069016431988, 0.3041759131453785, 0.3041759131453785, 0.3041759131453785, 0.0940601172582225, 0.0940601172582225, 0.0940601172582225, 0.48695468521145036, 0.48695468521145036, 0.48695468521145036, 0.4816669564181646, 0.4816669564181646, 0.4816669564181646, 0.530761997600274, 0.530761997600274, 0.530761997600274, 0.0827791104334119, 0.0827791104334119, 0.0827791104334119, 0.14161544824927208, 0.14161544824927208, 0.14161544824927208, 0.13168224785839955, 0.13168224785839955, 0.13168224785839955, 0.20044140063952665, 0.20044140063952665, 0.20044140063952665, 0.1832992332348954, 0.1832992332348954, 0.1832992332348954, 0.2753453654850436, 0.2753453654850436, 0.2753453654850436, 0.310154766247283, 0.310154766247283, 0.310154766247283, 0.3715162727571184, 0.3715162727571184, 0.3715162727571184, 0.33007542136606205, 0.33007542136606205, 0.33007542136606205, 0.07459120038804923, 0.07459120038804923, 0.07459120038804923, 0.19908172085849318, 0.19908172085849318, 0.19908172085849318, 0.1447384223229483, 0.1447384223229483, 0.1447384223229483, 0.21887428516002383, 0.21887428516002383, 0.21887428516002383, 0.17973419718581973, 0.17973419718581973, 0.17973419718581973, 0.19379582474296608, 0.19379582474296608, 0.19379582474296608, 0.2146468063653164, 0.2146468063653164, 0.2146468063653164, 0.2916518501473985, 0.2916518501473985, 0.2916518501473985, 0.21186841671226486, 0.21186841671226486, 0.21186841671226486, 0.10572993738550651, 0.10572993738550651, 0.10572993738550651, 0.9464960492737664, 0.9464960492737664, 0.9464960492737664, 0.1021902697089021, 0.1021902697089021, 0.1021902697089021, 0.4639665247371664, 0.4639665247371664, 0.4639665247371664, 0.16409500287661472, 0.16409500287661472, 0.16409500287661472, 0.10565877307006577, 0.10565877307006577, 0.10565877307006577, 0.19251008239172906, 0.19251008239172906, 0.19251008239172906, 0.18691305524888624, 0.18691305524888624, 0.18691305524888624, 0.1780617116112435, 0.1780617116112435, 0.1780617116112435, 0.07651612440004063, 0.07651612440004063, 0.07651612440004063, 0.12396298839440756, 0.12396298839440756, 0.12396298839440756, 0.08828892079828765, 0.08828892079828765, 0.08828892079828765]}, "mutation_prompt": null}
{"id": "0a83445e-fc03-4619-bb8b-c1d273488b26", "solution": "import numpy as np\n\nclass EPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n            \n        return global_best_score", "name": "EPSO_AVC", "description": "Enhanced PSO with Adaptive Velocity Control and Local Search (EPSO-AVC) dynamically adapts velocity parameters and integrates a more frequent local search phase for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "metadata": {"aucs": [0.9470866040231292, 0.9470866040231292, 0.9470866040231292, 0.9627659654688501, 0.9627659654688501, 0.9627659654688501, 0.9529012350760397, 0.9529012350760397, 0.9529012350760397, 0.8867061125048104, 0.8867061125048104, 0.8867061125048104, 0.9030170747740575, 0.9030170747740575, 0.9030170747740575, 0.9065447974675936, 0.9065447974675936, 0.9065447974675936, 0.1792876968141729, 0.1792876968141729, 0.1792876968141729, 0.1517769797512346, 0.1517769797512346, 0.1517769797512346, 0.5629666968012725, 0.5629666968012725, 0.5629666968012725, 0.11727018971134662, 0.11727018971134662, 0.11727018971134662, 0.42427915036306985, 0.42427915036306985, 0.42427915036306985, 0.1379252590372464, 0.1379252590372464, 0.1379252590372464, 0.9960178640206204, 0.9960178640206204, 0.9960178640206204, 0.9944266235595806, 0.9944266235595806, 0.9944266235595806, 0.9955565505632341, 0.9955565505632341, 0.9955565505632341, 0.5363496754063208, 0.5363496754063208, 0.5363496754063208, 0.4586717954164242, 0.4586717954164242, 0.4586717954164242, 0.40772776854191006, 0.40772776854191006, 0.40772776854191006, 0.3872382988055989, 0.3872382988055989, 0.3872382988055989, 0.2835729223235459, 0.2835729223235459, 0.2835729223235459, 0.35609863808746856, 0.35609863808746856, 0.35609863808746856, 0.13122570847870196, 0.13122570847870196, 0.13122570847870196, 0.1812794890796181, 0.1812794890796181, 0.1812794890796181, 0.1354320496479402, 0.1354320496479402, 0.1354320496479402, 0.22594458024108877, 0.22594458024108877, 0.22594458024108877, 0.13724080808450922, 0.13724080808450922, 0.13724080808450922, 0.20400734092886907, 0.20400734092886907, 0.20400734092886907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03756565372301357, 0.03756565372301357, 0.03756565372301357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1858677519878008, 0.1858677519878008, 0.1858677519878008, 0.08141792331288611, 0.08141792331288611, 0.08141792331288611, 0.07921979803077961, 0.07921979803077961, 0.07921979803077961, 0.054825936253037444, 0.054825936253037444, 0.054825936253037444, 0.19296627994223547, 0.19296627994223547, 0.19296627994223547, 0.1001112809387893, 0.1001112809387893, 0.1001112809387893, 0.09166069016431988, 0.09166069016431988, 0.09166069016431988, 0.3041759131453785, 0.3041759131453785, 0.3041759131453785, 0.0940601172582225, 0.0940601172582225, 0.0940601172582225, 0.48695468521145036, 0.48695468521145036, 0.48695468521145036, 0.4816669564181646, 0.4816669564181646, 0.4816669564181646, 0.530761997600274, 0.530761997600274, 0.530761997600274, 0.0827791104334119, 0.0827791104334119, 0.0827791104334119, 0.14161544824927208, 0.14161544824927208, 0.14161544824927208, 0.13168224785839955, 0.13168224785839955, 0.13168224785839955, 0.20044140063952665, 0.20044140063952665, 0.20044140063952665, 0.1832992332348954, 0.1832992332348954, 0.1832992332348954, 0.2753453654850436, 0.2753453654850436, 0.2753453654850436, 0.310154766247283, 0.310154766247283, 0.310154766247283, 0.3715162727571184, 0.3715162727571184, 0.3715162727571184, 0.33007542136606205, 0.33007542136606205, 0.33007542136606205, 0.07459120038804923, 0.07459120038804923, 0.07459120038804923, 0.19908172085849318, 0.19908172085849318, 0.19908172085849318, 0.1447384223229483, 0.1447384223229483, 0.1447384223229483, 0.21887428516002383, 0.21887428516002383, 0.21887428516002383, 0.17973419718581973, 0.17973419718581973, 0.17973419718581973, 0.19379582474296608, 0.19379582474296608, 0.19379582474296608, 0.2146468063653164, 0.2146468063653164, 0.2146468063653164, 0.2916518501473985, 0.2916518501473985, 0.2916518501473985, 0.21186841671226486, 0.21186841671226486, 0.21186841671226486, 0.10572993738550651, 0.10572993738550651, 0.10572993738550651, 0.9464960492737664, 0.9464960492737664, 0.9464960492737664, 0.1021902697089021, 0.1021902697089021, 0.1021902697089021, 0.4639665247371664, 0.4639665247371664, 0.4639665247371664, 0.16409500287661472, 0.16409500287661472, 0.16409500287661472, 0.10565877307006577, 0.10565877307006577, 0.10565877307006577, 0.19251008239172906, 0.19251008239172906, 0.19251008239172906, 0.18691305524888624, 0.18691305524888624, 0.18691305524888624, 0.1780617116112435, 0.1780617116112435, 0.1780617116112435, 0.07651612440004063, 0.07651612440004063, 0.07651612440004063, 0.12396298839440756, 0.12396298839440756, 0.12396298839440756, 0.08828892079828765, 0.08828892079828765, 0.08828892079828765]}, "mutation_prompt": null}
{"id": "b76194a7-2b81-42c6-81bf-3501d64c08bd", "solution": "import numpy as np\n\nclass EPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n            \n        return global_best_score", "name": "EPSO_AVC", "description": "Enhanced PSO with Adaptive Velocity Control and Local Search (EPSO-AVC) dynamically adapts velocity parameters and integrates a more frequent local search phase for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "metadata": {"aucs": [0.9470866040231292, 0.9470866040231292, 0.9470866040231292, 0.9627659654688501, 0.9627659654688501, 0.9627659654688501, 0.9529012350760397, 0.9529012350760397, 0.9529012350760397, 0.8867061125048104, 0.8867061125048104, 0.8867061125048104, 0.9030170747740575, 0.9030170747740575, 0.9030170747740575, 0.9065447974675936, 0.9065447974675936, 0.9065447974675936, 0.1792876968141729, 0.1792876968141729, 0.1792876968141729, 0.1517769797512346, 0.1517769797512346, 0.1517769797512346, 0.5629666968012725, 0.5629666968012725, 0.5629666968012725, 0.11727018971134662, 0.11727018971134662, 0.11727018971134662, 0.42427915036306985, 0.42427915036306985, 0.42427915036306985, 0.1379252590372464, 0.1379252590372464, 0.1379252590372464, 0.9960178640206204, 0.9960178640206204, 0.9960178640206204, 0.9944266235595806, 0.9944266235595806, 0.9944266235595806, 0.9955565505632341, 0.9955565505632341, 0.9955565505632341, 0.5363496754063208, 0.5363496754063208, 0.5363496754063208, 0.4586717954164242, 0.4586717954164242, 0.4586717954164242, 0.40772776854191006, 0.40772776854191006, 0.40772776854191006, 0.3872382988055989, 0.3872382988055989, 0.3872382988055989, 0.2835729223235459, 0.2835729223235459, 0.2835729223235459, 0.35609863808746856, 0.35609863808746856, 0.35609863808746856, 0.13122570847870196, 0.13122570847870196, 0.13122570847870196, 0.1812794890796181, 0.1812794890796181, 0.1812794890796181, 0.1354320496479402, 0.1354320496479402, 0.1354320496479402, 0.22594458024108877, 0.22594458024108877, 0.22594458024108877, 0.13724080808450922, 0.13724080808450922, 0.13724080808450922, 0.20400734092886907, 0.20400734092886907, 0.20400734092886907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03756565372301357, 0.03756565372301357, 0.03756565372301357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1858677519878008, 0.1858677519878008, 0.1858677519878008, 0.08141792331288611, 0.08141792331288611, 0.08141792331288611, 0.07921979803077961, 0.07921979803077961, 0.07921979803077961, 0.054825936253037444, 0.054825936253037444, 0.054825936253037444, 0.19296627994223547, 0.19296627994223547, 0.19296627994223547, 0.1001112809387893, 0.1001112809387893, 0.1001112809387893, 0.09166069016431988, 0.09166069016431988, 0.09166069016431988, 0.3041759131453785, 0.3041759131453785, 0.3041759131453785, 0.0940601172582225, 0.0940601172582225, 0.0940601172582225, 0.48695468521145036, 0.48695468521145036, 0.48695468521145036, 0.4816669564181646, 0.4816669564181646, 0.4816669564181646, 0.530761997600274, 0.530761997600274, 0.530761997600274, 0.0827791104334119, 0.0827791104334119, 0.0827791104334119, 0.14161544824927208, 0.14161544824927208, 0.14161544824927208, 0.13168224785839955, 0.13168224785839955, 0.13168224785839955, 0.20044140063952665, 0.20044140063952665, 0.20044140063952665, 0.1832992332348954, 0.1832992332348954, 0.1832992332348954, 0.2753453654850436, 0.2753453654850436, 0.2753453654850436, 0.310154766247283, 0.310154766247283, 0.310154766247283, 0.3715162727571184, 0.3715162727571184, 0.3715162727571184, 0.33007542136606205, 0.33007542136606205, 0.33007542136606205, 0.07459120038804923, 0.07459120038804923, 0.07459120038804923, 0.19908172085849318, 0.19908172085849318, 0.19908172085849318, 0.1447384223229483, 0.1447384223229483, 0.1447384223229483, 0.21887428516002383, 0.21887428516002383, 0.21887428516002383, 0.17973419718581973, 0.17973419718581973, 0.17973419718581973, 0.19379582474296608, 0.19379582474296608, 0.19379582474296608, 0.2146468063653164, 0.2146468063653164, 0.2146468063653164, 0.2916518501473985, 0.2916518501473985, 0.2916518501473985, 0.21186841671226486, 0.21186841671226486, 0.21186841671226486, 0.10572993738550651, 0.10572993738550651, 0.10572993738550651, 0.9464960492737664, 0.9464960492737664, 0.9464960492737664, 0.1021902697089021, 0.1021902697089021, 0.1021902697089021, 0.4639665247371664, 0.4639665247371664, 0.4639665247371664, 0.16409500287661472, 0.16409500287661472, 0.16409500287661472, 0.10565877307006577, 0.10565877307006577, 0.10565877307006577, 0.19251008239172906, 0.19251008239172906, 0.19251008239172906, 0.18691305524888624, 0.18691305524888624, 0.18691305524888624, 0.1780617116112435, 0.1780617116112435, 0.1780617116112435, 0.07651612440004063, 0.07651612440004063, 0.07651612440004063, 0.12396298839440756, 0.12396298839440756, 0.12396298839440756, 0.08828892079828765, 0.08828892079828765, 0.08828892079828765]}, "mutation_prompt": null}
{"id": "d0993a7b-8a8a-4187-b750-58c93f795659", "solution": "import numpy as np\n\nclass EPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n            \n        return global_best_score", "name": "EPSO_AVC", "description": "Enhanced PSO with Adaptive Velocity Control and Local Search (EPSO-AVC) dynamically adapts velocity parameters and integrates a more frequent local search phase for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "metadata": {"aucs": [0.9470866040231292, 0.9470866040231292, 0.9470866040231292, 0.9627659654688501, 0.9627659654688501, 0.9627659654688501, 0.9529012350760397, 0.9529012350760397, 0.9529012350760397, 0.8867061125048104, 0.8867061125048104, 0.8867061125048104, 0.9030170747740575, 0.9030170747740575, 0.9030170747740575, 0.9065447974675936, 0.9065447974675936, 0.9065447974675936, 0.1792876968141729, 0.1792876968141729, 0.1792876968141729, 0.1517769797512346, 0.1517769797512346, 0.1517769797512346, 0.5629666968012725, 0.5629666968012725, 0.5629666968012725, 0.11727018971134662, 0.11727018971134662, 0.11727018971134662, 0.42427915036306985, 0.42427915036306985, 0.42427915036306985, 0.1379252590372464, 0.1379252590372464, 0.1379252590372464, 0.9960178640206204, 0.9960178640206204, 0.9960178640206204, 0.9944266235595806, 0.9944266235595806, 0.9944266235595806, 0.9955565505632341, 0.9955565505632341, 0.9955565505632341, 0.5363496754063208, 0.5363496754063208, 0.5363496754063208, 0.4586717954164242, 0.4586717954164242, 0.4586717954164242, 0.40772776854191006, 0.40772776854191006, 0.40772776854191006, 0.3872382988055989, 0.3872382988055989, 0.3872382988055989, 0.2835729223235459, 0.2835729223235459, 0.2835729223235459, 0.35609863808746856, 0.35609863808746856, 0.35609863808746856, 0.13122570847870196, 0.13122570847870196, 0.13122570847870196, 0.1812794890796181, 0.1812794890796181, 0.1812794890796181, 0.1354320496479402, 0.1354320496479402, 0.1354320496479402, 0.22594458024108877, 0.22594458024108877, 0.22594458024108877, 0.13724080808450922, 0.13724080808450922, 0.13724080808450922, 0.20400734092886907, 0.20400734092886907, 0.20400734092886907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03756565372301357, 0.03756565372301357, 0.03756565372301357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1858677519878008, 0.1858677519878008, 0.1858677519878008, 0.08141792331288611, 0.08141792331288611, 0.08141792331288611, 0.07921979803077961, 0.07921979803077961, 0.07921979803077961, 0.054825936253037444, 0.054825936253037444, 0.054825936253037444, 0.19296627994223547, 0.19296627994223547, 0.19296627994223547, 0.1001112809387893, 0.1001112809387893, 0.1001112809387893, 0.09166069016431988, 0.09166069016431988, 0.09166069016431988, 0.3041759131453785, 0.3041759131453785, 0.3041759131453785, 0.0940601172582225, 0.0940601172582225, 0.0940601172582225, 0.48695468521145036, 0.48695468521145036, 0.48695468521145036, 0.4816669564181646, 0.4816669564181646, 0.4816669564181646, 0.530761997600274, 0.530761997600274, 0.530761997600274, 0.0827791104334119, 0.0827791104334119, 0.0827791104334119, 0.14161544824927208, 0.14161544824927208, 0.14161544824927208, 0.13168224785839955, 0.13168224785839955, 0.13168224785839955, 0.20044140063952665, 0.20044140063952665, 0.20044140063952665, 0.1832992332348954, 0.1832992332348954, 0.1832992332348954, 0.2753453654850436, 0.2753453654850436, 0.2753453654850436, 0.310154766247283, 0.310154766247283, 0.310154766247283, 0.3715162727571184, 0.3715162727571184, 0.3715162727571184, 0.33007542136606205, 0.33007542136606205, 0.33007542136606205, 0.07459120038804923, 0.07459120038804923, 0.07459120038804923, 0.19908172085849318, 0.19908172085849318, 0.19908172085849318, 0.1447384223229483, 0.1447384223229483, 0.1447384223229483, 0.21887428516002383, 0.21887428516002383, 0.21887428516002383, 0.17973419718581973, 0.17973419718581973, 0.17973419718581973, 0.19379582474296608, 0.19379582474296608, 0.19379582474296608, 0.2146468063653164, 0.2146468063653164, 0.2146468063653164, 0.2916518501473985, 0.2916518501473985, 0.2916518501473985, 0.21186841671226486, 0.21186841671226486, 0.21186841671226486, 0.10572993738550651, 0.10572993738550651, 0.10572993738550651, 0.9464960492737664, 0.9464960492737664, 0.9464960492737664, 0.1021902697089021, 0.1021902697089021, 0.1021902697089021, 0.4639665247371664, 0.4639665247371664, 0.4639665247371664, 0.16409500287661472, 0.16409500287661472, 0.16409500287661472, 0.10565877307006577, 0.10565877307006577, 0.10565877307006577, 0.19251008239172906, 0.19251008239172906, 0.19251008239172906, 0.18691305524888624, 0.18691305524888624, 0.18691305524888624, 0.1780617116112435, 0.1780617116112435, 0.1780617116112435, 0.07651612440004063, 0.07651612440004063, 0.07651612440004063, 0.12396298839440756, 0.12396298839440756, 0.12396298839440756, 0.08828892079828765, 0.08828892079828765, 0.08828892079828765]}, "mutation_prompt": null}
{"id": "44b1e2f3-6ab7-4e2b-8c85-62897dc8cf27", "solution": "import numpy as np\n\nclass EPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n            \n        return global_best_score", "name": "EPSO_AVC", "description": "Enhanced PSO with Adaptive Velocity Control and Local Search (EPSO-AVC) dynamically adapts velocity parameters and integrates a more frequent local search phase for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "metadata": {"aucs": [0.9470866040231292, 0.9470866040231292, 0.9470866040231292, 0.9627659654688501, 0.9627659654688501, 0.9627659654688501, 0.9529012350760397, 0.9529012350760397, 0.9529012350760397, 0.8867061125048104, 0.8867061125048104, 0.8867061125048104, 0.9030170747740575, 0.9030170747740575, 0.9030170747740575, 0.9065447974675936, 0.9065447974675936, 0.9065447974675936, 0.1792876968141729, 0.1792876968141729, 0.1792876968141729, 0.1517769797512346, 0.1517769797512346, 0.1517769797512346, 0.5629666968012725, 0.5629666968012725, 0.5629666968012725, 0.11727018971134662, 0.11727018971134662, 0.11727018971134662, 0.42427915036306985, 0.42427915036306985, 0.42427915036306985, 0.1379252590372464, 0.1379252590372464, 0.1379252590372464, 0.9960178640206204, 0.9960178640206204, 0.9960178640206204, 0.9944266235595806, 0.9944266235595806, 0.9944266235595806, 0.9955565505632341, 0.9955565505632341, 0.9955565505632341, 0.5363496754063208, 0.5363496754063208, 0.5363496754063208, 0.4586717954164242, 0.4586717954164242, 0.4586717954164242, 0.40772776854191006, 0.40772776854191006, 0.40772776854191006, 0.3872382988055989, 0.3872382988055989, 0.3872382988055989, 0.2835729223235459, 0.2835729223235459, 0.2835729223235459, 0.35609863808746856, 0.35609863808746856, 0.35609863808746856, 0.13122570847870196, 0.13122570847870196, 0.13122570847870196, 0.1812794890796181, 0.1812794890796181, 0.1812794890796181, 0.1354320496479402, 0.1354320496479402, 0.1354320496479402, 0.22594458024108877, 0.22594458024108877, 0.22594458024108877, 0.13724080808450922, 0.13724080808450922, 0.13724080808450922, 0.20400734092886907, 0.20400734092886907, 0.20400734092886907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03756565372301357, 0.03756565372301357, 0.03756565372301357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1858677519878008, 0.1858677519878008, 0.1858677519878008, 0.08141792331288611, 0.08141792331288611, 0.08141792331288611, 0.07921979803077961, 0.07921979803077961, 0.07921979803077961, 0.054825936253037444, 0.054825936253037444, 0.054825936253037444, 0.19296627994223547, 0.19296627994223547, 0.19296627994223547, 0.1001112809387893, 0.1001112809387893, 0.1001112809387893, 0.09166069016431988, 0.09166069016431988, 0.09166069016431988, 0.3041759131453785, 0.3041759131453785, 0.3041759131453785, 0.0940601172582225, 0.0940601172582225, 0.0940601172582225, 0.48695468521145036, 0.48695468521145036, 0.48695468521145036, 0.4816669564181646, 0.4816669564181646, 0.4816669564181646, 0.530761997600274, 0.530761997600274, 0.530761997600274, 0.0827791104334119, 0.0827791104334119, 0.0827791104334119, 0.14161544824927208, 0.14161544824927208, 0.14161544824927208, 0.13168224785839955, 0.13168224785839955, 0.13168224785839955, 0.20044140063952665, 0.20044140063952665, 0.20044140063952665, 0.1832992332348954, 0.1832992332348954, 0.1832992332348954, 0.2753453654850436, 0.2753453654850436, 0.2753453654850436, 0.310154766247283, 0.310154766247283, 0.310154766247283, 0.3715162727571184, 0.3715162727571184, 0.3715162727571184, 0.33007542136606205, 0.33007542136606205, 0.33007542136606205, 0.07459120038804923, 0.07459120038804923, 0.07459120038804923, 0.19908172085849318, 0.19908172085849318, 0.19908172085849318, 0.1447384223229483, 0.1447384223229483, 0.1447384223229483, 0.21887428516002383, 0.21887428516002383, 0.21887428516002383, 0.17973419718581973, 0.17973419718581973, 0.17973419718581973, 0.19379582474296608, 0.19379582474296608, 0.19379582474296608, 0.2146468063653164, 0.2146468063653164, 0.2146468063653164, 0.2916518501473985, 0.2916518501473985, 0.2916518501473985, 0.21186841671226486, 0.21186841671226486, 0.21186841671226486, 0.10572993738550651, 0.10572993738550651, 0.10572993738550651, 0.9464960492737664, 0.9464960492737664, 0.9464960492737664, 0.1021902697089021, 0.1021902697089021, 0.1021902697089021, 0.4639665247371664, 0.4639665247371664, 0.4639665247371664, 0.16409500287661472, 0.16409500287661472, 0.16409500287661472, 0.10565877307006577, 0.10565877307006577, 0.10565877307006577, 0.19251008239172906, 0.19251008239172906, 0.19251008239172906, 0.18691305524888624, 0.18691305524888624, 0.18691305524888624, 0.1780617116112435, 0.1780617116112435, 0.1780617116112435, 0.07651612440004063, 0.07651612440004063, 0.07651612440004063, 0.12396298839440756, 0.12396298839440756, 0.12396298839440756, 0.08828892079828765, 0.08828892079828765, 0.08828892079828765]}, "mutation_prompt": null}
{"id": "282da8e5-05ac-4979-aabb-904cab8a81cc", "solution": "import numpy as np\n\nclass EPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n            \n        return global_best_score", "name": "EPSO_AVC", "description": "Enhanced PSO with Adaptive Velocity Control and Local Search (EPSO-AVC) dynamically adapts velocity parameters and integrates a more frequent local search phase for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "metadata": {"aucs": [0.9470866040231292, 0.9470866040231292, 0.9470866040231292, 0.9627659654688501, 0.9627659654688501, 0.9627659654688501, 0.9529012350760397, 0.9529012350760397, 0.9529012350760397, 0.8867061125048104, 0.8867061125048104, 0.8867061125048104, 0.9030170747740575, 0.9030170747740575, 0.9030170747740575, 0.9065447974675936, 0.9065447974675936, 0.9065447974675936, 0.1792876968141729, 0.1792876968141729, 0.1792876968141729, 0.1517769797512346, 0.1517769797512346, 0.1517769797512346, 0.5629666968012725, 0.5629666968012725, 0.5629666968012725, 0.11727018971134662, 0.11727018971134662, 0.11727018971134662, 0.42427915036306985, 0.42427915036306985, 0.42427915036306985, 0.1379252590372464, 0.1379252590372464, 0.1379252590372464, 0.9960178640206204, 0.9960178640206204, 0.9960178640206204, 0.9944266235595806, 0.9944266235595806, 0.9944266235595806, 0.9955565505632341, 0.9955565505632341, 0.9955565505632341, 0.5363496754063208, 0.5363496754063208, 0.5363496754063208, 0.4586717954164242, 0.4586717954164242, 0.4586717954164242, 0.40772776854191006, 0.40772776854191006, 0.40772776854191006, 0.3872382988055989, 0.3872382988055989, 0.3872382988055989, 0.2835729223235459, 0.2835729223235459, 0.2835729223235459, 0.35609863808746856, 0.35609863808746856, 0.35609863808746856, 0.13122570847870196, 0.13122570847870196, 0.13122570847870196, 0.1812794890796181, 0.1812794890796181, 0.1812794890796181, 0.1354320496479402, 0.1354320496479402, 0.1354320496479402, 0.22594458024108877, 0.22594458024108877, 0.22594458024108877, 0.13724080808450922, 0.13724080808450922, 0.13724080808450922, 0.20400734092886907, 0.20400734092886907, 0.20400734092886907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03756565372301357, 0.03756565372301357, 0.03756565372301357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1858677519878008, 0.1858677519878008, 0.1858677519878008, 0.08141792331288611, 0.08141792331288611, 0.08141792331288611, 0.07921979803077961, 0.07921979803077961, 0.07921979803077961, 0.054825936253037444, 0.054825936253037444, 0.054825936253037444, 0.19296627994223547, 0.19296627994223547, 0.19296627994223547, 0.1001112809387893, 0.1001112809387893, 0.1001112809387893, 0.09166069016431988, 0.09166069016431988, 0.09166069016431988, 0.3041759131453785, 0.3041759131453785, 0.3041759131453785, 0.0940601172582225, 0.0940601172582225, 0.0940601172582225, 0.48695468521145036, 0.48695468521145036, 0.48695468521145036, 0.4816669564181646, 0.4816669564181646, 0.4816669564181646, 0.530761997600274, 0.530761997600274, 0.530761997600274, 0.0827791104334119, 0.0827791104334119, 0.0827791104334119, 0.14161544824927208, 0.14161544824927208, 0.14161544824927208, 0.13168224785839955, 0.13168224785839955, 0.13168224785839955, 0.20044140063952665, 0.20044140063952665, 0.20044140063952665, 0.1832992332348954, 0.1832992332348954, 0.1832992332348954, 0.2753453654850436, 0.2753453654850436, 0.2753453654850436, 0.310154766247283, 0.310154766247283, 0.310154766247283, 0.3715162727571184, 0.3715162727571184, 0.3715162727571184, 0.33007542136606205, 0.33007542136606205, 0.33007542136606205, 0.07459120038804923, 0.07459120038804923, 0.07459120038804923, 0.19908172085849318, 0.19908172085849318, 0.19908172085849318, 0.1447384223229483, 0.1447384223229483, 0.1447384223229483, 0.21887428516002383, 0.21887428516002383, 0.21887428516002383, 0.17973419718581973, 0.17973419718581973, 0.17973419718581973, 0.19379582474296608, 0.19379582474296608, 0.19379582474296608, 0.2146468063653164, 0.2146468063653164, 0.2146468063653164, 0.2916518501473985, 0.2916518501473985, 0.2916518501473985, 0.21186841671226486, 0.21186841671226486, 0.21186841671226486, 0.10572993738550651, 0.10572993738550651, 0.10572993738550651, 0.9464960492737664, 0.9464960492737664, 0.9464960492737664, 0.1021902697089021, 0.1021902697089021, 0.1021902697089021, 0.4639665247371664, 0.4639665247371664, 0.4639665247371664, 0.16409500287661472, 0.16409500287661472, 0.16409500287661472, 0.10565877307006577, 0.10565877307006577, 0.10565877307006577, 0.19251008239172906, 0.19251008239172906, 0.19251008239172906, 0.18691305524888624, 0.18691305524888624, 0.18691305524888624, 0.1780617116112435, 0.1780617116112435, 0.1780617116112435, 0.07651612440004063, 0.07651612440004063, 0.07651612440004063, 0.12396298839440756, 0.12396298839440756, 0.12396298839440756, 0.08828892079828765, 0.08828892079828765, 0.08828892079828765]}, "mutation_prompt": null}
{"id": "2d89e24c-05f1-489e-aa6f-72d042cc30d1", "solution": "import numpy as np\n\nclass EPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n            \n        return global_best_score", "name": "EPSO_AVC", "description": "Enhanced PSO with Adaptive Velocity Control and Local Search (EPSO-AVC) dynamically adapts velocity parameters and integrates a more frequent local search phase for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "metadata": {"aucs": [0.9470866040231292, 0.9470866040231292, 0.9470866040231292, 0.9627659654688501, 0.9627659654688501, 0.9627659654688501, 0.9529012350760397, 0.9529012350760397, 0.9529012350760397, 0.8867061125048104, 0.8867061125048104, 0.8867061125048104, 0.9030170747740575, 0.9030170747740575, 0.9030170747740575, 0.9065447974675936, 0.9065447974675936, 0.9065447974675936, 0.1792876968141729, 0.1792876968141729, 0.1792876968141729, 0.1517769797512346, 0.1517769797512346, 0.1517769797512346, 0.5629666968012725, 0.5629666968012725, 0.5629666968012725, 0.11727018971134662, 0.11727018971134662, 0.11727018971134662, 0.42427915036306985, 0.42427915036306985, 0.42427915036306985, 0.1379252590372464, 0.1379252590372464, 0.1379252590372464, 0.9960178640206204, 0.9960178640206204, 0.9960178640206204, 0.9944266235595806, 0.9944266235595806, 0.9944266235595806, 0.9955565505632341, 0.9955565505632341, 0.9955565505632341, 0.5363496754063208, 0.5363496754063208, 0.5363496754063208, 0.4586717954164242, 0.4586717954164242, 0.4586717954164242, 0.40772776854191006, 0.40772776854191006, 0.40772776854191006, 0.3872382988055989, 0.3872382988055989, 0.3872382988055989, 0.2835729223235459, 0.2835729223235459, 0.2835729223235459, 0.35609863808746856, 0.35609863808746856, 0.35609863808746856, 0.13122570847870196, 0.13122570847870196, 0.13122570847870196, 0.1812794890796181, 0.1812794890796181, 0.1812794890796181, 0.1354320496479402, 0.1354320496479402, 0.1354320496479402, 0.22594458024108877, 0.22594458024108877, 0.22594458024108877, 0.13724080808450922, 0.13724080808450922, 0.13724080808450922, 0.20400734092886907, 0.20400734092886907, 0.20400734092886907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03756565372301357, 0.03756565372301357, 0.03756565372301357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1858677519878008, 0.1858677519878008, 0.1858677519878008, 0.08141792331288611, 0.08141792331288611, 0.08141792331288611, 0.07921979803077961, 0.07921979803077961, 0.07921979803077961, 0.054825936253037444, 0.054825936253037444, 0.054825936253037444, 0.19296627994223547, 0.19296627994223547, 0.19296627994223547, 0.1001112809387893, 0.1001112809387893, 0.1001112809387893, 0.09166069016431988, 0.09166069016431988, 0.09166069016431988, 0.3041759131453785, 0.3041759131453785, 0.3041759131453785, 0.0940601172582225, 0.0940601172582225, 0.0940601172582225, 0.48695468521145036, 0.48695468521145036, 0.48695468521145036, 0.4816669564181646, 0.4816669564181646, 0.4816669564181646, 0.530761997600274, 0.530761997600274, 0.530761997600274, 0.0827791104334119, 0.0827791104334119, 0.0827791104334119, 0.14161544824927208, 0.14161544824927208, 0.14161544824927208, 0.13168224785839955, 0.13168224785839955, 0.13168224785839955, 0.20044140063952665, 0.20044140063952665, 0.20044140063952665, 0.1832992332348954, 0.1832992332348954, 0.1832992332348954, 0.2753453654850436, 0.2753453654850436, 0.2753453654850436, 0.310154766247283, 0.310154766247283, 0.310154766247283, 0.3715162727571184, 0.3715162727571184, 0.3715162727571184, 0.33007542136606205, 0.33007542136606205, 0.33007542136606205, 0.07459120038804923, 0.07459120038804923, 0.07459120038804923, 0.19908172085849318, 0.19908172085849318, 0.19908172085849318, 0.1447384223229483, 0.1447384223229483, 0.1447384223229483, 0.21887428516002383, 0.21887428516002383, 0.21887428516002383, 0.17973419718581973, 0.17973419718581973, 0.17973419718581973, 0.19379582474296608, 0.19379582474296608, 0.19379582474296608, 0.2146468063653164, 0.2146468063653164, 0.2146468063653164, 0.2916518501473985, 0.2916518501473985, 0.2916518501473985, 0.21186841671226486, 0.21186841671226486, 0.21186841671226486, 0.10572993738550651, 0.10572993738550651, 0.10572993738550651, 0.9464960492737664, 0.9464960492737664, 0.9464960492737664, 0.1021902697089021, 0.1021902697089021, 0.1021902697089021, 0.4639665247371664, 0.4639665247371664, 0.4639665247371664, 0.16409500287661472, 0.16409500287661472, 0.16409500287661472, 0.10565877307006577, 0.10565877307006577, 0.10565877307006577, 0.19251008239172906, 0.19251008239172906, 0.19251008239172906, 0.18691305524888624, 0.18691305524888624, 0.18691305524888624, 0.1780617116112435, 0.1780617116112435, 0.1780617116112435, 0.07651612440004063, 0.07651612440004063, 0.07651612440004063, 0.12396298839440756, 0.12396298839440756, 0.12396298839440756, 0.08828892079828765, 0.08828892079828765, 0.08828892079828765]}, "mutation_prompt": null}
{"id": "e2b4211c-ee9b-4cfb-a8ad-094baa391f3c", "solution": "import numpy as np\n\nclass EPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n            \n        return global_best_score", "name": "EPSO_AVC", "description": "Enhanced PSO with Adaptive Velocity Control and Local Search (EPSO-AVC) dynamically adapts velocity parameters and integrates a more frequent local search phase for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "metadata": {"aucs": [0.9470866040231292, 0.9470866040231292, 0.9470866040231292, 0.9627659654688501, 0.9627659654688501, 0.9627659654688501, 0.9529012350760397, 0.9529012350760397, 0.9529012350760397, 0.8867061125048104, 0.8867061125048104, 0.8867061125048104, 0.9030170747740575, 0.9030170747740575, 0.9030170747740575, 0.9065447974675936, 0.9065447974675936, 0.9065447974675936, 0.1792876968141729, 0.1792876968141729, 0.1792876968141729, 0.1517769797512346, 0.1517769797512346, 0.1517769797512346, 0.5629666968012725, 0.5629666968012725, 0.5629666968012725, 0.11727018971134662, 0.11727018971134662, 0.11727018971134662, 0.42427915036306985, 0.42427915036306985, 0.42427915036306985, 0.1379252590372464, 0.1379252590372464, 0.1379252590372464, 0.9960178640206204, 0.9960178640206204, 0.9960178640206204, 0.9944266235595806, 0.9944266235595806, 0.9944266235595806, 0.9955565505632341, 0.9955565505632341, 0.9955565505632341, 0.5363496754063208, 0.5363496754063208, 0.5363496754063208, 0.4586717954164242, 0.4586717954164242, 0.4586717954164242, 0.40772776854191006, 0.40772776854191006, 0.40772776854191006, 0.3872382988055989, 0.3872382988055989, 0.3872382988055989, 0.2835729223235459, 0.2835729223235459, 0.2835729223235459, 0.35609863808746856, 0.35609863808746856, 0.35609863808746856, 0.13122570847870196, 0.13122570847870196, 0.13122570847870196, 0.1812794890796181, 0.1812794890796181, 0.1812794890796181, 0.1354320496479402, 0.1354320496479402, 0.1354320496479402, 0.22594458024108877, 0.22594458024108877, 0.22594458024108877, 0.13724080808450922, 0.13724080808450922, 0.13724080808450922, 0.20400734092886907, 0.20400734092886907, 0.20400734092886907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03756565372301357, 0.03756565372301357, 0.03756565372301357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1858677519878008, 0.1858677519878008, 0.1858677519878008, 0.08141792331288611, 0.08141792331288611, 0.08141792331288611, 0.07921979803077961, 0.07921979803077961, 0.07921979803077961, 0.054825936253037444, 0.054825936253037444, 0.054825936253037444, 0.19296627994223547, 0.19296627994223547, 0.19296627994223547, 0.1001112809387893, 0.1001112809387893, 0.1001112809387893, 0.09166069016431988, 0.09166069016431988, 0.09166069016431988, 0.3041759131453785, 0.3041759131453785, 0.3041759131453785, 0.0940601172582225, 0.0940601172582225, 0.0940601172582225, 0.48695468521145036, 0.48695468521145036, 0.48695468521145036, 0.4816669564181646, 0.4816669564181646, 0.4816669564181646, 0.530761997600274, 0.530761997600274, 0.530761997600274, 0.0827791104334119, 0.0827791104334119, 0.0827791104334119, 0.14161544824927208, 0.14161544824927208, 0.14161544824927208, 0.13168224785839955, 0.13168224785839955, 0.13168224785839955, 0.20044140063952665, 0.20044140063952665, 0.20044140063952665, 0.1832992332348954, 0.1832992332348954, 0.1832992332348954, 0.2753453654850436, 0.2753453654850436, 0.2753453654850436, 0.310154766247283, 0.310154766247283, 0.310154766247283, 0.3715162727571184, 0.3715162727571184, 0.3715162727571184, 0.33007542136606205, 0.33007542136606205, 0.33007542136606205, 0.07459120038804923, 0.07459120038804923, 0.07459120038804923, 0.19908172085849318, 0.19908172085849318, 0.19908172085849318, 0.1447384223229483, 0.1447384223229483, 0.1447384223229483, 0.21887428516002383, 0.21887428516002383, 0.21887428516002383, 0.17973419718581973, 0.17973419718581973, 0.17973419718581973, 0.19379582474296608, 0.19379582474296608, 0.19379582474296608, 0.2146468063653164, 0.2146468063653164, 0.2146468063653164, 0.2916518501473985, 0.2916518501473985, 0.2916518501473985, 0.21186841671226486, 0.21186841671226486, 0.21186841671226486, 0.10572993738550651, 0.10572993738550651, 0.10572993738550651, 0.9464960492737664, 0.9464960492737664, 0.9464960492737664, 0.1021902697089021, 0.1021902697089021, 0.1021902697089021, 0.4639665247371664, 0.4639665247371664, 0.4639665247371664, 0.16409500287661472, 0.16409500287661472, 0.16409500287661472, 0.10565877307006577, 0.10565877307006577, 0.10565877307006577, 0.19251008239172906, 0.19251008239172906, 0.19251008239172906, 0.18691305524888624, 0.18691305524888624, 0.18691305524888624, 0.1780617116112435, 0.1780617116112435, 0.1780617116112435, 0.07651612440004063, 0.07651612440004063, 0.07651612440004063, 0.12396298839440756, 0.12396298839440756, 0.12396298839440756, 0.08828892079828765, 0.08828892079828765, 0.08828892079828765]}, "mutation_prompt": null}
{"id": "5dd0b720-6d9a-4ff1-a67a-ecdd7a8ec7c4", "solution": "import numpy as np\n\nclass EEM_PSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.mutation_prob = 0.1\n        self.mutation_strength = 0.1\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Directed mutation for enhanced exploration\n            for i in range(self.pop_size):\n                if np.random.rand() < self.mutation_prob and evals < self.budget:\n                    mutation_vector = np.random.normal(0, self.mutation_strength, self.dim)\n                    mutated_position = np.clip(positions[i] + mutation_vector, self.lower_bound, self.upper_bound)\n                    mutated_score = func(mutated_position)\n                    evals += 1\n                    if mutated_score < personal_best_scores[i]:\n                        personal_best_scores[i] = mutated_score\n                        personal_best_positions[i] = mutated_position\n                        if mutated_score < global_best_score:\n                            global_best_score = mutated_score\n                            global_best_position = mutated_position\n            \n            # Adaptive Local Search around global best\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n        \n        return global_best_score", "name": "EEM_PSO", "description": "EEM-PSO (Enhanced and Efficient Mutation Particle Swarm Optimization) integrates adaptive velocity control with a novel directed mutation strategy to enhance exploration while maintaining convergence efficiency.", "configspace": "", "generation": 27, "fitness": 0.31425693452046766, "feedback": "The algorithm EEM_PSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "metadata": {"aucs": [0.9524365803361692, 0.9524365803361692, 0.9524365803361692, 0.9587299021638253, 0.9587299021638253, 0.9587299021638253, 0.963803599478917, 0.963803599478917, 0.963803599478917, 0.9191517644184061, 0.9191517644184061, 0.9191517644184061, 0.881696576045951, 0.881696576045951, 0.881696576045951, 0.8627629825688965, 0.8627629825688965, 0.8627629825688965, 0.12449784638419537, 0.12449784638419537, 0.12449784638419537, 0.11786393802511808, 0.11786393802511808, 0.11786393802511808, 0.12331066857225359, 0.12331066857225359, 0.12331066857225359, 0.15642774808027493, 0.15642774808027493, 0.15642774808027493, 0.1451497289906607, 0.1451497289906607, 0.1451497289906607, 0.1223283861812462, 0.1223283861812462, 0.1223283861812462, 0.9957727886532262, 0.9957727886532262, 0.9957727886532262, 0.9938431486606094, 0.9938431486606094, 0.9938431486606094, 0.9922905909998433, 0.9922905909998433, 0.9922905909998433, 0.4808739570958833, 0.4808739570958833, 0.4808739570958833, 0.39775828804335056, 0.39775828804335056, 0.39775828804335056, 0.48522461949000917, 0.48522461949000917, 0.48522461949000917, 0.367756607624494, 0.367756607624494, 0.367756607624494, 0.2561734318158029, 0.2561734318158029, 0.2561734318158029, 0.2292431440006294, 0.2292431440006294, 0.2292431440006294, 0.1332838808166653, 0.1332838808166653, 0.1332838808166653, 0.1848493724727589, 0.1848493724727589, 0.1848493724727589, 0.1757901303865398, 0.1757901303865398, 0.1757901303865398, 0.17039733159341397, 0.17039733159341397, 0.17039733159341397, 0.16238876370171162, 0.16238876370171162, 0.16238876370171162, 0.224083152686804, 0.224083152686804, 0.224083152686804, 0.022891781724679316, 0.022891781724679316, 0.022891781724679316, 0.04541339228041941, 0.04541339228041941, 0.04541339228041941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14465341184064495, 0.14465341184064495, 0.14465341184064495, 0.12373138592430044, 0.12373138592430044, 0.12373138592430044, 0.17302903760756982, 0.17302903760756982, 0.17302903760756982, 0.11920195869855199, 0.11920195869855199, 0.11920195869855199, 0.09751797987679989, 0.09751797987679989, 0.09751797987679989, 0.08040560857286039, 0.08040560857286039, 0.08040560857286039, 0.06484015381605146, 0.06484015381605146, 0.06484015381605146, 0.21906659008251972, 0.21906659008251972, 0.21906659008251972, 0.09895492527522698, 0.09895492527522698, 0.09895492527522698, 0.5037776159461865, 0.5037776159461865, 0.5037776159461865, 0.5481517421054336, 0.5481517421054336, 0.5481517421054336, 0.5450702760320123, 0.5450702760320123, 0.5450702760320123, 0.1472087001618555, 0.1472087001618555, 0.1472087001618555, 0.11512254204272887, 0.11512254204272887, 0.11512254204272887, 0.12072780517348325, 0.12072780517348325, 0.12072780517348325, 0.17620165911968366, 0.17620165911968366, 0.17620165911968366, 0.19833532297086098, 0.19833532297086098, 0.19833532297086098, 0.24288947800043692, 0.24288947800043692, 0.24288947800043692, 0.2867089812576613, 0.2867089812576613, 0.2867089812576613, 0.2830935941598486, 0.2830935941598486, 0.2830935941598486, 0.2843274506386121, 0.2843274506386121, 0.2843274506386121, 0.08200610757740556, 0.08200610757740556, 0.08200610757740556, 0.19123600562149334, 0.19123600562149334, 0.19123600562149334, 0.17955175912613575, 0.17955175912613575, 0.17955175912613575, 0.19485192762299997, 0.19485192762299997, 0.19485192762299997, 0.1937938148290166, 0.1937938148290166, 0.1937938148290166, 0.21708551595224612, 0.21708551595224612, 0.21708551595224612, 0.22884804857680452, 0.22884804857680452, 0.22884804857680452, 0.18746823630626008, 0.18746823630626008, 0.18746823630626008, 0.19056852124267265, 0.19056852124267265, 0.19056852124267265, 0.8014817686129623, 0.8014817686129623, 0.8014817686129623, 0.952840475165045, 0.952840475165045, 0.952840475165045, 0.16189813864823588, 0.16189813864823588, 0.16189813864823588, 0.40905559808215775, 0.40905559808215775, 0.40905559808215775, 0.388709194263118, 0.388709194263118, 0.388709194263118, 0.10568764572439993, 0.10568764572439993, 0.10568764572439993, 0.1845205727393583, 0.1845205727393583, 0.1845205727393583, 0.20133956125174968, 0.20133956125174968, 0.20133956125174968, 0.2238438035193605, 0.2238438035193605, 0.2238438035193605, 0.09906551413790787, 0.09906551413790787, 0.09906551413790787, 0.12949170246820596, 0.12949170246820596, 0.12949170246820596, 0.0838450514100526, 0.0838450514100526, 0.0838450514100526]}, "mutation_prompt": null}
{"id": "50724c70-389c-4d6b-892d-0bba64de87bd", "solution": "import numpy as np\n\nclass EPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n    \n    def __call__(self, func):\n        np.random.seed(0)\n        \n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        \n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n                \n                # Update velocities and positions\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                 + self.social_coeff * r2 * (global_best_position - positions[i]))\n                positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n                \n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n                \n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                \n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n            \n        return global_best_score", "name": "EPSO_AVC", "description": "Enhanced PSO with Adaptive Velocity Control and Local Search (EPSO-AVC) dynamically adapts velocity parameters and integrates a more frequent local search phase for improved convergence and exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "metadata": {"aucs": [0.9470866040231292, 0.9470866040231292, 0.9470866040231292, 0.9627659654688501, 0.9627659654688501, 0.9627659654688501, 0.9529012350760397, 0.9529012350760397, 0.9529012350760397, 0.8867061125048104, 0.8867061125048104, 0.8867061125048104, 0.9030170747740575, 0.9030170747740575, 0.9030170747740575, 0.9065447974675936, 0.9065447974675936, 0.9065447974675936, 0.1792876968141729, 0.1792876968141729, 0.1792876968141729, 0.1517769797512346, 0.1517769797512346, 0.1517769797512346, 0.5629666968012725, 0.5629666968012725, 0.5629666968012725, 0.11727018971134662, 0.11727018971134662, 0.11727018971134662, 0.42427915036306985, 0.42427915036306985, 0.42427915036306985, 0.1379252590372464, 0.1379252590372464, 0.1379252590372464, 0.9960178640206204, 0.9960178640206204, 0.9960178640206204, 0.9944266235595806, 0.9944266235595806, 0.9944266235595806, 0.9955565505632341, 0.9955565505632341, 0.9955565505632341, 0.5363496754063208, 0.5363496754063208, 0.5363496754063208, 0.4586717954164242, 0.4586717954164242, 0.4586717954164242, 0.40772776854191006, 0.40772776854191006, 0.40772776854191006, 0.3872382988055989, 0.3872382988055989, 0.3872382988055989, 0.2835729223235459, 0.2835729223235459, 0.2835729223235459, 0.35609863808746856, 0.35609863808746856, 0.35609863808746856, 0.13122570847870196, 0.13122570847870196, 0.13122570847870196, 0.1812794890796181, 0.1812794890796181, 0.1812794890796181, 0.1354320496479402, 0.1354320496479402, 0.1354320496479402, 0.22594458024108877, 0.22594458024108877, 0.22594458024108877, 0.13724080808450922, 0.13724080808450922, 0.13724080808450922, 0.20400734092886907, 0.20400734092886907, 0.20400734092886907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03756565372301357, 0.03756565372301357, 0.03756565372301357, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1858677519878008, 0.1858677519878008, 0.1858677519878008, 0.08141792331288611, 0.08141792331288611, 0.08141792331288611, 0.07921979803077961, 0.07921979803077961, 0.07921979803077961, 0.054825936253037444, 0.054825936253037444, 0.054825936253037444, 0.19296627994223547, 0.19296627994223547, 0.19296627994223547, 0.1001112809387893, 0.1001112809387893, 0.1001112809387893, 0.09166069016431988, 0.09166069016431988, 0.09166069016431988, 0.3041759131453785, 0.3041759131453785, 0.3041759131453785, 0.0940601172582225, 0.0940601172582225, 0.0940601172582225, 0.48695468521145036, 0.48695468521145036, 0.48695468521145036, 0.4816669564181646, 0.4816669564181646, 0.4816669564181646, 0.530761997600274, 0.530761997600274, 0.530761997600274, 0.0827791104334119, 0.0827791104334119, 0.0827791104334119, 0.14161544824927208, 0.14161544824927208, 0.14161544824927208, 0.13168224785839955, 0.13168224785839955, 0.13168224785839955, 0.20044140063952665, 0.20044140063952665, 0.20044140063952665, 0.1832992332348954, 0.1832992332348954, 0.1832992332348954, 0.2753453654850436, 0.2753453654850436, 0.2753453654850436, 0.310154766247283, 0.310154766247283, 0.310154766247283, 0.3715162727571184, 0.3715162727571184, 0.3715162727571184, 0.33007542136606205, 0.33007542136606205, 0.33007542136606205, 0.07459120038804923, 0.07459120038804923, 0.07459120038804923, 0.19908172085849318, 0.19908172085849318, 0.19908172085849318, 0.1447384223229483, 0.1447384223229483, 0.1447384223229483, 0.21887428516002383, 0.21887428516002383, 0.21887428516002383, 0.17973419718581973, 0.17973419718581973, 0.17973419718581973, 0.19379582474296608, 0.19379582474296608, 0.19379582474296608, 0.2146468063653164, 0.2146468063653164, 0.2146468063653164, 0.2916518501473985, 0.2916518501473985, 0.2916518501473985, 0.21186841671226486, 0.21186841671226486, 0.21186841671226486, 0.10572993738550651, 0.10572993738550651, 0.10572993738550651, 0.9464960492737664, 0.9464960492737664, 0.9464960492737664, 0.1021902697089021, 0.1021902697089021, 0.1021902697089021, 0.4639665247371664, 0.4639665247371664, 0.4639665247371664, 0.16409500287661472, 0.16409500287661472, 0.16409500287661472, 0.10565877307006577, 0.10565877307006577, 0.10565877307006577, 0.19251008239172906, 0.19251008239172906, 0.19251008239172906, 0.18691305524888624, 0.18691305524888624, 0.18691305524888624, 0.1780617116112435, 0.1780617116112435, 0.1780617116112435, 0.07651612440004063, 0.07651612440004063, 0.07651612440004063, 0.12396298839440756, 0.12396298839440756, 0.12396298839440756, 0.08828892079828765, 0.08828892079828765, 0.08828892079828765]}, "mutation_prompt": null}
{"id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "solution": "import numpy as np\n\nclass QPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n    \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "QPSO_AVC", "description": "Quantum-inspired Particle Swarm Optimization with Adaptive Velocity Collapse (QPSO-AVC) utilizes quantum principles and a dynamic collapse mechanism to guide particles to promising regions for enhanced convergence and exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.32912254216590564, "feedback": "The algorithm QPSO_AVC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.29.", "error": "", "parent_id": "ae0a9362-fbcb-47a0-b3b0-5c24876a2bed", "metadata": {"aucs": [0.9497398178127768, 0.9497398178127768, 0.9497398178127768, 0.9527214785383232, 0.9527214785383232, 0.9527214785383232, 0.9423901951094359, 0.9423901951094359, 0.9423901951094359, 0.9238245139827501, 0.9238245139827501, 0.9238245139827501, 0.8917783801740591, 0.8917783801740591, 0.8917783801740591, 0.9019283121320599, 0.9019283121320599, 0.9019283121320599, 0.16752277231861046, 0.16752277231861046, 0.16752277231861046, 0.12231362793110767, 0.12231362793110767, 0.12231362793110767, 0.05766460089001335, 0.05766460089001335, 0.05766460089001335, 0.06270661927848087, 0.06270661927848087, 0.06270661927848087, 0.14100254222937003, 0.14100254222937003, 0.14100254222937003, 0.12586627285100604, 0.12586627285100604, 0.12586627285100604, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.7496129841261723, 0.7496129841261723, 0.7496129841261723, 0.4539240311996291, 0.4539240311996291, 0.4539240311996291, 0.7156128214635327, 0.7156128214635327, 0.7156128214635327, 0.3230998734271616, 0.3230998734271616, 0.3230998734271616, 0.2830225451703775, 0.2830225451703775, 0.2830225451703775, 0.23676282404702775, 0.23676282404702775, 0.23676282404702775, 0.22148639432492556, 0.22148639432492556, 0.22148639432492556, 0.17161932416578507, 0.17161932416578507, 0.17161932416578507, 0.2076583009184506, 0.2076583009184506, 0.2076583009184506, 0.1981729991926967, 0.1981729991926967, 0.1981729991926967, 0.17384568648236198, 0.17384568648236198, 0.17384568648236198, 0.13257788663414194, 0.13257788663414194, 0.13257788663414194, 0.06923446877999906, 0.06923446877999906, 0.06923446877999906, 0.18646753939081828, 0.18646753939081828, 0.18646753939081828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1226697372663661, 0.1226697372663661, 0.1226697372663661, 0.06430339277829278, 0.06430339277829278, 0.06430339277829278, 0.10524370973454367, 0.10524370973454367, 0.10524370973454367, 0.24296479823848016, 0.24296479823848016, 0.24296479823848016, 0.14789917575353173, 0.14789917575353173, 0.14789917575353173, 0.08001729210901776, 0.08001729210901776, 0.08001729210901776, 0.17823564580312012, 0.17823564580312012, 0.17823564580312012, 0.13241456292357545, 0.13241456292357545, 0.13241456292357545, 0.22982394046933197, 0.22982394046933197, 0.22982394046933197, 0.5956493144445978, 0.5956493144445978, 0.5956493144445978, 0.5647188133705856, 0.5647188133705856, 0.5647188133705856, 0.553497832609967, 0.553497832609967, 0.553497832609967, 0.09563503011666652, 0.09563503011666652, 0.09563503011666652, 0.12542017097888725, 0.12542017097888725, 0.12542017097888725, 0.11563576335736703, 0.11563576335736703, 0.11563576335736703, 0.3536713880367892, 0.3536713880367892, 0.3536713880367892, 0.30994227849901723, 0.30994227849901723, 0.30994227849901723, 0.2889201453041982, 0.2889201453041982, 0.2889201453041982, 0.2340582105508796, 0.2340582105508796, 0.2340582105508796, 0.34984947698781266, 0.34984947698781266, 0.34984947698781266, 0.22820957586104307, 0.22820957586104307, 0.22820957586104307, 0.16616910722906086, 0.16616910722906086, 0.16616910722906086, 0.32001765388401515, 0.32001765388401515, 0.32001765388401515, 0.19841894700021578, 0.19841894700021578, 0.19841894700021578, 0.240869076513752, 0.240869076513752, 0.240869076513752, 0.2576002663947825, 0.2576002663947825, 0.2576002663947825, 0.22151754470724616, 0.22151754470724616, 0.22151754470724616, 0.19986319565213218, 0.19986319565213218, 0.19986319565213218, 0.19902062198263948, 0.19902062198263948, 0.19902062198263948, 0.19131331426879994, 0.19131331426879994, 0.19131331426879994, 0.1892343248286642, 0.1892343248286642, 0.1892343248286642, 0.9472122062687006, 0.9472122062687006, 0.9472122062687006, 0.1531402615081614, 0.1531402615081614, 0.1531402615081614, 0.5429894864067877, 0.5429894864067877, 0.5429894864067877, 0.4315120412713762, 0.4315120412713762, 0.4315120412713762, 0.10556203080068971, 0.10556203080068971, 0.10556203080068971, 0.19745093690842586, 0.19745093690842586, 0.19745093690842586, 0.2154618200794003, 0.2154618200794003, 0.2154618200794003, 0.18007857588404919, 0.18007857588404919, 0.18007857588404919, 0.09373295552786476, 0.09373295552786476, 0.09373295552786476, 0.09507438048566041, 0.09507438048566041, 0.09507438048566041, 0.0847045572008639, 0.0847045572008639, 0.0847045572008639]}, "mutation_prompt": null}
{"id": "b6e879f0-b9c0-42a7-97e1-033e14a69659", "solution": "import numpy as np\n\nclass QPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n    \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "QPSO_AVC", "description": "Quantum-inspired Particle Swarm Optimization with Adaptive Velocity Collapse (QPSO-AVC) utilizes quantum principles and a dynamic collapse mechanism to guide particles to promising regions for enhanced convergence and exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9497398178127768, 0.9497398178127768, 0.9497398178127768, 0.9527214785383232, 0.9527214785383232, 0.9527214785383232, 0.9423901951094359, 0.9423901951094359, 0.9423901951094359, 0.9238245139827501, 0.9238245139827501, 0.9238245139827501, 0.8917783801740591, 0.8917783801740591, 0.8917783801740591, 0.9019283121320599, 0.9019283121320599, 0.9019283121320599, 0.16752277231861046, 0.16752277231861046, 0.16752277231861046, 0.12231362793110767, 0.12231362793110767, 0.12231362793110767, 0.05766460089001335, 0.05766460089001335, 0.05766460089001335, 0.06270661927848087, 0.06270661927848087, 0.06270661927848087, 0.14100254222937003, 0.14100254222937003, 0.14100254222937003, 0.12586627285100604, 0.12586627285100604, 0.12586627285100604, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.7496129841261723, 0.7496129841261723, 0.7496129841261723, 0.4539240311996291, 0.4539240311996291, 0.4539240311996291, 0.7156128214635327, 0.7156128214635327, 0.7156128214635327, 0.3230998734271616, 0.3230998734271616, 0.3230998734271616, 0.2830225451703775, 0.2830225451703775, 0.2830225451703775, 0.23676282404702775, 0.23676282404702775, 0.23676282404702775, 0.22148639432492556, 0.22148639432492556, 0.22148639432492556, 0.17161932416578507, 0.17161932416578507, 0.17161932416578507, 0.2076583009184506, 0.2076583009184506, 0.2076583009184506, 0.1981729991926967, 0.1981729991926967, 0.1981729991926967, 0.17384568648236198, 0.17384568648236198, 0.17384568648236198, 0.13257788663414194, 0.13257788663414194, 0.13257788663414194, 0.06923446877999906, 0.06923446877999906, 0.06923446877999906, 0.18646753939081828, 0.18646753939081828, 0.18646753939081828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1226697372663661, 0.1226697372663661, 0.1226697372663661, 0.06430339277829278, 0.06430339277829278, 0.06430339277829278, 0.10524370973454367, 0.10524370973454367, 0.10524370973454367, 0.24296479823848016, 0.24296479823848016, 0.24296479823848016, 0.14789917575353173, 0.14789917575353173, 0.14789917575353173, 0.08001729210901776, 0.08001729210901776, 0.08001729210901776, 0.17823564580312012, 0.17823564580312012, 0.17823564580312012, 0.13241456292357545, 0.13241456292357545, 0.13241456292357545, 0.22982394046933197, 0.22982394046933197, 0.22982394046933197, 0.5956493144445978, 0.5956493144445978, 0.5956493144445978, 0.5647188133705856, 0.5647188133705856, 0.5647188133705856, 0.553497832609967, 0.553497832609967, 0.553497832609967, 0.09563503011666652, 0.09563503011666652, 0.09563503011666652, 0.12542017097888725, 0.12542017097888725, 0.12542017097888725, 0.11563576335736703, 0.11563576335736703, 0.11563576335736703, 0.3536713880367892, 0.3536713880367892, 0.3536713880367892, 0.30994227849901723, 0.30994227849901723, 0.30994227849901723, 0.2889201453041982, 0.2889201453041982, 0.2889201453041982, 0.2340582105508796, 0.2340582105508796, 0.2340582105508796, 0.34984947698781266, 0.34984947698781266, 0.34984947698781266, 0.22820957586104307, 0.22820957586104307, 0.22820957586104307, 0.16616910722906086, 0.16616910722906086, 0.16616910722906086, 0.32001765388401515, 0.32001765388401515, 0.32001765388401515, 0.19841894700021578, 0.19841894700021578, 0.19841894700021578, 0.240869076513752, 0.240869076513752, 0.240869076513752, 0.2576002663947825, 0.2576002663947825, 0.2576002663947825, 0.22151754470724616, 0.22151754470724616, 0.22151754470724616, 0.19986319565213218, 0.19986319565213218, 0.19986319565213218, 0.19902062198263948, 0.19902062198263948, 0.19902062198263948, 0.19131331426879994, 0.19131331426879994, 0.19131331426879994, 0.1892343248286642, 0.1892343248286642, 0.1892343248286642, 0.9472122062687006, 0.9472122062687006, 0.9472122062687006, 0.1531402615081614, 0.1531402615081614, 0.1531402615081614, 0.5429894864067877, 0.5429894864067877, 0.5429894864067877, 0.4315120412713762, 0.4315120412713762, 0.4315120412713762, 0.10556203080068971, 0.10556203080068971, 0.10556203080068971, 0.19745093690842586, 0.19745093690842586, 0.19745093690842586, 0.2154618200794003, 0.2154618200794003, 0.2154618200794003, 0.18007857588404919, 0.18007857588404919, 0.18007857588404919, 0.09373295552786476, 0.09373295552786476, 0.09373295552786476, 0.09507438048566041, 0.09507438048566041, 0.09507438048566041, 0.0847045572008639, 0.0847045572008639, 0.0847045572008639]}, "mutation_prompt": null}
{"id": "0d28d306-00bf-41ff-9404-d88775a449ab", "solution": "import numpy as np\n\nclass EQPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n        self.mutation_prob = 0.1  # Probability of mutation\n    \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Adaptive quantum probability based on progress\n                self.quantum_prob = max(0.1, 0.5 / (1 + np.exp(-10 * (global_best_score - personal_best_scores[i]))))\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Mutate occasionally for diversity\n                if np.random.rand() < self.mutation_prob:\n                    mutation_strength = np.random.uniform(-0.1, 0.1, self.dim)\n                    positions[i] = np.clip(positions[i] + mutation_strength, self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "EQPSO_AVC", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Velocity Collapse (EQPSO-AVC) incorporates diverse mutation strategies and adaptive parameter tuning to accelerate convergence and improve exploration-exploitation dynamics.", "configspace": "", "generation": 31, "fitness": 0.2858936702766892, "feedback": "The algorithm EQPSO_AVC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9281694085736027, 0.9281694085736027, 0.9281694085736027, 0.9423054215198163, 0.9423054215198163, 0.9423054215198163, 0.9401483598054575, 0.9401483598054575, 0.9401483598054575, 0.7295120413397138, 0.7295120413397138, 0.7295120413397138, 0.7838489696755291, 0.7838489696755291, 0.7838489696755291, 0.6779925906907698, 0.6779925906907698, 0.6779925906907698, 0.09079843826704515, 0.09079843826704515, 0.09079843826704515, 0.1456569218703715, 0.1456569218703715, 0.1456569218703715, 0.12429974457015192, 0.12429974457015192, 0.12429974457015192, 0.1191512238160396, 0.1191512238160396, 0.1191512238160396, 0.09495169893471866, 0.09495169893471866, 0.09495169893471866, 0.1371867179585231, 0.1371867179585231, 0.1371867179585231, 0.9950078605319603, 0.9950078605319603, 0.9950078605319603, 0.9963662878600148, 0.9963662878600148, 0.9963662878600148, 0.9966823561383947, 0.9966823561383947, 0.9966823561383947, 0.3561201636104282, 0.3561201636104282, 0.3561201636104282, 0.4062128516356718, 0.4062128516356718, 0.4062128516356718, 0.5444225221126928, 0.5444225221126928, 0.5444225221126928, 0.638446036132063, 0.638446036132063, 0.638446036132063, 0.21726009173525662, 0.21726009173525662, 0.21726009173525662, 0.23126891789239845, 0.23126891789239845, 0.23126891789239845, 0.15525153261975955, 0.15525153261975955, 0.15525153261975955, 0.17332894690469747, 0.17332894690469747, 0.17332894690469747, 0.13603161816127995, 0.13603161816127995, 0.13603161816127995, 0.1828696299827547, 0.1828696299827547, 0.1828696299827547, 0.1361564880679036, 0.1361564880679036, 0.1361564880679036, 0.21225847939967912, 0.21225847939967912, 0.21225847939967912, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07057153838979124, 0.07057153838979124, 0.07057153838979124, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07333870086223382, 0.07333870086223382, 0.07333870086223382, 0.06418338079195018, 0.06418338079195018, 0.06418338079195018, 0.13942095898051043, 0.13942095898051043, 0.13942095898051043, 0.10367276019999971, 0.10367276019999971, 0.10367276019999971, 0.1043073705958204, 0.1043073705958204, 0.1043073705958204, 0.19986688401325559, 0.19986688401325559, 0.19986688401325559, 0.061060152738640516, 0.061060152738640516, 0.061060152738640516, 0.29964842431925554, 0.29964842431925554, 0.29964842431925554, 0.07746681055482585, 0.07746681055482585, 0.07746681055482585, 0.5208458364936536, 0.5208458364936536, 0.5208458364936536, 0.5113358226030938, 0.5113358226030938, 0.5113358226030938, 0.4970932976235032, 0.4970932976235032, 0.4970932976235032, 0.11371144192253924, 0.11371144192253924, 0.11371144192253924, 0.10786236937311855, 0.10786236937311855, 0.10786236937311855, 0.17290576222980203, 0.17290576222980203, 0.17290576222980203, 0.22176835658433358, 0.22176835658433358, 0.22176835658433358, 0.25810908940578015, 0.25810908940578015, 0.25810908940578015, 0.18594152238181982, 0.18594152238181982, 0.18594152238181982, 0.42121837008059615, 0.42121837008059615, 0.42121837008059615, 0.4672297312815652, 0.4672297312815652, 0.4672297312815652, 0.25149350267067005, 0.25149350267067005, 0.25149350267067005, 0.17577854939812276, 0.17577854939812276, 0.17577854939812276, 0.17937756493058166, 0.17937756493058166, 0.17937756493058166, 0.2050185949901978, 0.2050185949901978, 0.2050185949901978, 0.201449599300085, 0.201449599300085, 0.201449599300085, 0.20466257655267794, 0.20466257655267794, 0.20466257655267794, 0.21163718650339258, 0.21163718650339258, 0.21163718650339258, 0.19434487127899258, 0.19434487127899258, 0.19434487127899258, 0.1919881437344375, 0.1919881437344375, 0.1919881437344375, 0.18162481929579144, 0.18162481929579144, 0.18162481929579144, 0.10567865140488175, 0.10567865140488175, 0.10567865140488175, 0.17386331949135603, 0.17386331949135603, 0.17386331949135603, 0.15296420058847415, 0.15296420058847415, 0.15296420058847415, 0.08345986539313033, 0.08345986539313033, 0.08345986539313033, 0.213622816829254, 0.213622816829254, 0.213622816829254, 0.21177498930462035, 0.21177498930462035, 0.21177498930462035, 0.2056577354113036, 0.2056577354113036, 0.2056577354113036, 0.18470013629726068, 0.18470013629726068, 0.18470013629726068, 0.20277832555791064, 0.20277832555791064, 0.20277832555791064, 0.08574645063815589, 0.08574645063815589, 0.08574645063815589, 0.12426771868242992, 0.12426771868242992, 0.12426771868242992, 0.07899074043511467, 0.07899074043511467, 0.07899074043511467]}, "mutation_prompt": null}
{"id": "dc08e7ca-e5ab-4015-8c66-07fa4b7dad8a", "solution": "import numpy as np\n\nclass EQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.inertia_min = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.15\n        self.memory_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia weight dynamically\n                self.inertia_weight = max(self.inertia_min, self.inertia_weight * self.damping)\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best with memory effect\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                elif np.random.rand() < self.memory_rate:\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Enhanced Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    perturbation = np.random.normal(0, 0.1, self.dim)\n                    local_positions = global_best_position + perturbation\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "EQPSO", "description": "Enhanced Quantum-inspired Particle Swarm Optimization (EQPSO) integrates dynamic inertia, adaptive quantum exploration, and local search with memory to improve convergence and diversity.", "configspace": "", "generation": 32, "fitness": 0.2592822073558666, "feedback": "The algorithm EQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.5075842725072673, 0.5075842725072673, 0.5075842725072673, 0.6008797923798674, 0.6008797923798674, 0.6008797923798674, 0.8011459512648939, 0.8011459512648939, 0.8011459512648939, 0.31255116446667264, 0.31255116446667264, 0.31255116446667264, 0.37478835640218644, 0.37478835640218644, 0.37478835640218644, 0.10830357725784712, 0.10830357725784712, 0.10830357725784712, 0.032283563343467936, 0.032283563343467936, 0.032283563343467936, 0.18939514014631975, 0.18939514014631975, 0.18939514014631975, 0.07125833438852314, 0.07125833438852314, 0.07125833438852314, 0.07640875813557246, 0.07640875813557246, 0.07640875813557246, 0.11287383706799681, 0.11287383706799681, 0.11287383706799681, 0.10089477421134596, 0.10089477421134596, 0.10089477421134596, 0.9974513052442615, 0.9974513052442615, 0.9974513052442615, 0.9870893172535804, 0.9870893172535804, 0.9870893172535804, 0.994623924848793, 0.994623924848793, 0.994623924848793, 0.5617318263540408, 0.5617318263540408, 0.5617318263540408, 0.4644826473344684, 0.4644826473344684, 0.4644826473344684, 0.5857070469785206, 0.5857070469785206, 0.5857070469785206, 0.39230908680173493, 0.39230908680173493, 0.39230908680173493, 0.1869987576288077, 0.1869987576288077, 0.1869987576288077, 0.11712607569457001, 0.11712607569457001, 0.11712607569457001, 0.10086544791085239, 0.10086544791085239, 0.10086544791085239, 0.19202096336621177, 0.19202096336621177, 0.19202096336621177, 0.1893555918298213, 0.1893555918298213, 0.1893555918298213, 0.1555828537778371, 0.1555828537778371, 0.1555828537778371, 0.15286232563520008, 0.15286232563520008, 0.15286232563520008, 0.15749677009740248, 0.15749677009740248, 0.15749677009740248, 0.002333411163862209, 0.002333411163862209, 0.002333411163862209, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015482751348748769, 0.0015482751348748769, 0.0015482751348748769, 0.1154748264581602, 0.1154748264581602, 0.1154748264581602, 0.0698451399534391, 0.0698451399534391, 0.0698451399534391, 0.14062985456223454, 0.14062985456223454, 0.14062985456223454, 0.002852023971999018, 0.002852023971999018, 0.002852023971999018, 0.09974810403277734, 0.09974810403277734, 0.09974810403277734, 0.2730571964914288, 0.2730571964914288, 0.2730571964914288, 0.08972406044856585, 0.08972406044856585, 0.08972406044856585, 0.09221109740948774, 0.09221109740948774, 0.09221109740948774, 0.24225599365743955, 0.24225599365743955, 0.24225599365743955, 0.5297897182781354, 0.5297897182781354, 0.5297897182781354, 0.4701017248042997, 0.4701017248042997, 0.4701017248042997, 0.44549224465934967, 0.44549224465934967, 0.44549224465934967, 0.08467380115849299, 0.08467380115849299, 0.08467380115849299, 0.07873131177827486, 0.07873131177827486, 0.07873131177827486, 0.09206845840549926, 0.09206845840549926, 0.09206845840549926, 0.12206645164134111, 0.12206645164134111, 0.12206645164134111, 0.3451531520108394, 0.3451531520108394, 0.3451531520108394, 0.2028195568431994, 0.2028195568431994, 0.2028195568431994, 0.13751179933925306, 0.13751179933925306, 0.13751179933925306, 0.2727350983230097, 0.2727350983230097, 0.2727350983230097, 0.22415598071415666, 0.22415598071415666, 0.22415598071415666, 0.06769443324224189, 0.06769443324224189, 0.06769443324224189, 0.1928812512265804, 0.1928812512265804, 0.1928812512265804, 0.19049976319204975, 0.19049976319204975, 0.19049976319204975, 0.22690512807151952, 0.22690512807151952, 0.22690512807151952, 0.1942640759445231, 0.1942640759445231, 0.1942640759445231, 0.18217644804224287, 0.18217644804224287, 0.18217644804224287, 0.19788215936083453, 0.19788215936083453, 0.19788215936083453, 0.1957936185038731, 0.1957936185038731, 0.1957936185038731, 0.17329995208729343, 0.17329995208729343, 0.17329995208729343, 0.9499359493665782, 0.9499359493665782, 0.9499359493665782, 0.8802673641383227, 0.8802673641383227, 0.8802673641383227, 0.1672571040681189, 0.1672571040681189, 0.1672571040681189, 0.1583074052677772, 0.1583074052677772, 0.1583074052677772, 0.21397267528013375, 0.21397267528013375, 0.21397267528013375, 0.10552437566504724, 0.10552437566504724, 0.10552437566504724, 0.22759227181525366, 0.22759227181525366, 0.22759227181525366, 0.19424337424967908, 0.19424337424967908, 0.19424337424967908, 0.19596701554750795, 0.19596701554750795, 0.19596701554750795, 0.10940352539701648, 0.10940352539701648, 0.10940352539701648, 0.10335097612621014, 0.10335097612621014, 0.10335097612621014, 0.08194931946140882, 0.08194931946140882, 0.08194931946140882]}, "mutation_prompt": null}
{"id": "22b0314b-0225-4e1f-b8e1-72f57bc50777", "solution": "import numpy as np\n\nclass QPSO_DPC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.current_pop_size = self.initial_pop_size\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n        self.contraction_rate = 0.95\n    \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.current_pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.current_pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.current_pop_size\n\n        while evals < self.budget:\n            for i in range(self.current_pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Adaptive Local Search with Dynamic Population Contraction\n            if evals < self.budget:\n                for _ in range(self.current_pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n            # Reduce population size adaptively\n            self.current_pop_size = max(5, int(self.contraction_rate * self.current_pop_size))\n            positions = positions[:self.current_pop_size]\n            velocities = velocities[:self.current_pop_size]\n            personal_best_positions = personal_best_positions[:self.current_pop_size]\n            personal_best_scores = personal_best_scores[:self.current_pop_size]\n\n        return global_best_score", "name": "QPSO_DPC", "description": "Quantum-inspired Particle Swarm Optimization with Dynamic Population Contraction (QPSO-DPC) integrates quantum behaviors with an adaptive population size strategy for efficient exploration and exploitation in high-dimensional search spaces.", "configspace": "", "generation": 33, "fitness": 0.24566202995930667, "feedback": "The algorithm QPSO_DPC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.6222587651040181, 0.6222587651040181, 0.6222587651040181, 0.7796756290348754, 0.7796756290348754, 0.7796756290348754, 0.6056568474464091, 0.6056568474464091, 0.6056568474464091, 0.1527620698343919, 0.1527620698343919, 0.1527620698343919, 0.06367314111693634, 0.06367314111693634, 0.06367314111693634, 0.06598878174835376, 0.06598878174835376, 0.06598878174835376, 0.11144477200421077, 0.11144477200421077, 0.11144477200421077, 0.12807390031875787, 0.12807390031875787, 0.12807390031875787, 0.059667019215143946, 0.059667019215143946, 0.059667019215143946, 0.09332839965835771, 0.09332839965835771, 0.09332839965835771, 0.08442118979709778, 0.08442118979709778, 0.08442118979709778, 0.0929764527634217, 0.0929764527634217, 0.0929764527634217, 0.9946580607469828, 0.9946580607469828, 0.9946580607469828, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.994679809371381, 0.994679809371381, 0.994679809371381, 0.2609762998305607, 0.2609762998305607, 0.2609762998305607, 0.325932009649467, 0.325932009649467, 0.325932009649467, 0.3098562990374635, 0.3098562990374635, 0.3098562990374635, 0.22988252754661787, 0.22988252754661787, 0.22988252754661787, 0.2768321091958871, 0.2768321091958871, 0.2768321091958871, 0.5843228669648484, 0.5843228669648484, 0.5843228669648484, 0.23293693039848218, 0.23293693039848218, 0.23293693039848218, 0.12894313694420856, 0.12894313694420856, 0.12894313694420856, 0.18668224387357069, 0.18668224387357069, 0.18668224387357069, 0.15275689901804113, 0.15275689901804113, 0.15275689901804113, 0.13210188636793685, 0.13210188636793685, 0.13210188636793685, 0.13467835909798798, 0.13467835909798798, 0.13467835909798798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0989756212197841, 0.0989756212197841, 0.0989756212197841, 0.06790473626859439, 0.06790473626859439, 0.06790473626859439, 0.1150580562384872, 0.1150580562384872, 0.1150580562384872, 0.05579896479254143, 0.05579896479254143, 0.05579896479254143, 0.11529767277998015, 0.11529767277998015, 0.11529767277998015, 0.09507717541557681, 0.09507717541557681, 0.09507717541557681, 0.11449358574206892, 0.11449358574206892, 0.11449358574206892, 0.13832716525699484, 0.13832716525699484, 0.13832716525699484, 0.06582437176544609, 0.06582437176544609, 0.06582437176544609, 0.38650495510503147, 0.38650495510503147, 0.38650495510503147, 0.43677638072450864, 0.43677638072450864, 0.43677638072450864, 0.4443209520076512, 0.4443209520076512, 0.4443209520076512, 0.08911497118044887, 0.08911497118044887, 0.08911497118044887, 0.10311111814822127, 0.10311111814822127, 0.10311111814822127, 0.14400941546121415, 0.14400941546121415, 0.14400941546121415, 0.32404346103642756, 0.32404346103642756, 0.32404346103642756, 0.30976673983212955, 0.30976673983212955, 0.30976673983212955, 0.20339078429132051, 0.20339078429132051, 0.20339078429132051, 0.18428966557531024, 0.18428966557531024, 0.18428966557531024, 0.38330210723646185, 0.38330210723646185, 0.38330210723646185, 0.21424599837670144, 0.21424599837670144, 0.21424599837670144, 0.11966569074835387, 0.11966569074835387, 0.11966569074835387, 0.24440673576586947, 0.24440673576586947, 0.24440673576586947, 0.19347717923716856, 0.19347717923716856, 0.19347717923716856, 0.25249322442814714, 0.25249322442814714, 0.25249322442814714, 0.24600163127607666, 0.24600163127607666, 0.24600163127607666, 0.20110978831203152, 0.20110978831203152, 0.20110978831203152, 0.1854803547677354, 0.1854803547677354, 0.1854803547677354, 0.25376589280858586, 0.25376589280858586, 0.25376589280858586, 0.22718040016687202, 0.22718040016687202, 0.22718040016687202, 0.1896209043976158, 0.1896209043976158, 0.1896209043976158, 0.5961765175455644, 0.5961765175455644, 0.5961765175455644, 0.15268561633518352, 0.15268561633518352, 0.15268561633518352, 0.6551762800700655, 0.6551762800700655, 0.6551762800700655, 0.2090026212381807, 0.2090026212381807, 0.2090026212381807, 0.10557361064989057, 0.10557361064989057, 0.10557361064989057, 0.20551932676006435, 0.20551932676006435, 0.20551932676006435, 0.19975990345306804, 0.19975990345306804, 0.19975990345306804, 0.21240580749880333, 0.21240580749880333, 0.21240580749880333, 0.09298058684280064, 0.09298058684280064, 0.09298058684280064, 0.1558701404977152, 0.1558701404977152, 0.1558701404977152, 0.09842733286137861, 0.09842733286137861, 0.09842733286137861]}, "mutation_prompt": null}
{"id": "fddeb8b4-db2c-487f-b6f6-5da923619291", "solution": "import numpy as np\n\nclass QPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n    \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "QPSO_AVC", "description": "Quantum-inspired Particle Swarm Optimization with Adaptive Velocity Collapse (QPSO-AVC) utilizes quantum principles and a dynamic collapse mechanism to guide particles to promising regions for enhanced convergence and exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9497398178127768, 0.9497398178127768, 0.9497398178127768, 0.9527214785383232, 0.9527214785383232, 0.9527214785383232, 0.9423901951094359, 0.9423901951094359, 0.9423901951094359, 0.9238245139827501, 0.9238245139827501, 0.9238245139827501, 0.8917783801740591, 0.8917783801740591, 0.8917783801740591, 0.9019283121320599, 0.9019283121320599, 0.9019283121320599, 0.16752277231861046, 0.16752277231861046, 0.16752277231861046, 0.12231362793110767, 0.12231362793110767, 0.12231362793110767, 0.05766460089001335, 0.05766460089001335, 0.05766460089001335, 0.06270661927848087, 0.06270661927848087, 0.06270661927848087, 0.14100254222937003, 0.14100254222937003, 0.14100254222937003, 0.12586627285100604, 0.12586627285100604, 0.12586627285100604, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.7496129841261723, 0.7496129841261723, 0.7496129841261723, 0.4539240311996291, 0.4539240311996291, 0.4539240311996291, 0.7156128214635327, 0.7156128214635327, 0.7156128214635327, 0.3230998734271616, 0.3230998734271616, 0.3230998734271616, 0.2830225451703775, 0.2830225451703775, 0.2830225451703775, 0.23676282404702775, 0.23676282404702775, 0.23676282404702775, 0.22148639432492556, 0.22148639432492556, 0.22148639432492556, 0.17161932416578507, 0.17161932416578507, 0.17161932416578507, 0.2076583009184506, 0.2076583009184506, 0.2076583009184506, 0.1981729991926967, 0.1981729991926967, 0.1981729991926967, 0.17384568648236198, 0.17384568648236198, 0.17384568648236198, 0.13257788663414194, 0.13257788663414194, 0.13257788663414194, 0.06923446877999906, 0.06923446877999906, 0.06923446877999906, 0.18646753939081828, 0.18646753939081828, 0.18646753939081828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1226697372663661, 0.1226697372663661, 0.1226697372663661, 0.06430339277829278, 0.06430339277829278, 0.06430339277829278, 0.10524370973454367, 0.10524370973454367, 0.10524370973454367, 0.24296479823848016, 0.24296479823848016, 0.24296479823848016, 0.14789917575353173, 0.14789917575353173, 0.14789917575353173, 0.08001729210901776, 0.08001729210901776, 0.08001729210901776, 0.17823564580312012, 0.17823564580312012, 0.17823564580312012, 0.13241456292357545, 0.13241456292357545, 0.13241456292357545, 0.22982394046933197, 0.22982394046933197, 0.22982394046933197, 0.5956493144445978, 0.5956493144445978, 0.5956493144445978, 0.5647188133705856, 0.5647188133705856, 0.5647188133705856, 0.553497832609967, 0.553497832609967, 0.553497832609967, 0.09563503011666652, 0.09563503011666652, 0.09563503011666652, 0.12542017097888725, 0.12542017097888725, 0.12542017097888725, 0.11563576335736703, 0.11563576335736703, 0.11563576335736703, 0.3536713880367892, 0.3536713880367892, 0.3536713880367892, 0.30994227849901723, 0.30994227849901723, 0.30994227849901723, 0.2889201453041982, 0.2889201453041982, 0.2889201453041982, 0.2340582105508796, 0.2340582105508796, 0.2340582105508796, 0.34984947698781266, 0.34984947698781266, 0.34984947698781266, 0.22820957586104307, 0.22820957586104307, 0.22820957586104307, 0.16616910722906086, 0.16616910722906086, 0.16616910722906086, 0.32001765388401515, 0.32001765388401515, 0.32001765388401515, 0.19841894700021578, 0.19841894700021578, 0.19841894700021578, 0.240869076513752, 0.240869076513752, 0.240869076513752, 0.2576002663947825, 0.2576002663947825, 0.2576002663947825, 0.22151754470724616, 0.22151754470724616, 0.22151754470724616, 0.19986319565213218, 0.19986319565213218, 0.19986319565213218, 0.19902062198263948, 0.19902062198263948, 0.19902062198263948, 0.19131331426879994, 0.19131331426879994, 0.19131331426879994, 0.1892343248286642, 0.1892343248286642, 0.1892343248286642, 0.9472122062687006, 0.9472122062687006, 0.9472122062687006, 0.1531402615081614, 0.1531402615081614, 0.1531402615081614, 0.5429894864067877, 0.5429894864067877, 0.5429894864067877, 0.4315120412713762, 0.4315120412713762, 0.4315120412713762, 0.10556203080068971, 0.10556203080068971, 0.10556203080068971, 0.19745093690842586, 0.19745093690842586, 0.19745093690842586, 0.2154618200794003, 0.2154618200794003, 0.2154618200794003, 0.18007857588404919, 0.18007857588404919, 0.18007857588404919, 0.09373295552786476, 0.09373295552786476, 0.09373295552786476, 0.09507438048566041, 0.09507438048566041, 0.09507438048566041, 0.0847045572008639, 0.0847045572008639, 0.0847045572008639]}, "mutation_prompt": null}
{"id": "26b6bf5e-681c-4c85-83ac-171ce4ed5d8f", "solution": "import numpy as np\n\nclass QPSO_AVC_Plus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.tunneling_factor = 0.001  # Small tunneling factor for stochastic tunneling\n        \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Quantum-inspired Update with stochastic tunneling\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    tunnel_effect = np.random.normal(0, self.tunneling_factor, self.dim)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim) + tunnel_effect\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = positions[i] + velocities[i]\n                \n                # Reflect boundaries\n                for d in range(self.dim):\n                    if positions[i, d] < self.lower_bound or positions[i, d] > self.upper_bound:\n                        velocities[i, d] *= -1  # Flip direction of velocity\n                \n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "QPSO_AVC_Plus", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Velocity Collapse (QPSO-AVC+) integrates stochastic tunneling and adaptive boundary reflection to improve convergence and exploration capabilities.", "configspace": "", "generation": 35, "fitness": 0.3123921590869131, "feedback": "The algorithm QPSO_AVC_Plus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9478616179845177, 0.9478616179845177, 0.9478616179845177, 0.9615356223535245, 0.9615356223535245, 0.9615356223535245, 0.9511333782240973, 0.9511333782240973, 0.9511333782240973, 0.6776698234277484, 0.6776698234277484, 0.6776698234277484, 0.7339826674357277, 0.7339826674357277, 0.7339826674357277, 0.6587768290746654, 0.6587768290746654, 0.6587768290746654, 0.1351761985119201, 0.1351761985119201, 0.1351761985119201, 0.18679750630510938, 0.18679750630510938, 0.18679750630510938, 0.1583609457267261, 0.1583609457267261, 0.1583609457267261, 0.1194468204393373, 0.1194468204393373, 0.1194468204393373, 0.10208781052342186, 0.10208781052342186, 0.10208781052342186, 0.11962297913045672, 0.11962297913045672, 0.11962297913045672, 0.9580089148166075, 0.9580089148166075, 0.9580089148166075, 0.9619532983598077, 0.9619532983598077, 0.9619532983598077, 0.9728833662664326, 0.9728833662664326, 0.9728833662664326, 0.5874347346116554, 0.5874347346116554, 0.5874347346116554, 0.5989152500907696, 0.5989152500907696, 0.5989152500907696, 0.5920809919235345, 0.5920809919235345, 0.5920809919235345, 0.2307367159973891, 0.2307367159973891, 0.2307367159973891, 0.2653434485007873, 0.2653434485007873, 0.2653434485007873, 0.25355301794189133, 0.25355301794189133, 0.25355301794189133, 0.19439505019653158, 0.19439505019653158, 0.19439505019653158, 0.13583402364147368, 0.13583402364147368, 0.13583402364147368, 0.13382838325583035, 0.13382838325583035, 0.13382838325583035, 0.20895883260571468, 0.20895883260571468, 0.20895883260571468, 0.13649957972046411, 0.13649957972046411, 0.13649957972046411, 0.21712997563094727, 0.21712997563094727, 0.21712997563094727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0885601337744587, 0.0885601337744587, 0.0885601337744587, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12661212687246748, 0.12661212687246748, 0.12661212687246748, 0.0697225706778799, 0.0697225706778799, 0.0697225706778799, 0.07850307967797276, 0.07850307967797276, 0.07850307967797276, 0.13036211565579559, 0.13036211565579559, 0.13036211565579559, 0.09762809188003974, 0.09762809188003974, 0.09762809188003974, 0.22070136271757634, 0.22070136271757634, 0.22070136271757634, 0.08415310854909075, 0.08415310854909075, 0.08415310854909075, 0.08645386278858536, 0.08645386278858536, 0.08645386278858536, 0.1972673489326504, 0.1972673489326504, 0.1972673489326504, 0.5138924167113826, 0.5138924167113826, 0.5138924167113826, 0.5414875119725016, 0.5414875119725016, 0.5414875119725016, 0.5389465267132437, 0.5389465267132437, 0.5389465267132437, 0.13496833532101826, 0.13496833532101826, 0.13496833532101826, 0.1272324213710947, 0.1272324213710947, 0.1272324213710947, 0.19253491554232982, 0.19253491554232982, 0.19253491554232982, 0.21827366380737223, 0.21827366380737223, 0.21827366380737223, 0.24735920649206988, 0.24735920649206988, 0.24735920649206988, 0.21525917476220324, 0.21525917476220324, 0.21525917476220324, 0.364480028064479, 0.364480028064479, 0.364480028064479, 0.20884887093161486, 0.20884887093161486, 0.20884887093161486, 0.3303890925167955, 0.3303890925167955, 0.3303890925167955, 0.26135180789114476, 0.26135180789114476, 0.26135180789114476, 0.2519504593969849, 0.2519504593969849, 0.2519504593969849, 0.16897471499992556, 0.16897471499992556, 0.16897471499992556, 0.2465660873574672, 0.2465660873574672, 0.2465660873574672, 0.2576137876827803, 0.2576137876827803, 0.2576137876827803, 0.22959528611487234, 0.22959528611487234, 0.22959528611487234, 0.23865870072637219, 0.23865870072637219, 0.23865870072637219, 0.20993141102735735, 0.20993141102735735, 0.20993141102735735, 0.2034287197867093, 0.2034287197867093, 0.2034287197867093, 0.918524325206423, 0.918524325206423, 0.918524325206423, 0.958012284847216, 0.958012284847216, 0.958012284847216, 0.15360285380551608, 0.15360285380551608, 0.15360285380551608, 0.15742155680945924, 0.15742155680945924, 0.15742155680945924, 0.21398018829993715, 0.21398018829993715, 0.21398018829993715, 0.10553651387040064, 0.10553651387040064, 0.10553651387040064, 0.24763437935375432, 0.24763437935375432, 0.24763437935375432, 0.18077518446543583, 0.18077518446543583, 0.18077518446543583, 0.18585277965247116, 0.18585277965247116, 0.18585277965247116, 0.09806271430026814, 0.09806271430026814, 0.09806271430026814, 0.10037595832502944, 0.10037595832502944, 0.10037595832502944, 0.09054199190850576, 0.09054199190850576, 0.09054199190850576]}, "mutation_prompt": null}
{"id": "111921c1-847a-4948-ba3e-3cd304931611", "solution": "import numpy as np\n\nclass QPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n    \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "QPSO_AVC", "description": "Quantum-inspired Particle Swarm Optimization with Adaptive Velocity Collapse (QPSO-AVC) utilizes quantum principles and a dynamic collapse mechanism to guide particles to promising regions for enhanced convergence and exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9497398178127768, 0.9497398178127768, 0.9497398178127768, 0.9527214785383232, 0.9527214785383232, 0.9527214785383232, 0.9423901951094359, 0.9423901951094359, 0.9423901951094359, 0.9238245139827501, 0.9238245139827501, 0.9238245139827501, 0.8917783801740591, 0.8917783801740591, 0.8917783801740591, 0.9019283121320599, 0.9019283121320599, 0.9019283121320599, 0.16752277231861046, 0.16752277231861046, 0.16752277231861046, 0.12231362793110767, 0.12231362793110767, 0.12231362793110767, 0.05766460089001335, 0.05766460089001335, 0.05766460089001335, 0.06270661927848087, 0.06270661927848087, 0.06270661927848087, 0.14100254222937003, 0.14100254222937003, 0.14100254222937003, 0.12586627285100604, 0.12586627285100604, 0.12586627285100604, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.7496129841261723, 0.7496129841261723, 0.7496129841261723, 0.4539240311996291, 0.4539240311996291, 0.4539240311996291, 0.7156128214635327, 0.7156128214635327, 0.7156128214635327, 0.3230998734271616, 0.3230998734271616, 0.3230998734271616, 0.2830225451703775, 0.2830225451703775, 0.2830225451703775, 0.23676282404702775, 0.23676282404702775, 0.23676282404702775, 0.22148639432492556, 0.22148639432492556, 0.22148639432492556, 0.17161932416578507, 0.17161932416578507, 0.17161932416578507, 0.2076583009184506, 0.2076583009184506, 0.2076583009184506, 0.1981729991926967, 0.1981729991926967, 0.1981729991926967, 0.17384568648236198, 0.17384568648236198, 0.17384568648236198, 0.13257788663414194, 0.13257788663414194, 0.13257788663414194, 0.06923446877999906, 0.06923446877999906, 0.06923446877999906, 0.18646753939081828, 0.18646753939081828, 0.18646753939081828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1226697372663661, 0.1226697372663661, 0.1226697372663661, 0.06430339277829278, 0.06430339277829278, 0.06430339277829278, 0.10524370973454367, 0.10524370973454367, 0.10524370973454367, 0.24296479823848016, 0.24296479823848016, 0.24296479823848016, 0.14789917575353173, 0.14789917575353173, 0.14789917575353173, 0.08001729210901776, 0.08001729210901776, 0.08001729210901776, 0.17823564580312012, 0.17823564580312012, 0.17823564580312012, 0.13241456292357545, 0.13241456292357545, 0.13241456292357545, 0.22982394046933197, 0.22982394046933197, 0.22982394046933197, 0.5956493144445978, 0.5956493144445978, 0.5956493144445978, 0.5647188133705856, 0.5647188133705856, 0.5647188133705856, 0.553497832609967, 0.553497832609967, 0.553497832609967, 0.09563503011666652, 0.09563503011666652, 0.09563503011666652, 0.12542017097888725, 0.12542017097888725, 0.12542017097888725, 0.11563576335736703, 0.11563576335736703, 0.11563576335736703, 0.3536713880367892, 0.3536713880367892, 0.3536713880367892, 0.30994227849901723, 0.30994227849901723, 0.30994227849901723, 0.2889201453041982, 0.2889201453041982, 0.2889201453041982, 0.2340582105508796, 0.2340582105508796, 0.2340582105508796, 0.34984947698781266, 0.34984947698781266, 0.34984947698781266, 0.22820957586104307, 0.22820957586104307, 0.22820957586104307, 0.16616910722906086, 0.16616910722906086, 0.16616910722906086, 0.32001765388401515, 0.32001765388401515, 0.32001765388401515, 0.19841894700021578, 0.19841894700021578, 0.19841894700021578, 0.240869076513752, 0.240869076513752, 0.240869076513752, 0.2576002663947825, 0.2576002663947825, 0.2576002663947825, 0.22151754470724616, 0.22151754470724616, 0.22151754470724616, 0.19986319565213218, 0.19986319565213218, 0.19986319565213218, 0.19902062198263948, 0.19902062198263948, 0.19902062198263948, 0.19131331426879994, 0.19131331426879994, 0.19131331426879994, 0.1892343248286642, 0.1892343248286642, 0.1892343248286642, 0.9472122062687006, 0.9472122062687006, 0.9472122062687006, 0.1531402615081614, 0.1531402615081614, 0.1531402615081614, 0.5429894864067877, 0.5429894864067877, 0.5429894864067877, 0.4315120412713762, 0.4315120412713762, 0.4315120412713762, 0.10556203080068971, 0.10556203080068971, 0.10556203080068971, 0.19745093690842586, 0.19745093690842586, 0.19745093690842586, 0.2154618200794003, 0.2154618200794003, 0.2154618200794003, 0.18007857588404919, 0.18007857588404919, 0.18007857588404919, 0.09373295552786476, 0.09373295552786476, 0.09373295552786476, 0.09507438048566041, 0.09507438048566041, 0.09507438048566041, 0.0847045572008639, 0.0847045572008639, 0.0847045572008639]}, "mutation_prompt": null}
{"id": "f80ad3f1-128b-4bfd-9e04-f7fe7e835d57", "solution": "import numpy as np\n\nclass QPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n    \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "QPSO_AVC", "description": "Quantum-inspired Particle Swarm Optimization with Adaptive Velocity Collapse (QPSO-AVC) utilizes quantum principles and a dynamic collapse mechanism to guide particles to promising regions for enhanced convergence and exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9497398178127768, 0.9497398178127768, 0.9497398178127768, 0.9527214785383232, 0.9527214785383232, 0.9527214785383232, 0.9423901951094359, 0.9423901951094359, 0.9423901951094359, 0.9238245139827501, 0.9238245139827501, 0.9238245139827501, 0.8917783801740591, 0.8917783801740591, 0.8917783801740591, 0.9019283121320599, 0.9019283121320599, 0.9019283121320599, 0.16752277231861046, 0.16752277231861046, 0.16752277231861046, 0.12231362793110767, 0.12231362793110767, 0.12231362793110767, 0.05766460089001335, 0.05766460089001335, 0.05766460089001335, 0.06270661927848087, 0.06270661927848087, 0.06270661927848087, 0.14100254222937003, 0.14100254222937003, 0.14100254222937003, 0.12586627285100604, 0.12586627285100604, 0.12586627285100604, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.7496129841261723, 0.7496129841261723, 0.7496129841261723, 0.4539240311996291, 0.4539240311996291, 0.4539240311996291, 0.7156128214635327, 0.7156128214635327, 0.7156128214635327, 0.3230998734271616, 0.3230998734271616, 0.3230998734271616, 0.2830225451703775, 0.2830225451703775, 0.2830225451703775, 0.23676282404702775, 0.23676282404702775, 0.23676282404702775, 0.22148639432492556, 0.22148639432492556, 0.22148639432492556, 0.17161932416578507, 0.17161932416578507, 0.17161932416578507, 0.2076583009184506, 0.2076583009184506, 0.2076583009184506, 0.1981729991926967, 0.1981729991926967, 0.1981729991926967, 0.17384568648236198, 0.17384568648236198, 0.17384568648236198, 0.13257788663414194, 0.13257788663414194, 0.13257788663414194, 0.06923446877999906, 0.06923446877999906, 0.06923446877999906, 0.18646753939081828, 0.18646753939081828, 0.18646753939081828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1226697372663661, 0.1226697372663661, 0.1226697372663661, 0.06430339277829278, 0.06430339277829278, 0.06430339277829278, 0.10524370973454367, 0.10524370973454367, 0.10524370973454367, 0.24296479823848016, 0.24296479823848016, 0.24296479823848016, 0.14789917575353173, 0.14789917575353173, 0.14789917575353173, 0.08001729210901776, 0.08001729210901776, 0.08001729210901776, 0.17823564580312012, 0.17823564580312012, 0.17823564580312012, 0.13241456292357545, 0.13241456292357545, 0.13241456292357545, 0.22982394046933197, 0.22982394046933197, 0.22982394046933197, 0.5956493144445978, 0.5956493144445978, 0.5956493144445978, 0.5647188133705856, 0.5647188133705856, 0.5647188133705856, 0.553497832609967, 0.553497832609967, 0.553497832609967, 0.09563503011666652, 0.09563503011666652, 0.09563503011666652, 0.12542017097888725, 0.12542017097888725, 0.12542017097888725, 0.11563576335736703, 0.11563576335736703, 0.11563576335736703, 0.3536713880367892, 0.3536713880367892, 0.3536713880367892, 0.30994227849901723, 0.30994227849901723, 0.30994227849901723, 0.2889201453041982, 0.2889201453041982, 0.2889201453041982, 0.2340582105508796, 0.2340582105508796, 0.2340582105508796, 0.34984947698781266, 0.34984947698781266, 0.34984947698781266, 0.22820957586104307, 0.22820957586104307, 0.22820957586104307, 0.16616910722906086, 0.16616910722906086, 0.16616910722906086, 0.32001765388401515, 0.32001765388401515, 0.32001765388401515, 0.19841894700021578, 0.19841894700021578, 0.19841894700021578, 0.240869076513752, 0.240869076513752, 0.240869076513752, 0.2576002663947825, 0.2576002663947825, 0.2576002663947825, 0.22151754470724616, 0.22151754470724616, 0.22151754470724616, 0.19986319565213218, 0.19986319565213218, 0.19986319565213218, 0.19902062198263948, 0.19902062198263948, 0.19902062198263948, 0.19131331426879994, 0.19131331426879994, 0.19131331426879994, 0.1892343248286642, 0.1892343248286642, 0.1892343248286642, 0.9472122062687006, 0.9472122062687006, 0.9472122062687006, 0.1531402615081614, 0.1531402615081614, 0.1531402615081614, 0.5429894864067877, 0.5429894864067877, 0.5429894864067877, 0.4315120412713762, 0.4315120412713762, 0.4315120412713762, 0.10556203080068971, 0.10556203080068971, 0.10556203080068971, 0.19745093690842586, 0.19745093690842586, 0.19745093690842586, 0.2154618200794003, 0.2154618200794003, 0.2154618200794003, 0.18007857588404919, 0.18007857588404919, 0.18007857588404919, 0.09373295552786476, 0.09373295552786476, 0.09373295552786476, 0.09507438048566041, 0.09507438048566041, 0.09507438048566041, 0.0847045572008639, 0.0847045572008639, 0.0847045572008639]}, "mutation_prompt": null}
{"id": "d7e62dc7-79be-44bb-8a43-9f8cd9c88f07", "solution": "import numpy as np\n\nclass AQPSO_DLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.local_search_prob = 0.3\n        self.adaptive_factor = 0.05  # Adaptive refinement factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Introduce Dual Local Search: global and personal\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    if np.random.rand() < self.local_search_prob:\n                        local_positions = global_best_position + np.random.normal(0, self.adaptive_factor, self.dim)\n                    else:\n                        local_positions = personal_best_positions[np.random.randint(self.pop_size)] + np.random.normal(0, self.adaptive_factor, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "AQPSO_DLS", "description": "Adaptive Quantum Particle Swarm Optimization with Dual Local Search (AQPSO-DLS) integrates adaptive quantum particle dynamics and dual strategy local search to enhance convergence speed and robustness by balancing exploration and exploitation.", "configspace": "", "generation": 38, "fitness": 0.31215160355053534, "feedback": "The algorithm AQPSO_DLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9498846554435046, 0.9498846554435046, 0.9498846554435046, 0.9439759153596782, 0.9439759153596782, 0.9439759153596782, 0.9526828489686334, 0.9526828489686334, 0.9526828489686334, 0.9024700962380697, 0.9024700962380697, 0.9024700962380697, 0.9032222959231018, 0.9032222959231018, 0.9032222959231018, 0.9043817583105564, 0.9043817583105564, 0.9043817583105564, 0.07998372963185807, 0.07998372963185807, 0.07998372963185807, 0.16597061919691203, 0.16597061919691203, 0.16597061919691203, 0.14491940842256923, 0.14491940842256923, 0.14491940842256923, 0.06345831135219637, 0.06345831135219637, 0.06345831135219637, 0.14262141011289264, 0.14262141011289264, 0.14262141011289264, 0.13426419112145815, 0.13426419112145815, 0.13426419112145815, 0.9957986674314826, 0.9957986674314826, 0.9957986674314826, 0.9958896347103857, 0.9958896347103857, 0.9958896347103857, 0.995832210237381, 0.995832210237381, 0.995832210237381, 0.7110590679444114, 0.7110590679444114, 0.7110590679444114, 0.7150431418761873, 0.7150431418761873, 0.7150431418761873, 0.701492558672919, 0.701492558672919, 0.701492558672919, 0.20754663297324316, 0.20754663297324316, 0.20754663297324316, 0.21396206107022686, 0.21396206107022686, 0.21396206107022686, 0.2095662924435484, 0.2095662924435484, 0.2095662924435484, 0.20754958888822783, 0.20754958888822783, 0.20754958888822783, 0.18521501578437427, 0.18521501578437427, 0.18521501578437427, 0.21230512472114915, 0.21230512472114915, 0.21230512472114915, 0.21798441182540673, 0.21798441182540673, 0.21798441182540673, 0.23506600608365424, 0.23506600608365424, 0.23506600608365424, 0.24444637590989127, 0.24444637590989127, 0.24444637590989127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02076516926995642, 0.02076516926995642, 0.02076516926995642, 0.10520722435841434, 0.10520722435841434, 0.10520722435841434, 0.056394287906654794, 0.056394287906654794, 0.056394287906654794, 0.12183344934957552, 0.12183344934957552, 0.12183344934957552, 0.07773709516922844, 0.07773709516922844, 0.07773709516922844, 0.13297670057166, 0.13297670057166, 0.13297670057166, 0.25498056436358085, 0.25498056436358085, 0.25498056436358085, 0.11969711323737042, 0.11969711323737042, 0.11969711323737042, 0.0925596882353249, 0.0925596882353249, 0.0925596882353249, 0.11456974598007386, 0.11456974598007386, 0.11456974598007386, 0.5350561753722807, 0.5350561753722807, 0.5350561753722807, 0.5324304622116194, 0.5324304622116194, 0.5324304622116194, 0.540101370118204, 0.540101370118204, 0.540101370118204, 0.12691179297928978, 0.12691179297928978, 0.12691179297928978, 0.1638470544042202, 0.1638470544042202, 0.1638470544042202, 0.11433119257888902, 0.11433119257888902, 0.11433119257888902, 0.33187878099765733, 0.33187878099765733, 0.33187878099765733, 0.1891756053486945, 0.1891756053486945, 0.1891756053486945, 0.16330117223211915, 0.16330117223211915, 0.16330117223211915, 0.23774067786659348, 0.23774067786659348, 0.23774067786659348, 0.20734194909087367, 0.20734194909087367, 0.20734194909087367, 0.25529626651070325, 0.25529626651070325, 0.25529626651070325, 0.17182565044974962, 0.17182565044974962, 0.17182565044974962, 0.22140939763648426, 0.22140939763648426, 0.22140939763648426, 0.14676376183878315, 0.14676376183878315, 0.14676376183878315, 0.20911281111627122, 0.20911281111627122, 0.20911281111627122, 0.2864356348212159, 0.2864356348212159, 0.2864356348212159, 0.23853906164163796, 0.23853906164163796, 0.23853906164163796, 0.24415499879629166, 0.24415499879629166, 0.24415499879629166, 0.20061663627504778, 0.20061663627504778, 0.20061663627504778, 0.19931633089099765, 0.19931633089099765, 0.19931633089099765, 0.1894370102028321, 0.1894370102028321, 0.1894370102028321, 0.17384743092315946, 0.17384743092315946, 0.17384743092315946, 0.16859780003607228, 0.16859780003607228, 0.16859780003607228, 0.9190107047143915, 0.9190107047143915, 0.9190107047143915, 0.21291789567762553, 0.21291789567762553, 0.21291789567762553, 0.10539575293760572, 0.10539575293760572, 0.10539575293760572, 0.1910237769576283, 0.1910237769576283, 0.1910237769576283, 0.1941471737909064, 0.1941471737909064, 0.1941471737909064, 0.22182621246947476, 0.22182621246947476, 0.22182621246947476, 0.10581903524107328, 0.10581903524107328, 0.10581903524107328, 0.14663232499617496, 0.14663232499617496, 0.14663232499617496, 0.09716048541821398, 0.09716048541821398, 0.09716048541821398]}, "mutation_prompt": null}
{"id": "29d22af5-17a7-4df5-aedb-d4fadea31333", "solution": "import numpy as np\n\nclass QPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n    \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "QPSO_AVC", "description": "Quantum-inspired Particle Swarm Optimization with Adaptive Velocity Collapse (QPSO-AVC) utilizes quantum principles and a dynamic collapse mechanism to guide particles to promising regions for enhanced convergence and exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9497398178127768, 0.9497398178127768, 0.9497398178127768, 0.9527214785383232, 0.9527214785383232, 0.9527214785383232, 0.9423901951094359, 0.9423901951094359, 0.9423901951094359, 0.9238245139827501, 0.9238245139827501, 0.9238245139827501, 0.8917783801740591, 0.8917783801740591, 0.8917783801740591, 0.9019283121320599, 0.9019283121320599, 0.9019283121320599, 0.16752277231861046, 0.16752277231861046, 0.16752277231861046, 0.12231362793110767, 0.12231362793110767, 0.12231362793110767, 0.05766460089001335, 0.05766460089001335, 0.05766460089001335, 0.06270661927848087, 0.06270661927848087, 0.06270661927848087, 0.14100254222937003, 0.14100254222937003, 0.14100254222937003, 0.12586627285100604, 0.12586627285100604, 0.12586627285100604, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.7496129841261723, 0.7496129841261723, 0.7496129841261723, 0.4539240311996291, 0.4539240311996291, 0.4539240311996291, 0.7156128214635327, 0.7156128214635327, 0.7156128214635327, 0.3230998734271616, 0.3230998734271616, 0.3230998734271616, 0.2830225451703775, 0.2830225451703775, 0.2830225451703775, 0.23676282404702775, 0.23676282404702775, 0.23676282404702775, 0.22148639432492556, 0.22148639432492556, 0.22148639432492556, 0.17161932416578507, 0.17161932416578507, 0.17161932416578507, 0.2076583009184506, 0.2076583009184506, 0.2076583009184506, 0.1981729991926967, 0.1981729991926967, 0.1981729991926967, 0.17384568648236198, 0.17384568648236198, 0.17384568648236198, 0.13257788663414194, 0.13257788663414194, 0.13257788663414194, 0.06923446877999906, 0.06923446877999906, 0.06923446877999906, 0.18646753939081828, 0.18646753939081828, 0.18646753939081828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1226697372663661, 0.1226697372663661, 0.1226697372663661, 0.06430339277829278, 0.06430339277829278, 0.06430339277829278, 0.10524370973454367, 0.10524370973454367, 0.10524370973454367, 0.24296479823848016, 0.24296479823848016, 0.24296479823848016, 0.14789917575353173, 0.14789917575353173, 0.14789917575353173, 0.08001729210901776, 0.08001729210901776, 0.08001729210901776, 0.17823564580312012, 0.17823564580312012, 0.17823564580312012, 0.13241456292357545, 0.13241456292357545, 0.13241456292357545, 0.22982394046933197, 0.22982394046933197, 0.22982394046933197, 0.5956493144445978, 0.5956493144445978, 0.5956493144445978, 0.5647188133705856, 0.5647188133705856, 0.5647188133705856, 0.553497832609967, 0.553497832609967, 0.553497832609967, 0.09563503011666652, 0.09563503011666652, 0.09563503011666652, 0.12542017097888725, 0.12542017097888725, 0.12542017097888725, 0.11563576335736703, 0.11563576335736703, 0.11563576335736703, 0.3536713880367892, 0.3536713880367892, 0.3536713880367892, 0.30994227849901723, 0.30994227849901723, 0.30994227849901723, 0.2889201453041982, 0.2889201453041982, 0.2889201453041982, 0.2340582105508796, 0.2340582105508796, 0.2340582105508796, 0.34984947698781266, 0.34984947698781266, 0.34984947698781266, 0.22820957586104307, 0.22820957586104307, 0.22820957586104307, 0.16616910722906086, 0.16616910722906086, 0.16616910722906086, 0.32001765388401515, 0.32001765388401515, 0.32001765388401515, 0.19841894700021578, 0.19841894700021578, 0.19841894700021578, 0.240869076513752, 0.240869076513752, 0.240869076513752, 0.2576002663947825, 0.2576002663947825, 0.2576002663947825, 0.22151754470724616, 0.22151754470724616, 0.22151754470724616, 0.19986319565213218, 0.19986319565213218, 0.19986319565213218, 0.19902062198263948, 0.19902062198263948, 0.19902062198263948, 0.19131331426879994, 0.19131331426879994, 0.19131331426879994, 0.1892343248286642, 0.1892343248286642, 0.1892343248286642, 0.9472122062687006, 0.9472122062687006, 0.9472122062687006, 0.1531402615081614, 0.1531402615081614, 0.1531402615081614, 0.5429894864067877, 0.5429894864067877, 0.5429894864067877, 0.4315120412713762, 0.4315120412713762, 0.4315120412713762, 0.10556203080068971, 0.10556203080068971, 0.10556203080068971, 0.19745093690842586, 0.19745093690842586, 0.19745093690842586, 0.2154618200794003, 0.2154618200794003, 0.2154618200794003, 0.18007857588404919, 0.18007857588404919, 0.18007857588404919, 0.09373295552786476, 0.09373295552786476, 0.09373295552786476, 0.09507438048566041, 0.09507438048566041, 0.09507438048566041, 0.0847045572008639, 0.0847045572008639, 0.0847045572008639]}, "mutation_prompt": null}
{"id": "e45d1a38-aacc-4af0-970e-5a5cdb15e22a", "solution": "import numpy as np\n\nclass QPSO_AVC_SM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n        self.mutation_rate = 0.05  # Probability of mutation\n        self.mutation_scale = 0.1  # Scale of mutation effect\n    \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Introduce mutation step\n                if np.random.rand() < self.mutation_rate:\n                    mutation = self.mutation_scale * np.random.randn(self.dim)\n                    positions[i] = np.clip(positions[i] + mutation, self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "QPSO_AVC_SM", "description": "Quantum-inspired Particle Swarm Optimization with Adaptive Velocity Collapse and Strategic Mutation (QPSO-AVC-SM) enhances exploration through periodic strategic mutations and dynamic parameter adjustment, improving convergence and robustness.", "configspace": "", "generation": 40, "fitness": 0.31581876546510973, "feedback": "The algorithm QPSO_AVC_SM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.30.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9208992223712207, 0.9208992223712207, 0.9208992223712207, 0.9513611456617854, 0.9513611456617854, 0.9513611456617854, 0.9496310950800347, 0.9496310950800347, 0.9496310950800347, 0.8602583505015119, 0.8602583505015119, 0.8602583505015119, 0.8283185086347751, 0.8283185086347751, 0.8283185086347751, 0.8417939213140266, 0.8417939213140266, 0.8417939213140266, 0.1738217115551406, 0.1738217115551406, 0.1738217115551406, 0.16701680721431056, 0.16701680721431056, 0.16701680721431056, 0.10040348505660857, 0.10040348505660857, 0.10040348505660857, 0.128684645067478, 0.128684645067478, 0.128684645067478, 0.15232048397718567, 0.15232048397718567, 0.15232048397718567, 0.12433367777935111, 0.12433367777935111, 0.12433367777935111, 0.9960128507408142, 0.9960128507408142, 0.9960128507408142, 0.9963340416956012, 0.9963340416956012, 0.9963340416956012, 0.9966800626685169, 0.9966800626685169, 0.9966800626685169, 0.6573534355858068, 0.6573534355858068, 0.6573534355858068, 0.5342048710464946, 0.5342048710464946, 0.5342048710464946, 0.4743183147223906, 0.4743183147223906, 0.4743183147223906, 0.23097116556169361, 0.23097116556169361, 0.23097116556169361, 0.3848817583452282, 0.3848817583452282, 0.3848817583452282, 0.1496391268479378, 0.1496391268479378, 0.1496391268479378, 0.16990803653496678, 0.16990803653496678, 0.16990803653496678, 0.1836508972157922, 0.1836508972157922, 0.1836508972157922, 0.18082693823001428, 0.18082693823001428, 0.18082693823001428, 0.13038394643718132, 0.13038394643718132, 0.13038394643718132, 0.13291312338700723, 0.13291312338700723, 0.13291312338700723, 0.27037313864840606, 0.27037313864840606, 0.27037313864840606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07269963357505294, 0.07269963357505294, 0.07269963357505294, 0.09980220866573641, 0.09980220866573641, 0.09980220866573641, 0.14882409608617508, 0.14882409608617508, 0.14882409608617508, 0.18290435190218146, 0.18290435190218146, 0.18290435190218146, 0.08492130496906014, 0.08492130496906014, 0.08492130496906014, 0.10895960294076068, 0.10895960294076068, 0.10895960294076068, 0.05654595789450212, 0.05654595789450212, 0.05654595789450212, 0.06057499891094709, 0.06057499891094709, 0.06057499891094709, 0.12195803137493533, 0.12195803137493533, 0.12195803137493533, 0.502556999689099, 0.502556999689099, 0.502556999689099, 0.560169790732997, 0.560169790732997, 0.560169790732997, 0.5505188124979279, 0.5505188124979279, 0.5505188124979279, 0.10149386536662552, 0.10149386536662552, 0.10149386536662552, 0.11568869406792781, 0.11568869406792781, 0.11568869406792781, 0.12324389419194726, 0.12324389419194726, 0.12324389419194726, 0.17774678997683546, 0.17774678997683546, 0.17774678997683546, 0.25607548014567316, 0.25607548014567316, 0.25607548014567316, 0.3018402614167911, 0.3018402614167911, 0.3018402614167911, 0.33379617393406547, 0.33379617393406547, 0.33379617393406547, 0.2004941676123192, 0.2004941676123192, 0.2004941676123192, 0.2716768632251295, 0.2716768632251295, 0.2716768632251295, 0.11520391801547625, 0.11520391801547625, 0.11520391801547625, 0.27012401976777023, 0.27012401976777023, 0.27012401976777023, 0.23105861500731895, 0.23105861500731895, 0.23105861500731895, 0.2566286282468443, 0.2566286282468443, 0.2566286282468443, 0.2377880065443726, 0.2377880065443726, 0.2377880065443726, 0.22330016810876907, 0.22330016810876907, 0.22330016810876907, 0.1995123599290356, 0.1995123599290356, 0.1995123599290356, 0.2157615907294016, 0.2157615907294016, 0.2157615907294016, 0.18705628539450603, 0.18705628539450603, 0.18705628539450603, 0.10567139115542268, 0.10567139115542268, 0.10567139115542268, 0.9489613717251857, 0.9489613717251857, 0.9489613717251857, 0.9514543311766792, 0.9514543311766792, 0.9514543311766792, 0.08342655120652653, 0.08342655120652653, 0.08342655120652653, 0.5874459404539256, 0.5874459404539256, 0.5874459404539256, 0.10540046466081243, 0.10540046466081243, 0.10540046466081243, 0.18903754265148087, 0.18903754265148087, 0.18903754265148087, 0.20719699952895798, 0.20719699952895798, 0.20719699952895798, 0.2019623410742345, 0.2019623410742345, 0.2019623410742345, 0.09445944902590198, 0.09445944902590198, 0.09445944902590198, 0.10943145242927332, 0.10943145242927332, 0.10943145242927332, 0.097982945598034, 0.097982945598034, 0.097982945598034]}, "mutation_prompt": null}
{"id": "5ea6db88-e399-4cbc-9e0b-53b2c7c7504d", "solution": "import numpy as np\n\nclass QPSO_DSA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.min_inertia = 0.4\n        self.max_inertia = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            diversity = np.std(positions, axis=0).mean()\n            self.inertia_weight = self.min_inertia + (self.max_inertia - self.min_inertia) * (1 - diversity / (self.upper_bound - self.lower_bound))\n            self.quantum_prob = 0.2 * (1 - diversity / (self.upper_bound - self.lower_bound))\n\n            for i in range(self.pop_size):\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "QPSO_DSA", "description": "Quantum Particle Swarm Optimization with Dynamic Strategy Adaptation (QPSO-DSA) enhances convergence by adaptively tuning inertia, coefficients, and quantum probabilities based on the swarm's diversity and convergence trends.", "configspace": "", "generation": 41, "fitness": 0.2195113710608778, "feedback": "The algorithm QPSO_DSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.43025722084387996, 0.43025722084387996, 0.43025722084387996, 0.44950369543827606, 0.44950369543827606, 0.44950369543827606, 0.49878297308837705, 0.49878297308837705, 0.49878297308837705, 0.08861159542386665, 0.08861159542386665, 0.08861159542386665, 0.09115458917166375, 0.09115458917166375, 0.09115458917166375, 0.07201170865840034, 0.07201170865840034, 0.07201170865840034, 0.10262030902704722, 0.10262030902704722, 0.10262030902704722, 0.11454247882446666, 0.11454247882446666, 0.11454247882446666, 0.09434881848421317, 0.09434881848421317, 0.09434881848421317, 0.08818757043944392, 0.08818757043944392, 0.08818757043944392, 0.07923642065654024, 0.07923642065654024, 0.07923642065654024, 0.07520242780878705, 0.07520242780878705, 0.07520242780878705, 0.9940261626029283, 0.9940261626029283, 0.9940261626029283, 0.9957720685180783, 0.9957720685180783, 0.9957720685180783, 0.994750332200983, 0.994750332200983, 0.994750332200983, 0.24232231319561903, 0.24232231319561903, 0.24232231319561903, 0.2602576702849082, 0.2602576702849082, 0.2602576702849082, 0.28333311384859694, 0.28333311384859694, 0.28333311384859694, 0.30765617415148605, 0.30765617415148605, 0.30765617415148605, 0.30158219901648253, 0.30158219901648253, 0.30158219901648253, 0.23996044554903606, 0.23996044554903606, 0.23996044554903606, 0.16975942242815178, 0.16975942242815178, 0.16975942242815178, 0.11866339315032715, 0.11866339315032715, 0.11866339315032715, 0.1573782544979967, 0.1573782544979967, 0.1573782544979967, 0.14249108675336952, 0.14249108675336952, 0.14249108675336952, 0.13199235558396671, 0.13199235558396671, 0.13199235558396671, 0.13459513377478194, 0.13459513377478194, 0.13459513377478194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013696822030278777, 0.013696822030278777, 0.013696822030278777, 0.13221680873886033, 0.13221680873886033, 0.13221680873886033, 0.04946572958688755, 0.04946572958688755, 0.04946572958688755, 0.10149245007940666, 0.10149245007940666, 0.10149245007940666, 0.029926333669848315, 0.029926333669848315, 0.029926333669848315, 0.021014830565664333, 0.021014830565664333, 0.021014830565664333, 0.021985216074853042, 0.021985216074853042, 0.021985216074853042, 0.060937335742486165, 0.060937335742486165, 0.060937335742486165, 0.11891185857262665, 0.11891185857262665, 0.11891185857262665, 0.09390241906404895, 0.09390241906404895, 0.09390241906404895, 0.38904101002859637, 0.38904101002859637, 0.38904101002859637, 0.4530341090184944, 0.4530341090184944, 0.4530341090184944, 0.41430512971040745, 0.41430512971040745, 0.41430512971040745, 0.10736693968927014, 0.10736693968927014, 0.10736693968927014, 0.11315736985360658, 0.11315736985360658, 0.11315736985360658, 0.08900547577113249, 0.08900547577113249, 0.08900547577113249, 0.20076888858463648, 0.20076888858463648, 0.20076888858463648, 0.20972273631263216, 0.20972273631263216, 0.20972273631263216, 0.18903897765656297, 0.18903897765656297, 0.18903897765656297, 0.26450614299077735, 0.26450614299077735, 0.26450614299077735, 0.2921446744165166, 0.2921446744165166, 0.2921446744165166, 0.2814234182912698, 0.2814234182912698, 0.2814234182912698, 0.18681932893105446, 0.18681932893105446, 0.18681932893105446, 0.19115671943875467, 0.19115671943875467, 0.19115671943875467, 0.19850952587685444, 0.19850952587685444, 0.19850952587685444, 0.21798544121308028, 0.21798544121308028, 0.21798544121308028, 0.2212738005728877, 0.2212738005728877, 0.2212738005728877, 0.19342495438537033, 0.19342495438537033, 0.19342495438537033, 0.18808920787639505, 0.18808920787639505, 0.18808920787639505, 0.20188652465844692, 0.20188652465844692, 0.20188652465844692, 0.17788438787766392, 0.17788438787766392, 0.17788438787766392, 0.18504570809087673, 0.18504570809087673, 0.18504570809087673, 0.5893570328364589, 0.5893570328364589, 0.5893570328364589, 0.1810344654034971, 0.1810344654034971, 0.1810344654034971, 0.5434160926056816, 0.5434160926056816, 0.5434160926056816, 0.21094015068062621, 0.21094015068062621, 0.21094015068062621, 0.1866206244533617, 0.1866206244533617, 0.1866206244533617, 0.18506828021533905, 0.18506828021533905, 0.18506828021533905, 0.1849301769821472, 0.1849301769821472, 0.1849301769821472, 0.18501813891062902, 0.18501813891062902, 0.18501813891062902, 0.09389124364234791, 0.09389124364234791, 0.09389124364234791, 0.08431898486214928, 0.08431898486214928, 0.08431898486214928, 0.09188331699904317, 0.09188331699904317, 0.09188331699904317]}, "mutation_prompt": null}
{"id": "0f5d527b-f631-4577-abce-20bdfd1cd9e0", "solution": "import numpy as np\n\nclass EnhancedQPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        \n        # Dynamic quantum probability starting lower\n        self.quantum_prob = 0.05  \n        self.quantum_prob_step = 0.05 / (0.5 * self.budget)  # Increase step\n        \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Dynamic Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Increase quantum probability gradually to enhance exploration\n            self.quantum_prob = min(0.5, self.quantum_prob + self.quantum_prob_step)\n\n            # Differential perturbation for diversity\n            if evals < self.budget:\n                diff_perturbation_factor = 0.8\n                for j in range(self.pop_size // 2):\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    a, b, c = personal_best_positions[indices]\n                    diff_vector = diff_perturbation_factor * (b - c)\n                    trial_position = np.clip(a + diff_vector, self.lower_bound, self.upper_bound)\n                    trial_score = func(trial_position)\n                    evals += 1\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_position\n\n        return global_best_score", "name": "EnhancedQPSO", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Dynamic Quantum Probability and Differential Perturbation integrates adaptive quantum behavior probability and differential mutation-like perturbation to improve convergence speed and solution diversity.", "configspace": "", "generation": 42, "fitness": 0.3120831382029323, "feedback": "The algorithm EnhancedQPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9314050537097749, 0.9314050537097749, 0.9314050537097749, 0.9373441330621587, 0.9373441330621587, 0.9373441330621587, 0.9525837859693655, 0.9525837859693655, 0.9525837859693655, 0.877822157713885, 0.877822157713885, 0.877822157713885, 0.8933196686033832, 0.8933196686033832, 0.8933196686033832, 0.8790796929835379, 0.8790796929835379, 0.8790796929835379, 0.14220529486460076, 0.14220529486460076, 0.14220529486460076, 0.16284466785055918, 0.16284466785055918, 0.16284466785055918, 0.8703661165138625, 0.8703661165138625, 0.8703661165138625, 0.09681080668589204, 0.09681080668589204, 0.09681080668589204, 0.12748095583618413, 0.12748095583618413, 0.12748095583618413, 0.14473330358840797, 0.14473330358840797, 0.14473330358840797, 0.9948258338336338, 0.9948258338336338, 0.9948258338336338, 0.9950618173840442, 0.9950618173840442, 0.9950618173840442, 0.9953986771385983, 0.9953986771385983, 0.9953986771385983, 0.5792327541659518, 0.5792327541659518, 0.5792327541659518, 0.6612909439538086, 0.6612909439538086, 0.6612909439538086, 0.08938904358283617, 0.08938904358283617, 0.08938904358283617, 0.23224856224983192, 0.23224856224983192, 0.23224856224983192, 0.19520421140560495, 0.19520421140560495, 0.19520421140560495, 0.12661255978308983, 0.12661255978308983, 0.12661255978308983, 0.12322502072476749, 0.12322502072476749, 0.12322502072476749, 0.1345433355605421, 0.1345433355605421, 0.1345433355605421, 0.21795047363465248, 0.21795047363465248, 0.21795047363465248, 0.18464623998579532, 0.18464623998579532, 0.18464623998579532, 0.17263088215713995, 0.17263088215713995, 0.17263088215713995, 0.22242599273326258, 0.22242599273326258, 0.22242599273326258, 0.015632877026374392, 0.015632877026374392, 0.015632877026374392, 0.008778799988364727, 0.008778799988364727, 0.008778799988364727, 0.02740288650041023, 0.02740288650041023, 0.02740288650041023, 0.09156344349490586, 0.09156344349490586, 0.09156344349490586, 0.1397890446211868, 0.1397890446211868, 0.1397890446211868, 0.1561694151314652, 0.1561694151314652, 0.1561694151314652, 0.07246313697380136, 0.07246313697380136, 0.07246313697380136, 0.08903809176229172, 0.08903809176229172, 0.08903809176229172, 0.1260376299098196, 0.1260376299098196, 0.1260376299098196, 0.044108524435788055, 0.044108524435788055, 0.044108524435788055, 0.02798182218181955, 0.02798182218181955, 0.02798182218181955, 0.10996463682597601, 0.10996463682597601, 0.10996463682597601, 0.6405224349974465, 0.6405224349974465, 0.6405224349974465, 0.6206072613724163, 0.6206072613724163, 0.6206072613724163, 0.5968732388024797, 0.5968732388024797, 0.5968732388024797, 0.11952717472554575, 0.11952717472554575, 0.11952717472554575, 0.07948804298678203, 0.07948804298678203, 0.07948804298678203, 0.11976673287429673, 0.11976673287429673, 0.11976673287429673, 0.1494604711888856, 0.1494604711888856, 0.1494604711888856, 0.21499801181295186, 0.21499801181295186, 0.21499801181295186, 0.20103585515352684, 0.20103585515352684, 0.20103585515352684, 0.38765862215296265, 0.38765862215296265, 0.38765862215296265, 0.3677494016806895, 0.3677494016806895, 0.3677494016806895, 0.4347803082671535, 0.4347803082671535, 0.4347803082671535, 0.17279797684597342, 0.17279797684597342, 0.17279797684597342, 0.21557819483381535, 0.21557819483381535, 0.21557819483381535, 0.25768750585887745, 0.25768750585887745, 0.25768750585887745, 0.18034277794204268, 0.18034277794204268, 0.18034277794204268, 0.1988560613698701, 0.1988560613698701, 0.1988560613698701, 0.20041531159750903, 0.20041531159750903, 0.20041531159750903, 0.21100884326915426, 0.21100884326915426, 0.21100884326915426, 0.21775063010943252, 0.21775063010943252, 0.21775063010943252, 0.28101442216948336, 0.28101442216948336, 0.28101442216948336, 0.18884134547277676, 0.18884134547277676, 0.18884134547277676, 0.9227700574358318, 0.9227700574358318, 0.9227700574358318, 0.15929875081628886, 0.15929875081628886, 0.15929875081628886, 0.1573717500186309, 0.1573717500186309, 0.1573717500186309, 0.21115409508118876, 0.21115409508118876, 0.21115409508118876, 0.21448806524439845, 0.21448806524439845, 0.21448806524439845, 0.1945335503465596, 0.1945335503465596, 0.1945335503465596, 0.1893945832872932, 0.1893945832872932, 0.1893945832872932, 0.2246779280545652, 0.2246779280545652, 0.2246779280545652, 0.08618370997608837, 0.08618370997608837, 0.08618370997608837, 0.11382844162135697, 0.11382844162135697, 0.11382844162135697, 0.0899120987174803, 0.0899120987174803, 0.0899120987174803]}, "mutation_prompt": null}
{"id": "9885324e-c874-4dcc-ba1e-d1b49ef64112", "solution": "import numpy as np\n\nclass QPSO_AVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n    \n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "QPSO_AVC", "description": "Quantum-inspired Particle Swarm Optimization with Adaptive Velocity Collapse (QPSO-AVC) utilizes quantum principles and a dynamic collapse mechanism to guide particles to promising regions for enhanced convergence and exploration-exploitation balance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9497398178127768, 0.9497398178127768, 0.9497398178127768, 0.9527214785383232, 0.9527214785383232, 0.9527214785383232, 0.9423901951094359, 0.9423901951094359, 0.9423901951094359, 0.9238245139827501, 0.9238245139827501, 0.9238245139827501, 0.8917783801740591, 0.8917783801740591, 0.8917783801740591, 0.9019283121320599, 0.9019283121320599, 0.9019283121320599, 0.16752277231861046, 0.16752277231861046, 0.16752277231861046, 0.12231362793110767, 0.12231362793110767, 0.12231362793110767, 0.05766460089001335, 0.05766460089001335, 0.05766460089001335, 0.06270661927848087, 0.06270661927848087, 0.06270661927848087, 0.14100254222937003, 0.14100254222937003, 0.14100254222937003, 0.12586627285100604, 0.12586627285100604, 0.12586627285100604, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.7496129841261723, 0.7496129841261723, 0.7496129841261723, 0.4539240311996291, 0.4539240311996291, 0.4539240311996291, 0.7156128214635327, 0.7156128214635327, 0.7156128214635327, 0.3230998734271616, 0.3230998734271616, 0.3230998734271616, 0.2830225451703775, 0.2830225451703775, 0.2830225451703775, 0.23676282404702775, 0.23676282404702775, 0.23676282404702775, 0.22148639432492556, 0.22148639432492556, 0.22148639432492556, 0.17161932416578507, 0.17161932416578507, 0.17161932416578507, 0.2076583009184506, 0.2076583009184506, 0.2076583009184506, 0.1981729991926967, 0.1981729991926967, 0.1981729991926967, 0.17384568648236198, 0.17384568648236198, 0.17384568648236198, 0.13257788663414194, 0.13257788663414194, 0.13257788663414194, 0.06923446877999906, 0.06923446877999906, 0.06923446877999906, 0.18646753939081828, 0.18646753939081828, 0.18646753939081828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1226697372663661, 0.1226697372663661, 0.1226697372663661, 0.06430339277829278, 0.06430339277829278, 0.06430339277829278, 0.10524370973454367, 0.10524370973454367, 0.10524370973454367, 0.24296479823848016, 0.24296479823848016, 0.24296479823848016, 0.14789917575353173, 0.14789917575353173, 0.14789917575353173, 0.08001729210901776, 0.08001729210901776, 0.08001729210901776, 0.17823564580312012, 0.17823564580312012, 0.17823564580312012, 0.13241456292357545, 0.13241456292357545, 0.13241456292357545, 0.22982394046933197, 0.22982394046933197, 0.22982394046933197, 0.5956493144445978, 0.5956493144445978, 0.5956493144445978, 0.5647188133705856, 0.5647188133705856, 0.5647188133705856, 0.553497832609967, 0.553497832609967, 0.553497832609967, 0.09563503011666652, 0.09563503011666652, 0.09563503011666652, 0.12542017097888725, 0.12542017097888725, 0.12542017097888725, 0.11563576335736703, 0.11563576335736703, 0.11563576335736703, 0.3536713880367892, 0.3536713880367892, 0.3536713880367892, 0.30994227849901723, 0.30994227849901723, 0.30994227849901723, 0.2889201453041982, 0.2889201453041982, 0.2889201453041982, 0.2340582105508796, 0.2340582105508796, 0.2340582105508796, 0.34984947698781266, 0.34984947698781266, 0.34984947698781266, 0.22820957586104307, 0.22820957586104307, 0.22820957586104307, 0.16616910722906086, 0.16616910722906086, 0.16616910722906086, 0.32001765388401515, 0.32001765388401515, 0.32001765388401515, 0.19841894700021578, 0.19841894700021578, 0.19841894700021578, 0.240869076513752, 0.240869076513752, 0.240869076513752, 0.2576002663947825, 0.2576002663947825, 0.2576002663947825, 0.22151754470724616, 0.22151754470724616, 0.22151754470724616, 0.19986319565213218, 0.19986319565213218, 0.19986319565213218, 0.19902062198263948, 0.19902062198263948, 0.19902062198263948, 0.19131331426879994, 0.19131331426879994, 0.19131331426879994, 0.1892343248286642, 0.1892343248286642, 0.1892343248286642, 0.9472122062687006, 0.9472122062687006, 0.9472122062687006, 0.1531402615081614, 0.1531402615081614, 0.1531402615081614, 0.5429894864067877, 0.5429894864067877, 0.5429894864067877, 0.4315120412713762, 0.4315120412713762, 0.4315120412713762, 0.10556203080068971, 0.10556203080068971, 0.10556203080068971, 0.19745093690842586, 0.19745093690842586, 0.19745093690842586, 0.2154618200794003, 0.2154618200794003, 0.2154618200794003, 0.18007857588404919, 0.18007857588404919, 0.18007857588404919, 0.09373295552786476, 0.09373295552786476, 0.09373295552786476, 0.09507438048566041, 0.09507438048566041, 0.09507438048566041, 0.0847045572008639, 0.0847045572008639, 0.0847045572008639]}, "mutation_prompt": null}
{"id": "116da01d-20af-4918-8da7-bb0debe8935f", "solution": "import numpy as np\n\nclass EQPSO_SAVC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.98  # Slightly faster damping\n        self.quantum_prob = 0.15  # Increased probability of quantum behavior\n        self.adaptive_threshold = 0.1  # Threshold to trigger adaptive behavior\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n\n                # Strategic Adaptive Velocity Control\n                if np.std(personal_best_scores) < self.adaptive_threshold:\n                    self.cognitive_coeff *= 1.05\n                    self.social_coeff *= 0.95\n                else:\n                    self.cognitive_coeff *= 0.95\n                    self.social_coeff *= 1.05\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-0.5, 0.5, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "EQPSO_SAVC", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Strategic Adaptive Velocity Control (EQPSO-SAVC) integrates strategic adaptive velocity adjustments and dynamic quantum behavior to improve convergence efficiency and robustness.", "configspace": "", "generation": 44, "fitness": 0.19493088374136291, "feedback": "The algorithm EQPSO_SAVC got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.4012828559138599, 0.4012828559138599, 0.4012828559138599, 0.34315624974576975, 0.34315624974576975, 0.34315624974576975, 0.39273314623585576, 0.39273314623585576, 0.39273314623585576, 0.0001253292876899348, 0.0001253292876899348, 0.0001253292876899348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08489447965430696, 0.08489447965430696, 0.08489447965430696, 0.07911236140543243, 0.07911236140543243, 0.07911236140543243, 0.0560185247657915, 0.0560185247657915, 0.0560185247657915, 0.05525094356396998, 0.05525094356396998, 0.05525094356396998, 0.08447187930865696, 0.08447187930865696, 0.08447187930865696, 0.07546600210087184, 0.07546600210087184, 0.07546600210087184, 0.9962308847978197, 0.9962308847978197, 0.9962308847978197, 0.9962170313585993, 0.9962170313585993, 0.9962170313585993, 0.9965506843283942, 0.9965506843283942, 0.9965506843283942, 0.24527218200849588, 0.24527218200849588, 0.24527218200849588, 0.22563693821160147, 0.22563693821160147, 0.22563693821160147, 0.22939280567712816, 0.22939280567712816, 0.22939280567712816, 0.2814009390305595, 0.2814009390305595, 0.2814009390305595, 0.2951224843409225, 0.2951224843409225, 0.2951224843409225, 0.15697688592911074, 0.15697688592911074, 0.15697688592911074, 0.14155372121168042, 0.14155372121168042, 0.14155372121168042, 0.09259190151147745, 0.09259190151147745, 0.09259190151147745, 0.16211762758889725, 0.16211762758889725, 0.16211762758889725, 0.14832249689175792, 0.14832249689175792, 0.14832249689175792, 0.14535993352658538, 0.14535993352658538, 0.14535993352658538, 0.13437570606879712, 0.13437570606879712, 0.13437570606879712, 0.009441518068020405, 0.009441518068020405, 0.009441518068020405, 0.00750540852527648, 0.00750540852527648, 0.00750540852527648, 0.004631510043149323, 0.004631510043149323, 0.004631510043149323, 0.10010755086697265, 0.10010755086697265, 0.10010755086697265, 0.06975118461759977, 0.06975118461759977, 0.06975118461759977, 0.09262144915799286, 0.09262144915799286, 0.09262144915799286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04623919019217215, 0.04623919019217215, 0.04623919019217215, 0.05667131642533463, 0.05667131642533463, 0.05667131642533463, 0.04957231230183168, 0.04957231230183168, 0.04957231230183168, 0.3524789963987741, 0.3524789963987741, 0.3524789963987741, 0.3852177761848279, 0.3852177761848279, 0.3852177761848279, 0.36311036506152217, 0.36311036506152217, 0.36311036506152217, 0.09459008659780643, 0.09459008659780643, 0.09459008659780643, 0.09370221383974697, 0.09370221383974697, 0.09370221383974697, 0.09487155018829196, 0.09487155018829196, 0.09487155018829196, 0.19447972482986775, 0.19447972482986775, 0.19447972482986775, 0.20338604051635045, 0.20338604051635045, 0.20338604051635045, 0.1806740438875568, 0.1806740438875568, 0.1806740438875568, 0.25949074600967137, 0.25949074600967137, 0.25949074600967137, 0.2374319044692551, 0.2374319044692551, 0.2374319044692551, 0.2066444046017053, 0.2066444046017053, 0.2066444046017053, 0.19596854962064303, 0.19596854962064303, 0.19596854962064303, 0.15824426114117318, 0.15824426114117318, 0.15824426114117318, 0.16204508001421525, 0.16204508001421525, 0.16204508001421525, 0.22794552871103446, 0.22794552871103446, 0.22794552871103446, 0.19572249376853113, 0.19572249376853113, 0.19572249376853113, 0.2191807700273457, 0.2191807700273457, 0.2191807700273457, 0.1809064932394484, 0.1809064932394484, 0.1809064932394484, 0.18569753990852078, 0.18569753990852078, 0.18569753990852078, 0.16415110412693446, 0.16415110412693446, 0.16415110412693446, 0.5297019273701828, 0.5297019273701828, 0.5297019273701828, 0.1725362536372237, 0.1725362536372237, 0.1725362536372237, 0.16936963434277985, 0.16936963434277985, 0.16936963434277985, 0.4898781022376073, 0.4898781022376073, 0.4898781022376073, 0.20247651159500113, 0.20247651159500113, 0.20247651159500113, 0.10522619656890075, 0.10522619656890075, 0.10522619656890075, 0.17432502525125892, 0.17432502525125892, 0.17432502525125892, 0.1986360331412541, 0.1986360331412541, 0.1986360331412541, 0.16240801548944162, 0.16240801548944162, 0.16240801548944162, 0.08391169768646234, 0.08391169768646234, 0.08391169768646234, 0.053903253295116915, 0.053903253295116915, 0.053903253295116915, 0.08003587095729636, 0.08003587095729636, 0.08003587095729636]}, "mutation_prompt": null}
{"id": "7182e05a-fb87-481b-8d52-e469c39287cb", "solution": "import numpy as np\n\nclass EQPSO_DALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.initial_quantum_prob = 0.1\n        self.min_quantum_prob = 0.01\n\n    def __call__(self, func):\n        np.random.seed(0)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n        quantum_prob = self.initial_quantum_prob\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                quantum_prob = max(self.min_quantum_prob, quantum_prob * self.damping)\n\n                if np.random.rand() < quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-1.0, 1.0, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            local_search_frequency = int(self.pop_size * (1 - quantum_prob))\n            for _ in range(local_search_frequency):\n                if evals >= self.budget:\n                    break\n                local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                local_score = func(local_positions)\n                evals += 1\n                if local_score < global_best_score:\n                    global_best_score = local_score\n                    global_best_position = local_positions\n\n        return global_best_score", "name": "EQPSO_DALS", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Dynamic Adaptive Local Search (EQPSO-DALS) integrates a dynamic quantum behavior switch and adaptive local search frequency to improve exploration-exploitation efficiency.", "configspace": "", "generation": 45, "fitness": 0.29416492456394283, "feedback": "The algorithm EQPSO_DALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9536855007885628, 0.9536855007885628, 0.9536855007885628, 0.9307381466847291, 0.9307381466847291, 0.9307381466847291, 0.9492977602780363, 0.9492977602780363, 0.9492977602780363, 0.8405811784580975, 0.8405811784580975, 0.8405811784580975, 0.8703500237457422, 0.8703500237457422, 0.8703500237457422, 0.8516912296994705, 0.8516912296994705, 0.8516912296994705, 0.11115887817047698, 0.11115887817047698, 0.11115887817047698, 0.1495344445030451, 0.1495344445030451, 0.1495344445030451, 0.15061565189798443, 0.15061565189798443, 0.15061565189798443, 0.0878885782283414, 0.0878885782283414, 0.0878885782283414, 0.14072722620474631, 0.14072722620474631, 0.14072722620474631, 0.14549816090318402, 0.14549816090318402, 0.14549816090318402, 0.9953924173979176, 0.9953924173979176, 0.9953924173979176, 0.9941959922902072, 0.9941959922902072, 0.9941959922902072, 0.9933059544262967, 0.9933059544262967, 0.9933059544262967, 0.5131676369595772, 0.5131676369595772, 0.5131676369595772, 0.4353669908362825, 0.4353669908362825, 0.4353669908362825, 0.3969776864189162, 0.3969776864189162, 0.3969776864189162, 0.2542464826552321, 0.2542464826552321, 0.2542464826552321, 0.2595480575741005, 0.2595480575741005, 0.2595480575741005, 0.1796841936675483, 0.1796841936675483, 0.1796841936675483, 0.17865186230882646, 0.17865186230882646, 0.17865186230882646, 0.1261576511631196, 0.1261576511631196, 0.1261576511631196, 0.225908501314118, 0.225908501314118, 0.225908501314118, 0.19346655917153055, 0.19346655917153055, 0.19346655917153055, 0.1353671617937282, 0.1353671617937282, 0.1353671617937282, 0.24517357760142522, 0.24517357760142522, 0.24517357760142522, 0.02483395423144863, 0.02483395423144863, 0.02483395423144863, 0.0022469083768462683, 0.0022469083768462683, 0.0022469083768462683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1114241466161473, 0.1114241466161473, 0.1114241466161473, 0.09097992088997453, 0.09097992088997453, 0.09097992088997453, 0.07000100184028268, 0.07000100184028268, 0.07000100184028268, 0.10985682802481767, 0.10985682802481767, 0.10985682802481767, 0.1088896615614916, 0.1088896615614916, 0.1088896615614916, 0.08024358572386248, 0.08024358572386248, 0.08024358572386248, 0.06344222886995343, 0.06344222886995343, 0.06344222886995343, 0.22989332021648912, 0.22989332021648912, 0.22989332021648912, 0.13391680497340863, 0.13391680497340863, 0.13391680497340863, 0.49215425331093976, 0.49215425331093976, 0.49215425331093976, 0.48797832183261247, 0.48797832183261247, 0.48797832183261247, 0.5184145782174225, 0.5184145782174225, 0.5184145782174225, 0.075196511157541, 0.075196511157541, 0.075196511157541, 0.1063034871932772, 0.1063034871932772, 0.1063034871932772, 0.10619034465918753, 0.10619034465918753, 0.10619034465918753, 0.2631710718542889, 0.2631710718542889, 0.2631710718542889, 0.2183366438187695, 0.2183366438187695, 0.2183366438187695, 0.28334291473874207, 0.28334291473874207, 0.28334291473874207, 0.22674487795289222, 0.22674487795289222, 0.22674487795289222, 0.29169511050836305, 0.29169511050836305, 0.29169511050836305, 0.39832223614836315, 0.39832223614836315, 0.39832223614836315, 0.11031727691369475, 0.11031727691369475, 0.11031727691369475, 0.2337853189823027, 0.2337853189823027, 0.2337853189823027, 0.21433410333647585, 0.21433410333647585, 0.21433410333647585, 0.20675263925292098, 0.20675263925292098, 0.20675263925292098, 0.20726205045267376, 0.20726205045267376, 0.20726205045267376, 0.22959351079083556, 0.22959351079083556, 0.22959351079083556, 0.18563538847644634, 0.18563538847644634, 0.18563538847644634, 0.20031552373027584, 0.20031552373027584, 0.20031552373027584, 0.19244514575046, 0.19244514575046, 0.19244514575046, 0.18973513929930763, 0.18973513929930763, 0.18973513929930763, 0.9347635183774553, 0.9347635183774553, 0.9347635183774553, 0.15407027158974174, 0.15407027158974174, 0.15407027158974174, 0.15773076245146112, 0.15773076245146112, 0.15773076245146112, 0.21356392284725312, 0.21356392284725312, 0.21356392284725312, 0.10560954713241699, 0.10560954713241699, 0.10560954713241699, 0.19824315779920876, 0.19824315779920876, 0.19824315779920876, 0.18486381844330546, 0.18486381844330546, 0.18486381844330546, 0.18299258614511205, 0.18299258614511205, 0.18299258614511205, 0.08043440258047652, 0.08043440258047652, 0.08043440258047652, 0.090929316486276, 0.090929316486276, 0.090929316486276, 0.1044409499074207, 0.1044409499074207, 0.1044409499074207]}, "mutation_prompt": null}
{"id": "2c6da47d-6bee-4fdf-a8ea-df5de4d7c45f", "solution": "import numpy as np\n\nclass E_QPSO_DQE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n        self.exploration_factor = 0.5 # Initial exploration range for quantum behavior\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Dynamic Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    exploration_radius = self.exploration_factor * (1 - evals / self.budget)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-exploration_radius, exploration_radius, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "E_QPSO_DQE", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Velocity and Dynamic Quantum Exploration for better convergence and exploration-exploitation balance.", "configspace": "", "generation": 46, "fitness": 0.3375784272802357, "feedback": "The algorithm E_QPSO_DQE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "b57bc53a-41e3-41c1-8e3d-f79c395a3e8f", "metadata": {"aucs": [0.9493649387902185, 0.9493649387902185, 0.9493649387902185, 0.9428551762307223, 0.9428551762307223, 0.9428551762307223, 0.9404965924745656, 0.9404965924745656, 0.9404965924745656, 0.9104187179659773, 0.9104187179659773, 0.9104187179659773, 0.9057315223380557, 0.9057315223380557, 0.9057315223380557, 0.8586508041827007, 0.8586508041827007, 0.8586508041827007, 0.09833806198485184, 0.09833806198485184, 0.09833806198485184, 0.11625825412996271, 0.11625825412996271, 0.11625825412996271, 0.056090373718351794, 0.056090373718351794, 0.056090373718351794, 0.1393958644424409, 0.1393958644424409, 0.1393958644424409, 0.15023921999063772, 0.15023921999063772, 0.15023921999063772, 0.11214450748912463, 0.11214450748912463, 0.11214450748912463, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.6943207761483507, 0.6943207761483507, 0.6943207761483507, 0.7818118035421218, 0.7818118035421218, 0.7818118035421218, 0.6540701805531297, 0.6540701805531297, 0.6540701805531297, 0.5157383421320583, 0.5157383421320583, 0.5157383421320583, 0.3141830562783925, 0.3141830562783925, 0.3141830562783925, 0.5701406830925866, 0.5701406830925866, 0.5701406830925866, 0.22400153009034052, 0.22400153009034052, 0.22400153009034052, 0.1848214213569921, 0.1848214213569921, 0.1848214213569921, 0.19135613849664157, 0.19135613849664157, 0.19135613849664157, 0.20593927468436024, 0.20593927468436024, 0.20593927468436024, 0.19239373428461903, 0.19239373428461903, 0.19239373428461903, 0.1326029188369866, 0.1326029188369866, 0.1326029188369866, 0.08746405234366006, 0.08746405234366006, 0.08746405234366006, 0.06831819842374498, 0.06831819842374498, 0.06831819842374498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13284605700707286, 0.13284605700707286, 0.13284605700707286, 0.08609958846512034, 0.08609958846512034, 0.08609958846512034, 0.131737498532714, 0.131737498532714, 0.131737498532714, 0.23859289835559572, 0.23859289835559572, 0.23859289835559572, 0.14772252513666428, 0.14772252513666428, 0.14772252513666428, 0.08034603136245, 0.08034603136245, 0.08034603136245, 0.1706306795654875, 0.1706306795654875, 0.1706306795654875, 0.11693165085622481, 0.11693165085622481, 0.11693165085622481, 0.22594892208719253, 0.22594892208719253, 0.22594892208719253, 0.6234281318661243, 0.6234281318661243, 0.6234281318661243, 0.5627542652354955, 0.5627542652354955, 0.5627542652354955, 0.5655534581536993, 0.5655534581536993, 0.5655534581536993, 0.12177728421555223, 0.12177728421555223, 0.12177728421555223, 0.1326477403140054, 0.1326477403140054, 0.1326477403140054, 0.11458384963317936, 0.11458384963317936, 0.11458384963317936, 0.22277736282411031, 0.22277736282411031, 0.22277736282411031, 0.29034906215286127, 0.29034906215286127, 0.29034906215286127, 0.2926274017016077, 0.2926274017016077, 0.2926274017016077, 0.15096435349720927, 0.15096435349720927, 0.15096435349720927, 0.30684296049265314, 0.30684296049265314, 0.30684296049265314, 0.2293225229867455, 0.2293225229867455, 0.2293225229867455, 0.1847254201071229, 0.1847254201071229, 0.1847254201071229, 0.2933885554043145, 0.2933885554043145, 0.2933885554043145, 0.18743815252572327, 0.18743815252572327, 0.18743815252572327, 0.22499030368460682, 0.22499030368460682, 0.22499030368460682, 0.21197442834117342, 0.21197442834117342, 0.21197442834117342, 0.23486315834207927, 0.23486315834207927, 0.23486315834207927, 0.34798837732623245, 0.34798837732623245, 0.34798837732623245, 0.18728518778764902, 0.18728518778764902, 0.18728518778764902, 0.19151569215704634, 0.19151569215704634, 0.19151569215704634, 0.18922591475562633, 0.18922591475562633, 0.18922591475562633, 0.9565769385955846, 0.9565769385955846, 0.9565769385955846, 0.15338487243214383, 0.15338487243214383, 0.15338487243214383, 0.5602156893642292, 0.5602156893642292, 0.5602156893642292, 0.4623732962549444, 0.4623732962549444, 0.4623732962549444, 0.10556172945670128, 0.10556172945670128, 0.10556172945670128, 0.20292318110212426, 0.20292318110212426, 0.20292318110212426, 0.18261401575753267, 0.18261401575753267, 0.18261401575753267, 0.20818977123444293, 0.20818977123444293, 0.20818977123444293, 0.10039664836183892, 0.10039664836183892, 0.10039664836183892, 0.1094886164489044, 0.1094886164489044, 0.1094886164489044, 0.08435376291682006, 0.08435376291682006, 0.08435376291682006]}, "mutation_prompt": null}
{"id": "0c3e6e36-0da5-45cb-8886-299e2e19952c", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\n\nclass HDRC_QPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.cluster_count = min(5, dim)\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    exploration_radius = self.exploration_factor * (1 - evals / self.budget)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-exploration_radius, exploration_radius, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                cluster_data = personal_best_positions[np.random.choice(self.pop_size, self.pop_size // 2)]\n                kmeans = KMeans(n_clusters=self.cluster_count, random_state=0).fit(cluster_data)\n                cluster_centers = kmeans.cluster_centers_\n\n                for center in cluster_centers:\n                    local_positions = center + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "HDRC_QPSO", "description": "Hybrid Dimensionality-Reduction and Clustering QPSO (HDRC-QPSO) with Adaptive Exploration-Exploitation Balance for effective search space reduction and enhanced convergence.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'sklearn'\").", "error": "ModuleNotFoundError(\"No module named 'sklearn'\")", "parent_id": "2c6da47d-6bee-4fdf-a8ea-df5de4d7c45f", "metadata": {}, "mutation_prompt": null}
{"id": "9515738c-345b-4e87-bfab-1764cb36f096", "solution": "import numpy as np\n\nclass E_QPSO_DQE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n        self.exploration_factor = 0.5 # Initial exploration range for quantum behavior\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Dynamic Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    exploration_radius = self.exploration_factor * (1 - evals / self.budget)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-exploration_radius, exploration_radius, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "E_QPSO_DQE", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Velocity and Dynamic Quantum Exploration for better convergence and exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2c6da47d-6bee-4fdf-a8ea-df5de4d7c45f", "metadata": {"aucs": [0.9493649387902185, 0.9493649387902185, 0.9493649387902185, 0.9428551762307223, 0.9428551762307223, 0.9428551762307223, 0.9404965924745656, 0.9404965924745656, 0.9404965924745656, 0.9104187179659773, 0.9104187179659773, 0.9104187179659773, 0.9057315223380557, 0.9057315223380557, 0.9057315223380557, 0.8586508041827007, 0.8586508041827007, 0.8586508041827007, 0.09833806198485184, 0.09833806198485184, 0.09833806198485184, 0.11625825412996271, 0.11625825412996271, 0.11625825412996271, 0.056090373718351794, 0.056090373718351794, 0.056090373718351794, 0.1393958644424409, 0.1393958644424409, 0.1393958644424409, 0.15023921999063772, 0.15023921999063772, 0.15023921999063772, 0.11214450748912463, 0.11214450748912463, 0.11214450748912463, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.6943207761483507, 0.6943207761483507, 0.6943207761483507, 0.7818118035421218, 0.7818118035421218, 0.7818118035421218, 0.6540701805531297, 0.6540701805531297, 0.6540701805531297, 0.5157383421320583, 0.5157383421320583, 0.5157383421320583, 0.3141830562783925, 0.3141830562783925, 0.3141830562783925, 0.5701406830925866, 0.5701406830925866, 0.5701406830925866, 0.22400153009034052, 0.22400153009034052, 0.22400153009034052, 0.1848214213569921, 0.1848214213569921, 0.1848214213569921, 0.19135613849664157, 0.19135613849664157, 0.19135613849664157, 0.20593927468436024, 0.20593927468436024, 0.20593927468436024, 0.19239373428461903, 0.19239373428461903, 0.19239373428461903, 0.1326029188369866, 0.1326029188369866, 0.1326029188369866, 0.08746405234366006, 0.08746405234366006, 0.08746405234366006, 0.06831819842374498, 0.06831819842374498, 0.06831819842374498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13284605700707286, 0.13284605700707286, 0.13284605700707286, 0.08609958846512034, 0.08609958846512034, 0.08609958846512034, 0.131737498532714, 0.131737498532714, 0.131737498532714, 0.23859289835559572, 0.23859289835559572, 0.23859289835559572, 0.14772252513666428, 0.14772252513666428, 0.14772252513666428, 0.08034603136245, 0.08034603136245, 0.08034603136245, 0.1706306795654875, 0.1706306795654875, 0.1706306795654875, 0.11693165085622481, 0.11693165085622481, 0.11693165085622481, 0.22594892208719253, 0.22594892208719253, 0.22594892208719253, 0.6234281318661243, 0.6234281318661243, 0.6234281318661243, 0.5627542652354955, 0.5627542652354955, 0.5627542652354955, 0.5655534581536993, 0.5655534581536993, 0.5655534581536993, 0.12177728421555223, 0.12177728421555223, 0.12177728421555223, 0.1326477403140054, 0.1326477403140054, 0.1326477403140054, 0.11458384963317936, 0.11458384963317936, 0.11458384963317936, 0.22277736282411031, 0.22277736282411031, 0.22277736282411031, 0.29034906215286127, 0.29034906215286127, 0.29034906215286127, 0.2926274017016077, 0.2926274017016077, 0.2926274017016077, 0.15096435349720927, 0.15096435349720927, 0.15096435349720927, 0.30684296049265314, 0.30684296049265314, 0.30684296049265314, 0.2293225229867455, 0.2293225229867455, 0.2293225229867455, 0.1847254201071229, 0.1847254201071229, 0.1847254201071229, 0.2933885554043145, 0.2933885554043145, 0.2933885554043145, 0.18743815252572327, 0.18743815252572327, 0.18743815252572327, 0.22499030368460682, 0.22499030368460682, 0.22499030368460682, 0.21197442834117342, 0.21197442834117342, 0.21197442834117342, 0.23486315834207927, 0.23486315834207927, 0.23486315834207927, 0.34798837732623245, 0.34798837732623245, 0.34798837732623245, 0.18728518778764902, 0.18728518778764902, 0.18728518778764902, 0.19151569215704634, 0.19151569215704634, 0.19151569215704634, 0.18922591475562633, 0.18922591475562633, 0.18922591475562633, 0.9565769385955846, 0.9565769385955846, 0.9565769385955846, 0.15338487243214383, 0.15338487243214383, 0.15338487243214383, 0.5602156893642292, 0.5602156893642292, 0.5602156893642292, 0.4623732962549444, 0.4623732962549444, 0.4623732962549444, 0.10556172945670128, 0.10556172945670128, 0.10556172945670128, 0.20292318110212426, 0.20292318110212426, 0.20292318110212426, 0.18261401575753267, 0.18261401575753267, 0.18261401575753267, 0.20818977123444293, 0.20818977123444293, 0.20818977123444293, 0.10039664836183892, 0.10039664836183892, 0.10039664836183892, 0.1094886164489044, 0.1094886164489044, 0.1094886164489044, 0.08435376291682006, 0.08435376291682006, 0.08435376291682006]}, "mutation_prompt": null}
{"id": "ed90a80c-cdf2-4cdc-a9e3-1897e62cba12", "solution": "import numpy as np\n\nclass E_QPSO_DQE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n        self.exploration_factor = 0.5 # Initial exploration range for quantum behavior\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Dynamic Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    exploration_radius = self.exploration_factor * (1 - evals / self.budget)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-exploration_radius, exploration_radius, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "E_QPSO_DQE", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Velocity and Dynamic Quantum Exploration for better convergence and exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2c6da47d-6bee-4fdf-a8ea-df5de4d7c45f", "metadata": {"aucs": [0.9493649387902185, 0.9493649387902185, 0.9493649387902185, 0.9428551762307223, 0.9428551762307223, 0.9428551762307223, 0.9404965924745656, 0.9404965924745656, 0.9404965924745656, 0.9104187179659773, 0.9104187179659773, 0.9104187179659773, 0.9057315223380557, 0.9057315223380557, 0.9057315223380557, 0.8586508041827007, 0.8586508041827007, 0.8586508041827007, 0.09833806198485184, 0.09833806198485184, 0.09833806198485184, 0.11625825412996271, 0.11625825412996271, 0.11625825412996271, 0.056090373718351794, 0.056090373718351794, 0.056090373718351794, 0.1393958644424409, 0.1393958644424409, 0.1393958644424409, 0.15023921999063772, 0.15023921999063772, 0.15023921999063772, 0.11214450748912463, 0.11214450748912463, 0.11214450748912463, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.6943207761483507, 0.6943207761483507, 0.6943207761483507, 0.7818118035421218, 0.7818118035421218, 0.7818118035421218, 0.6540701805531297, 0.6540701805531297, 0.6540701805531297, 0.5157383421320583, 0.5157383421320583, 0.5157383421320583, 0.3141830562783925, 0.3141830562783925, 0.3141830562783925, 0.5701406830925866, 0.5701406830925866, 0.5701406830925866, 0.22400153009034052, 0.22400153009034052, 0.22400153009034052, 0.1848214213569921, 0.1848214213569921, 0.1848214213569921, 0.19135613849664157, 0.19135613849664157, 0.19135613849664157, 0.20593927468436024, 0.20593927468436024, 0.20593927468436024, 0.19239373428461903, 0.19239373428461903, 0.19239373428461903, 0.1326029188369866, 0.1326029188369866, 0.1326029188369866, 0.08746405234366006, 0.08746405234366006, 0.08746405234366006, 0.06831819842374498, 0.06831819842374498, 0.06831819842374498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13284605700707286, 0.13284605700707286, 0.13284605700707286, 0.08609958846512034, 0.08609958846512034, 0.08609958846512034, 0.131737498532714, 0.131737498532714, 0.131737498532714, 0.23859289835559572, 0.23859289835559572, 0.23859289835559572, 0.14772252513666428, 0.14772252513666428, 0.14772252513666428, 0.08034603136245, 0.08034603136245, 0.08034603136245, 0.1706306795654875, 0.1706306795654875, 0.1706306795654875, 0.11693165085622481, 0.11693165085622481, 0.11693165085622481, 0.22594892208719253, 0.22594892208719253, 0.22594892208719253, 0.6234281318661243, 0.6234281318661243, 0.6234281318661243, 0.5627542652354955, 0.5627542652354955, 0.5627542652354955, 0.5655534581536993, 0.5655534581536993, 0.5655534581536993, 0.12177728421555223, 0.12177728421555223, 0.12177728421555223, 0.1326477403140054, 0.1326477403140054, 0.1326477403140054, 0.11458384963317936, 0.11458384963317936, 0.11458384963317936, 0.22277736282411031, 0.22277736282411031, 0.22277736282411031, 0.29034906215286127, 0.29034906215286127, 0.29034906215286127, 0.2926274017016077, 0.2926274017016077, 0.2926274017016077, 0.15096435349720927, 0.15096435349720927, 0.15096435349720927, 0.30684296049265314, 0.30684296049265314, 0.30684296049265314, 0.2293225229867455, 0.2293225229867455, 0.2293225229867455, 0.1847254201071229, 0.1847254201071229, 0.1847254201071229, 0.2933885554043145, 0.2933885554043145, 0.2933885554043145, 0.18743815252572327, 0.18743815252572327, 0.18743815252572327, 0.22499030368460682, 0.22499030368460682, 0.22499030368460682, 0.21197442834117342, 0.21197442834117342, 0.21197442834117342, 0.23486315834207927, 0.23486315834207927, 0.23486315834207927, 0.34798837732623245, 0.34798837732623245, 0.34798837732623245, 0.18728518778764902, 0.18728518778764902, 0.18728518778764902, 0.19151569215704634, 0.19151569215704634, 0.19151569215704634, 0.18922591475562633, 0.18922591475562633, 0.18922591475562633, 0.9565769385955846, 0.9565769385955846, 0.9565769385955846, 0.15338487243214383, 0.15338487243214383, 0.15338487243214383, 0.5602156893642292, 0.5602156893642292, 0.5602156893642292, 0.4623732962549444, 0.4623732962549444, 0.4623732962549444, 0.10556172945670128, 0.10556172945670128, 0.10556172945670128, 0.20292318110212426, 0.20292318110212426, 0.20292318110212426, 0.18261401575753267, 0.18261401575753267, 0.18261401575753267, 0.20818977123444293, 0.20818977123444293, 0.20818977123444293, 0.10039664836183892, 0.10039664836183892, 0.10039664836183892, 0.1094886164489044, 0.1094886164489044, 0.1094886164489044, 0.08435376291682006, 0.08435376291682006, 0.08435376291682006]}, "mutation_prompt": null}
{"id": "8e4f9590-0907-42a1-b5c1-1ab396a2b1c7", "solution": "import numpy as np\n\nclass E_QPSO_DQE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1  # Probability of quantum behavior\n        self.exploration_factor = 0.5 # Initial exploration range for quantum behavior\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adjust inertia and coefficients adaptively\n                self.inertia_weight *= self.damping\n\n                # Dynamic Quantum-inspired Update\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    exploration_radius = self.exploration_factor * (1 - evals / self.budget)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-exploration_radius, exploration_radius, self.dim)\n                else:\n                    # Update velocities and positions\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                score = func(positions[i])\n                evals += 1\n\n                # Update personal best\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # More frequent Adaptive Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-0.5, 0.5, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n\n        return global_best_score", "name": "E_QPSO_DQE", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Velocity and Dynamic Quantum Exploration for better convergence and exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2c6da47d-6bee-4fdf-a8ea-df5de4d7c45f", "metadata": {"aucs": [0.9493649387902185, 0.9493649387902185, 0.9493649387902185, 0.9428551762307223, 0.9428551762307223, 0.9428551762307223, 0.9404965924745656, 0.9404965924745656, 0.9404965924745656, 0.9104187179659773, 0.9104187179659773, 0.9104187179659773, 0.9057315223380557, 0.9057315223380557, 0.9057315223380557, 0.8586508041827007, 0.8586508041827007, 0.8586508041827007, 0.09833806198485184, 0.09833806198485184, 0.09833806198485184, 0.11625825412996271, 0.11625825412996271, 0.11625825412996271, 0.056090373718351794, 0.056090373718351794, 0.056090373718351794, 0.1393958644424409, 0.1393958644424409, 0.1393958644424409, 0.15023921999063772, 0.15023921999063772, 0.15023921999063772, 0.11214450748912463, 0.11214450748912463, 0.11214450748912463, 0.9939056725169144, 0.9939056725169144, 0.9939056725169144, 0.9957863068685987, 0.9957863068685987, 0.9957863068685987, 0.9947506839912551, 0.9947506839912551, 0.9947506839912551, 0.6943207761483507, 0.6943207761483507, 0.6943207761483507, 0.7818118035421218, 0.7818118035421218, 0.7818118035421218, 0.6540701805531297, 0.6540701805531297, 0.6540701805531297, 0.5157383421320583, 0.5157383421320583, 0.5157383421320583, 0.3141830562783925, 0.3141830562783925, 0.3141830562783925, 0.5701406830925866, 0.5701406830925866, 0.5701406830925866, 0.22400153009034052, 0.22400153009034052, 0.22400153009034052, 0.1848214213569921, 0.1848214213569921, 0.1848214213569921, 0.19135613849664157, 0.19135613849664157, 0.19135613849664157, 0.20593927468436024, 0.20593927468436024, 0.20593927468436024, 0.19239373428461903, 0.19239373428461903, 0.19239373428461903, 0.1326029188369866, 0.1326029188369866, 0.1326029188369866, 0.08746405234366006, 0.08746405234366006, 0.08746405234366006, 0.06831819842374498, 0.06831819842374498, 0.06831819842374498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13284605700707286, 0.13284605700707286, 0.13284605700707286, 0.08609958846512034, 0.08609958846512034, 0.08609958846512034, 0.131737498532714, 0.131737498532714, 0.131737498532714, 0.23859289835559572, 0.23859289835559572, 0.23859289835559572, 0.14772252513666428, 0.14772252513666428, 0.14772252513666428, 0.08034603136245, 0.08034603136245, 0.08034603136245, 0.1706306795654875, 0.1706306795654875, 0.1706306795654875, 0.11693165085622481, 0.11693165085622481, 0.11693165085622481, 0.22594892208719253, 0.22594892208719253, 0.22594892208719253, 0.6234281318661243, 0.6234281318661243, 0.6234281318661243, 0.5627542652354955, 0.5627542652354955, 0.5627542652354955, 0.5655534581536993, 0.5655534581536993, 0.5655534581536993, 0.12177728421555223, 0.12177728421555223, 0.12177728421555223, 0.1326477403140054, 0.1326477403140054, 0.1326477403140054, 0.11458384963317936, 0.11458384963317936, 0.11458384963317936, 0.22277736282411031, 0.22277736282411031, 0.22277736282411031, 0.29034906215286127, 0.29034906215286127, 0.29034906215286127, 0.2926274017016077, 0.2926274017016077, 0.2926274017016077, 0.15096435349720927, 0.15096435349720927, 0.15096435349720927, 0.30684296049265314, 0.30684296049265314, 0.30684296049265314, 0.2293225229867455, 0.2293225229867455, 0.2293225229867455, 0.1847254201071229, 0.1847254201071229, 0.1847254201071229, 0.2933885554043145, 0.2933885554043145, 0.2933885554043145, 0.18743815252572327, 0.18743815252572327, 0.18743815252572327, 0.22499030368460682, 0.22499030368460682, 0.22499030368460682, 0.21197442834117342, 0.21197442834117342, 0.21197442834117342, 0.23486315834207927, 0.23486315834207927, 0.23486315834207927, 0.34798837732623245, 0.34798837732623245, 0.34798837732623245, 0.18728518778764902, 0.18728518778764902, 0.18728518778764902, 0.19151569215704634, 0.19151569215704634, 0.19151569215704634, 0.18922591475562633, 0.18922591475562633, 0.18922591475562633, 0.9565769385955846, 0.9565769385955846, 0.9565769385955846, 0.15338487243214383, 0.15338487243214383, 0.15338487243214383, 0.5602156893642292, 0.5602156893642292, 0.5602156893642292, 0.4623732962549444, 0.4623732962549444, 0.4623732962549444, 0.10556172945670128, 0.10556172945670128, 0.10556172945670128, 0.20292318110212426, 0.20292318110212426, 0.20292318110212426, 0.18261401575753267, 0.18261401575753267, 0.18261401575753267, 0.20818977123444293, 0.20818977123444293, 0.20818977123444293, 0.10039664836183892, 0.10039664836183892, 0.10039664836183892, 0.1094886164489044, 0.1094886164489044, 0.1094886164489044, 0.08435376291682006, 0.08435376291682006, 0.08435376291682006]}, "mutation_prompt": null}
{"id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 51, "fitness": 0.33865340528686505, "feedback": "The algorithm Improved_QPSO_LSI got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.31.", "error": "", "parent_id": "2c6da47d-6bee-4fdf-a8ea-df5de4d7c45f", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "a636018e-d95b-40ae-976a-bf4fe2c3fad8", "solution": "import numpy as np\n\nclass Enhanced_QPSO_HLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.15\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.mutation_prob = 0.1\n        self.mutation_strength = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, self.mutation_strength, self.dim)\n                    positions[i] = np.clip(positions[i] + mutation_step, self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                local_improvements = 0\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        local_improvements += 1\n\n                if local_improvements > self.pop_size // 4:\n                    self.local_search_radius *= 0.9\n                else:\n                    self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_HLS", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Mutation and Hierarchical Local Search for improved exploration and convergence.", "configspace": "", "generation": 52, "fitness": 0.30125685718847506, "feedback": "The algorithm Enhanced_QPSO_HLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9426021253805217, 0.9426021253805217, 0.9426021253805217, 0.9376656995564641, 0.9376656995564641, 0.9376656995564641, 0.950976417661423, 0.950976417661423, 0.950976417661423, 0.7119068458262556, 0.7119068458262556, 0.7119068458262556, 0.7635867227610686, 0.7635867227610686, 0.7635867227610686, 0.7954618412023625, 0.7954618412023625, 0.7954618412023625, 0.08340001388146301, 0.08340001388146301, 0.08340001388146301, 0.13543410144654677, 0.13543410144654677, 0.13543410144654677, 0.1453479505640538, 0.1453479505640538, 0.1453479505640538, 0.14106420169754985, 0.14106420169754985, 0.14106420169754985, 0.09199547564734845, 0.09199547564734845, 0.09199547564734845, 0.11542224587559158, 0.11542224587559158, 0.11542224587559158, 0.9906541497715597, 0.9906541497715597, 0.9906541497715597, 0.9963340416956012, 0.9963340416956012, 0.9963340416956012, 0.9959126339448047, 0.9959126339448047, 0.9959126339448047, 0.4731722661828416, 0.4731722661828416, 0.4731722661828416, 0.5773556799122488, 0.5773556799122488, 0.5773556799122488, 0.5901385259017069, 0.5901385259017069, 0.5901385259017069, 0.23032905910610912, 0.23032905910610912, 0.23032905910610912, 0.22053647536101018, 0.22053647536101018, 0.22053647536101018, 0.21865817529243103, 0.21865817529243103, 0.21865817529243103, 0.20260133758856735, 0.20260133758856735, 0.20260133758856735, 0.19811064195692496, 0.19811064195692496, 0.19811064195692496, 0.20154038548795639, 0.20154038548795639, 0.20154038548795639, 0.2100499847313798, 0.2100499847313798, 0.2100499847313798, 0.2096976387446673, 0.2096976387446673, 0.2096976387446673, 0.23363506166340509, 0.23363506166340509, 0.23363506166340509, 0.008315952005758631, 0.008315952005758631, 0.008315952005758631, 0.08355602768850334, 0.08355602768850334, 0.08355602768850334, 0.0001234995247574311, 0.0001234995247574311, 0.0001234995247574311, 0.10053487110065562, 0.10053487110065562, 0.10053487110065562, 0.08662199388998382, 0.08662199388998382, 0.08662199388998382, 0.12501405947697097, 0.12501405947697097, 0.12501405947697097, 0.05971046018707116, 0.05971046018707116, 0.05971046018707116, 0.08572907469800162, 0.08572907469800162, 0.08572907469800162, 0.10760845315220868, 0.10760845315220868, 0.10760845315220868, 0.046089063166028454, 0.046089063166028454, 0.046089063166028454, 0.04409696613939762, 0.04409696613939762, 0.04409696613939762, 0.4106529814327502, 0.4106529814327502, 0.4106529814327502, 0.49319341299379815, 0.49319341299379815, 0.49319341299379815, 0.5315003400507796, 0.5315003400507796, 0.5315003400507796, 0.5236770278249379, 0.5236770278249379, 0.5236770278249379, 0.058470689379499174, 0.058470689379499174, 0.058470689379499174, 0.11801074343609075, 0.11801074343609075, 0.11801074343609075, 0.1488459331494849, 0.1488459331494849, 0.1488459331494849, 0.3390758203005526, 0.3390758203005526, 0.3390758203005526, 0.34222992411631836, 0.34222992411631836, 0.34222992411631836, 0.2022985751407531, 0.2022985751407531, 0.2022985751407531, 0.24009802969294514, 0.24009802969294514, 0.24009802969294514, 0.2852412763632992, 0.2852412763632992, 0.2852412763632992, 0.4116364689603791, 0.4116364689603791, 0.4116364689603791, 0.12102824480076635, 0.12102824480076635, 0.12102824480076635, 0.2260554048088843, 0.2260554048088843, 0.2260554048088843, 0.21071824433011732, 0.21071824433011732, 0.21071824433011732, 0.24134641750712804, 0.24134641750712804, 0.24134641750712804, 0.2116194638878579, 0.2116194638878579, 0.2116194638878579, 0.23644811291869983, 0.23644811291869983, 0.23644811291869983, 0.20506736613643228, 0.20506736613643228, 0.20506736613643228, 0.21314422542988432, 0.21314422542988432, 0.21314422542988432, 0.22913221893987656, 0.22913221893987656, 0.22913221893987656, 0.9648670272354966, 0.9648670272354966, 0.9648670272354966, 0.1739581466321608, 0.1739581466321608, 0.1739581466321608, 0.15939733492435937, 0.15939733492435937, 0.15939733492435937, 0.08347613877334803, 0.08347613877334803, 0.08347613877334803, 0.21309071982631722, 0.21309071982631722, 0.21309071982631722, 0.10549276277981445, 0.10549276277981445, 0.10549276277981445, 0.1959476175248781, 0.1959476175248781, 0.1959476175248781, 0.198583436870572, 0.198583436870572, 0.198583436870572, 0.1911571389012151, 0.1911571389012151, 0.1911571389012151, 0.10095475788095987, 0.10095475788095987, 0.10095475788095987, 0.10651473377063592, 0.10651473377063592, 0.10651473377063592, 0.08657286097801065, 0.08657286097801065, 0.08657286097801065]}, "mutation_prompt": null}
{"id": "3cf6f203-66f3-4315-ba13-5c210f82c893", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "26aa08cc-436d-4dc3-a9cd-ee6f24f4944f", "solution": "import numpy as np\n\nclass Enhanced_QPSO_Diversity:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.2  # Increased to enhance exploration\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 1e-5  # Threshold to trigger diversity enhancement\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            diversity = np.mean(np.std(positions, axis=0))\n            if diversity < self.diversity_threshold:\n                for j in range(self.pop_size):\n                    if np.random.rand() < 0.2:  # Reinitialize a fraction of particles to escape local optima\n                        positions[j] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_Diversity", "description": "Enhanced Quantum-inspired PSO with Adaptive Quantum Steps and Diversity-driving Strategies for improved exploration and exploitation balance.", "configspace": "", "generation": 54, "fitness": 0.3013005276253083, "feedback": "The algorithm Enhanced_QPSO_Diversity got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9567198103710208, 0.9567198103710208, 0.9567198103710208, 0.9612775551688709, 0.9612775551688709, 0.9612775551688709, 0.9627148791842313, 0.9627148791842313, 0.9627148791842313, 0.8811436922669699, 0.8811436922669699, 0.8811436922669699, 0.8874826194214503, 0.8874826194214503, 0.8874826194214503, 0.8279608687514898, 0.8279608687514898, 0.8279608687514898, 0.14967060467124194, 0.14967060467124194, 0.14967060467124194, 0.12101706582039062, 0.12101706582039062, 0.12101706582039062, 0.09768925434662656, 0.09768925434662656, 0.09768925434662656, 0.10049438411955414, 0.10049438411955414, 0.10049438411955414, 0.10263130471267068, 0.10263130471267068, 0.10263130471267068, 0.10848840616051514, 0.10848840616051514, 0.10848840616051514, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.6897849797060736, 0.6897849797060736, 0.6897849797060736, 0.5978231248639481, 0.5978231248639481, 0.5978231248639481, 0.8094341870075944, 0.8094341870075944, 0.8094341870075944, 0.23114938743887925, 0.23114938743887925, 0.23114938743887925, 0.2828039285548586, 0.2828039285548586, 0.2828039285548586, 0.17748801227711264, 0.17748801227711264, 0.17748801227711264, 0.1927384579113849, 0.1927384579113849, 0.1927384579113849, 0.13725965667866202, 0.13725965667866202, 0.13725965667866202, 0.2013427181013251, 0.2013427181013251, 0.2013427181013251, 0.20888887216994112, 0.20888887216994112, 0.20888887216994112, 0.2151896174128487, 0.2151896174128487, 0.2151896174128487, 0.1981693501144045, 0.1981693501144045, 0.1981693501144045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00022836204788068137, 0.00022836204788068137, 0.00022836204788068137, 0.029733299213658415, 0.029733299213658415, 0.029733299213658415, 0.167201968662264, 0.167201968662264, 0.167201968662264, 0.060008571065426786, 0.060008571065426786, 0.060008571065426786, 0.17144945982963822, 0.17144945982963822, 0.17144945982963822, 0.09044154519389902, 0.09044154519389902, 0.09044154519389902, 0.12481271912916814, 0.12481271912916814, 0.12481271912916814, 0.08727187964412897, 0.08727187964412897, 0.08727187964412897, 0.0452500205992068, 0.0452500205992068, 0.0452500205992068, 0.0532846156759742, 0.0532846156759742, 0.0532846156759742, 0.16147248274473402, 0.16147248274473402, 0.16147248274473402, 0.5547211475540982, 0.5547211475540982, 0.5547211475540982, 0.6083895577334513, 0.6083895577334513, 0.6083895577334513, 0.5173654950560649, 0.5173654950560649, 0.5173654950560649, 0.10986596253598413, 0.10986596253598413, 0.10986596253598413, 0.10339702043626986, 0.10339702043626986, 0.10339702043626986, 0.10069503114264189, 0.10069503114264189, 0.10069503114264189, 0.25437760721332947, 0.25437760721332947, 0.25437760721332947, 0.1723030771523859, 0.1723030771523859, 0.1723030771523859, 0.16636854020834868, 0.16636854020834868, 0.16636854020834868, 0.21467485923016383, 0.21467485923016383, 0.21467485923016383, 0.24893407545879276, 0.24893407545879276, 0.24893407545879276, 0.25552381827613946, 0.25552381827613946, 0.25552381827613946, 0.12467510857825004, 0.12467510857825004, 0.12467510857825004, 0.32899655615411894, 0.32899655615411894, 0.32899655615411894, 0.19133844213974505, 0.19133844213974505, 0.19133844213974505, 0.25644288294039874, 0.25644288294039874, 0.25644288294039874, 0.21248822638793075, 0.21248822638793075, 0.21248822638793075, 0.2035834922402261, 0.2035834922402261, 0.2035834922402261, 0.20201389564432726, 0.20201389564432726, 0.20201389564432726, 0.20506287416692093, 0.20506287416692093, 0.20506287416692093, 0.18503210850027807, 0.18503210850027807, 0.18503210850027807, 0.18934703537389508, 0.18934703537389508, 0.18934703537389508, 0.1739332164868922, 0.1739332164868922, 0.1739332164868922, 0.15277536812169457, 0.15277536812169457, 0.15277536812169457, 0.7396496572840763, 0.7396496572840763, 0.7396496572840763, 0.2117322373252305, 0.2117322373252305, 0.2117322373252305, 0.10532836522636813, 0.10532836522636813, 0.10532836522636813, 0.18389409519007394, 0.18389409519007394, 0.18389409519007394, 0.18907911960888846, 0.18907911960888846, 0.18907911960888846, 0.18417421845771764, 0.18417421845771764, 0.18417421845771764, 0.09543374869832044, 0.09543374869832044, 0.09543374869832044, 0.08892401368449243, 0.08892401368449243, 0.08892401368449243, 0.08800753698188513, 0.08800753698188513, 0.08800753698188513]}, "mutation_prompt": null}
{"id": "40ad3158-a242-4c5c-85b3-fe0a19e19cb3", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "776527d8-7d97-417b-98c6-e0d7b82d7219", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "5c259ac0-0040-4575-9549-dfd5e45022aa", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "ca889cf1-95e8-46d2-874d-075bbfc8962c", "solution": "import numpy as np\n\nclass Enhanced_QPSO_DAMGE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.95\n        self.quantum_prob = 0.1\n        self.initial_exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.dynamic_exploration_factor = 0.5\n        self.convergence_threshold = 1e-6\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            previous_best_score = global_best_score\n\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.initial_exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if abs(previous_best_score - global_best_score) < self.convergence_threshold:\n                self.quantum_prob = min(0.5, self.quantum_prob * 1.1)\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_DAMGE", "description": "Enhanced Quantum-inspired PSO with Dynamic Adaptive Mechanisms and Guided Exploitation for accelerated convergence and robustness.", "configspace": "", "generation": 58, "fitness": 0.2711864856960251, "feedback": "The algorithm Enhanced_QPSO_DAMGE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9418667438616396, 0.9418667438616396, 0.9418667438616396, 0.8683086062404253, 0.8683086062404253, 0.8683086062404253, 0.9612823447200095, 0.9612823447200095, 0.9612823447200095, 0.5858870524955565, 0.5858870524955565, 0.5858870524955565, 0.7000650523019706, 0.7000650523019706, 0.7000650523019706, 0.8698672477735077, 0.8698672477735077, 0.8698672477735077, 0.08225034792825425, 0.08225034792825425, 0.08225034792825425, 0.17019873734561297, 0.17019873734561297, 0.17019873734561297, 0.14988352032547358, 0.14988352032547358, 0.14988352032547358, 0.03645423955025939, 0.03645423955025939, 0.03645423955025939, 0.04937546260542314, 0.04937546260542314, 0.04937546260542314, 0.051505097425241675, 0.051505097425241675, 0.051505097425241675, 0.9943220744451917, 0.9943220744451917, 0.9943220744451917, 0.9945216256285291, 0.9945216256285291, 0.9945216256285291, 0.9961430886295483, 0.9961430886295483, 0.9961430886295483, 0.3578636823368996, 0.3578636823368996, 0.3578636823368996, 0.377318450602532, 0.377318450602532, 0.377318450602532, 0.38040428789674674, 0.38040428789674674, 0.38040428789674674, 0.15386498402940507, 0.15386498402940507, 0.15386498402940507, 0.16250075823881593, 0.16250075823881593, 0.16250075823881593, 0.10349589934283665, 0.10349589934283665, 0.10349589934283665, 0.17973979897467995, 0.17973979897467995, 0.17973979897467995, 0.19176834303349433, 0.19176834303349433, 0.19176834303349433, 0.13180993185505196, 0.13180993185505196, 0.13180993185505196, 0.13139547818108166, 0.13139547818108166, 0.13139547818108166, 0.1911947171136198, 0.1911947171136198, 0.1911947171136198, 0.1864198758710105, 0.1864198758710105, 0.1864198758710105, 0.16164017529801422, 0.16164017529801422, 0.16164017529801422, 0.0017993771362629918, 0.0017993771362629918, 0.0017993771362629918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08097266110545442, 0.08097266110545442, 0.08097266110545442, 0.05013526016705072, 0.05013526016705072, 0.05013526016705072, 0.06460840946660906, 0.06460840946660906, 0.06460840946660906, 0.26437619631267206, 0.26437619631267206, 0.26437619631267206, 0.08705297119882072, 0.08705297119882072, 0.08705297119882072, 0.13935425990486072, 0.13935425990486072, 0.13935425990486072, 0.15166419166420908, 0.15166419166420908, 0.15166419166420908, 0.04878879220945709, 0.04878879220945709, 0.04878879220945709, 0.1274578446310416, 0.1274578446310416, 0.1274578446310416, 0.5125026674990426, 0.5125026674990426, 0.5125026674990426, 0.49031442017261184, 0.49031442017261184, 0.49031442017261184, 0.48751364437402445, 0.48751364437402445, 0.48751364437402445, 0.09947933172393675, 0.09947933172393675, 0.09947933172393675, 0.07181493329890531, 0.07181493329890531, 0.07181493329890531, 0.12636183500102438, 0.12636183500102438, 0.12636183500102438, 0.3133484799142875, 0.3133484799142875, 0.3133484799142875, 0.1574977767627248, 0.1574977767627248, 0.1574977767627248, 0.24442571164675475, 0.24442571164675475, 0.24442571164675475, 0.19616113046967276, 0.19616113046967276, 0.19616113046967276, 0.21206701605258527, 0.21206701605258527, 0.21206701605258527, 0.2582624352092642, 0.2582624352092642, 0.2582624352092642, 0.15241309281364734, 0.15241309281364734, 0.15241309281364734, 0.10311975013242058, 0.10311975013242058, 0.10311975013242058, 0.13976526544947643, 0.13976526544947643, 0.13976526544947643, 0.20744276518341997, 0.20744276518341997, 0.20744276518341997, 0.21056089614726292, 0.21056089614726292, 0.21056089614726292, 0.20370415667843078, 0.20370415667843078, 0.20370415667843078, 0.18657807859865072, 0.18657807859865072, 0.18657807859865072, 0.18454196037075277, 0.18454196037075277, 0.18454196037075277, 0.20141536113295244, 0.20141536113295244, 0.20141536113295244, 0.9507134269332574, 0.9507134269332574, 0.9507134269332574, 0.16675386184405983, 0.16675386184405983, 0.16675386184405983, 0.16704565990050324, 0.16704565990050324, 0.16704565990050324, 0.21415873060177593, 0.21415873060177593, 0.21415873060177593, 0.21457567020078805, 0.21457567020078805, 0.21457567020078805, 0.1055720563834287, 0.1055720563834287, 0.1055720563834287, 0.17854019611459349, 0.17854019611459349, 0.17854019611459349, 0.17326862425884026, 0.17326862425884026, 0.17326862425884026, 0.20190922002168732, 0.20190922002168732, 0.20190922002168732, 0.07290594434045417, 0.07290594434045417, 0.07290594434045417, 0.07429537735589675, 0.07429537735589675, 0.07429537735589675, 0.06873990567940524, 0.06873990567940524, 0.06873990567940524]}, "mutation_prompt": null}
{"id": "005a9f97-7c2c-4329-8162-a22bdb974ec5", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "87f87988-abcf-4fa0-a355-b6267b1ba8e3", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "14d237a3-2a58-4a73-ba8d-fcbd8dd5c7a3", "solution": "import numpy as np\n\nclass Enhanced_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.5, self.local_search_radius * 1.05)  # More gradual expansion\n\n        return global_best_score", "name": "Enhanced_QPSO_LSI", "description": "Enhanced QPSO-LSI with Dynamic Quantum Swarm Balancing and Adaptive Radius Control for Optimized Convergence.", "configspace": "", "generation": 61, "fitness": 0.3129769086343862, "feedback": "The algorithm Enhanced_QPSO_LSI got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.965115053486722, 0.965115053486722, 0.965115053486722, 0.9563297082926148, 0.9563297082926148, 0.9563297082926148, 0.9608278118484503, 0.9608278118484503, 0.9608278118484503, 0.9043524364776268, 0.9043524364776268, 0.9043524364776268, 0.9005782580862647, 0.9005782580862647, 0.9005782580862647, 0.9107959126872952, 0.9107959126872952, 0.9107959126872952, 0.14241321143520547, 0.14241321143520547, 0.14241321143520547, 0.17620416115892645, 0.17620416115892645, 0.17620416115892645, 0.10052269434701722, 0.10052269434701722, 0.10052269434701722, 0.1018889229731692, 0.1018889229731692, 0.1018889229731692, 0.09796904481364344, 0.09796904481364344, 0.09796904481364344, 0.09114796975028672, 0.09114796975028672, 0.09114796975028672, 0.9942763584269504, 0.9942763584269504, 0.9942763584269504, 0.9957765674246046, 0.9957765674246046, 0.9957765674246046, 0.9944389655029625, 0.9944389655029625, 0.9944389655029625, 0.5320394208479671, 0.5320394208479671, 0.5320394208479671, 0.5256118059432406, 0.5256118059432406, 0.5256118059432406, 0.5711499474229584, 0.5711499474229584, 0.5711499474229584, 0.23234337352494316, 0.23234337352494316, 0.23234337352494316, 0.24523139515304715, 0.24523139515304715, 0.24523139515304715, 0.16614486039030507, 0.16614486039030507, 0.16614486039030507, 0.20735234045162299, 0.20735234045162299, 0.20735234045162299, 0.12846740408833013, 0.12846740408833013, 0.12846740408833013, 0.22790604136101478, 0.22790604136101478, 0.22790604136101478, 0.22059134387113788, 0.22059134387113788, 0.22059134387113788, 0.21675550725351145, 0.21675550725351145, 0.21675550725351145, 0.21844787214880845, 0.21844787214880845, 0.21844787214880845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01098051797792976, 0.01098051797792976, 0.01098051797792976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09464388640460364, 0.09464388640460364, 0.09464388640460364, 0.07013904237562785, 0.07013904237562785, 0.07013904237562785, 0.14799293640014655, 0.14799293640014655, 0.14799293640014655, 0.18558756938160959, 0.18558756938160959, 0.18558756938160959, 0.10233210419553429, 0.10233210419553429, 0.10233210419553429, 0.08026760477850714, 0.08026760477850714, 0.08026760477850714, 0.05122222600715143, 0.05122222600715143, 0.05122222600715143, 0.09691574487309862, 0.09691574487309862, 0.09691574487309862, 0.060216042102366196, 0.060216042102366196, 0.060216042102366196, 0.5327461661268691, 0.5327461661268691, 0.5327461661268691, 0.5575050275577362, 0.5575050275577362, 0.5575050275577362, 0.5347518696973326, 0.5347518696973326, 0.5347518696973326, 0.09170619516186163, 0.09170619516186163, 0.09170619516186163, 0.09388151971906045, 0.09388151971906045, 0.09388151971906045, 0.13351296148965486, 0.13351296148965486, 0.13351296148965486, 0.22277736282411031, 0.22277736282411031, 0.22277736282411031, 0.24498289622884772, 0.24498289622884772, 0.24498289622884772, 0.22314267521990416, 0.22314267521990416, 0.22314267521990416, 0.17757381729183996, 0.17757381729183996, 0.17757381729183996, 0.433858428430536, 0.433858428430536, 0.433858428430536, 0.18682125697974183, 0.18682125697974183, 0.18682125697974183, 0.1328217276273419, 0.1328217276273419, 0.1328217276273419, 0.29371207946845246, 0.29371207946845246, 0.29371207946845246, 0.22648747211540898, 0.22648747211540898, 0.22648747211540898, 0.22803730222004992, 0.22803730222004992, 0.22803730222004992, 0.21197442834117342, 0.21197442834117342, 0.21197442834117342, 0.22123894146791712, 0.22123894146791712, 0.22123894146791712, 0.5011778713182764, 0.5011778713182764, 0.5011778713182764, 0.18729111640130058, 0.18729111640130058, 0.18729111640130058, 0.18236439570957086, 0.18236439570957086, 0.18236439570957086, 0.18886881160042623, 0.18886881160042623, 0.18886881160042623, 0.1739222015412224, 0.1739222015412224, 0.1739222015412224, 0.8925910139076054, 0.8925910139076054, 0.8925910139076054, 0.795418695937041, 0.795418695937041, 0.795418695937041, 0.21065907323739297, 0.21065907323739297, 0.21065907323739297, 0.10540805033072898, 0.10540805033072898, 0.10540805033072898, 0.21249797876799992, 0.21249797876799992, 0.21249797876799992, 0.18261401575753267, 0.18261401575753267, 0.18261401575753267, 0.18359629281704237, 0.18359629281704237, 0.18359629281704237, 0.10039664836183892, 0.10039664836183892, 0.10039664836183892, 0.10046930143797017, 0.10046930143797017, 0.10046930143797017, 0.08435376291682006, 0.08435376291682006, 0.08435376291682006]}, "mutation_prompt": null}
{"id": "9cc7dea5-ff0b-46a3-bfd9-ee5916a66a95", "solution": "import numpy as np\n\nclass Enhanced_QPSO_LDL:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.levy_factor = 1.5\n\n    def levy_flight(self, size):\n        u = np.random.normal(0, 1, size)\n        v = np.random.normal(0, 1, size)\n        step = u / (np.abs(v) ** (1 / self.levy_factor))\n        return step\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < 0.3:\n                    positions[i] += self.levy_flight(self.dim)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_LDL", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Levy Flight and Dynamic Neighborhood Strategy for improved exploration-exploitation balance.", "configspace": "", "generation": 62, "fitness": 0.23870628455711268, "feedback": "The algorithm Enhanced_QPSO_LDL got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.585036261544873, 0.585036261544873, 0.585036261544873, 0.5475831305165197, 0.5475831305165197, 0.5475831305165197, 0.530994210900879, 0.530994210900879, 0.530994210900879, 0.17315433404820235, 0.17315433404820235, 0.17315433404820235, 0.14838652977293043, 0.14838652977293043, 0.14838652977293043, 0.06761255674200206, 0.06761255674200206, 0.06761255674200206, 0.10145833240237989, 0.10145833240237989, 0.10145833240237989, 0.09188690548227674, 0.09188690548227674, 0.09188690548227674, 0.11353042598152785, 0.11353042598152785, 0.11353042598152785, 0.09703726566922055, 0.09703726566922055, 0.09703726566922055, 0.08199004395685372, 0.08199004395685372, 0.08199004395685372, 0.10175256497412843, 0.10175256497412843, 0.10175256497412843, 0.9945207316525514, 0.9945207316525514, 0.9945207316525514, 0.9908582871607989, 0.9908582871607989, 0.9908582871607989, 0.9923883265685512, 0.9923883265685512, 0.9923883265685512, 0.3686283779659286, 0.3686283779659286, 0.3686283779659286, 0.3482316040657294, 0.3482316040657294, 0.3482316040657294, 0.3052741930293985, 0.3052741930293985, 0.3052741930293985, 0.21187828775432604, 0.21187828775432604, 0.21187828775432604, 0.2834956921861833, 0.2834956921861833, 0.2834956921861833, 0.18650809817389347, 0.18650809817389347, 0.18650809817389347, 0.12620342435320364, 0.12620342435320364, 0.12620342435320364, 0.12416291964105186, 0.12416291964105186, 0.12416291964105186, 0.19114821136673954, 0.19114821136673954, 0.19114821136673954, 0.1377891452784008, 0.1377891452784008, 0.1377891452784008, 0.1511929464758176, 0.1511929464758176, 0.1511929464758176, 0.19773112452911334, 0.19773112452911334, 0.19773112452911334, 0.022737990228665184, 0.022737990228665184, 0.022737990228665184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008615504628989301, 0.0008615504628989301, 0.0008615504628989301, 0.0507782716645927, 0.0507782716645927, 0.0507782716645927, 0.07345761723509481, 0.07345761723509481, 0.07345761723509481, 0.052737019491822856, 0.052737019491822856, 0.052737019491822856, 0.03793333536908616, 0.03793333536908616, 0.03793333536908616, 0.07024709981250365, 0.07024709981250365, 0.07024709981250365, 0.08354635962841817, 0.08354635962841817, 0.08354635962841817, 0.08836878378898527, 0.08836878378898527, 0.08836878378898527, 0.06203263735004272, 0.06203263735004272, 0.06203263735004272, 0.13435963620386826, 0.13435963620386826, 0.13435963620386826, 0.4447618443005642, 0.4447618443005642, 0.4447618443005642, 0.46180351191136537, 0.46180351191136537, 0.46180351191136537, 0.4518002543568518, 0.4518002543568518, 0.4518002543568518, 0.08036612396089171, 0.08036612396089171, 0.08036612396089171, 0.1207154691461465, 0.1207154691461465, 0.1207154691461465, 0.09171545568426298, 0.09171545568426298, 0.09171545568426298, 0.33336436072328113, 0.33336436072328113, 0.33336436072328113, 0.14973743162341924, 0.14973743162341924, 0.14973743162341924, 0.23047453740494162, 0.23047453740494162, 0.23047453740494162, 0.2115510607439154, 0.2115510607439154, 0.2115510607439154, 0.2719052617714355, 0.2719052617714355, 0.2719052617714355, 0.27596735442741815, 0.27596735442741815, 0.27596735442741815, 0.14840392973477212, 0.14840392973477212, 0.14840392973477212, 0.21793845496673536, 0.21793845496673536, 0.21793845496673536, 0.23624177756403197, 0.23624177756403197, 0.23624177756403197, 0.19975959578310176, 0.19975959578310176, 0.19975959578310176, 0.21305909873357642, 0.21305909873357642, 0.21305909873357642, 0.23757570334295908, 0.23757570334295908, 0.23757570334295908, 0.18413697143285368, 0.18413697143285368, 0.18413697143285368, 0.18248132151297536, 0.18248132151297536, 0.18248132151297536, 0.18018164872402176, 0.18018164872402176, 0.18018164872402176, 0.4090378411499902, 0.4090378411499902, 0.4090378411499902, 0.8446602161531453, 0.8446602161531453, 0.8446602161531453, 0.1517532208718585, 0.1517532208718585, 0.1517532208718585, 0.615837065255341, 0.615837065255341, 0.615837065255341, 0.21202679119690104, 0.21202679119690104, 0.21202679119690104, 0.28110583052893634, 0.28110583052893634, 0.28110583052893634, 0.19588370785973852, 0.19588370785973852, 0.19588370785973852, 0.19243312119211653, 0.19243312119211653, 0.19243312119211653, 0.1964400482016624, 0.1964400482016624, 0.1964400482016624, 0.08815776511826168, 0.08815776511826168, 0.08815776511826168, 0.07117116311344762, 0.07117116311344762, 0.07117116311344762, 0.07681031619173462, 0.07681031619173462, 0.07681031619173462]}, "mutation_prompt": null}
{"id": "43c647dd-aefd-470b-a142-438e260ac793", "solution": "import numpy as np\n\nclass Enhanced_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob_initial = 0.2\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.step_size_multiplier = 0.01  # For gradient-based refinement\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n        quantum_prob = self.quantum_prob_initial\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n                quantum_probability = quantum_prob * (1 - (global_best_score / np.mean(personal_best_scores + 1e-9)))\n\n                if np.random.rand() < quantum_probability:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 3):\n                    gradient_step = np.random.normal(0, self.step_size_multiplier, self.dim)\n                    refined_position = np.clip(global_best_position + gradient_step, self.lower_bound, self.upper_bound)\n                    refined_score = func(refined_position)\n                    evals += 1\n                    if refined_score < global_best_score:\n                        global_best_score = refined_score\n                        global_best_position = refined_position\n\n        return global_best_score", "name": "Enhanced_QPSO_LSI", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Dynamic Adaptive Parameters and Gradient-based Local Refinement for improved global convergence.", "configspace": "", "generation": 63, "fitness": 0.329753909188828, "feedback": "The algorithm Enhanced_QPSO_LSI got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.31.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9613741707931965, 0.9613741707931965, 0.9613741707931965, 0.9593738219693438, 0.9593738219693438, 0.9593738219693438, 0.9632071547724246, 0.9632071547724246, 0.9632071547724246, 0.8830332433136376, 0.8830332433136376, 0.8830332433136376, 0.8851286891761598, 0.8851286891761598, 0.8851286891761598, 0.8569688593551453, 0.8569688593551453, 0.8569688593551453, 0.12909760836689887, 0.12909760836689887, 0.12909760836689887, 0.12085907556610342, 0.12085907556610342, 0.12085907556610342, 0.1841429692405765, 0.1841429692405765, 0.1841429692405765, 0.1505762849721881, 0.1505762849721881, 0.1505762849721881, 0.138474911063718, 0.138474911063718, 0.138474911063718, 0.10025184146715416, 0.10025184146715416, 0.10025184146715416, 0.9924118965219665, 0.9924118965219665, 0.9924118965219665, 0.9956644171345858, 0.9956644171345858, 0.9956644171345858, 0.995413301985361, 0.995413301985361, 0.995413301985361, 0.5642209077811668, 0.5642209077811668, 0.5642209077811668, 0.5285856860227766, 0.5285856860227766, 0.5285856860227766, 0.5006246681546587, 0.5006246681546587, 0.5006246681546587, 0.9264989613301605, 0.9264989613301605, 0.9264989613301605, 0.8632189810495925, 0.8632189810495925, 0.8632189810495925, 0.1706654707295978, 0.1706654707295978, 0.1706654707295978, 0.19729748147372084, 0.19729748147372084, 0.19729748147372084, 0.20326886880009265, 0.20326886880009265, 0.20326886880009265, 0.18043796736177864, 0.18043796736177864, 0.18043796736177864, 0.2095749701766092, 0.2095749701766092, 0.2095749701766092, 0.20612886211474268, 0.20612886211474268, 0.20612886211474268, 0.22636327015503244, 0.22636327015503244, 0.22636327015503244, 0.00010093239170838597, 0.00010093239170838597, 0.00010093239170838597, 0.016429000648372827, 0.016429000648372827, 0.016429000648372827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1064906617471415, 0.1064906617471415, 0.1064906617471415, 0.07871618698471827, 0.07871618698471827, 0.07871618698471827, 0.15571325182453133, 0.15571325182453133, 0.15571325182453133, 0.05441560990836347, 0.05441560990836347, 0.05441560990836347, 0.11056818211189856, 0.11056818211189856, 0.11056818211189856, 0.13863075725634555, 0.13863075725634555, 0.13863075725634555, 0.05860050966442154, 0.05860050966442154, 0.05860050966442154, 0.13773974777825138, 0.13773974777825138, 0.13773974777825138, 0.0856548021818726, 0.0856548021818726, 0.0856548021818726, 0.5571945525458248, 0.5571945525458248, 0.5571945525458248, 0.5269499683791534, 0.5269499683791534, 0.5269499683791534, 0.5536716340103256, 0.5536716340103256, 0.5536716340103256, 0.09248080040436546, 0.09248080040436546, 0.09248080040436546, 0.12844103658228212, 0.12844103658228212, 0.12844103658228212, 0.06977620463787482, 0.06977620463787482, 0.06977620463787482, 0.20195010097118482, 0.20195010097118482, 0.20195010097118482, 0.26748517951402895, 0.26748517951402895, 0.26748517951402895, 0.2533669091105115, 0.2533669091105115, 0.2533669091105115, 0.20132050840116023, 0.20132050840116023, 0.20132050840116023, 0.3885601789860894, 0.3885601789860894, 0.3885601789860894, 0.29101784391803376, 0.29101784391803376, 0.29101784391803376, 0.1008152263061678, 0.1008152263061678, 0.1008152263061678, 0.27124707020275796, 0.27124707020275796, 0.27124707020275796, 0.1679655591192497, 0.1679655591192497, 0.1679655591192497, 0.23026203305308923, 0.23026203305308923, 0.23026203305308923, 0.1925377664659863, 0.1925377664659863, 0.1925377664659863, 0.17771705415702221, 0.17771705415702221, 0.17771705415702221, 0.1972230464688156, 0.1972230464688156, 0.1972230464688156, 0.1935986532404046, 0.1935986532404046, 0.1935986532404046, 0.18113300752206407, 0.18113300752206407, 0.18113300752206407, 0.941417417922596, 0.941417417922596, 0.941417417922596, 0.9623987989681297, 0.9623987989681297, 0.9623987989681297, 0.15332231308122413, 0.15332231308122413, 0.15332231308122413, 0.1569095768926312, 0.1569095768926312, 0.1569095768926312, 0.2118467265070847, 0.2118467265070847, 0.2118467265070847, 0.10525072004125124, 0.10525072004125124, 0.10525072004125124, 0.2078552607998797, 0.2078552607998797, 0.2078552607998797, 0.22111675956806265, 0.22111675956806265, 0.22111675956806265, 0.21463789155417445, 0.21463789155417445, 0.21463789155417445, 0.09990547535910721, 0.09990547535910721, 0.09990547535910721, 0.09116515016980753, 0.09116515016980753, 0.09116515016980753, 0.09571705338926018, 0.09571705338926018, 0.09571705338926018]}, "mutation_prompt": null}
{"id": "39b0a1e0-6dec-4b51-b760-2ee30f19bb30", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "c845a094-7e17-4149-ad17-a11d5aee0f29", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "3aa5d1a6-f056-44f2-ac43-688732aedeed", "solution": "import numpy as np\n\nclass Adaptive_QPSO_NI_DEB:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            inertia_weight = self.inertia_weight_max - (self.inertia_weight_max - self.inertia_weight_min) * (evals / self.budget)**2\n\n            for i in range(self.pop_size):\n                dynamic_exploration = self.exploration_factor * np.sin(np.pi * evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Adaptive_QPSO_NI_DEB", "description": "Adaptive Quantum-inspired Particle Swarm Optimization with Nonlinear Inertia Adjustment and Dynamic Exploration-Exploitation Balance for enhanced global search and convergence.", "configspace": "", "generation": 66, "fitness": 0.23944239098844622, "feedback": "The algorithm Adaptive_QPSO_NI_DEB got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.5763228703348584, 0.5763228703348584, 0.5763228703348584, 0.5998799043225904, 0.5998799043225904, 0.5998799043225904, 0.5802008545074075, 0.5802008545074075, 0.5802008545074075, 0.14260681175158063, 0.14260681175158063, 0.14260681175158063, 0.17519597967346368, 0.17519597967346368, 0.17519597967346368, 0.13859334010918334, 0.13859334010918334, 0.13859334010918334, 0.12117568915109111, 0.12117568915109111, 0.12117568915109111, 0.09433662273269439, 0.09433662273269439, 0.09433662273269439, 0.14218490873870337, 0.14218490873870337, 0.14218490873870337, 0.11150451308463649, 0.11150451308463649, 0.11150451308463649, 0.09287760918407295, 0.09287760918407295, 0.09287760918407295, 0.09357279666705776, 0.09357279666705776, 0.09357279666705776, 0.994409408236417, 0.994409408236417, 0.994409408236417, 0.995791820321354, 0.995791820321354, 0.995791820321354, 0.9947691349206267, 0.9947691349206267, 0.9947691349206267, 0.3721002901937792, 0.3721002901937792, 0.3721002901937792, 0.35457445095552875, 0.35457445095552875, 0.35457445095552875, 0.38599540849851266, 0.38599540849851266, 0.38599540849851266, 0.21541580004794525, 0.21541580004794525, 0.21541580004794525, 0.2589200324205573, 0.2589200324205573, 0.2589200324205573, 0.16707105230025332, 0.16707105230025332, 0.16707105230025332, 0.19536843009378213, 0.19536843009378213, 0.19536843009378213, 0.18658890492814595, 0.18658890492814595, 0.18658890492814595, 0.197568241481349, 0.197568241481349, 0.197568241481349, 0.19678857081356305, 0.19678857081356305, 0.19678857081356305, 0.2152124380737035, 0.2152124380737035, 0.2152124380737035, 0.18640037834173584, 0.18640037834173584, 0.18640037834173584, 0.036851651896766646, 0.036851651896766646, 0.036851651896766646, 0.013028934558983796, 0.013028934558983796, 0.013028934558983796, 0.0015578895449777086, 0.0015578895449777086, 0.0015578895449777086, 0.12952605444711718, 0.12952605444711718, 0.12952605444711718, 0.07186994582117845, 0.07186994582117845, 0.07186994582117845, 0.13244932661336828, 0.13244932661336828, 0.13244932661336828, 0.04237449922333436, 0.04237449922333436, 0.04237449922333436, 0.04337780627086707, 0.04337780627086707, 0.04337780627086707, 0.03100200622212701, 0.03100200622212701, 0.03100200622212701, 0.054282099028729824, 0.054282099028729824, 0.054282099028729824, 0.07886412428325296, 0.07886412428325296, 0.07886412428325296, 0.101740171666994, 0.101740171666994, 0.101740171666994, 0.48902948826829473, 0.48902948826829473, 0.48902948826829473, 0.501132270410817, 0.501132270410817, 0.501132270410817, 0.4915324648913072, 0.4915324648913072, 0.4915324648913072, 0.07417233302697201, 0.07417233302697201, 0.07417233302697201, 0.14350579059658208, 0.14350579059658208, 0.14350579059658208, 0.1383326456350793, 0.1383326456350793, 0.1383326456350793, 0.17359988209244404, 0.17359988209244404, 0.17359988209244404, 0.2001093115896443, 0.2001093115896443, 0.2001093115896443, 0.23162886575425623, 0.23162886575425623, 0.23162886575425623, 0.20042144159293596, 0.20042144159293596, 0.20042144159293596, 0.23637086751916325, 0.23637086751916325, 0.23637086751916325, 0.32698718197997956, 0.32698718197997956, 0.32698718197997956, 0.21610943632155588, 0.21610943632155588, 0.21610943632155588, 0.18076993840299016, 0.18076993840299016, 0.18076993840299016, 0.20806383458178235, 0.20806383458178235, 0.20806383458178235, 0.20315273394352984, 0.20315273394352984, 0.20315273394352984, 0.22725231260475198, 0.22725231260475198, 0.22725231260475198, 0.18713470697257395, 0.18713470697257395, 0.18713470697257395, 0.17953231173941242, 0.17953231173941242, 0.17953231173941242, 0.2013695170260732, 0.2013695170260732, 0.2013695170260732, 0.18586281249446557, 0.18586281249446557, 0.18586281249446557, 0.1893266737015561, 0.1893266737015561, 0.1893266737015561, 0.7843835744329457, 0.7843835744329457, 0.7843835744329457, 0.1514337350411995, 0.1514337350411995, 0.1514337350411995, 0.4322986351940904, 0.4322986351940904, 0.4322986351940904, 0.21224893098111597, 0.21224893098111597, 0.21224893098111597, 0.10541825876813293, 0.10541825876813293, 0.10541825876813293, 0.18144799572912151, 0.18144799572912151, 0.18144799572912151, 0.19628484359111498, 0.19628484359111498, 0.19628484359111498, 0.20339268936852495, 0.20339268936852495, 0.20339268936852495, 0.09474577245915172, 0.09474577245915172, 0.09474577245915172, 0.08007664019262306, 0.08007664019262306, 0.08007664019262306, 0.09037348280164692, 0.09037348280164692, 0.09037348280164692]}, "mutation_prompt": null}
{"id": "d3e13937-95f0-4198-8962-a3cf894ede00", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "7b1806ad-2797-4263-9e93-b444de118ed1", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "70f6beb7-1f0e-43b2-b1fe-a106428f3866", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "6b1bf915-d1be-4e9a-95d2-530715ff93ef", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\n\nclass Enhanced_QPSO_DC:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.num_clusters = max(2, int(self.pop_size / 5))  # Dynamically determine number of clusters\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            self.inertia_weight *= self.damping\n\n            # Perform particle regrouping using clustering\n            kmeans = KMeans(n_clusters=self.num_clusters, random_state=0).fit(positions)\n            cluster_centers = kmeans.cluster_centers_\n            cluster_assignments = kmeans.labels_\n\n            for i in range(self.pop_size):\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n                \n                if np.random.rand() < self.quantum_prob:\n                    cluster_center = cluster_centers[cluster_assignments[i]]\n                    quantum_distance = np.abs(global_best_position - cluster_center)\n                    positions[i] = cluster_center + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_DC", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Dynamic Clustering for better exploration-exploitation balance and convergence robustness.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'sklearn'\").", "error": "ModuleNotFoundError(\"No module named 'sklearn'\")", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {}, "mutation_prompt": null}
{"id": "57ed2198-af60-435b-b8f3-4cfc4973ff94", "solution": "import numpy as np\n\nclass Enhanced_QPSO_DNMLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.dynamic_neighborhood_radius = 0.5  # New parameter for dynamic neighborhood\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                # Dynamic Neighborhood Search\n                for _ in range(self.pop_size // 2):\n                    neighborhood_radius = self.dynamic_neighborhood_radius * (1 - evals/self.budget)\n                    local_positions = global_best_position + np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n        \n        return global_best_score", "name": "Enhanced_QPSO_DNMLS", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step, Dynamic Neighborhoods, and Memory-based Local Search for improved convergence.", "configspace": "", "generation": 71, "fitness": 0.33255054781870047, "feedback": "The algorithm Enhanced_QPSO_DNMLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.29.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9423643429651336, 0.9423643429651336, 0.9423643429651336, 0.9487330973749213, 0.9487330973749213, 0.9487330973749213, 0.9423727582842095, 0.9423727582842095, 0.9423727582842095, 0.8773632915179457, 0.8773632915179457, 0.8773632915179457, 0.9028017630581868, 0.9028017630581868, 0.9028017630581868, 0.8796418566843173, 0.8796418566843173, 0.8796418566843173, 0.11356704073552171, 0.11356704073552171, 0.11356704073552171, 0.12427965897557336, 0.12427965897557336, 0.12427965897557336, 0.16065306588808548, 0.16065306588808548, 0.16065306588808548, 0.11211851878118928, 0.11211851878118928, 0.11211851878118928, 0.13196614584757094, 0.13196614584757094, 0.13196614584757094, 0.1174461703319748, 0.1174461703319748, 0.1174461703319748, 0.9939056074896327, 0.9939056074896327, 0.9939056074896327, 0.995786263626282, 0.995786263626282, 0.995786263626282, 0.9947506925881701, 0.9947506925881701, 0.9947506925881701, 0.6389120576769942, 0.6389120576769942, 0.6389120576769942, 0.6801848576247664, 0.6801848576247664, 0.6801848576247664, 0.6503914272498237, 0.6503914272498237, 0.6503914272498237, 0.21849054056852413, 0.21849054056852413, 0.21849054056852413, 0.1952060242328333, 0.1952060242328333, 0.1952060242328333, 0.18092226620869456, 0.18092226620869456, 0.18092226620869456, 0.22857312409184016, 0.22857312409184016, 0.22857312409184016, 0.17102937879468139, 0.17102937879468139, 0.17102937879468139, 0.1921580416396359, 0.1921580416396359, 0.1921580416396359, 0.22067575243506965, 0.22067575243506965, 0.22067575243506965, 0.22761181800515806, 0.22761181800515806, 0.22761181800515806, 0.1418245678186968, 0.1418245678186968, 0.1418245678186968, 0.03781673918523065, 0.03781673918523065, 0.03781673918523065, 0.16936752526186105, 0.16936752526186105, 0.16936752526186105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11094111607371737, 0.11094111607371737, 0.11094111607371737, 0.11542252409556875, 0.11542252409556875, 0.11542252409556875, 0.10990610834121795, 0.10990610834121795, 0.10990610834121795, 0.34875275090258806, 0.34875275090258806, 0.34875275090258806, 0.1471243792222574, 0.1471243792222574, 0.1471243792222574, 0.07949726569931537, 0.07949726569931537, 0.07949726569931537, 0.10898512465951848, 0.10898512465951848, 0.10898512465951848, 0.11019005352735689, 0.11019005352735689, 0.11019005352735689, 0.22502688737164955, 0.22502688737164955, 0.22502688737164955, 0.5596743568831578, 0.5596743568831578, 0.5596743568831578, 0.6458208980713102, 0.6458208980713102, 0.6458208980713102, 0.5526542899337379, 0.5526542899337379, 0.5526542899337379, 0.12256749109155352, 0.12256749109155352, 0.12256749109155352, 0.1238177772513318, 0.1238177772513318, 0.1238177772513318, 0.1331025818565964, 0.1331025818565964, 0.1331025818565964, 0.4249760423157345, 0.4249760423157345, 0.4249760423157345, 0.26975364493713316, 0.26975364493713316, 0.26975364493713316, 0.2771629611946992, 0.2771629611946992, 0.2771629611946992, 0.18684707190361083, 0.18684707190361083, 0.18684707190361083, 0.3134744079463848, 0.3134744079463848, 0.3134744079463848, 0.22848978487409333, 0.22848978487409333, 0.22848978487409333, 0.1814493570707184, 0.1814493570707184, 0.1814493570707184, 0.3468037332637881, 0.3468037332637881, 0.3468037332637881, 0.16717998547583723, 0.16717998547583723, 0.16717998547583723, 0.21486170234350477, 0.21486170234350477, 0.21486170234350477, 0.23416911733692647, 0.23416911733692647, 0.23416911733692647, 0.21773568269244148, 0.21773568269244148, 0.21773568269244148, 0.21098081507176059, 0.21098081507176059, 0.21098081507176059, 0.18754052939677424, 0.18754052939677424, 0.18754052939677424, 0.7219463909289148, 0.7219463909289148, 0.7219463909289148, 0.18927312025498688, 0.18927312025498688, 0.18927312025498688, 0.964006236608364, 0.964006236608364, 0.964006236608364, 0.15414388673257595, 0.15414388673257595, 0.15414388673257595, 0.5948816854558363, 0.5948816854558363, 0.5948816854558363, 0.21334980235918743, 0.21334980235918743, 0.21334980235918743, 0.1055656410042467, 0.1055656410042467, 0.1055656410042467, 0.2017807297754849, 0.2017807297754849, 0.2017807297754849, 0.20206871014150896, 0.20206871014150896, 0.20206871014150896, 0.18346444799964468, 0.18346444799964468, 0.18346444799964468, 0.08208194746274056, 0.08208194746274056, 0.08208194746274056, 0.09249148291568143, 0.09249148291568143, 0.09249148291568143, 0.09266252556045307, 0.09266252556045307, 0.09266252556045307]}, "mutation_prompt": null}
{"id": "17169d44-b0cd-4a7e-923d-dacea6279d01", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "e8380343-74f8-4765-a4b9-14ad02f43e0b", "solution": "import numpy as np\n\nclass Enhanced_QPSO_FLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.2  # Increased quantum probability\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    u = np.random.uniform(0, 1, self.dim)\n                    beta = 1.5\n                    levy_step = np.random.standard_cauchy(self.dim) * 0.01  # Levy Flight step\n                    positions[i] = mean_best_position + quantum_distance * np.sign(u - 0.5) * (np.abs(2 * u - 1))**(1 / beta) * levy_step\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    focus_scale = 0.5 + 0.5 * (1 - evals / self.budget)\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius * focus_scale, self.local_search_radius * focus_scale, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_FLS", "description": "Enhanced Quantum-inspired PSO with Adaptive Quantum Dynamics and Focused Local Search for accelerated convergence.", "configspace": "", "generation": 73, "fitness": 0.3117747293433394, "feedback": "The algorithm Enhanced_QPSO_FLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9568343196625868, 0.9568343196625868, 0.9568343196625868, 0.9593574137780096, 0.9593574137780096, 0.9593574137780096, 0.9590986744959651, 0.9590986744959651, 0.9590986744959651, 0.8793136731157908, 0.8793136731157908, 0.8793136731157908, 0.8699767990573077, 0.8699767990573077, 0.8699767990573077, 0.8862136394185691, 0.8862136394185691, 0.8862136394185691, 0.11065804825241643, 0.11065804825241643, 0.11065804825241643, 0.16553423616994334, 0.16553423616994334, 0.16553423616994334, 0.08132132986663887, 0.08132132986663887, 0.08132132986663887, 0.12778076934683413, 0.12778076934683413, 0.12778076934683413, 0.08994735942476595, 0.08994735942476595, 0.08994735942476595, 0.10823691071339292, 0.10823691071339292, 0.10823691071339292, 0.9918529195969557, 0.9918529195969557, 0.9918529195969557, 0.9938782626225543, 0.9938782626225543, 0.9938782626225543, 0.9948417387134012, 0.9948417387134012, 0.9948417387134012, 0.5662478265501268, 0.5662478265501268, 0.5662478265501268, 0.515386783033174, 0.515386783033174, 0.515386783033174, 0.4395729127778045, 0.4395729127778045, 0.4395729127778045, 0.1674135497945245, 0.1674135497945245, 0.1674135497945245, 0.2154677485654125, 0.2154677485654125, 0.2154677485654125, 0.17308655491075953, 0.17308655491075953, 0.17308655491075953, 0.13782704784993327, 0.13782704784993327, 0.13782704784993327, 0.22159049255002172, 0.22159049255002172, 0.22159049255002172, 0.20674154495894792, 0.20674154495894792, 0.20674154495894792, 0.220478806291455, 0.220478806291455, 0.220478806291455, 0.21642010072209072, 0.21642010072209072, 0.21642010072209072, 0.23871692849241777, 0.23871692849241777, 0.23871692849241777, 0.13988683832167603, 0.13988683832167603, 0.13988683832167603, 0.023672058137281793, 0.023672058137281793, 0.023672058137281793, 0.042156952467514386, 0.042156952467514386, 0.042156952467514386, 0.1688108937057473, 0.1688108937057473, 0.1688108937057473, 0.07578283539137742, 0.07578283539137742, 0.07578283539137742, 0.11222719991647245, 0.11222719991647245, 0.11222719991647245, 0.18462200693064768, 0.18462200693064768, 0.18462200693064768, 0.10751067275343107, 0.10751067275343107, 0.10751067275343107, 0.17144000619105648, 0.17144000619105648, 0.17144000619105648, 0.0777903633286331, 0.0777903633286331, 0.0777903633286331, 0.15583415367200903, 0.15583415367200903, 0.15583415367200903, 0.15103285221494933, 0.15103285221494933, 0.15103285221494933, 0.5775551187956809, 0.5775551187956809, 0.5775551187956809, 0.501094519060819, 0.501094519060819, 0.501094519060819, 0.5621694332022898, 0.5621694332022898, 0.5621694332022898, 0.1028638896562718, 0.1028638896562718, 0.1028638896562718, 0.0915296275196078, 0.0915296275196078, 0.0915296275196078, 0.09836349462307992, 0.09836349462307992, 0.09836349462307992, 0.22164706608969997, 0.22164706608969997, 0.22164706608969997, 0.2707088152011342, 0.2707088152011342, 0.2707088152011342, 0.25333600541707113, 0.25333600541707113, 0.25333600541707113, 0.1488864573156652, 0.1488864573156652, 0.1488864573156652, 0.19521851789781908, 0.19521851789781908, 0.19521851789781908, 0.25527711071275594, 0.25527711071275594, 0.25527711071275594, 0.11074452164436022, 0.11074452164436022, 0.11074452164436022, 0.23050176330348315, 0.23050176330348315, 0.23050176330348315, 0.2012693887005219, 0.2012693887005219, 0.2012693887005219, 0.23310880371827947, 0.23310880371827947, 0.23310880371827947, 0.27091603420932975, 0.27091603420932975, 0.27091603420932975, 0.22035699828214017, 0.22035699828214017, 0.22035699828214017, 0.2219372996739416, 0.2219372996739416, 0.2219372996739416, 0.18336763863730965, 0.18336763863730965, 0.18336763863730965, 0.2085647611600584, 0.2085647611600584, 0.2085647611600584, 0.9473678773037841, 0.9473678773037841, 0.9473678773037841, 0.9671451679945592, 0.9671451679945592, 0.9671451679945592, 0.14873469210994994, 0.14873469210994994, 0.14873469210994994, 0.15717476531105934, 0.15717476531105934, 0.15717476531105934, 0.21410542129070398, 0.21410542129070398, 0.21410542129070398, 0.10558244001051631, 0.10558244001051631, 0.10558244001051631, 0.193312540446953, 0.193312540446953, 0.193312540446953, 0.19363565406207417, 0.19363565406207417, 0.19363565406207417, 0.19696953367385417, 0.19696953367385417, 0.19696953367385417, 0.0888147809702452, 0.0888147809702452, 0.0888147809702452, 0.08941072825063201, 0.08941072825063201, 0.08941072825063201, 0.08154642271219037, 0.08154642271219037, 0.08154642271219037]}, "mutation_prompt": null}
{"id": "7aed3607-5508-472f-abdf-e031619ef909", "solution": "import numpy as np\n\nclass Enhanced_QPSO_DLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    direction = np.sign(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + direction * quantum_distance * np.random.uniform(0, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    random_idx1, random_idx2 = np.random.choice(self.pop_size, 2, replace=False)\n                    donor_vector = positions[random_idx1] + 0.5 * (positions[random_idx2] - positions[random_idx1])\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_DLS", "description": "Enhanced Quantum Particle Swarm Optimization with Dynamic Inertia, Adaptive Quantum Step, and Differential Local Search for improved global convergence.", "configspace": "", "generation": 74, "fitness": 0.324695196801058, "feedback": "The algorithm Enhanced_QPSO_DLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.30.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9583875731092604, 0.9583875731092604, 0.9583875731092604, 0.9537737834247038, 0.9537737834247038, 0.9537737834247038, 0.963422253497552, 0.963422253497552, 0.963422253497552, 0.8806481648568746, 0.8806481648568746, 0.8806481648568746, 0.892330142306935, 0.892330142306935, 0.892330142306935, 0.8982703690701461, 0.8982703690701461, 0.8982703690701461, 0.1823921410917283, 0.1823921410917283, 0.1823921410917283, 0.11909902425299734, 0.11909902425299734, 0.11909902425299734, 0.12425083910076207, 0.12425083910076207, 0.12425083910076207, 0.07850217400959103, 0.07850217400959103, 0.07850217400959103, 0.07142030838192093, 0.07142030838192093, 0.07142030838192093, 0.11238898704953448, 0.11238898704953448, 0.11238898704953448, 0.9956801462197931, 0.9956801462197931, 0.9956801462197931, 0.9957614952761346, 0.9957614952761346, 0.9957614952761346, 0.9949306885792865, 0.9949306885792865, 0.9949306885792865, 0.6621407447803902, 0.6621407447803902, 0.6621407447803902, 0.6871552863867104, 0.6871552863867104, 0.6871552863867104, 0.6892979026077962, 0.6892979026077962, 0.6892979026077962, 0.22954716211660875, 0.22954716211660875, 0.22954716211660875, 0.2217674073037852, 0.2217674073037852, 0.2217674073037852, 0.1198453331302135, 0.1198453331302135, 0.1198453331302135, 0.2092792278814104, 0.2092792278814104, 0.2092792278814104, 0.13249486844385083, 0.13249486844385083, 0.13249486844385083, 0.2366260035830926, 0.2366260035830926, 0.2366260035830926, 0.220012878714118, 0.220012878714118, 0.220012878714118, 0.21398821302425952, 0.21398821302425952, 0.21398821302425952, 0.22932828301182606, 0.22932828301182606, 0.22932828301182606, 0.1165677419646266, 0.1165677419646266, 0.1165677419646266, 0.06233749371723152, 0.06233749371723152, 0.06233749371723152, 0.0054307170538604455, 0.0054307170538604455, 0.0054307170538604455, 0.07153903511786852, 0.07153903511786852, 0.07153903511786852, 0.068769774032028, 0.068769774032028, 0.068769774032028, 0.1946201201472627, 0.1946201201472627, 0.1946201201472627, 0.14759289131850206, 0.14759289131850206, 0.14759289131850206, 0.10898002558302955, 0.10898002558302955, 0.10898002558302955, 0.10551622448182751, 0.10551622448182751, 0.10551622448182751, 0.0524507015264728, 0.0524507015264728, 0.0524507015264728, 0.07624263991396618, 0.07624263991396618, 0.07624263991396618, 0.0882228718796303, 0.0882228718796303, 0.0882228718796303, 0.5645096820552116, 0.5645096820552116, 0.5645096820552116, 0.5686834704134596, 0.5686834704134596, 0.5686834704134596, 0.6192835433750474, 0.6192835433750474, 0.6192835433750474, 0.14638389701654797, 0.14638389701654797, 0.14638389701654797, 0.11990314308698458, 0.11990314308698458, 0.11990314308698458, 0.1283392373570006, 0.1283392373570006, 0.1283392373570006, 0.19308813068508202, 0.19308813068508202, 0.19308813068508202, 0.37184976540387626, 0.37184976540387626, 0.37184976540387626, 0.3847786924025315, 0.3847786924025315, 0.3847786924025315, 0.19174707854137107, 0.19174707854137107, 0.19174707854137107, 0.3175346020860841, 0.3175346020860841, 0.3175346020860841, 0.2632777134484011, 0.2632777134484011, 0.2632777134484011, 0.15018291443522225, 0.15018291443522225, 0.15018291443522225, 0.31300499707663443, 0.31300499707663443, 0.31300499707663443, 0.19619444040348544, 0.19619444040348544, 0.19619444040348544, 0.19985639972595515, 0.19985639972595515, 0.19985639972595515, 0.2386841034205519, 0.2386841034205519, 0.2386841034205519, 0.23021376749914946, 0.23021376749914946, 0.23021376749914946, 0.18597622336113817, 0.18597622336113817, 0.18597622336113817, 0.1967090145502921, 0.1967090145502921, 0.1967090145502921, 0.1809052425968526, 0.1809052425968526, 0.1809052425968526, 0.9474918445522313, 0.9474918445522313, 0.9474918445522313, 0.9561309467800726, 0.9561309467800726, 0.9561309467800726, 0.16759915806663195, 0.16759915806663195, 0.16759915806663195, 0.15778997013073237, 0.15778997013073237, 0.15778997013073237, 0.2128528138354382, 0.2128528138354382, 0.2128528138354382, 0.10555527838849688, 0.10555527838849688, 0.10555527838849688, 0.2012565613291728, 0.2012565613291728, 0.2012565613291728, 0.19687898322512432, 0.19687898322512432, 0.19687898322512432, 0.18770949971940987, 0.18770949971940987, 0.18770949971940987, 0.10469237950584742, 0.10469237950584742, 0.10469237950584742, 0.11143753608594476, 0.11143753608594476, 0.11143753608594476, 0.09654150116860727, 0.09654150116860727, 0.09654150116860727]}, "mutation_prompt": null}
{"id": "8abb43c1-17cb-4329-9067-315780301065", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "154a7c1a-29bd-43c9-8a13-58c82cdcfec4", "solution": "import numpy as np\n\nclass Improved_QPSO_DQP_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.initial_quantum_prob = 0.1\n        self.quantum_prob = self.initial_quantum_prob\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n                # Adjust quantum probability based on progress\n                self.quantum_prob = self.initial_quantum_prob + 0.9 * (evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.normal(0, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.2)\n\n        return global_best_score", "name": "Improved_QPSO_DQP_ALS", "description": "Quantum-inspired Particle Swarm Optimization with Dynamic Quantum Probability and Adaptive Local Search for enhanced exploration-exploitation balance.", "configspace": "", "generation": 76, "fitness": 0.3073319812598867, "feedback": "The algorithm Improved_QPSO_DQP_ALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9653673021631395, 0.9653673021631395, 0.9653673021631395, 0.9534717438241838, 0.9534717438241838, 0.9534717438241838, 0.9532761898081459, 0.9532761898081459, 0.9532761898081459, 0.905507385022874, 0.905507385022874, 0.905507385022874, 0.9166752766196878, 0.9166752766196878, 0.9166752766196878, 0.8901184124275175, 0.8901184124275175, 0.8901184124275175, 0.09274722978560479, 0.09274722978560479, 0.09274722978560479, 0.13616599816379327, 0.13616599816379327, 0.13616599816379327, 0.1000154457618101, 0.1000154457618101, 0.1000154457618101, 0.09669445095957385, 0.09669445095957385, 0.09669445095957385, 0.11792192512154653, 0.11792192512154653, 0.11792192512154653, 0.11799368471544769, 0.11799368471544769, 0.11799368471544769, 0.9945269783622865, 0.9945269783622865, 0.9945269783622865, 0.9945309866889357, 0.9945309866889357, 0.9945309866889357, 0.9940791912822214, 0.9940791912822214, 0.9940791912822214, 0.3552162539724274, 0.3552162539724274, 0.3552162539724274, 0.417793598256903, 0.417793598256903, 0.417793598256903, 0.6136433527139332, 0.6136433527139332, 0.6136433527139332, 0.3930190734091674, 0.3930190734091674, 0.3930190734091674, 0.17881119267707313, 0.17881119267707313, 0.17881119267707313, 0.12257972159409947, 0.12257972159409947, 0.12257972159409947, 0.21964218143704706, 0.21964218143704706, 0.21964218143704706, 0.13529161323500116, 0.13529161323500116, 0.13529161323500116, 0.1932681661823269, 0.1932681661823269, 0.1932681661823269, 0.1897868985465997, 0.1897868985465997, 0.1897868985465997, 0.13211420362994808, 0.13211420362994808, 0.13211420362994808, 0.2069991417375462, 0.2069991417375462, 0.2069991417375462, 0.05348493009078226, 0.05348493009078226, 0.05348493009078226, 0.014514488805176029, 0.014514488805176029, 0.014514488805176029, 0.002952793546953769, 0.002952793546953769, 0.002952793546953769, 0.07985071557446022, 0.07985071557446022, 0.07985071557446022, 0.057562729048430294, 0.057562729048430294, 0.057562729048430294, 0.17634747650407734, 0.17634747650407734, 0.17634747650407734, 0.05634575997916924, 0.05634575997916924, 0.05634575997916924, 0.1089457381568234, 0.1089457381568234, 0.1089457381568234, 0.08795584661494271, 0.08795584661494271, 0.08795584661494271, 0.11237575122249577, 0.11237575122249577, 0.11237575122249577, 0.210922410399634, 0.210922410399634, 0.210922410399634, 0.11154247029491016, 0.11154247029491016, 0.11154247029491016, 0.5855707767908592, 0.5855707767908592, 0.5855707767908592, 0.505467827899333, 0.505467827899333, 0.505467827899333, 0.504889983030742, 0.504889983030742, 0.504889983030742, 0.13562691574171482, 0.13562691574171482, 0.13562691574171482, 0.13385803056613554, 0.13385803056613554, 0.13385803056613554, 0.10310665265793884, 0.10310665265793884, 0.10310665265793884, 0.16489077636843363, 0.16489077636843363, 0.16489077636843363, 0.35993452215666055, 0.35993452215666055, 0.35993452215666055, 0.18439347380493454, 0.18439347380493454, 0.18439347380493454, 0.20582555576968276, 0.20582555576968276, 0.20582555576968276, 0.3925602549813022, 0.3925602549813022, 0.3925602549813022, 0.3694327544708911, 0.3694327544708911, 0.3694327544708911, 0.11310911737096263, 0.11310911737096263, 0.11310911737096263, 0.2623815037967795, 0.2623815037967795, 0.2623815037967795, 0.24179143938855563, 0.24179143938855563, 0.24179143938855563, 0.21442270955403908, 0.21442270955403908, 0.21442270955403908, 0.22955818649727733, 0.22955818649727733, 0.22955818649727733, 0.22319385816878812, 0.22319385816878812, 0.22319385816878812, 0.22891111227328786, 0.22891111227328786, 0.22891111227328786, 0.20167500733524812, 0.20167500733524812, 0.20167500733524812, 0.1641434122509119, 0.1641434122509119, 0.1641434122509119, 0.1897246160506777, 0.1897246160506777, 0.1897246160506777, 0.9523907418406174, 0.9523907418406174, 0.9523907418406174, 0.14884247832178588, 0.14884247832178588, 0.14884247832178588, 0.6714404578081197, 0.6714404578081197, 0.6714404578081197, 0.21408287104938584, 0.21408287104938584, 0.21408287104938584, 0.10555015143943691, 0.10555015143943691, 0.10555015143943691, 0.18107477728975552, 0.18107477728975552, 0.18107477728975552, 0.18887684711586894, 0.18887684711586894, 0.18887684711586894, 0.2063409063099878, 0.2063409063099878, 0.2063409063099878, 0.1065703598739236, 0.1065703598739236, 0.1065703598739236, 0.08815286247223808, 0.08815286247223808, 0.08815286247223808, 0.09005300192886656, 0.09005300192886656, 0.09005300192886656]}, "mutation_prompt": null}
{"id": "f79f99ce-f4f1-4818-9fbf-c5e09b710dd0", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "2b5afb91-bd8d-4fc4-ab01-92c1809bb979", "solution": "import numpy as np\n\nclass Enhanced_QPSO_ANS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.constriction_factor = 0.729  # Constriction factor for velocity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = self.constriction_factor * (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    neighborhood_factor = 0.5 * (1 + np.random.rand())  # Randomize neighborhood extent\n                    local_positions = global_best_position + neighborhood_factor * np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_ANS", "description": "Enhanced Quantum-Inspired Particle Swarm Optimization with Adaptive Neighborhood Search and Dynamic Constriction Coefficient for more efficient exploration-exploitation balance.", "configspace": "", "generation": 78, "fitness": 0.2667164209351787, "feedback": "The algorithm Enhanced_QPSO_ANS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.7306023124823062, 0.7306023124823062, 0.7306023124823062, 0.774642820739903, 0.774642820739903, 0.774642820739903, 0.7179375998059337, 0.7179375998059337, 0.7179375998059337, 0.1024000262714777, 0.1024000262714777, 0.1024000262714777, 0.281585915727676, 0.281585915727676, 0.281585915727676, 0.08319387922523946, 0.08319387922523946, 0.08319387922523946, 0.07967897565912374, 0.07967897565912374, 0.07967897565912374, 0.09954981740073077, 0.09954981740073077, 0.09954981740073077, 0.12021499914492018, 0.12021499914492018, 0.12021499914492018, 0.07873619967616363, 0.07873619967616363, 0.07873619967616363, 0.09867390677541843, 0.09867390677541843, 0.09867390677541843, 0.07384485766162596, 0.07384485766162596, 0.07384485766162596, 0.9923666162653729, 0.9923666162653729, 0.9923666162653729, 0.9920976840039709, 0.9920976840039709, 0.9920976840039709, 0.9908912847450536, 0.9908912847450536, 0.9908912847450536, 0.4040980316833883, 0.4040980316833883, 0.4040980316833883, 0.4585935045236541, 0.4585935045236541, 0.4585935045236541, 0.4174310830904262, 0.4174310830904262, 0.4174310830904262, 0.15841449620932202, 0.15841449620932202, 0.15841449620932202, 0.17136431589618584, 0.17136431589618584, 0.17136431589618584, 0.08721152499665075, 0.08721152499665075, 0.08721152499665075, 0.39596407545576107, 0.39596407545576107, 0.39596407545576107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2349909186660626, 0.2349909186660626, 0.2349909186660626, 0.18222157915683002, 0.18222157915683002, 0.18222157915683002, 0.13238662194490514, 0.13238662194490514, 0.13238662194490514, 0.13830293760796752, 0.13830293760796752, 0.13830293760796752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024280683921624968, 0.024280683921624968, 0.024280683921624968, 0.003222076991737932, 0.003222076991737932, 0.003222076991737932, 0.10073091953027902, 0.10073091953027902, 0.10073091953027902, 0.06984242782654926, 0.06984242782654926, 0.06984242782654926, 0.10918189187353877, 0.10918189187353877, 0.10918189187353877, 0.13225048951742024, 0.13225048951742024, 0.13225048951742024, 0.07659895732894528, 0.07659895732894528, 0.07659895732894528, 0.08417826298103648, 0.08417826298103648, 0.08417826298103648, 0.11125337232957067, 0.11125337232957067, 0.11125337232957067, 0.0927222780051663, 0.0927222780051663, 0.0927222780051663, 0.0936019651144041, 0.0936019651144041, 0.0936019651144041, 0.5270000871550191, 0.5270000871550191, 0.5270000871550191, 0.5116322353367855, 0.5116322353367855, 0.5116322353367855, 0.47508811096228054, 0.47508811096228054, 0.47508811096228054, 0.043003046372869, 0.043003046372869, 0.043003046372869, 0.0992161259307901, 0.0992161259307901, 0.0992161259307901, 0.06770504557523527, 0.06770504557523527, 0.06770504557523527, 0.20418382240327704, 0.20418382240327704, 0.20418382240327704, 0.21890092340107625, 0.21890092340107625, 0.21890092340107625, 0.17977771755758276, 0.17977771755758276, 0.17977771755758276, 0.14140909556506553, 0.14140909556506553, 0.14140909556506553, 0.2902839995465235, 0.2902839995465235, 0.2902839995465235, 0.15467843073657173, 0.15467843073657173, 0.15467843073657173, 0.11437390375920675, 0.11437390375920675, 0.11437390375920675, 0.2012797944627044, 0.2012797944627044, 0.2012797944627044, 0.17874256488681772, 0.17874256488681772, 0.17874256488681772, 0.31729608672885345, 0.31729608672885345, 0.31729608672885345, 0.2595842608429524, 0.2595842608429524, 0.2595842608429524, 0.24026456755709513, 0.24026456755709513, 0.24026456755709513, 0.17502836392411503, 0.17502836392411503, 0.17502836392411503, 0.18399850936352147, 0.18399850936352147, 0.18399850936352147, 0.20161446721092757, 0.20161446721092757, 0.20161446721092757, 0.9076588962096933, 0.9076588962096933, 0.9076588962096933, 0.9745775388207008, 0.9745775388207008, 0.9745775388207008, 0.8951819046674002, 0.8951819046674002, 0.8951819046674002, 0.723232734651226, 0.723232734651226, 0.723232734651226, 0.10547640185558504, 0.10547640185558504, 0.10547640185558504, 0.10544423701871819, 0.10544423701871819, 0.10544423701871819, 0.1872100579307917, 0.1872100579307917, 0.1872100579307917, 0.20090122163130786, 0.20090122163130786, 0.20090122163130786, 0.22143684495781557, 0.22143684495781557, 0.22143684495781557, 0.08096420400260873, 0.08096420400260873, 0.08096420400260873, 0.05110895030630813, 0.05110895030630813, 0.05110895030630813, 0.0698688457651, 0.0698688457651, 0.0698688457651]}, "mutation_prompt": null}
{"id": "16eb6cc9-bce7-4e2e-97d0-b8e1dd3780ca", "solution": "import numpy as np\n\nclass Hybrid_QPSO_AMDLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.mutation_prob = 0.2\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                # Apply adaptive mutation\n                if np.random.rand() < self.mutation_prob:\n                    mutation_step = np.random.normal(0, dynamic_exploration, self.dim)\n                    positions[i] = np.clip(positions[i] + mutation_step, self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Hybrid_QPSO_AMDLS", "description": "Hybrid Quantum-inspired Particle Swarm Optimization with Adaptive Mutation and Dynamic Local Search for enhanced exploration and exploitation balance.", "configspace": "", "generation": 79, "fitness": 0.276622959764174, "feedback": "The algorithm Hybrid_QPSO_AMDLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.7771774773344821, 0.7771774773344821, 0.7771774773344821, 0.7687130609470901, 0.7687130609470901, 0.7687130609470901, 0.7241394062740756, 0.7241394062740756, 0.7241394062740756, 0.20999320325993187, 0.20999320325993187, 0.20999320325993187, 0.2180992692628625, 0.2180992692628625, 0.2180992692628625, 0.22658898220696166, 0.22658898220696166, 0.22658898220696166, 0.14605270614058607, 0.14605270614058607, 0.14605270614058607, 0.12354846455922774, 0.12354846455922774, 0.12354846455922774, 0.13577197161980747, 0.13577197161980747, 0.13577197161980747, 0.12382452140900535, 0.12382452140900535, 0.12382452140900535, 0.12475023114537909, 0.12475023114537909, 0.12475023114537909, 0.10579198795269218, 0.10579198795269218, 0.10579198795269218, 0.9928466805414559, 0.9928466805414559, 0.9928466805414559, 0.9963662878600148, 0.9963662878600148, 0.9963662878600148, 0.996680775134837, 0.996680775134837, 0.996680775134837, 0.43432866348945887, 0.43432866348945887, 0.43432866348945887, 0.41362522637863774, 0.41362522637863774, 0.41362522637863774, 0.36414897979457284, 0.36414897979457284, 0.36414897979457284, 0.26883784016836343, 0.26883784016836343, 0.26883784016836343, 0.21282886408473967, 0.21282886408473967, 0.21282886408473967, 0.2709482019082322, 0.2709482019082322, 0.2709482019082322, 0.10351214769323469, 0.10351214769323469, 0.10351214769323469, 0.18025471475466803, 0.18025471475466803, 0.18025471475466803, 0.17709593765318044, 0.17709593765318044, 0.17709593765318044, 0.16083819743492367, 0.16083819743492367, 0.16083819743492367, 0.236026557310824, 0.236026557310824, 0.236026557310824, 0.3329025311376247, 0.3329025311376247, 0.3329025311376247, 0.0003189011649188389, 0.0003189011649188389, 0.0003189011649188389, 0.016161791982701068, 0.016161791982701068, 0.016161791982701068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06779965888708506, 0.06779965888708506, 0.06779965888708506, 0.0869449031148295, 0.0869449031148295, 0.0869449031148295, 0.1512432053631686, 0.1512432053631686, 0.1512432053631686, 0.06311736232280984, 0.06311736232280984, 0.06311736232280984, 0.08454813572222086, 0.08454813572222086, 0.08454813572222086, 0.10441912703521883, 0.10441912703521883, 0.10441912703521883, 0.05623130707152957, 0.05623130707152957, 0.05623130707152957, 0.08206944460256471, 0.08206944460256471, 0.08206944460256471, 0.07770304360476077, 0.07770304360476077, 0.07770304360476077, 0.48778948005465295, 0.48778948005465295, 0.48778948005465295, 0.48075960774578685, 0.48075960774578685, 0.48075960774578685, 0.4773023398301559, 0.4773023398301559, 0.4773023398301559, 0.09702164967241855, 0.09702164967241855, 0.09702164967241855, 0.10739811529033727, 0.10739811529033727, 0.10739811529033727, 0.12854738875144034, 0.12854738875144034, 0.12854738875144034, 0.2080844226389824, 0.2080844226389824, 0.2080844226389824, 0.29092094529026535, 0.29092094529026535, 0.29092094529026535, 0.23545616914432466, 0.23545616914432466, 0.23545616914432466, 0.27820915174767147, 0.27820915174767147, 0.27820915174767147, 0.1850532821169305, 0.1850532821169305, 0.1850532821169305, 0.31515410913472375, 0.31515410913472375, 0.31515410913472375, 0.11758217635901624, 0.11758217635901624, 0.11758217635901624, 0.18854813393322134, 0.18854813393322134, 0.18854813393322134, 0.2158648547720663, 0.2158648547720663, 0.2158648547720663, 0.2349959620736669, 0.2349959620736669, 0.2349959620736669, 0.23073491353958953, 0.23073491353958953, 0.23073491353958953, 0.22382267113646293, 0.22382267113646293, 0.22382267113646293, 0.20796334880259926, 0.20796334880259926, 0.20796334880259926, 0.23322010443371977, 0.23322010443371977, 0.23322010443371977, 0.20707572130282548, 0.20707572130282548, 0.20707572130282548, 0.9257913352244929, 0.9257913352244929, 0.9257913352244929, 0.6720900392614242, 0.6720900392614242, 0.6720900392614242, 0.9187497714977989, 0.9187497714977989, 0.9187497714977989, 0.08343974492112993, 0.08343974492112993, 0.08343974492112993, 0.5904704838856192, 0.5904704838856192, 0.5904704838856192, 0.1050212673145714, 0.1050212673145714, 0.1050212673145714, 0.21116849842972318, 0.21116849842972318, 0.21116849842972318, 0.208205250557567, 0.208205250557567, 0.208205250557567, 0.1788352258956576, 0.1788352258956576, 0.1788352258956576, 0.0818507992254115, 0.0818507992254115, 0.0818507992254115, 0.09083095231510574, 0.09083095231510574, 0.09083095231510574, 0.08254541839249219, 0.08254541839249219, 0.08254541839249219]}, "mutation_prompt": null}
{"id": "f03f4478-b3c2-4398-b898-be979a10518c", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "7c124706-583d-4c76-b10e-009b785f8539", "solution": "import numpy as np\n\nclass Enhanced_AQPSO_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.15\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.adaptive_radius = 0.05\n        self.radius_decay = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(min(self.pop_size, int(self.pop_size * 0.3))):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= self.radius_decay\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n                if np.random.rand() < self.adaptive_radius:\n                    self.local_search_radius *= self.radius_decay\n\n        return global_best_score", "name": "Enhanced_AQPSO_ALS", "description": "Enhanced Adaptive Quantum Particle Swarm Optimization with Accelerated Local Search for improved convergence and robustness.", "configspace": "", "generation": 81, "fitness": 0.33583520151326485, "feedback": "The algorithm Enhanced_AQPSO_ALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.32.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9702577781363615, 0.9702577781363615, 0.9702577781363615, 0.9575122745721282, 0.9575122745721282, 0.9575122745721282, 0.9670669826842573, 0.9670669826842573, 0.9670669826842573, 0.8623275637525393, 0.8623275637525393, 0.8623275637525393, 0.9021829701047338, 0.9021829701047338, 0.9021829701047338, 0.919209776114326, 0.919209776114326, 0.919209776114326, 0.0870726626241134, 0.0870726626241134, 0.0870726626241134, 0.12017337030232533, 0.12017337030232533, 0.12017337030232533, 0.09752348927438126, 0.09752348927438126, 0.09752348927438126, 0.08173897065001579, 0.08173897065001579, 0.08173897065001579, 0.10115678779713633, 0.10115678779713633, 0.10115678779713633, 0.09402748370291447, 0.09402748370291447, 0.09402748370291447, 0.9961482593146661, 0.9961482593146661, 0.9961482593146661, 0.9960238660114428, 0.9960238660114428, 0.9960238660114428, 0.9952089248875116, 0.9952089248875116, 0.9952089248875116, 0.4533468427433315, 0.4533468427433315, 0.4533468427433315, 0.5299444017051312, 0.5299444017051312, 0.5299444017051312, 0.8457819491937806, 0.8457819491937806, 0.8457819491937806, 0.9151965557040206, 0.9151965557040206, 0.9151965557040206, 0.28429393022181726, 0.28429393022181726, 0.28429393022181726, 0.16493489112460735, 0.16493489112460735, 0.16493489112460735, 0.2034619574015799, 0.2034619574015799, 0.2034619574015799, 0.19251651093910982, 0.19251651093910982, 0.19251651093910982, 0.21236643767432817, 0.21236643767432817, 0.21236643767432817, 0.2359699097276311, 0.2359699097276311, 0.2359699097276311, 0.20641976112774807, 0.20641976112774807, 0.20641976112774807, 0.24408411898743987, 0.24408411898743987, 0.24408411898743987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030146220270665935, 0.0030146220270665935, 0.0030146220270665935, 0.09348552278934452, 0.09348552278934452, 0.09348552278934452, 0.06512956766126377, 0.06512956766126377, 0.06512956766126377, 0.23031263138121782, 0.23031263138121782, 0.23031263138121782, 0.16387478021346902, 0.16387478021346902, 0.16387478021346902, 0.1143131021745476, 0.1143131021745476, 0.1143131021745476, 0.12816718329752963, 0.12816718329752963, 0.12816718329752963, 0.055562410393094064, 0.055562410393094064, 0.055562410393094064, 0.060796879125047276, 0.060796879125047276, 0.060796879125047276, 0.24315759762456313, 0.24315759762456313, 0.24315759762456313, 0.5081789931780919, 0.5081789931780919, 0.5081789931780919, 0.623034810367219, 0.623034810367219, 0.623034810367219, 0.5664168461020056, 0.5664168461020056, 0.5664168461020056, 0.08218408336640781, 0.08218408336640781, 0.08218408336640781, 0.10332552356994984, 0.10332552356994984, 0.10332552356994984, 0.10706778263504368, 0.10706778263504368, 0.10706778263504368, 0.19266256761421208, 0.19266256761421208, 0.19266256761421208, 0.2942300916231243, 0.2942300916231243, 0.2942300916231243, 0.15376247690033928, 0.15376247690033928, 0.15376247690033928, 0.17162047648189271, 0.17162047648189271, 0.17162047648189271, 0.24851873580009687, 0.24851873580009687, 0.24851873580009687, 0.346426477583342, 0.346426477583342, 0.346426477583342, 0.10648128972427962, 0.10648128972427962, 0.10648128972427962, 0.2329374563319514, 0.2329374563319514, 0.2329374563319514, 0.16404769562011445, 0.16404769562011445, 0.16404769562011445, 0.21906174268412792, 0.21906174268412792, 0.21906174268412792, 0.25484227678321036, 0.25484227678321036, 0.25484227678321036, 0.19224924372078112, 0.19224924372078112, 0.19224924372078112, 0.18408078047723142, 0.18408078047723142, 0.18408078047723142, 0.2286093110449713, 0.2286093110449713, 0.2286093110449713, 0.19117595192180747, 0.19117595192180747, 0.19117595192180747, 0.9586558153537978, 0.9586558153537978, 0.9586558153537978, 0.9568004815425087, 0.9568004815425087, 0.9568004815425087, 0.15932635386547955, 0.15932635386547955, 0.15932635386547955, 0.8653972169195887, 0.8653972169195887, 0.8653972169195887, 0.2137316686929095, 0.2137316686929095, 0.2137316686929095, 0.10559344936084913, 0.10559344936084913, 0.10559344936084913, 0.1925418652613795, 0.1925418652613795, 0.1925418652613795, 0.2138915415668845, 0.2138915415668845, 0.2138915415668845, 0.2312726759070446, 0.2312726759070446, 0.2312726759070446, 0.09980288802673076, 0.09980288802673076, 0.09980288802673076, 0.11780068507902275, 0.11780068507902275, 0.11780068507902275, 0.10044253068215081, 0.10044253068215081, 0.10044253068215081]}, "mutation_prompt": null}
{"id": "88e96143-11ba-4225-84da-b82b49eb3054", "solution": "import numpy as np\n\nclass Enhanced_QPSO_DDP:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.1  # Threshold for diversity control\n        self.diversity_factor = 0.5     # Factor to amplify diversity\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                     + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                     + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n            # Diversity preservation mechanism\n            diversity = np.std(positions, axis=0).mean()\n            if diversity < self.diversity_threshold:\n                for i in range(self.pop_size):\n                    positions[i] += self.diversity_factor * np.random.uniform(-1, 1, self.dim)\n                    positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n        return global_best_score", "name": "Enhanced_QPSO_DDP", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Steps and Dynamic Diversity Preservation for improved exploration-exploitation balance.", "configspace": "", "generation": 82, "fitness": 0.33006495923600343, "feedback": "The algorithm Enhanced_QPSO_DDP got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.30.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9429675025838519, 0.9429675025838519, 0.9429675025838519, 0.9138828144460531, 0.9138828144460531, 0.9138828144460531, 0.9373517208866025, 0.9373517208866025, 0.9373517208866025, 0.7325945110116592, 0.7325945110116592, 0.7325945110116592, 0.7731952502418078, 0.7731952502418078, 0.7731952502418078, 0.7434390564357233, 0.7434390564357233, 0.7434390564357233, 0.19400068210672694, 0.19400068210672694, 0.19400068210672694, 0.1579259857513905, 0.1579259857513905, 0.1579259857513905, 0.17027295442945123, 0.17027295442945123, 0.17027295442945123, 0.16187926456247936, 0.16187926456247936, 0.16187926456247936, 0.14591496249593638, 0.14591496249593638, 0.14591496249593638, 0.1134064736561029, 0.1134064736561029, 0.1134064736561029, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.608107437302875, 0.608107437302875, 0.608107437302875, 0.5069645931169764, 0.5069645931169764, 0.5069645931169764, 0.5110809431486814, 0.5110809431486814, 0.5110809431486814, 0.2296268188262175, 0.2296268188262175, 0.2296268188262175, 0.28134581720724694, 0.28134581720724694, 0.28134581720724694, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.20368957085168582, 0.20368957085168582, 0.20368957085168582, 0.19784244455818367, 0.19784244455818367, 0.19784244455818367, 0.23547387688518417, 0.23547387688518417, 0.23547387688518417, 0.22952192005778038, 0.22952192005778038, 0.22952192005778038, 0.22522055466290836, 0.22522055466290836, 0.22522055466290836, 0.21834955133876222, 0.21834955133876222, 0.21834955133876222, 0.0025811456508592068, 0.0025811456508592068, 0.0025811456508592068, 0.008030317188096214, 0.008030317188096214, 0.008030317188096214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.16701899608889326, 0.16701899608889326, 0.16701899608889326, 0.08883029332414205, 0.08883029332414205, 0.08883029332414205, 0.07783906639812288, 0.07783906639812288, 0.07783906639812288, 0.04796038924145507, 0.04796038924145507, 0.04796038924145507, 0.05893885574838953, 0.05893885574838953, 0.05893885574838953, 0.1073242849335071, 0.1073242849335071, 0.1073242849335071, 0.5203359665845209, 0.5203359665845209, 0.5203359665845209, 0.5315666246067515, 0.5315666246067515, 0.5315666246067515, 0.5577184410111888, 0.5577184410111888, 0.5577184410111888, 0.09258372971447404, 0.09258372971447404, 0.09258372971447404, 0.1365446813556933, 0.1365446813556933, 0.1365446813556933, 0.08387726917934601, 0.08387726917934601, 0.08387726917934601, 0.4378229839494663, 0.4378229839494663, 0.4378229839494663, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16752866175949455, 0.16752866175949455, 0.16752866175949455, 0.19025049351097567, 0.19025049351097567, 0.19025049351097567, 0.2593830020746254, 0.2593830020746254, 0.2593830020746254, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.12545505768229304, 0.12545505768229304, 0.12545505768229304, 0.3572885576028765, 0.3572885576028765, 0.3572885576028765, 0.20483859099859392, 0.20483859099859392, 0.20483859099859392, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8273381776737725, 0.8273381776737725, 0.8273381776737725, 0.22860266534433882, 0.22860266534433882, 0.22860266534433882, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905616894728505, 0.18905616894728505, 0.18905616894728505, 0.9516854297059959, 0.9516854297059959, 0.9516854297059959, 0.9134627013503833, 0.9134627013503833, 0.9134627013503833, 0.9119881139404468, 0.9119881139404468, 0.9119881139404468, 0.21202868542370457, 0.21202868542370457, 0.21202868542370457, 0.10540858246368756, 0.10540858246368756, 0.10540858246368756, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "a2d94cb1-37dd-43e1-a969-0ae64db83d26", "solution": "import numpy as np\n\nclass Enhanced_QPSO_GR:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.97\n        self.quantum_prob = 0.15\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.golden_ratio = 0.618\n        np.random.seed(0)\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Apply golden ratio-based local search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_step = self.local_search_radius * self.golden_ratio\n                    local_positions = global_best_position + np.random.uniform(-local_step, local_step, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_GR", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Adaptive Search Mechanics and Golden Ratio-based Local Search for improved global convergence.", "configspace": "", "generation": 83, "fitness": 0.32468746088740186, "feedback": "The algorithm Enhanced_QPSO_GR got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.31.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9583804364373153, 0.9583804364373153, 0.9583804364373153, 0.9648745798492037, 0.9648745798492037, 0.9648745798492037, 0.9504915911975053, 0.9504915911975053, 0.9504915911975053, 0.8906525613066384, 0.8906525613066384, 0.8906525613066384, 0.9358501696009519, 0.9358501696009519, 0.9358501696009519, 0.9012682310687651, 0.9012682310687651, 0.9012682310687651, 0.15733235185652572, 0.15733235185652572, 0.15733235185652572, 0.12107099745453465, 0.12107099745453465, 0.12107099745453465, 0.12341258485308915, 0.12341258485308915, 0.12341258485308915, 0.06556355324419383, 0.06556355324419383, 0.06556355324419383, 0.10523461893314101, 0.10523461893314101, 0.10523461893314101, 0.12122860710131411, 0.12122860710131411, 0.12122860710131411, 0.9942150172011401, 0.9942150172011401, 0.9942150172011401, 0.9944546426491939, 0.9944546426491939, 0.9944546426491939, 0.9957663937721719, 0.9957663937721719, 0.9957663937721719, 0.4212087155115142, 0.4212087155115142, 0.4212087155115142, 0.7551308847204263, 0.7551308847204263, 0.7551308847204263, 0.7185234943313723, 0.7185234943313723, 0.7185234943313723, 0.2571653007983924, 0.2571653007983924, 0.2571653007983924, 0.19824103205159527, 0.19824103205159527, 0.19824103205159527, 0.11603580480816056, 0.11603580480816056, 0.11603580480816056, 0.2005474935996966, 0.2005474935996966, 0.2005474935996966, 0.11604512077731, 0.11604512077731, 0.11604512077731, 0.2314077365461097, 0.2314077365461097, 0.2314077365461097, 0.22211446031004967, 0.22211446031004967, 0.22211446031004967, 0.24609016924917282, 0.24609016924917282, 0.24609016924917282, 0.23205477881628722, 0.23205477881628722, 0.23205477881628722, 0.0001360727097245995, 0.0001360727097245995, 0.0001360727097245995, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006000902609275549, 0.0006000902609275549, 0.0006000902609275549, 0.10129364463806201, 0.10129364463806201, 0.10129364463806201, 0.08124186923000487, 0.08124186923000487, 0.08124186923000487, 0.15617547742703497, 0.15617547742703497, 0.15617547742703497, 0.14300016526793113, 0.14300016526793113, 0.14300016526793113, 0.10381951747304907, 0.10381951747304907, 0.10381951747304907, 0.14071694008300073, 0.14071694008300073, 0.14071694008300073, 0.04872145932547012, 0.04872145932547012, 0.04872145932547012, 0.04753290389029352, 0.04753290389029352, 0.04753290389029352, 0.08613703533025907, 0.08613703533025907, 0.08613703533025907, 0.5715252223230642, 0.5715252223230642, 0.5715252223230642, 0.5463063048586176, 0.5463063048586176, 0.5463063048586176, 0.5474525519870496, 0.5474525519870496, 0.5474525519870496, 0.11418074932855393, 0.11418074932855393, 0.11418074932855393, 0.12022731114829899, 0.12022731114829899, 0.12022731114829899, 0.11408005158669365, 0.11408005158669365, 0.11408005158669365, 0.2536417379209285, 0.2536417379209285, 0.2536417379209285, 0.27659628716911544, 0.27659628716911544, 0.27659628716911544, 0.26748254955301987, 0.26748254955301987, 0.26748254955301987, 0.25157019106119405, 0.25157019106119405, 0.25157019106119405, 0.23404013304194904, 0.23404013304194904, 0.23404013304194904, 0.14693224683758432, 0.14693224683758432, 0.14693224683758432, 0.13694720287835604, 0.13694720287835604, 0.13694720287835604, 0.24287810793876807, 0.24287810793876807, 0.24287810793876807, 0.18742714407067185, 0.18742714407067185, 0.18742714407067185, 0.22074449111386707, 0.22074449111386707, 0.22074449111386707, 0.2772180378300021, 0.2772180378300021, 0.2772180378300021, 0.22685107001191274, 0.22685107001191274, 0.22685107001191274, 0.22107363102987, 0.22107363102987, 0.22107363102987, 0.23061153989846794, 0.23061153989846794, 0.23061153989846794, 0.2127066665838453, 0.2127066665838453, 0.2127066665838453, 0.9114003197321353, 0.9114003197321353, 0.9114003197321353, 0.8981455048369108, 0.8981455048369108, 0.8981455048369108, 0.15430747739341277, 0.15430747739341277, 0.15430747739341277, 0.8965949948919075, 0.8965949948919075, 0.8965949948919075, 0.21287625368737695, 0.21287625368737695, 0.21287625368737695, 0.1055285707599698, 0.1055285707599698, 0.1055285707599698, 0.21184237910516668, 0.21184237910516668, 0.21184237910516668, 0.204262302392202, 0.204262302392202, 0.204262302392202, 0.2071669900042613, 0.2071669900042613, 0.2071669900042613, 0.0859895881791457, 0.0859895881791457, 0.0859895881791457, 0.0976265970625958, 0.0976265970625958, 0.0976265970625958, 0.08742647399449088, 0.08742647399449088, 0.08742647399449088]}, "mutation_prompt": null}
{"id": "f9ddd077-2b1c-45bd-8c45-b02312769bf4", "solution": "import numpy as np\n\nclass Enhanced_QPSO_DPM_RALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.pop_shrink_factor = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        pop_size = self.initial_pop_size\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = pop_size\n\n        while evals < self.budget:\n            for i in range(pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n            # Dynamic population size adjustment\n            if evals < self.budget and np.random.rand() < 0.1:\n                pop_size = max(5, int(pop_size * self.pop_shrink_factor))\n                positions = positions[:pop_size]\n                velocities = velocities[:pop_size]\n                personal_best_positions = personal_best_positions[:pop_size]\n                personal_best_scores = personal_best_scores[:pop_size]\n\n        return global_best_score", "name": "Enhanced_QPSO_DPM_RALS", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Dynamic Population Management and Reinforced Adaptive Local Search for consistent and efficient convergence.", "configspace": "", "generation": 84, "fitness": 0.28922224217458076, "feedback": "The algorithm Enhanced_QPSO_DPM_RALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9518198445310772, 0.9518198445310772, 0.9518198445310772, 0.9576983008033225, 0.9576983008033225, 0.9576983008033225, 0.9595609057275591, 0.9595609057275591, 0.9595609057275591, 0.5670387055628259, 0.5670387055628259, 0.5670387055628259, 0.9060178936356428, 0.9060178936356428, 0.9060178936356428, 0.7334426445085377, 0.7334426445085377, 0.7334426445085377, 0.16698892136139798, 0.16698892136139798, 0.16698892136139798, 0.11372175846630894, 0.11372175846630894, 0.11372175846630894, 0.1201051988247529, 0.1201051988247529, 0.1201051988247529, 0.10508269149598837, 0.10508269149598837, 0.10508269149598837, 0.1144922281108598, 0.1144922281108598, 0.1144922281108598, 0.14758474067719474, 0.14758474067719474, 0.14758474067719474, 0.9945251854480334, 0.9945251854480334, 0.9945251854480334, 0.9957685900586994, 0.9957685900586994, 0.9957685900586994, 0.9943733992871825, 0.9943733992871825, 0.9943733992871825, 0.3800099707131186, 0.3800099707131186, 0.3800099707131186, 0.4383442437559435, 0.4383442437559435, 0.4383442437559435, 0.40864498833447327, 0.40864498833447327, 0.40864498833447327, 0.18488933953663833, 0.18488933953663833, 0.18488933953663833, 0.22335419928682598, 0.22335419928682598, 0.22335419928682598, 0.17308191166380404, 0.17308191166380404, 0.17308191166380404, 0.19146603538730556, 0.19146603538730556, 0.19146603538730556, 0.18821661861245476, 0.18821661861245476, 0.18821661861245476, 0.13167125865274176, 0.13167125865274176, 0.13167125865274176, 0.1789126514796111, 0.1789126514796111, 0.1789126514796111, 0.17525855605519192, 0.17525855605519192, 0.17525855605519192, 0.13926666576882651, 0.13926666576882651, 0.13926666576882651, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08059250939943285, 0.08059250939943285, 0.08059250939943285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09980544839206762, 0.09980544839206762, 0.09980544839206762, 0.0799462476467947, 0.0799462476467947, 0.0799462476467947, 0.1804220493612213, 0.1804220493612213, 0.1804220493612213, 0.055395845109991404, 0.055395845109991404, 0.055395845109991404, 0.13443131731635471, 0.13443131731635471, 0.13443131731635471, 0.23748220050839886, 0.23748220050839886, 0.23748220050839886, 0.11287017278572842, 0.11287017278572842, 0.11287017278572842, 0.07840030811572396, 0.07840030811572396, 0.07840030811572396, 0.11894808077262164, 0.11894808077262164, 0.11894808077262164, 0.49106720996269204, 0.49106720996269204, 0.49106720996269204, 0.4941660023562625, 0.4941660023562625, 0.4941660023562625, 0.5000865908936907, 0.5000865908936907, 0.5000865908936907, 0.08846614492268423, 0.08846614492268423, 0.08846614492268423, 0.13692725453502785, 0.13692725453502785, 0.13692725453502785, 0.0987761644634012, 0.0987761644634012, 0.0987761644634012, 0.1758914704100646, 0.1758914704100646, 0.1758914704100646, 0.20035911355676328, 0.20035911355676328, 0.20035911355676328, 0.22221411329558194, 0.22221411329558194, 0.22221411329558194, 0.19927954995478236, 0.19927954995478236, 0.19927954995478236, 0.2335214346393738, 0.2335214346393738, 0.2335214346393738, 0.1972666261548922, 0.1972666261548922, 0.1972666261548922, 0.10601011054934972, 0.10601011054934972, 0.10601011054934972, 0.20249536649362887, 0.20249536649362887, 0.20249536649362887, 0.1237293404905917, 0.1237293404905917, 0.1237293404905917, 0.24556992444617165, 0.24556992444617165, 0.24556992444617165, 0.21186333994671613, 0.21186333994671613, 0.21186333994671613, 0.22490297575649754, 0.22490297575649754, 0.22490297575649754, 0.25136260204246175, 0.25136260204246175, 0.25136260204246175, 0.2245792442829162, 0.2245792442829162, 0.2245792442829162, 0.1906942832465256, 0.1906942832465256, 0.1906942832465256, 0.18925245843361171, 0.18925245843361171, 0.18925245843361171, 0.9616116865696478, 0.9616116865696478, 0.9616116865696478, 0.21299669669152077, 0.21299669669152077, 0.21299669669152077, 0.5622514423175117, 0.5622514423175117, 0.5622514423175117, 0.2124830117713612, 0.2124830117713612, 0.2124830117713612, 0.10549904316495251, 0.10549904316495251, 0.10549904316495251, 0.2210190239948755, 0.2210190239948755, 0.2210190239948755, 0.18896858392723892, 0.18896858392723892, 0.18896858392723892, 0.19347309828246384, 0.19347309828246384, 0.19347309828246384, 0.09127340710369936, 0.09127340710369936, 0.09127340710369936, 0.14843658995376408, 0.14843658995376408, 0.14843658995376408, 0.097675904804436, 0.097675904804436, 0.097675904804436]}, "mutation_prompt": null}
{"id": "5788080e-43c7-4b11-a6f3-32a2679a6740", "solution": "import numpy as np\n\nclass Enhanced_QPSO_DDP_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.001  # Threshold for diversity preservation\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            avg_position = np.mean(positions, axis=0)\n            diversity = np.linalg.norm(positions - avg_position, axis=1).mean()\n            if diversity < self.diversity_threshold:\n                # Re-initialize population if diversity is too low\n                positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n                personal_best_positions = np.copy(positions)\n                personal_best_scores = np.array([func(ind) for ind in positions])\n                evals += self.pop_size\n\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_DDP_ALS", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Dynamic Diversity Preservation and Adaptive Local Search for balanced exploration and exploitation.", "configspace": "", "generation": 85, "fitness": 0.338532741193224, "feedback": "The algorithm Enhanced_QPSO_DDP_ALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.954821793995175, 0.954821793995175, 0.954821793995175, 0.9557505226646598, 0.9557505226646598, 0.9557505226646598, 0.9514159568024978, 0.9514159568024978, 0.9514159568024978, 0.8598634055414135, 0.8598634055414135, 0.8598634055414135, 0.8582877328452083, 0.8582877328452083, 0.8582877328452083, 0.8513503032906542, 0.8513503032906542, 0.8513503032906542, 0.17885372501347696, 0.17885372501347696, 0.17885372501347696, 0.1693973019856696, 0.1693973019856696, 0.1693973019856696, 0.23121451466119147, 0.23121451466119147, 0.23121451466119147, 0.13545579570225275, 0.13545579570225275, 0.13545579570225275, 0.12617617115843405, 0.12617617115843405, 0.12617617115843405, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.5798819040722392, 0.5798819040722392, 0.5798819040722392, 0.5193279112360096, 0.5193279112360096, 0.5193279112360096, 0.5657019867412478, 0.5657019867412478, 0.5657019867412478, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23953308175817334, 0.23953308175817334, 0.23953308175817334, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.22129068179724132, 0.22129068179724132, 0.22129068179724132, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.17392740532062512, 0.17392740532062512, 0.17392740532062512, 0.09619263864031924, 0.09619263864031924, 0.09619263864031924, 0.07968268929782785, 0.07968268929782785, 0.07968268929782785, 0.048085649447875745, 0.048085649447875745, 0.048085649447875745, 0.05974406432811297, 0.05974406432811297, 0.05974406432811297, 0.10785465425838425, 0.10785465425838425, 0.10785465425838425, 0.5524946148916912, 0.5524946148916912, 0.5524946148916912, 0.5411572515881369, 0.5411572515881369, 0.5411572515881369, 0.5619692328793897, 0.5619692328793897, 0.5619692328793897, 0.09385481909172433, 0.09385481909172433, 0.09385481909172433, 0.13659885106746428, 0.13659885106746428, 0.13659885106746428, 0.08392496206728606, 0.08392496206728606, 0.08392496206728606, 0.4633629055866867, 0.4633629055866867, 0.4633629055866867, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16651427056985446, 0.16651427056985446, 0.16651427056985446, 0.19349141218759236, 0.19349141218759236, 0.19349141218759236, 0.2630779661606233, 0.2630779661606233, 0.2630779661606233, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1261731855792283, 0.1261731855792283, 0.1261731855792283, 0.3548487541092007, 0.3548487541092007, 0.3548487541092007, 0.20489658249899134, 0.20489658249899134, 0.20489658249899134, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8150289978715552, 0.8150289978715552, 0.8150289978715552, 0.22860371630956555, 0.22860371630956555, 0.22860371630956555, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650492308124, 0.18905650492308124, 0.18905650492308124, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.2120338412213657, 0.2120338412213657, 0.2120338412213657, 0.18744936025616743, 0.18744936025616743, 0.18744936025616743, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "dac6812e-d6fb-43ed-9f69-30e45877f1bf", "solution": "import numpy as np\n\nclass Enhanced_QPSO_EOBL:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.elite_fraction = 0.2\n\n    def calculate_inertia_weight(self, evals):\n        return self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * (evals / self.budget))\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            inertia_weight = self.calculate_inertia_weight(evals)\n            dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n            for i in range(self.pop_size):\n                if np.random.rand() < self.quantum_prob:\n                    elite_idx = np.argsort(personal_best_scores)[:int(self.elite_fraction * self.pop_size)]\n                    elite_positions = personal_best_positions[elite_idx]\n                    mean_best_position = np.mean(elite_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_EOBL", "description": "Enhanced Quantum-inspired Particle Swarm Optimization using Adaptive Inertia, Adaptive Quantum Step, and Elite Opposition-Based Learning to improve convergence and robustness.", "configspace": "", "generation": 86, "fitness": 0.2499650089784844, "feedback": "The algorithm Enhanced_QPSO_EOBL got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.604549460270391, 0.604549460270391, 0.604549460270391, 0.7823609024605819, 0.7823609024605819, 0.7823609024605819, 0.6757244146277005, 0.6757244146277005, 0.6757244146277005, 0.14484552814541207, 0.14484552814541207, 0.14484552814541207, 0.08377969072435665, 0.08377969072435665, 0.08377969072435665, 0.1695333997767906, 0.1695333997767906, 0.1695333997767906, 0.11293194395212647, 0.11293194395212647, 0.11293194395212647, 0.15256556677088917, 0.15256556677088917, 0.15256556677088917, 0.12436794994890754, 0.12436794994890754, 0.12436794994890754, 0.23444176796308136, 0.23444176796308136, 0.23444176796308136, 0.14882052516151745, 0.14882052516151745, 0.14882052516151745, 0.07994750962761388, 0.07994750962761388, 0.07994750962761388, 0.9942718786338943, 0.9942718786338943, 0.9942718786338943, 0.9957702689854251, 0.9957702689854251, 0.9957702689854251, 0.9949238728004246, 0.9949238728004246, 0.9949238728004246, 0.3446978325653467, 0.3446978325653467, 0.3446978325653467, 0.4258406159078446, 0.4258406159078446, 0.4258406159078446, 0.44218666055959355, 0.44218666055959355, 0.44218666055959355, 0.2276481321674425, 0.2276481321674425, 0.2276481321674425, 0.862237254496787, 0.862237254496787, 0.862237254496787, 0.12475881087408247, 0.12475881087408247, 0.12475881087408247, 0.2072230836642287, 0.2072230836642287, 0.2072230836642287, 0.16565913907266572, 0.16565913907266572, 0.16565913907266572, 0.18409546706206192, 0.18409546706206192, 0.18409546706206192, 0.1924081120470419, 0.1924081120470419, 0.1924081120470419, 0.2314972595710456, 0.2314972595710456, 0.2314972595710456, 0.21197873603732598, 0.21197873603732598, 0.21197873603732598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08488932118031367, 0.08488932118031367, 0.08488932118031367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06652333864905668, 0.06652333864905668, 0.06652333864905668, 0.08166764203325327, 0.08166764203325327, 0.08166764203325327, 0.11717488840296775, 0.11717488840296775, 0.11717488840296775, 0.04625652326821861, 0.04625652326821861, 0.04625652326821861, 0.027605365843123453, 0.027605365843123453, 0.027605365843123453, 0.038572337070750806, 0.038572337070750806, 0.038572337070750806, 0.047212891893847364, 0.047212891893847364, 0.047212891893847364, 0.03682319805675016, 0.03682319805675016, 0.03682319805675016, 0.060842807281519695, 0.060842807281519695, 0.060842807281519695, 0.4871666532706599, 0.4871666532706599, 0.4871666532706599, 0.5066467574098406, 0.5066467574098406, 0.5066467574098406, 0.48756831873836104, 0.48756831873836104, 0.48756831873836104, 0.10927266606002761, 0.10927266606002761, 0.10927266606002761, 0.11728152580584716, 0.11728152580584716, 0.11728152580584716, 0.08627535341541315, 0.08627535341541315, 0.08627535341541315, 0.1904464576938586, 0.1904464576938586, 0.1904464576938586, 0.26212085600601653, 0.26212085600601653, 0.26212085600601653, 0.32433951351416446, 0.32433951351416446, 0.32433951351416446, 0.200443407160376, 0.200443407160376, 0.200443407160376, 0.27142898506191004, 0.27142898506191004, 0.27142898506191004, 0.2418735037026798, 0.2418735037026798, 0.2418735037026798, 0.10736114770889893, 0.10736114770889893, 0.10736114770889893, 0.20125071330955702, 0.20125071330955702, 0.20125071330955702, 0.20326301936514057, 0.20326301936514057, 0.20326301936514057, 0.19813086367701538, 0.19813086367701538, 0.19813086367701538, 0.20535588653767567, 0.20535588653767567, 0.20535588653767567, 0.19131684829132622, 0.19131684829132622, 0.19131684829132622, 0.18918017754253713, 0.18918017754253713, 0.18918017754253713, 0.19320224281113074, 0.19320224281113074, 0.19320224281113074, 0.19568268529102129, 0.19568268529102129, 0.19568268529102129, 0.1893782005710949, 0.1893782005710949, 0.1893782005710949, 0.8698896748473716, 0.8698896748473716, 0.8698896748473716, 0.1539037041713709, 0.1539037041713709, 0.1539037041713709, 0.15673165500944397, 0.15673165500944397, 0.15673165500944397, 0.21409082107471122, 0.21409082107471122, 0.21409082107471122, 0.10546898934959392, 0.10546898934959392, 0.10546898934959392, 0.1732541790393619, 0.1732541790393619, 0.1732541790393619, 0.178024610629123, 0.178024610629123, 0.178024610629123, 0.18476054056865587, 0.18476054056865587, 0.18476054056865587, 0.09444833764478566, 0.09444833764478566, 0.09444833764478566, 0.0975923624446643, 0.0975923624446643, 0.0975923624446643, 0.08349589117286071, 0.08349589117286071, 0.08349589117286071]}, "mutation_prompt": null}
{"id": "1170e78c-05c8-480f-a1be-549f46eb9b65", "solution": "import numpy as np\n\nclass Enhanced_QPSO_MSD:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.1 # Minimum diversity threshold\n        self.multi_scale_factors = [0.1, 0.05, 0.01] # Scales for local search\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                     + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                     + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for scale in self.multi_scale_factors:\n                    diversity = np.std(personal_best_positions, axis=0).mean()\n                    if diversity < self.diversity_threshold:\n                        self.local_search_radius = scale  # Adjust scale based on diversity\n                    for _ in range(self.pop_size // 2):\n                        local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                        local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                        local_score = func(local_positions)\n                        evals += 1\n                        if local_score < global_best_score:\n                            global_best_score = local_score\n                            global_best_position = local_positions\n                            break  # Exit loop to reevaluate local search scale if improvement is found\n\n        return global_best_score", "name": "Enhanced_QPSO_MSD", "description": "Enhanced Adaptive Quantum-inspired Particle Swarm Optimization with Dynamic Diversity Management and Multi-Scale Local Search for Improved Convergence.", "configspace": "", "generation": 87, "fitness": 0.3065637227098283, "feedback": "The algorithm Enhanced_QPSO_MSD got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9389034068051269, 0.9389034068051269, 0.9389034068051269, 0.95453218218899, 0.95453218218899, 0.95453218218899, 0.9577518163865448, 0.9577518163865448, 0.9577518163865448, 0.8060771120146386, 0.8060771120146386, 0.8060771120146386, 0.8392814382091531, 0.8392814382091531, 0.8392814382091531, 0.8503723817479308, 0.8503723817479308, 0.8503723817479308, 0.14540174677435114, 0.14540174677435114, 0.14540174677435114, 0.12327158236912905, 0.12327158236912905, 0.12327158236912905, 0.15936994019922457, 0.15936994019922457, 0.15936994019922457, 0.07843271540553465, 0.07843271540553465, 0.07843271540553465, 0.13409308962390587, 0.13409308962390587, 0.13409308962390587, 0.09959620618938703, 0.09959620618938703, 0.09959620618938703, 0.9939647509763094, 0.9939647509763094, 0.9939647509763094, 0.9946253825891754, 0.9946253825891754, 0.9946253825891754, 0.9944522536266744, 0.9944522536266744, 0.9944522536266744, 0.6119378197265999, 0.6119378197265999, 0.6119378197265999, 0.6020269863548484, 0.6020269863548484, 0.6020269863548484, 0.6062536704245391, 0.6062536704245391, 0.6062536704245391, 0.23287052394587737, 0.23287052394587737, 0.23287052394587737, 0.16512769080786271, 0.16512769080786271, 0.16512769080786271, 0.11216925802017519, 0.11216925802017519, 0.11216925802017519, 0.21289609197964188, 0.21289609197964188, 0.21289609197964188, 0.2360765654092274, 0.2360765654092274, 0.2360765654092274, 0.3005781622351784, 0.3005781622351784, 0.3005781622351784, 0.23558211979239585, 0.23558211979239585, 0.23558211979239585, 0.1377369418800909, 0.1377369418800909, 0.1377369418800909, 0.2577370534533324, 0.2577370534533324, 0.2577370534533324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0732550716808611, 0.0732550716808611, 0.0732550716808611, 0.06799602230563329, 0.06799602230563329, 0.06799602230563329, 0.18314076821209335, 0.18314076821209335, 0.18314076821209335, 0.06057681500342993, 0.06057681500342993, 0.06057681500342993, 0.13553900563220977, 0.13553900563220977, 0.13553900563220977, 0.11404562625116232, 0.11404562625116232, 0.11404562625116232, 0.08832442584351685, 0.08832442584351685, 0.08832442584351685, 0.04766853254672532, 0.04766853254672532, 0.04766853254672532, 0.06739216467213738, 0.06739216467213738, 0.06739216467213738, 0.5403581343612471, 0.5403581343612471, 0.5403581343612471, 0.5790001099615831, 0.5790001099615831, 0.5790001099615831, 0.580579356065623, 0.580579356065623, 0.580579356065623, 0.070286741128609, 0.070286741128609, 0.070286741128609, 0.1196131650534964, 0.1196131650534964, 0.1196131650534964, 0.07234245688230934, 0.07234245688230934, 0.07234245688230934, 0.16221356268955933, 0.16221356268955933, 0.16221356268955933, 0.2000277789205377, 0.2000277789205377, 0.2000277789205377, 0.24192331876061812, 0.24192331876061812, 0.24192331876061812, 0.2249593781437741, 0.2249593781437741, 0.2249593781437741, 0.27447117196606363, 0.27447117196606363, 0.27447117196606363, 0.26244573984976693, 0.26244573984976693, 0.26244573984976693, 0.1065726677747123, 0.1065726677747123, 0.1065726677747123, 0.19274458133193673, 0.19274458133193673, 0.19274458133193673, 0.21164936986018978, 0.21164936986018978, 0.21164936986018978, 0.22252082354249547, 0.22252082354249547, 0.22252082354249547, 0.21348937079231578, 0.21348937079231578, 0.21348937079231578, 0.2308220989337273, 0.2308220989337273, 0.2308220989337273, 0.17910390638924567, 0.17910390638924567, 0.17910390638924567, 0.21351310118720734, 0.21351310118720734, 0.21351310118720734, 0.17854704620145478, 0.17854704620145478, 0.17854704620145478, 0.18923493383390744, 0.18923493383390744, 0.18923493383390744, 0.9585086056528819, 0.9585086056528819, 0.9585086056528819, 0.1688459855228268, 0.1688459855228268, 0.1688459855228268, 0.9020132957863227, 0.9020132957863227, 0.9020132957863227, 0.21217061252772362, 0.21217061252772362, 0.21217061252772362, 0.10546983406337163, 0.10546983406337163, 0.10546983406337163, 0.19864073360165524, 0.19864073360165524, 0.19864073360165524, 0.1847795564343767, 0.1847795564343767, 0.1847795564343767, 0.20008276993457563, 0.20008276993457563, 0.20008276993457563, 0.07907859922357585, 0.07907859922357585, 0.07907859922357585, 0.09643482183422403, 0.09643482183422403, 0.09643482183422403, 0.08078708561211156, 0.08078708561211156, 0.08078708561211156]}, "mutation_prompt": null}
{"id": "4c121b1b-e55f-4559-92eb-a1c28411f6ae", "solution": "import numpy as np\n\nclass Enhanced_QPSO_DQLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.initial_local_search_radius = 0.1\n        self.local_search_radius = self.initial_local_search_radius\n        self.adaptive_quantum_prob = 0.1  # Starts as low probability, increasing as exploration progresses\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.adaptive_quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Adaptive quantum probability\n            self.adaptive_quantum_prob = min(0.5, self.adaptive_quantum_prob + 0.01)\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(self.initial_local_search_radius, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Enhanced_QPSO_DQLS", "description": "A Quantum-Inspired Particle Swarm Optimization with Dynamic Quantum Step and Adaptive Local Search exploiting diversity for enhanced convergence and robustness.", "configspace": "", "generation": 88, "fitness": 0.2687197399853752, "feedback": "The algorithm Enhanced_QPSO_DQLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.8758529394047331, 0.8758529394047331, 0.8758529394047331, 0.8903443135200995, 0.8903443135200995, 0.8903443135200995, 0.9468085601577398, 0.9468085601577398, 0.9468085601577398, 0.6437263513232716, 0.6437263513232716, 0.6437263513232716, 0.49804027180470234, 0.49804027180470234, 0.49804027180470234, 0.48318112879246145, 0.48318112879246145, 0.48318112879246145, 0.09198179112343674, 0.09198179112343674, 0.09198179112343674, 0.13353456294463062, 0.13353456294463062, 0.13353456294463062, 0.08436702514355077, 0.08436702514355077, 0.08436702514355077, 0.09800583211996705, 0.09800583211996705, 0.09800583211996705, 0.07611584688857254, 0.07611584688857254, 0.07611584688857254, 0.08920409554501052, 0.08920409554501052, 0.08920409554501052, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.40572608325569304, 0.40572608325569304, 0.40572608325569304, 0.42654352736717305, 0.42654352736717305, 0.42654352736717305, 0.3598780860947719, 0.3598780860947719, 0.3598780860947719, 0.23104035484234775, 0.23104035484234775, 0.23104035484234775, 0.2840285169260549, 0.2840285169260549, 0.2840285169260549, 0.23449797158538044, 0.23449797158538044, 0.23449797158538044, 0.1881940759592169, 0.1881940759592169, 0.1881940759592169, 0.18892154601387634, 0.18892154601387634, 0.18892154601387634, 0.27488032759055514, 0.27488032759055514, 0.27488032759055514, 0.18809866540995768, 0.18809866540995768, 0.18809866540995768, 0.2108216859237959, 0.2108216859237959, 0.2108216859237959, 0.19451658280892292, 0.19451658280892292, 0.19451658280892292, 0.004276730914015037, 0.004276730914015037, 0.004276730914015037, 0.001823370340667707, 0.001823370340667707, 0.001823370340667707, 0.0003325407580830886, 0.0003325407580830886, 0.0003325407580830886, 0.10243446398253386, 0.10243446398253386, 0.10243446398253386, 0.07111544806168624, 0.07111544806168624, 0.07111544806168624, 0.1801972851918867, 0.1801972851918867, 0.1801972851918867, 0.19573926528327767, 0.19573926528327767, 0.19573926528327767, 0.08804101845489165, 0.08804101845489165, 0.08804101845489165, 0.14709682723749762, 0.14709682723749762, 0.14709682723749762, 0.045307183304119425, 0.045307183304119425, 0.045307183304119425, 0.05373098583755931, 0.05373098583755931, 0.05373098583755931, 0.13713034376710398, 0.13713034376710398, 0.13713034376710398, 0.4651966275588487, 0.4651966275588487, 0.4651966275588487, 0.48777983485397125, 0.48777983485397125, 0.48777983485397125, 0.5188808478435272, 0.5188808478435272, 0.5188808478435272, 0.09343013917495335, 0.09343013917495335, 0.09343013917495335, 0.10735432921800891, 0.10735432921800891, 0.10735432921800891, 0.12597204813631013, 0.12597204813631013, 0.12597204813631013, 0.2592291786741314, 0.2592291786741314, 0.2592291786741314, 0.241922151098239, 0.241922151098239, 0.241922151098239, 0.15378485112387297, 0.15378485112387297, 0.15378485112387297, 0.13959448595368862, 0.13959448595368862, 0.13959448595368862, 0.2627209732566729, 0.2627209732566729, 0.2627209732566729, 0.18527295111537523, 0.18527295111537523, 0.18527295111537523, 0.12702662241228313, 0.12702662241228313, 0.12702662241228313, 0.2296042091621061, 0.2296042091621061, 0.2296042091621061, 0.2147644550744937, 0.2147644550744937, 0.2147644550744937, 0.24794107717922975, 0.24794107717922975, 0.24794107717922975, 0.24195172979001378, 0.24195172979001378, 0.24195172979001378, 0.209750016833107, 0.209750016833107, 0.209750016833107, 0.18696168480682618, 0.18696168480682618, 0.18696168480682618, 0.22841596497138617, 0.22841596497138617, 0.22841596497138617, 0.19190266019175728, 0.19190266019175728, 0.19190266019175728, 0.18888651073646878, 0.18888651073646878, 0.18888651073646878, 0.1739339003628646, 0.1739339003628646, 0.1739339003628646, 0.15339286388387896, 0.15339286388387896, 0.15339286388387896, 0.6394653797925228, 0.6394653797925228, 0.6394653797925228, 0.21217041094511147, 0.21217041094511147, 0.21217041094511147, 0.10540887619742056, 0.10540887619742056, 0.10540887619742056, 0.18649541976825512, 0.18649541976825512, 0.18649541976825512, 0.18891448663326504, 0.18891448663326504, 0.18891448663326504, 0.18955946703569038, 0.18955946703569038, 0.18955946703569038, 0.09152250645767068, 0.09152250645767068, 0.09152250645767068, 0.08623920104302907, 0.08623920104302907, 0.08623920104302907, 0.10234787518803501, 0.10234787518803501, 0.10234787518803501]}, "mutation_prompt": null}
{"id": "7888eac4-6e05-46cd-a2c0-9c386109ad14", "solution": "import numpy as np\n\nclass Improved_QPSO_LSI:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5  # Initial exploration range for quantum behavior\n        self.local_search_radius = 0.1  # Initial local search radius\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9  # Intensify search by reducing radius\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)  # Expand search if not improving\n\n        return global_best_score", "name": "Improved_QPSO_LSI", "description": "Improved Quantum-inspired Particle Swarm Optimization with Adaptive Quantum Step Size and Local Search Intensification for robust global convergence.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.9039381291629255, 0.9039381291629255, 0.9039381291629255, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373916992775, 0.17885373916992775, 0.17885373916992775, 0.14887471329931756, 0.14887471329931756, 0.14887471329931756, 0.16078855823614646, 0.16078855823614646, 0.16078855823614646, 0.11522319137970716, 0.11522319137970716, 0.11522319137970716, 0.12224145114451235, 0.12224145114451235, 0.12224145114451235, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.604264871241226, 0.604264871241226, 0.604264871241226, 0.5661360687772772, 0.5661360687772772, 0.5661360687772772, 0.5678119614348113, 0.5678119614348113, 0.5678119614348113, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.1739422302202953, 0.1739422302202953, 0.1739422302202953, 0.09620974593866627, 0.09620974593866627, 0.09620974593866627, 0.07969808109119714, 0.07969808109119714, 0.07969808109119714, 0.047848862463703346, 0.047848862463703346, 0.047848862463703346, 0.06386159505723121, 0.06386159505723121, 0.06386159505723121, 0.10787619253576364, 0.10787619253576364, 0.10787619253576364, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506534247629, 0.08725506534247629, 0.08725506534247629, 0.13659903510239224, 0.13659903510239224, 0.13659903510239224, 0.08392763675325299, 0.08392763675325299, 0.08392763675325299, 0.4659466015216467, 0.4659466015216467, 0.4659466015216467, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16659483568674027, 0.16659483568674027, 0.16659483568674027, 0.19356741946071954, 0.19356741946071954, 0.19356741946071954, 0.2633147559638972, 0.2633147559638972, 0.2633147559638972, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262341151623081, 0.1262341151623081, 0.1262341151623081, 0.35820002630908565, 0.35820002630908565, 0.35820002630908565, 0.20483292911942563, 0.20483292911942563, 0.20483292911942563, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8355815626322525, 0.8355815626322525, 0.8355815626322525, 0.2286053883758018, 0.2286053883758018, 0.2286053883758018, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.18905650505623905, 0.18905650505623905, 0.18905650505623905, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.21203385578934142, 0.21203385578934142, 0.21203385578934142, 0.10540866558638395, 0.10540866558638395, 0.10540866558638395, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "290e7b2c-537f-4d4b-8666-80844349fe08", "solution": "import numpy as np\n\nclass Enhanced_QPSO_DEB_ALS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.7  # Higher initial exploration range\n        self.local_search_radius = 0.1\n        self.adaptive_scaling = 0.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n            # Adaptive scaling of coefficients\n            self.cognitive_coeff = 1.5 * (1 - evals / self.budget) + self.adaptive_scaling\n            self.social_coeff = 1.5 * (evals / self.budget) + self.adaptive_scaling\n\n        return global_best_score", "name": "Enhanced_QPSO_DEB_ALS", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with Dynamic Exploration-Exploitation Balancing and Adaptive Local Search for superior convergence.", "configspace": "", "generation": 90, "fitness": 0.22985483766122, "feedback": "The algorithm Enhanced_QPSO_DEB_ALS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.48922737716116027, 0.48922737716116027, 0.48922737716116027, 0.5177691247533338, 0.5177691247533338, 0.5177691247533338, 0.5824851041960741, 0.5824851041960741, 0.5824851041960741, 0.011447267143676387, 0.011447267143676387, 0.011447267143676387, 0.06973178582422934, 0.06973178582422934, 0.06973178582422934, 0.048351106676707944, 0.048351106676707944, 0.048351106676707944, 0.1165395360210385, 0.1165395360210385, 0.1165395360210385, 0.09712031763570705, 0.09712031763570705, 0.09712031763570705, 0.07114596550500862, 0.07114596550500862, 0.07114596550500862, 0.07061760229082281, 0.07061760229082281, 0.07061760229082281, 0.13345777115043744, 0.13345777115043744, 0.13345777115043744, 0.1273312503338626, 0.1273312503338626, 0.1273312503338626, 0.9163691353776366, 0.9163691353776366, 0.9163691353776366, 0.9921212860878874, 0.9921212860878874, 0.9921212860878874, 0.8143718593876516, 0.8143718593876516, 0.8143718593876516, 0.35414527129890616, 0.35414527129890616, 0.35414527129890616, 0.3415100011191339, 0.3415100011191339, 0.3415100011191339, 0.3655174855405039, 0.3655174855405039, 0.3655174855405039, 0.2322582029187652, 0.2322582029187652, 0.2322582029187652, 0.11372482947326679, 0.11372482947326679, 0.11372482947326679, 0.07798017070384178, 0.07798017070384178, 0.07798017070384178, 0.18514274169253553, 0.18514274169253553, 0.18514274169253553, 0.14208146862026205, 0.14208146862026205, 0.14208146862026205, 0.1643717020941624, 0.1643717020941624, 0.1643717020941624, 0.14146663010734706, 0.14146663010734706, 0.14146663010734706, 0.13547624222000265, 0.13547624222000265, 0.13547624222000265, 0.21736183143206944, 0.21736183143206944, 0.21736183143206944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06234520293199308, 0.06234520293199308, 0.06234520293199308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1059435523393466, 0.1059435523393466, 0.1059435523393466, 0.06891836497875625, 0.06891836497875625, 0.06891836497875625, 0.1820981828329129, 0.1820981828329129, 0.1820981828329129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00863354577511366, 0.00863354577511366, 0.00863354577511366, 0.02657676352738214, 0.02657676352738214, 0.02657676352738214, 0.04344438342021362, 0.04344438342021362, 0.04344438342021362, 0.1813164217629344, 0.1813164217629344, 0.1813164217629344, 0.09222890690020014, 0.09222890690020014, 0.09222890690020014, 0.4440308547724948, 0.4440308547724948, 0.4440308547724948, 0.4678931013110602, 0.4678931013110602, 0.4678931013110602, 0.47074523050548855, 0.47074523050548855, 0.47074523050548855, 0.043584373195681425, 0.043584373195681425, 0.043584373195681425, 0.09905183759276714, 0.09905183759276714, 0.09905183759276714, 0.09995731983857481, 0.09995731983857481, 0.09995731983857481, 0.24256787933307233, 0.24256787933307233, 0.24256787933307233, 0.33716749293890136, 0.33716749293890136, 0.33716749293890136, 0.29188304820729083, 0.29188304820729083, 0.29188304820729083, 0.1645093850056102, 0.1645093850056102, 0.1645093850056102, 0.29926491946445466, 0.29926491946445466, 0.29926491946445466, 0.16767527623886913, 0.16767527623886913, 0.16767527623886913, 0.10113097099941315, 0.10113097099941315, 0.10113097099941315, 0.12708875755825189, 0.12708875755825189, 0.12708875755825189, 0.15322811410335813, 0.15322811410335813, 0.15322811410335813, 0.2615866740354953, 0.2615866740354953, 0.2615866740354953, 0.23019445854755016, 0.23019445854755016, 0.23019445854755016, 0.24320680838340392, 0.24320680838340392, 0.24320680838340392, 0.18238786099986215, 0.18238786099986215, 0.18238786099986215, 0.18210273532748822, 0.18210273532748822, 0.18210273532748822, 0.18205273340073813, 0.18205273340073813, 0.18205273340073813, 0.1894513591892093, 0.1894513591892093, 0.1894513591892093, 0.7514322911857254, 0.7514322911857254, 0.7514322911857254, 0.8657804222335675, 0.8657804222335675, 0.8657804222335675, 0.15557831197137617, 0.15557831197137617, 0.15557831197137617, 0.5598264550441032, 0.5598264550441032, 0.5598264550441032, 0.10529545322636225, 0.10529545322636225, 0.10529545322636225, 0.18532724509680554, 0.18532724509680554, 0.18532724509680554, 0.19644371762711532, 0.19644371762711532, 0.19644371762711532, 0.2117736437655685, 0.2117736437655685, 0.2117736437655685, 0.08283881593607145, 0.08283881593607145, 0.08283881593607145, 0.06657179252800394, 0.06657179252800394, 0.06657179252800394, 0.0869905808092224, 0.0869905808092224, 0.0869905808092224]}, "mutation_prompt": null}
{"id": "9f8efe95-4456-4fae-b57d-15966261a955", "solution": "import numpy as np\n\nclass Improved_QPSO_DQPLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.initial_quantum_prob = 0.1\n        self.quantum_prob = self.initial_quantum_prob\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                self.quantum_prob = self.initial_quantum_prob * (1 - evals / self.budget)\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Improved_QPSO_DQPLS", "description": "Quantum-inspired Particle Swarm Optimization with Dynamic Quantum Probability and Adaptive Local Search for efficient convergence and exploration-exploitation balance.", "configspace": "", "generation": 91, "fitness": 0.3110996194716802, "feedback": "The algorithm Improved_QPSO_DQPLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.29.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9503693561327115, 0.9503693561327115, 0.9503693561327115, 0.9539914319012057, 0.9539914319012057, 0.9539914319012057, 0.9573400970668614, 0.9573400970668614, 0.9573400970668614, 0.910223543985274, 0.910223543985274, 0.910223543985274, 0.9128319074415365, 0.9128319074415365, 0.9128319074415365, 0.8800703376473945, 0.8800703376473945, 0.8800703376473945, 0.15843992456621214, 0.15843992456621214, 0.15843992456621214, 0.4019991569039918, 0.4019991569039918, 0.4019991569039918, 0.1454808607678436, 0.1454808607678436, 0.1454808607678436, 0.11536846039147619, 0.11536846039147619, 0.11536846039147619, 0.15663982744560212, 0.15663982744560212, 0.15663982744560212, 0.08976136606551588, 0.08976136606551588, 0.08976136606551588, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.6388987565024781, 0.6388987565024781, 0.6388987565024781, 0.6802429532313022, 0.6802429532313022, 0.6802429532313022, 0.5800056600330508, 0.5800056600330508, 0.5800056600330508, 0.1732006739763683, 0.1732006739763683, 0.1732006739763683, 0.21500795862281752, 0.21500795862281752, 0.21500795862281752, 0.21584491490930902, 0.21584491490930902, 0.21584491490930902, 0.20644703470577952, 0.20644703470577952, 0.20644703470577952, 0.13011725722395517, 0.13011725722395517, 0.13011725722395517, 0.23294662149201562, 0.23294662149201562, 0.23294662149201562, 0.24333754468859592, 0.24333754468859592, 0.24333754468859592, 0.23422377200075517, 0.23422377200075517, 0.23422377200075517, 0.23002696824169988, 0.23002696824169988, 0.23002696824169988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009022933440069436, 0.009022933440069436, 0.009022933440069436, 0.008377735307989131, 0.008377735307989131, 0.008377735307989131, 0.08204797835805688, 0.08204797835805688, 0.08204797835805688, 0.059613755512328837, 0.059613755512328837, 0.059613755512328837, 0.14962041681836347, 0.14962041681836347, 0.14962041681836347, 0.1477261882492047, 0.1477261882492047, 0.1477261882492047, 0.1017069295073576, 0.1017069295073576, 0.1017069295073576, 0.0819261552556605, 0.0819261552556605, 0.0819261552556605, 0.0556526962086511, 0.0556526962086511, 0.0556526962086511, 0.05877360158759404, 0.05877360158759404, 0.05877360158759404, 0.14424755129112887, 0.14424755129112887, 0.14424755129112887, 0.584963279925113, 0.584963279925113, 0.584963279925113, 0.5797089971277019, 0.5797089971277019, 0.5797089971277019, 0.581153098329371, 0.581153098329371, 0.581153098329371, 0.06325437801858336, 0.06325437801858336, 0.06325437801858336, 0.13598855263531717, 0.13598855263531717, 0.13598855263531717, 0.06965913102261423, 0.06965913102261423, 0.06965913102261423, 0.2500908979417059, 0.2500908979417059, 0.2500908979417059, 0.23979878966550106, 0.23979878966550106, 0.23979878966550106, 0.34291581938955207, 0.34291581938955207, 0.34291581938955207, 0.19698014738033176, 0.19698014738033176, 0.19698014738033176, 0.27097891508082317, 0.27097891508082317, 0.27097891508082317, 0.262687968946941, 0.262687968946941, 0.262687968946941, 0.12571967002921192, 0.12571967002921192, 0.12571967002921192, 0.19394674208454676, 0.19394674208454676, 0.19394674208454676, 0.19055240579755828, 0.19055240579755828, 0.19055240579755828, 0.2587984706916433, 0.2587984706916433, 0.2587984706916433, 0.22102030746695978, 0.22102030746695978, 0.22102030746695978, 0.227269601486205, 0.227269601486205, 0.227269601486205, 0.18677566814191748, 0.18677566814191748, 0.18677566814191748, 0.4024004042453252, 0.4024004042453252, 0.4024004042453252, 0.1949498602059201, 0.1949498602059201, 0.1949498602059201, 0.18893700122698098, 0.18893700122698098, 0.18893700122698098, 0.17392857750921809, 0.17392857750921809, 0.17392857750921809, 0.15265841423267268, 0.15265841423267268, 0.15265841423267268, 0.8020462051262538, 0.8020462051262538, 0.8020462051262538, 0.21109856853365583, 0.21109856853365583, 0.21109856853365583, 0.10540597184390699, 0.10540597184390699, 0.10540597184390699, 0.18108234868052697, 0.18108234868052697, 0.18108234868052697, 0.19549055874046795, 0.19549055874046795, 0.19549055874046795, 0.21099588072894615, 0.21099588072894615, 0.21099588072894615, 0.09892146652111056, 0.09892146652111056, 0.09892146652111056, 0.10418795128075053, 0.10418795128075053, 0.10418795128075053, 0.09868228764873332, 0.09868228764873332, 0.09868228764873332]}, "mutation_prompt": null}
{"id": "e5c7b97b-2146-4d6c-834f-be4b24997b58", "solution": "import numpy as np\n\nclass Enhanced_QPSO_DNLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.learning_factor = 0.3\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    # Dynamic neighborhood influence\n                    neighborhood = np.random.choice(self.pop_size, 3, replace=False)\n                    neighbor_best_position = personal_best_positions[neighborhood[np.argmin(personal_best_scores[neighborhood])]]\n                    \n                    r1, r2, r3 = np.random.rand(self.dim), np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i])\n                                    + self.learning_factor * r3 * (neighbor_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_DNLS", "description": "Enhanced Adaptive Quantum-inspired Particle Swarm Optimization with Dynamic Neighborhood and Learning Strategies for Accelerated Convergence and Robust Search.", "configspace": "", "generation": 92, "fitness": 0.32549788697515836, "feedback": "The algorithm Enhanced_QPSO_DNLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.31.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9417785745443545, 0.9417785745443545, 0.9417785745443545, 0.960600611541966, 0.960600611541966, 0.960600611541966, 0.9390917108321009, 0.9390917108321009, 0.9390917108321009, 0.875554282844105, 0.875554282844105, 0.875554282844105, 0.8689804398372845, 0.8689804398372845, 0.8689804398372845, 0.8506516601437973, 0.8506516601437973, 0.8506516601437973, 0.12467835341448286, 0.12467835341448286, 0.12467835341448286, 0.10843746524807518, 0.10843746524807518, 0.10843746524807518, 0.1424981207810453, 0.1424981207810453, 0.1424981207810453, 0.10549087061668128, 0.10549087061668128, 0.10549087061668128, 0.10749277826946313, 0.10749277826946313, 0.10749277826946313, 0.11374807526867847, 0.11374807526867847, 0.11374807526867847, 0.9958328267286598, 0.9958328267286598, 0.9958328267286598, 0.9965681649065503, 0.9965681649065503, 0.9965681649065503, 0.9957260605445322, 0.9957260605445322, 0.9957260605445322, 0.5931565728807111, 0.5931565728807111, 0.5931565728807111, 0.7324748057172916, 0.7324748057172916, 0.7324748057172916, 0.6697085060527401, 0.6697085060527401, 0.6697085060527401, 0.22907625932324926, 0.22907625932324926, 0.22907625932324926, 0.11471233800502123, 0.11471233800502123, 0.11471233800502123, 0.17497428344166222, 0.17497428344166222, 0.17497428344166222, 0.1920308219564476, 0.1920308219564476, 0.1920308219564476, 0.17787224926664835, 0.17787224926664835, 0.17787224926664835, 0.20115956277921132, 0.20115956277921132, 0.20115956277921132, 0.22444362011831087, 0.22444362011831087, 0.22444362011831087, 0.13635332527058142, 0.13635332527058142, 0.13635332527058142, 0.2450727332323085, 0.2450727332323085, 0.2450727332323085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01811987982399188, 0.01811987982399188, 0.01811987982399188, 0.03762066238369677, 0.03762066238369677, 0.03762066238369677, 0.12650239582593226, 0.12650239582593226, 0.12650239582593226, 0.07885296517465468, 0.07885296517465468, 0.07885296517465468, 0.05387351675686791, 0.05387351675686791, 0.05387351675686791, 0.1252873247902042, 0.1252873247902042, 0.1252873247902042, 0.11343329375888611, 0.11343329375888611, 0.11343329375888611, 0.08189456525240457, 0.08189456525240457, 0.08189456525240457, 0.13335435506400828, 0.13335435506400828, 0.13335435506400828, 0.01583332984313346, 0.01583332984313346, 0.01583332984313346, 0.17157955221258858, 0.17157955221258858, 0.17157955221258858, 0.5584872833481933, 0.5584872833481933, 0.5584872833481933, 0.571657465630147, 0.571657465630147, 0.571657465630147, 0.5517055347578783, 0.5517055347578783, 0.5517055347578783, 0.09871100845371461, 0.09871100845371461, 0.09871100845371461, 0.14294465302231307, 0.14294465302231307, 0.14294465302231307, 0.08384352573625165, 0.08384352573625165, 0.08384352573625165, 0.2310363753055099, 0.2310363753055099, 0.2310363753055099, 0.4145445005426124, 0.4145445005426124, 0.4145445005426124, 0.15221654882577274, 0.15221654882577274, 0.15221654882577274, 0.30387509726627127, 0.30387509726627127, 0.30387509726627127, 0.2532457762876372, 0.2532457762876372, 0.2532457762876372, 0.27529643392191105, 0.27529643392191105, 0.27529643392191105, 0.22538724673220112, 0.22538724673220112, 0.22538724673220112, 0.26436141550086767, 0.26436141550086767, 0.26436141550086767, 0.16113162787838442, 0.16113162787838442, 0.16113162787838442, 0.23691994430362728, 0.23691994430362728, 0.23691994430362728, 0.24535243505197846, 0.24535243505197846, 0.24535243505197846, 0.22347911938517506, 0.22347911938517506, 0.22347911938517506, 0.20289360049460337, 0.20289360049460337, 0.20289360049460337, 0.19235601574186045, 0.19235601574186045, 0.19235601574186045, 0.19584980593373436, 0.19584980593373436, 0.19584980593373436, 0.9632789736935761, 0.9632789736935761, 0.9632789736935761, 0.9213604704770766, 0.9213604704770766, 0.9213604704770766, 0.9603780605548836, 0.9603780605548836, 0.9603780605548836, 0.08345102303520524, 0.08345102303520524, 0.08345102303520524, 0.2144644826455201, 0.2144644826455201, 0.2144644826455201, 0.10557430588641581, 0.10557430588641581, 0.10557430588641581, 0.19371515359562486, 0.19371515359562486, 0.19371515359562486, 0.18085782607519107, 0.18085782607519107, 0.18085782607519107, 0.17652544001187565, 0.17652544001187565, 0.17652544001187565, 0.10136351125588938, 0.10136351125588938, 0.10136351125588938, 0.0926046002191977, 0.0926046002191977, 0.0926046002191977, 0.08236168618797568, 0.08236168618797568, 0.08236168618797568]}, "mutation_prompt": null}
{"id": "005d28d5-ea6b-40a4-b8e7-3a64b6c7f5e2", "solution": "import numpy as np\n\nclass Enhanced_QPSO_Adaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 1e-5\n        self.diversity_boost = 0.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Adaptive Diversity Control\n            diversity = np.mean(np.std(personal_best_positions, axis=0))\n            if diversity < self.diversity_threshold:\n                for i in range(self.pop_size):\n                    if np.random.rand() < self.diversity_boost:\n                        positions[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            # Focused Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_QPSO_Adaptive", "description": "Enhanced Quantum-inspired Particle Swarm Optimization with adaptive diversity control and focused local search for improved global convergence.", "configspace": "", "generation": 93, "fitness": 0.34442232570136155, "feedback": "The algorithm Enhanced_QPSO_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.31.", "error": "", "parent_id": "6d2d085c-7b1a-46fc-b5f3-1710ca7a2d71", "metadata": {"aucs": [0.9550719675542227, 0.9550719675542227, 0.9550719675542227, 0.9580876654983377, 0.9580876654983377, 0.9580876654983377, 0.9535482543839854, 0.9535482543839854, 0.9535482543839854, 0.8872231681565662, 0.8872231681565662, 0.8872231681565662, 0.887398947088422, 0.887398947088422, 0.887398947088422, 0.8888404066455565, 0.8888404066455565, 0.8888404066455565, 0.17885373891853307, 0.17885373891853307, 0.17885373891853307, 0.14887471006751096, 0.14887471006751096, 0.14887471006751096, 0.16078855823560534, 0.16078855823560534, 0.16078855823560534, 0.11522319125320879, 0.11522319125320879, 0.11522319125320879, 0.12224145099043504, 0.12224145099043504, 0.12224145099043504, 0.11340657535066367, 0.11340657535066367, 0.11340657535066367, 0.9942765375773324, 0.9942765375773324, 0.9942765375773324, 0.995776632940787, 0.995776632940787, 0.995776632940787, 0.9944387662766332, 0.9944387662766332, 0.9944387662766332, 0.5673597085772972, 0.5673597085772972, 0.5673597085772972, 0.5661360059629157, 0.5661360059629157, 0.5661360059629157, 0.5329753579025497, 0.5329753579025497, 0.5329753579025497, 0.23027592140633768, 0.23027592140633768, 0.23027592140633768, 0.2814090365577141, 0.2814090365577141, 0.2814090365577141, 0.19198483358260765, 0.19198483358260765, 0.19198483358260765, 0.211940193590472, 0.211940193590472, 0.211940193590472, 0.19927172172901086, 0.19927172172901086, 0.19927172172901086, 0.23436524009887383, 0.23436524009887383, 0.23436524009887383, 0.22215820823096932, 0.22215820823096932, 0.22215820823096932, 0.23851825085438827, 0.23851825085438827, 0.23851825085438827, 0.2225410850239452, 0.2225410850239452, 0.2225410850239452, 0.0008458857430361233, 0.0008458857430361233, 0.0008458857430361233, 0.006933759059589262, 0.006933759059589262, 0.006933759059589262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09165699618903422, 0.09165699618903422, 0.09165699618903422, 0.05602433350508218, 0.05602433350508218, 0.05602433350508218, 0.15029103796118304, 0.15029103796118304, 0.15029103796118304, 0.17393369574747064, 0.17393369574747064, 0.17393369574747064, 0.09620664162072012, 0.09620664162072012, 0.09620664162072012, 0.07969466470290987, 0.07969466470290987, 0.07969466470290987, 0.04784843855765597, 0.04784843855765597, 0.04784843855765597, 0.06386138789480234, 0.06386138789480234, 0.06386138789480234, 0.10787056503265413, 0.10787056503265413, 0.10787056503265413, 0.5491373466965563, 0.5491373466965563, 0.5491373466965563, 0.5413537630762832, 0.5413537630762832, 0.5413537630762832, 0.5619624690796, 0.5619624690796, 0.5619624690796, 0.08725506503522051, 0.08725506503522051, 0.08725506503522051, 0.13659902911098365, 0.13659902911098365, 0.13659902911098365, 0.08392763591035857, 0.08392763591035857, 0.08392763591035857, 0.46341033078231586, 0.46341033078231586, 0.46341033078231586, 0.31339899763905665, 0.31339899763905665, 0.31339899763905665, 0.16658541808161176, 0.16658541808161176, 0.16658541808161176, 0.19352973505173754, 0.19352973505173754, 0.19352973505173754, 0.26302171993335266, 0.26302171993335266, 0.26302171993335266, 0.23350695989821602, 0.23350695989821602, 0.23350695989821602, 0.1262315345565952, 0.1262315345565952, 0.1262315345565952, 0.3545987738622949, 0.3545987738622949, 0.3545987738622949, 0.2047471731313243, 0.2047471731313243, 0.2047471731313243, 0.23326304274068543, 0.23326304274068543, 0.23326304274068543, 0.2501094815597946, 0.2501094815597946, 0.2501094815597946, 0.24744392967516937, 0.24744392967516937, 0.24744392967516937, 0.8240177156221828, 0.8240177156221828, 0.8240177156221828, 0.22860538816911158, 0.22860538816911158, 0.22860538816911158, 0.18896741789478266, 0.18896741789478266, 0.18896741789478266, 0.6462398600386698, 0.6462398600386698, 0.6462398600386698, 0.9521090498403224, 0.9521090498403224, 0.9521090498403224, 0.9175320671119268, 0.9175320671119268, 0.9175320671119268, 0.8942751520448183, 0.8942751520448183, 0.8942751520448183, 0.2120338398386118, 0.2120338398386118, 0.2120338398386118, 0.17019555611321846, 0.17019555611321846, 0.17019555611321846, 0.18647869262563443, 0.18647869262563443, 0.18647869262563443, 0.1923261728628065, 0.1923261728628065, 0.1923261728628065, 0.1872958291324458, 0.1872958291324458, 0.1872958291324458, 0.08938704153092691, 0.08938704153092691, 0.08938704153092691, 0.08005861296415884, 0.08005861296415884, 0.08005861296415884, 0.09054910841824437, 0.09054910841824437, 0.09054910841824437]}, "mutation_prompt": null}
{"id": "5246ee4e-198e-4940-a95c-305c1a59941d", "solution": "import numpy as np\n\nclass Hybrid_Swarm_Optimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 1e-5\n        self.diversity_boost = 0.5\n        self.cooperation_factor = 0.3\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                # Cooperative Strategy\n                if np.random.rand() < self.cooperation_factor:\n                    neighbor_idx = np.random.choice(self.pop_size)\n                    if personal_best_scores[neighbor_idx] < personal_best_scores[i]:\n                        positions[i] = personal_best_positions[neighbor_idx]\n\n            # Adaptive Diversity Control\n            diversity = np.mean(np.std(personal_best_positions, axis=0))\n            if diversity < self.diversity_threshold:\n                for i in range(self.pop_size):\n                    if np.random.rand() < self.diversity_boost:\n                        positions[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            # Focused Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Hybrid_Swarm_Optimization", "description": "Hybrid Swarm Optimization integrating cooperative strategies and a dynamic quantum-inspired mechanism for enhanced adaptive search and convergence.", "configspace": "", "generation": 94, "fitness": 0.35118103949327917, "feedback": "The algorithm Hybrid_Swarm_Optimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.32.", "error": "", "parent_id": "005d28d5-ea6b-40a4-b8e7-3a64b6c7f5e2", "metadata": {"aucs": [0.9635798828039233, 0.9635798828039233, 0.9635798828039233, 0.9533300566042677, 0.9533300566042677, 0.9533300566042677, 0.9626519004828451, 0.9626519004828451, 0.9626519004828451, 0.875640747234532, 0.875640747234532, 0.875640747234532, 0.8592127047777065, 0.8592127047777065, 0.8592127047777065, 0.9082658115777249, 0.9082658115777249, 0.9082658115777249, 0.1252557557626931, 0.1252557557626931, 0.1252557557626931, 0.1017552040018822, 0.1017552040018822, 0.1017552040018822, 0.054581294586311224, 0.054581294586311224, 0.054581294586311224, 0.09747406100946954, 0.09747406100946954, 0.09747406100946954, 0.16119541162804396, 0.16119541162804396, 0.16119541162804396, 0.09730231224848918, 0.09730231224848918, 0.09730231224848918, 0.9956711317529235, 0.9956711317529235, 0.9956711317529235, 0.99574561169451, 0.99574561169451, 0.99574561169451, 0.9924706015220645, 0.9924706015220645, 0.9924706015220645, 0.7887008024781136, 0.7887008024781136, 0.7887008024781136, 0.7271320540057318, 0.7271320540057318, 0.7271320540057318, 0.7491756480157263, 0.7491756480157263, 0.7491756480157263, 0.16783427072332702, 0.16783427072332702, 0.16783427072332702, 0.28469499109359353, 0.28469499109359353, 0.28469499109359353, 0.1297343193279228, 0.1297343193279228, 0.1297343193279228, 0.24024696492760045, 0.24024696492760045, 0.24024696492760045, 0.2011740942322533, 0.2011740942322533, 0.2011740942322533, 0.2174121230687731, 0.2174121230687731, 0.2174121230687731, 0.21725755232205413, 0.21725755232205413, 0.21725755232205413, 0.20200853121020823, 0.20200853121020823, 0.20200853121020823, 0.24958506784752643, 0.24958506784752643, 0.24958506784752643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002376927879634616, 0.002376927879634616, 0.002376927879634616, 0.10264522722349301, 0.10264522722349301, 0.10264522722349301, 0.06233710582448715, 0.06233710582448715, 0.06233710582448715, 0.09621509748528201, 0.09621509748528201, 0.09621509748528201, 0.1715102599753402, 0.1715102599753402, 0.1715102599753402, 0.08688929440463167, 0.08688929440463167, 0.08688929440463167, 0.17402621442398325, 0.17402621442398325, 0.17402621442398325, 0.08246194050345057, 0.08246194050345057, 0.08246194050345057, 0.18086520629302494, 0.18086520629302494, 0.18086520629302494, 0.1422131950078659, 0.1422131950078659, 0.1422131950078659, 0.5719695579860912, 0.5719695579860912, 0.5719695579860912, 0.5281968667735485, 0.5281968667735485, 0.5281968667735485, 0.6028948238141163, 0.6028948238141163, 0.6028948238141163, 0.13163694585972385, 0.13163694585972385, 0.13163694585972385, 0.14732309728442838, 0.14732309728442838, 0.14732309728442838, 0.07382857018448852, 0.07382857018448852, 0.07382857018448852, 0.2125979884940592, 0.2125979884940592, 0.2125979884940592, 0.2688884233947145, 0.2688884233947145, 0.2688884233947145, 0.2232706634561773, 0.2232706634561773, 0.2232706634561773, 0.24762209858346984, 0.24762209858346984, 0.24762209858346984, 0.19205511596932778, 0.19205511596932778, 0.19205511596932778, 0.16571433350294573, 0.16571433350294573, 0.16571433350294573, 0.22795634158668432, 0.22795634158668432, 0.22795634158668432, 0.17885276274835782, 0.17885276274835782, 0.17885276274835782, 0.19562080202717302, 0.19562080202717302, 0.19562080202717302, 0.20083632182555355, 0.20083632182555355, 0.20083632182555355, 0.2134435529574802, 0.2134435529574802, 0.2134435529574802, 0.22479871579449628, 0.22479871579449628, 0.22479871579449628, 0.19534760462344258, 0.19534760462344258, 0.19534760462344258, 0.23172737433784107, 0.23172737433784107, 0.23172737433784107, 0.1971484679603689, 0.1971484679603689, 0.1971484679603689, 0.9466773805511427, 0.9466773805511427, 0.9466773805511427, 0.968386280835659, 0.968386280835659, 0.968386280835659, 0.9657305485167139, 0.9657305485167139, 0.9657305485167139, 0.8712086938857349, 0.8712086938857349, 0.8712086938857349, 0.7778095815133359, 0.7778095815133359, 0.7778095815133359, 0.1883421812912588, 0.1883421812912588, 0.1883421812912588, 0.2127420341916193, 0.2127420341916193, 0.2127420341916193, 0.21255493358936117, 0.21255493358936117, 0.21255493358936117, 0.2096463328878312, 0.2096463328878312, 0.2096463328878312, 0.09062818630837188, 0.09062818630837188, 0.09062818630837188, 0.08905732049402215, 0.08905732049402215, 0.08905732049402215, 0.09969156432514992, 0.09969156432514992, 0.09969156432514992]}, "mutation_prompt": null}
{"id": "602623f5-97e7-4a37-9c82-9333cabbaa9a", "solution": "import numpy as np\n\nclass Hybrid_Swarm_Optimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 1e-5\n        self.diversity_boost = 0.5\n        self.cooperation_factor = 0.3\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                # Cooperative Strategy\n                if np.random.rand() < self.cooperation_factor:\n                    neighbor_idx = np.random.choice(self.pop_size)\n                    if personal_best_scores[neighbor_idx] < personal_best_scores[i]:\n                        positions[i] = personal_best_positions[neighbor_idx]\n\n            # Adaptive Diversity Control\n            diversity = np.mean(np.std(personal_best_positions, axis=0))\n            if diversity < self.diversity_threshold:\n                for i in range(self.pop_size):\n                    if np.random.rand() < self.diversity_boost:\n                        positions[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            # Focused Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Hybrid_Swarm_Optimization", "description": "Hybrid Swarm Optimization integrating cooperative strategies and a dynamic quantum-inspired mechanism for enhanced adaptive search and convergence.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5246ee4e-198e-4940-a95c-305c1a59941d", "metadata": {"aucs": [0.9635798828039233, 0.9635798828039233, 0.9635798828039233, 0.9533300566042677, 0.9533300566042677, 0.9533300566042677, 0.9626519004828451, 0.9626519004828451, 0.9626519004828451, 0.875640747234532, 0.875640747234532, 0.875640747234532, 0.8592127047777065, 0.8592127047777065, 0.8592127047777065, 0.9082658115777249, 0.9082658115777249, 0.9082658115777249, 0.1252557557626931, 0.1252557557626931, 0.1252557557626931, 0.1017552040018822, 0.1017552040018822, 0.1017552040018822, 0.054581294586311224, 0.054581294586311224, 0.054581294586311224, 0.09747406100946954, 0.09747406100946954, 0.09747406100946954, 0.16119541162804396, 0.16119541162804396, 0.16119541162804396, 0.09730231224848918, 0.09730231224848918, 0.09730231224848918, 0.9956711317529235, 0.9956711317529235, 0.9956711317529235, 0.99574561169451, 0.99574561169451, 0.99574561169451, 0.9924706015220645, 0.9924706015220645, 0.9924706015220645, 0.7887008024781136, 0.7887008024781136, 0.7887008024781136, 0.7271320540057318, 0.7271320540057318, 0.7271320540057318, 0.7491756480157263, 0.7491756480157263, 0.7491756480157263, 0.16783427072332702, 0.16783427072332702, 0.16783427072332702, 0.28469499109359353, 0.28469499109359353, 0.28469499109359353, 0.1297343193279228, 0.1297343193279228, 0.1297343193279228, 0.24024696492760045, 0.24024696492760045, 0.24024696492760045, 0.2011740942322533, 0.2011740942322533, 0.2011740942322533, 0.2174121230687731, 0.2174121230687731, 0.2174121230687731, 0.21725755232205413, 0.21725755232205413, 0.21725755232205413, 0.20200853121020823, 0.20200853121020823, 0.20200853121020823, 0.24958506784752643, 0.24958506784752643, 0.24958506784752643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002376927879634616, 0.002376927879634616, 0.002376927879634616, 0.10264522722349301, 0.10264522722349301, 0.10264522722349301, 0.06233710582448715, 0.06233710582448715, 0.06233710582448715, 0.09621509748528201, 0.09621509748528201, 0.09621509748528201, 0.1715102599753402, 0.1715102599753402, 0.1715102599753402, 0.08688929440463167, 0.08688929440463167, 0.08688929440463167, 0.17402621442398325, 0.17402621442398325, 0.17402621442398325, 0.08246194050345057, 0.08246194050345057, 0.08246194050345057, 0.18086520629302494, 0.18086520629302494, 0.18086520629302494, 0.1422131950078659, 0.1422131950078659, 0.1422131950078659, 0.5719695579860912, 0.5719695579860912, 0.5719695579860912, 0.5281968667735485, 0.5281968667735485, 0.5281968667735485, 0.6028948238141163, 0.6028948238141163, 0.6028948238141163, 0.13163694585972385, 0.13163694585972385, 0.13163694585972385, 0.14732309728442838, 0.14732309728442838, 0.14732309728442838, 0.07382857018448852, 0.07382857018448852, 0.07382857018448852, 0.2125979884940592, 0.2125979884940592, 0.2125979884940592, 0.2688884233947145, 0.2688884233947145, 0.2688884233947145, 0.2232706634561773, 0.2232706634561773, 0.2232706634561773, 0.24762209858346984, 0.24762209858346984, 0.24762209858346984, 0.19205511596932778, 0.19205511596932778, 0.19205511596932778, 0.16571433350294573, 0.16571433350294573, 0.16571433350294573, 0.22795634158668432, 0.22795634158668432, 0.22795634158668432, 0.17885276274835782, 0.17885276274835782, 0.17885276274835782, 0.19562080202717302, 0.19562080202717302, 0.19562080202717302, 0.20083632182555355, 0.20083632182555355, 0.20083632182555355, 0.2134435529574802, 0.2134435529574802, 0.2134435529574802, 0.22479871579449628, 0.22479871579449628, 0.22479871579449628, 0.19534760462344258, 0.19534760462344258, 0.19534760462344258, 0.23172737433784107, 0.23172737433784107, 0.23172737433784107, 0.1971484679603689, 0.1971484679603689, 0.1971484679603689, 0.9466773805511427, 0.9466773805511427, 0.9466773805511427, 0.968386280835659, 0.968386280835659, 0.968386280835659, 0.9657305485167139, 0.9657305485167139, 0.9657305485167139, 0.8712086938857349, 0.8712086938857349, 0.8712086938857349, 0.7778095815133359, 0.7778095815133359, 0.7778095815133359, 0.1883421812912588, 0.1883421812912588, 0.1883421812912588, 0.2127420341916193, 0.2127420341916193, 0.2127420341916193, 0.21255493358936117, 0.21255493358936117, 0.21255493358936117, 0.2096463328878312, 0.2096463328878312, 0.2096463328878312, 0.09062818630837188, 0.09062818630837188, 0.09062818630837188, 0.08905732049402215, 0.08905732049402215, 0.08905732049402215, 0.09969156432514992, 0.09969156432514992, 0.09969156432514992]}, "mutation_prompt": null}
{"id": "a1c51bee-5694-4f2b-88fa-d1f5b941f88a", "solution": "import numpy as np\n\nclass Enhanced_Hybrid_Quantum_Swarm_Optimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.98\n        self.quantum_prob = 0.2\n        self.exploration_factor = 0.6\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 1e-5\n        self.diversity_boost = 0.6\n        self.cooperation_factor = 0.3\n        self.tune_factor = 0.7\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                # Cooperative Strategy with Elite Migration\n                if np.random.rand() < self.cooperation_factor:\n                    neighbor_idx = np.random.choice(self.pop_size)\n                    if personal_best_scores[neighbor_idx] < personal_best_scores[i]:\n                        positions[i] = personal_best_positions[neighbor_idx]\n\n            # Adaptive Diversity Control with Parameter Tuning\n            diversity = np.mean(np.std(personal_best_positions, axis=0))\n            if diversity < self.diversity_threshold:\n                self.quantum_prob *= self.tune_factor\n                self.diversity_boost *= self.tune_factor\n                for i in range(self.pop_size):\n                    if np.random.rand() < self.diversity_boost:\n                        positions[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            # Focused Local Search with Adaptive Radius\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_Hybrid_Quantum_Swarm_Optimization", "description": "Enhanced Hybrid Quantum-Swarm Optimization integrates adaptive parameter tuning and strategic elite migration to improve convergence and solution quality.", "configspace": "", "generation": 96, "fitness": 0.3004261886480333, "feedback": "The algorithm Enhanced_Hybrid_Quantum_Swarm_Optimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "5246ee4e-198e-4940-a95c-305c1a59941d", "metadata": {"aucs": [0.9596477578558836, 0.9596477578558836, 0.9596477578558836, 0.9620116292120175, 0.9620116292120175, 0.9620116292120175, 0.9634440847750544, 0.9634440847750544, 0.9634440847750544, 0.8782682116780552, 0.8782682116780552, 0.8782682116780552, 0.9000391525953975, 0.9000391525953975, 0.9000391525953975, 0.8308592488314064, 0.8308592488314064, 0.8308592488314064, 0.113986485965061, 0.113986485965061, 0.113986485965061, 0.12899434853886416, 0.12899434853886416, 0.12899434853886416, 0.12733556856859563, 0.12733556856859563, 0.12733556856859563, 0.07385816868450057, 0.07385816868450057, 0.07385816868450057, 0.12260965436484472, 0.12260965436484472, 0.12260965436484472, 0.14265084780842918, 0.14265084780842918, 0.14265084780842918, 0.9937632615663858, 0.9937632615663858, 0.9937632615663858, 0.9884508754790261, 0.9884508754790261, 0.9884508754790261, 0.9963322877086782, 0.9963322877086782, 0.9963322877086782, 0.7554264977677881, 0.7554264977677881, 0.7554264977677881, 0.4081159892073629, 0.4081159892073629, 0.4081159892073629, 0.5268393133703403, 0.5268393133703403, 0.5268393133703403, 0.3652836230779658, 0.3652836230779658, 0.3652836230779658, 0.24113042602431478, 0.24113042602431478, 0.24113042602431478, 0.1779544125405007, 0.1779544125405007, 0.1779544125405007, 0.20479305754574573, 0.20479305754574573, 0.20479305754574573, 0.20498483392155775, 0.20498483392155775, 0.20498483392155775, 0.1998561202061765, 0.1998561202061765, 0.1998561202061765, 0.27005325346603326, 0.27005325346603326, 0.27005325346603326, 0.19459886487316003, 0.19459886487316003, 0.19459886487316003, 0.2266481368378217, 0.2266481368378217, 0.2266481368378217, 0.0004088349337065811, 0.0004088349337065811, 0.0004088349337065811, 0.006502870554969786, 0.006502870554969786, 0.006502870554969786, 0.008537552374263901, 0.008537552374263901, 0.008537552374263901, 0.1308113504442887, 0.1308113504442887, 0.1308113504442887, 0.07281229240030207, 0.07281229240030207, 0.07281229240030207, 0.18783947590010797, 0.18783947590010797, 0.18783947590010797, 0.08452185623664354, 0.08452185623664354, 0.08452185623664354, 0.10548512771815732, 0.10548512771815732, 0.10548512771815732, 0.08384733007835987, 0.08384733007835987, 0.08384733007835987, 0.05818133251505675, 0.05818133251505675, 0.05818133251505675, 0.06159530473761865, 0.06159530473761865, 0.06159530473761865, 0.15608236631004369, 0.15608236631004369, 0.15608236631004369, 0.5129618622160825, 0.5129618622160825, 0.5129618622160825, 0.5182252947023965, 0.5182252947023965, 0.5182252947023965, 0.6088638134533582, 0.6088638134533582, 0.6088638134533582, 0.06392532035787168, 0.06392532035787168, 0.06392532035787168, 0.13825499147225617, 0.13825499147225617, 0.13825499147225617, 0.08122105558538095, 0.08122105558538095, 0.08122105558538095, 0.22349670537137667, 0.22349670537137667, 0.22349670537137667, 0.24798326186701591, 0.24798326186701591, 0.24798326186701591, 0.20318630872500287, 0.20318630872500287, 0.20318630872500287, 0.2796998134334413, 0.2796998134334413, 0.2796998134334413, 0.2691343893238479, 0.2691343893238479, 0.2691343893238479, 0.18813607107536168, 0.18813607107536168, 0.18813607107536168, 0.16708372984565745, 0.16708372984565745, 0.16708372984565745, 0.17234124629683267, 0.17234124629683267, 0.17234124629683267, 0.17862709692859535, 0.17862709692859535, 0.17862709692859535, 0.2099289480610772, 0.2099289480610772, 0.2099289480610772, 0.23272515314891995, 0.23272515314891995, 0.23272515314891995, 0.23007169557873086, 0.23007169557873086, 0.23007169557873086, 0.18302796306898594, 0.18302796306898594, 0.18302796306898594, 0.18875977805362987, 0.18875977805362987, 0.18875977805362987, 0.17455490290220566, 0.17455490290220566, 0.17455490290220566, 0.1889007662000577, 0.1889007662000577, 0.1889007662000577, 0.964517967564549, 0.964517967564549, 0.964517967564549, 0.1687190579006259, 0.1687190579006259, 0.1687190579006259, 0.08335058491984815, 0.08335058491984815, 0.08335058491984815, 0.21349805289798418, 0.21349805289798418, 0.21349805289798418, 0.10567748302203595, 0.10567748302203595, 0.10567748302203595, 0.23279693762335363, 0.23279693762335363, 0.23279693762335363, 0.1953846834446895, 0.1953846834446895, 0.1953846834446895, 0.21234144128438504, 0.21234144128438504, 0.21234144128438504, 0.08204749517632715, 0.08204749517632715, 0.08204749517632715, 0.11777805332296087, 0.11777805332296087, 0.11777805332296087, 0.07890185115906712, 0.07890185115906712, 0.07890185115906712]}, "mutation_prompt": null}
{"id": "f519032c-1c6a-42c8-8747-6fc51d2b5817", "solution": "import numpy as np\n\nclass Enhanced_Hybrid_Swarm_Optimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 1e-5\n        self.diversity_boost = 0.5\n        self.cooperation_factor = 0.3\n        self.elitist_ratio = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                # Cooperative Strategy\n                if np.random.rand() < self.cooperation_factor:\n                    neighbor_idx = np.random.choice(self.pop_size)\n                    if personal_best_scores[neighbor_idx] < personal_best_scores[i]:\n                        positions[i] = personal_best_positions[neighbor_idx]\n\n            # Adaptive Diversity Control\n            diversity = np.mean(np.std(personal_best_positions, axis=0))\n            if diversity < self.diversity_threshold:\n                for i in range(self.pop_size):\n                    if np.random.rand() < self.diversity_boost:\n                        positions[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            # Elitist Strategy: Keep top performers\n            elite_size = max(1, int(self.elitist_ratio * self.pop_size))\n            elite_indices = np.argsort(personal_best_scores)[:elite_size]\n            elite_positions = personal_best_positions[elite_indices]\n\n            # Enhanced Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n            # Merge top performers back\n            for i, idx in enumerate(elite_indices):\n                positions[idx] = elite_positions[i]\n\n        return global_best_score", "name": "Enhanced_Hybrid_Swarm_Optimization", "description": "Enhanced Hybrid Swarm Optimization incorporating adaptive inertia, enhanced local search, and elitist strategy for improved convergence precision.", "configspace": "", "generation": 97, "fitness": 0.33344040125109614, "feedback": "The algorithm Enhanced_Hybrid_Swarm_Optimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.31.", "error": "", "parent_id": "5246ee4e-198e-4940-a95c-305c1a59941d", "metadata": {"aucs": [0.9593804806809338, 0.9593804806809338, 0.9593804806809338, 0.9608618987992524, 0.9608618987992524, 0.9608618987992524, 0.9622464237831416, 0.9622464237831416, 0.9622464237831416, 0.8191643779211234, 0.8191643779211234, 0.8191643779211234, 0.9047386903082861, 0.9047386903082861, 0.9047386903082861, 0.9075509764529307, 0.9075509764529307, 0.9075509764529307, 0.08746287391539265, 0.08746287391539265, 0.08746287391539265, 0.1152917587564869, 0.1152917587564869, 0.1152917587564869, 0.0813623594477001, 0.0813623594477001, 0.0813623594477001, 0.10254542061338379, 0.10254542061338379, 0.10254542061338379, 0.08903895444036514, 0.08903895444036514, 0.08903895444036514, 0.11688781639933987, 0.11688781639933987, 0.11688781639933987, 0.9956711317529235, 0.9956711317529235, 0.9956711317529235, 0.99574561169451, 0.99574561169451, 0.99574561169451, 0.9924706015220645, 0.9924706015220645, 0.9924706015220645, 0.6160105713345858, 0.6160105713345858, 0.6160105713345858, 0.7244444014273534, 0.7244444014273534, 0.7244444014273534, 0.7042753722876784, 0.7042753722876784, 0.7042753722876784, 0.1972104955156848, 0.1972104955156848, 0.1972104955156848, 0.21208373064732655, 0.21208373064732655, 0.21208373064732655, 0.1258537714104757, 0.1258537714104757, 0.1258537714104757, 0.2391824408945119, 0.2391824408945119, 0.2391824408945119, 0.19755766200894842, 0.19755766200894842, 0.19755766200894842, 0.22117793010454556, 0.22117793010454556, 0.22117793010454556, 0.21462226396898298, 0.21462226396898298, 0.21462226396898298, 0.20189645867535078, 0.20189645867535078, 0.20189645867535078, 0.21147583217392874, 0.21147583217392874, 0.21147583217392874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014905315676736475, 0.0014905315676736475, 0.0014905315676736475, 0.12825492118543225, 0.12825492118543225, 0.12825492118543225, 0.043416982048972375, 0.043416982048972375, 0.043416982048972375, 0.08471450317665552, 0.08471450317665552, 0.08471450317665552, 0.17279492435801058, 0.17279492435801058, 0.17279492435801058, 0.08864899659561065, 0.08864899659561065, 0.08864899659561065, 0.17472928651763964, 0.17472928651763964, 0.17472928651763964, 0.06350471228361854, 0.06350471228361854, 0.06350471228361854, 0.18399837005837816, 0.18399837005837816, 0.18399837005837816, 0.17116139982726486, 0.17116139982726486, 0.17116139982726486, 0.5384873052076171, 0.5384873052076171, 0.5384873052076171, 0.5211942957209774, 0.5211942957209774, 0.5211942957209774, 0.5850823228300825, 0.5850823228300825, 0.5850823228300825, 0.11895842801942313, 0.11895842801942313, 0.11895842801942313, 0.1473532770428454, 0.1473532770428454, 0.1473532770428454, 0.07343425777011725, 0.07343425777011725, 0.07343425777011725, 0.2163590857780796, 0.2163590857780796, 0.2163590857780796, 0.21064329463827736, 0.21064329463827736, 0.21064329463827736, 0.19191417318049553, 0.19191417318049553, 0.19191417318049553, 0.2470248501879342, 0.2470248501879342, 0.2470248501879342, 0.22875723085971156, 0.22875723085971156, 0.22875723085971156, 0.2837840910454531, 0.2837840910454531, 0.2837840910454531, 0.12306866730783095, 0.12306866730783095, 0.12306866730783095, 0.2553373415458893, 0.2553373415458893, 0.2553373415458893, 0.16744848267169832, 0.16744848267169832, 0.16744848267169832, 0.18613360676742297, 0.18613360676742297, 0.18613360676742297, 0.1997490302926498, 0.1997490302926498, 0.1997490302926498, 0.2265081877156201, 0.2265081877156201, 0.2265081877156201, 0.19524756781320907, 0.19524756781320907, 0.19524756781320907, 0.23299850752047657, 0.23299850752047657, 0.23299850752047657, 0.20261421972829607, 0.20261421972829607, 0.20261421972829607, 0.18836171644451405, 0.18836171644451405, 0.18836171644451405, 0.9749037362292146, 0.9749037362292146, 0.9749037362292146, 0.9697072876296959, 0.9697072876296959, 0.9697072876296959, 0.9471051279445003, 0.9471051279445003, 0.9471051279445003, 0.6489104272284063, 0.6489104272284063, 0.6489104272284063, 0.19289665867741923, 0.19289665867741923, 0.19289665867741923, 0.20255992316405458, 0.20255992316405458, 0.20255992316405458, 0.20120669395661483, 0.20120669395661483, 0.20120669395661483, 0.18158254496771864, 0.18158254496771864, 0.18158254496771864, 0.09861141278259566, 0.09861141278259566, 0.09861141278259566, 0.08533204335316769, 0.08533204335316769, 0.08533204335316769, 0.0953081595004478, 0.0953081595004478, 0.0953081595004478]}, "mutation_prompt": null}
{"id": "517f6eba-2870-4fc5-b78a-225dec8e760b", "solution": "import numpy as np\n\nclass Enhanced_Hybrid_Swarm_Optimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_max = 0.9\n        self.inertia_min = 0.4\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 1e-5\n        self.diversity_boost = 0.5\n        self.cooperation_factor = 0.3\n        self.elite_preservation_factor = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n        elite_position = global_best_position\n        elite_score = global_best_score\n\n        while evals < self.budget:\n            inertia_weight = self.inertia_max - (self.inertia_max - self.inertia_min) * (evals / self.budget)\n\n            for i in range(self.pop_size):\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    velocities[i] = (inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                score = func(positions[i])\n                evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                if score < elite_score:\n                    elite_score = score\n                    elite_position = positions[i]\n\n                # Cooperative Strategy\n                if np.random.rand() < self.cooperation_factor:\n                    neighbor_idx = np.random.choice(self.pop_size)\n                    if personal_best_scores[neighbor_idx] < personal_best_scores[i]:\n                        positions[i] = personal_best_positions[neighbor_idx]\n\n            # Adaptive Diversity Control\n            diversity = np.mean(np.std(personal_best_positions, axis=0))\n            if diversity < self.diversity_threshold:\n                for i in range(self.pop_size):\n                    if np.random.rand() < self.diversity_boost:\n                        positions[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            # Focused Local Search and Elite Preservation\n            if evals < self.budget:\n                for _ in range(int(self.pop_size * self.elite_preservation_factor)):\n                    local_positions = elite_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_Hybrid_Swarm_Optimization", "description": "Enhanced Hybrid Swarm Optimization integrating adaptive inertia, elite preservation, and dynamic cooperative learning for superior convergence and solution quality.", "configspace": "", "generation": 98, "fitness": 0.26789251246066725, "feedback": "The algorithm Enhanced_Hybrid_Swarm_Optimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "5246ee4e-198e-4940-a95c-305c1a59941d", "metadata": {"aucs": [0.713753683356308, 0.713753683356308, 0.713753683356308, 0.7088826696470953, 0.7088826696470953, 0.7088826696470953, 0.758567892080886, 0.758567892080886, 0.758567892080886, 0.45442767649029703, 0.45442767649029703, 0.45442767649029703, 0.40493380358813535, 0.40493380358813535, 0.40493380358813535, 0.40101249494850133, 0.40101249494850133, 0.40101249494850133, 0.1075103602833638, 0.1075103602833638, 0.1075103602833638, 0.11939654804069122, 0.11939654804069122, 0.11939654804069122, 0.08379344953879186, 0.08379344953879186, 0.08379344953879186, 0.09110109473071748, 0.09110109473071748, 0.09110109473071748, 0.08825408311701399, 0.08825408311701399, 0.08825408311701399, 0.01897973628390215, 0.01897973628390215, 0.01897973628390215, 0.9956332008094614, 0.9956332008094614, 0.9956332008094614, 0.9962879502332884, 0.9962879502332884, 0.9962879502332884, 0.9943761904583149, 0.9943761904583149, 0.9943761904583149, 0.4652479433237743, 0.4652479433237743, 0.4652479433237743, 0.38659410772952374, 0.38659410772952374, 0.38659410772952374, 0.37093505688817086, 0.37093505688817086, 0.37093505688817086, 0.5362812864544347, 0.5362812864544347, 0.5362812864544347, 0.5428960319625338, 0.5428960319625338, 0.5428960319625338, 0.19160665258141396, 0.19160665258141396, 0.19160665258141396, 0.26415346615278557, 0.26415346615278557, 0.26415346615278557, 0.2461207496487402, 0.2461207496487402, 0.2461207496487402, 0.17563382279319317, 0.17563382279319317, 0.17563382279319317, 0.15835249415216712, 0.15835249415216712, 0.15835249415216712, 0.16053218019811755, 0.16053218019811755, 0.16053218019811755, 0.12680625529543288, 0.12680625529543288, 0.12680625529543288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016403438490231181, 0.00016403438490231181, 0.00016403438490231181, 0.0703374109599737, 0.0703374109599737, 0.0703374109599737, 0.06848648377142941, 0.06848648377142941, 0.06848648377142941, 0.10271346347659238, 0.10271346347659238, 0.10271346347659238, 0.04458914783100354, 0.04458914783100354, 0.04458914783100354, 0.183330160422016, 0.183330160422016, 0.183330160422016, 0.11623240164873117, 0.11623240164873117, 0.11623240164873117, 0.0430447050212428, 0.0430447050212428, 0.0430447050212428, 0.0565876392811675, 0.0565876392811675, 0.0565876392811675, 0.10567569422487921, 0.10567569422487921, 0.10567569422487921, 0.4903976174982734, 0.4903976174982734, 0.4903976174982734, 0.46598492696694793, 0.46598492696694793, 0.46598492696694793, 0.5020447059612493, 0.5020447059612493, 0.5020447059612493, 0.12550866186312082, 0.12550866186312082, 0.12550866186312082, 0.13807734874825406, 0.13807734874825406, 0.13807734874825406, 0.13054018177145477, 0.13054018177145477, 0.13054018177145477, 0.16869347136521318, 0.16869347136521318, 0.16869347136521318, 0.1590007655599991, 0.1590007655599991, 0.1590007655599991, 0.1946569490113752, 0.1946569490113752, 0.1946569490113752, 0.26459788847077303, 0.26459788847077303, 0.26459788847077303, 0.27115668727315756, 0.27115668727315756, 0.27115668727315756, 0.23315973649241584, 0.23315973649241584, 0.23315973649241584, 0.08159735461402362, 0.08159735461402362, 0.08159735461402362, 0.24926170558514849, 0.24926170558514849, 0.24926170558514849, 0.21015267477130162, 0.21015267477130162, 0.21015267477130162, 0.22107393337962267, 0.22107393337962267, 0.22107393337962267, 0.20541967065033762, 0.20541967065033762, 0.20541967065033762, 0.194913202550285, 0.194913202550285, 0.194913202550285, 0.1847491030017987, 0.1847491030017987, 0.1847491030017987, 0.19050378914867616, 0.19050378914867616, 0.19050378914867616, 0.1919608869069781, 0.1919608869069781, 0.1919608869069781, 0.13952488478968195, 0.13952488478968195, 0.13952488478968195, 0.8167248816800694, 0.8167248816800694, 0.8167248816800694, 0.14360152217957023, 0.14360152217957023, 0.14360152217957023, 0.5563599929173455, 0.5563599929173455, 0.5563599929173455, 0.3239494861882356, 0.3239494861882356, 0.3239494861882356, 0.21371009286614828, 0.21371009286614828, 0.21371009286614828, 0.1908675560770826, 0.1908675560770826, 0.1908675560770826, 0.18418880738422605, 0.18418880738422605, 0.18418880738422605, 0.2322395962968803, 0.2322395962968803, 0.2322395962968803, 0.09204005874030585, 0.09204005874030585, 0.09204005874030585, 0.07799375776566309, 0.07799375776566309, 0.07799375776566309, 0.09017697688343418, 0.09017697688343418, 0.09017697688343418]}, "mutation_prompt": null}
{"id": "33d7fa6a-fc5d-483e-8351-1648dc86cbd9", "solution": "import numpy as np\n\nclass Enhanced_Quantum_Swarm_Optimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 + 2 * int(np.sqrt(dim))\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 2.0\n        self.social_coeff = 2.0\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.damping = 0.99\n        self.quantum_prob = 0.1\n        self.exploration_factor = 0.5\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 1e-5\n        self.diversity_boost = 0.5\n        self.cooperation_factor = 0.3\n        self.learning_rate = 0.5\n        self.opposition_prob = 0.2\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(ind) for ind in positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evals = self.pop_size\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                self.inertia_weight *= self.damping\n                dynamic_exploration = self.exploration_factor * (1 - evals / self.budget)\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n\n                if np.random.rand() < self.quantum_prob:\n                    mean_best_position = np.mean(personal_best_positions, axis=0)\n                    quantum_distance = np.abs(global_best_position - mean_best_position)\n                    positions[i] = mean_best_position + quantum_distance * np.random.uniform(-dynamic_exploration, dynamic_exploration, self.dim)\n                else:\n                    velocities[i] = (self.inertia_weight * velocities[i]\n                                    + self.cognitive_coeff * r1 * (personal_best_positions[i] - positions[i])\n                                    + self.social_coeff * r2 * (global_best_position - positions[i]))\n                    positions[i] = np.clip(positions[i] + velocities[i], self.lower_bound, self.upper_bound)\n\n                if np.random.rand() < self.opposition_prob:\n                    opposition_position = self.lower_bound + self.upper_bound - positions[i]\n                    opposition_position = np.clip(opposition_position, self.lower_bound, self.upper_bound)\n                    opposition_score = func(opposition_position)\n                    evals += 1\n                    if opposition_score < personal_best_scores[i]:\n                        positions[i] = opposition_position\n                        score = opposition_score\n                    else:\n                        score = func(positions[i])\n                        evals += 1\n                else:\n                    score = func(positions[i])\n                    evals += 1\n\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n                # Cooperative Strategy\n                if np.random.rand() < self.cooperation_factor:\n                    neighbor_idx = np.random.choice(self.pop_size)\n                    if personal_best_scores[neighbor_idx] < personal_best_scores[i]:\n                        positions[i] = personal_best_positions[neighbor_idx]\n\n            # Adaptive Diversity Control\n            diversity = np.mean(np.std(personal_best_positions, axis=0))\n            if diversity < self.diversity_threshold:\n                for i in range(self.pop_size):\n                    if np.random.rand() < self.diversity_boost:\n                        positions[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            # Focused Local Search\n            if evals < self.budget:\n                for _ in range(self.pop_size // 2):\n                    local_positions = global_best_position + np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    local_positions = np.clip(local_positions, self.lower_bound, self.upper_bound)\n                    local_score = func(local_positions)\n                    evals += 1\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_positions\n                        self.local_search_radius *= 0.9\n                    else:\n                        self.local_search_radius = min(0.1, self.local_search_radius * 1.1)\n\n        return global_best_score", "name": "Enhanced_Quantum_Swarm_Optimization", "description": "Enhanced Quantum Swarm Optimization with adaptive learning rates and opposition-based learning for robust global search and faster convergence.", "configspace": "", "generation": 99, "fitness": 0.331654149427828, "feedback": "The algorithm Enhanced_Quantum_Swarm_Optimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.30.", "error": "", "parent_id": "5246ee4e-198e-4940-a95c-305c1a59941d", "metadata": {"aucs": [0.9499116205621778, 0.9499116205621778, 0.9499116205621778, 0.9405909577190718, 0.9405909577190718, 0.9405909577190718, 0.9436563503782646, 0.9436563503782646, 0.9436563503782646, 0.8789594004226776, 0.8789594004226776, 0.8789594004226776, 0.9051123921075483, 0.9051123921075483, 0.9051123921075483, 0.9118260700624152, 0.9118260700624152, 0.9118260700624152, 0.15378505952023425, 0.15378505952023425, 0.15378505952023425, 0.1473275367431639, 0.1473275367431639, 0.1473275367431639, 0.12053564244208015, 0.12053564244208015, 0.12053564244208015, 0.11953984489751768, 0.11953984489751768, 0.11953984489751768, 0.11564855349229297, 0.11564855349229297, 0.11564855349229297, 0.12510608067131668, 0.12510608067131668, 0.12510608067131668, 0.9955220980044306, 0.9955220980044306, 0.9955220980044306, 0.9941809862152317, 0.9941809862152317, 0.9941809862152317, 0.9940735557717819, 0.9940735557717819, 0.9940735557717819, 0.7240347934304594, 0.7240347934304594, 0.7240347934304594, 0.6023224894989838, 0.6023224894989838, 0.6023224894989838, 0.6791225752409936, 0.6791225752409936, 0.6791225752409936, 0.5957332634685315, 0.5957332634685315, 0.5957332634685315, 0.17287460315963943, 0.17287460315963943, 0.17287460315963943, 0.2445666120327048, 0.2445666120327048, 0.2445666120327048, 0.13006388094533106, 0.13006388094533106, 0.13006388094533106, 0.1927384495781861, 0.1927384495781861, 0.1927384495781861, 0.20565989781020544, 0.20565989781020544, 0.20565989781020544, 0.22497357869107693, 0.22497357869107693, 0.22497357869107693, 0.20113142671351214, 0.20113142671351214, 0.20113142671351214, 0.2586504627942764, 0.2586504627942764, 0.2586504627942764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05558684847705664, 0.05558684847705664, 0.05558684847705664, 0.056396571512379756, 0.056396571512379756, 0.056396571512379756, 0.09155524460673292, 0.09155524460673292, 0.09155524460673292, 0.09547616543059845, 0.09547616543059845, 0.09547616543059845, 0.38788965936227926, 0.38788965936227926, 0.38788965936227926, 0.08616074395973516, 0.08616074395973516, 0.08616074395973516, 0.08273845636324983, 0.08273845636324983, 0.08273845636324983, 0.04694845969715733, 0.04694845969715733, 0.04694845969715733, 0.2870407424466168, 0.2870407424466168, 0.2870407424466168, 0.08854586512766438, 0.08854586512766438, 0.08854586512766438, 0.5230073976324292, 0.5230073976324292, 0.5230073976324292, 0.5471544330454992, 0.5471544330454992, 0.5471544330454992, 0.593158621518006, 0.593158621518006, 0.593158621518006, 0.07257124806633275, 0.07257124806633275, 0.07257124806633275, 0.14641882752797664, 0.14641882752797664, 0.14641882752797664, 0.07835476897979754, 0.07835476897979754, 0.07835476897979754, 0.21128321314455623, 0.21128321314455623, 0.21128321314455623, 0.2805610698203278, 0.2805610698203278, 0.2805610698203278, 0.13451809098425416, 0.13451809098425416, 0.13451809098425416, 0.19492999806892897, 0.19492999806892897, 0.19492999806892897, 0.22607369775493225, 0.22607369775493225, 0.22607369775493225, 0.22757111604929614, 0.22757111604929614, 0.22757111604929614, 0.19013711300170488, 0.19013711300170488, 0.19013711300170488, 0.32443983399149734, 0.32443983399149734, 0.32443983399149734, 0.2030065144183245, 0.2030065144183245, 0.2030065144183245, 0.21030054561306244, 0.21030054561306244, 0.21030054561306244, 0.24863123914432106, 0.24863123914432106, 0.24863123914432106, 0.23061193349475673, 0.23061193349475673, 0.23061193349475673, 0.1884039458007033, 0.1884039458007033, 0.1884039458007033, 0.5051116385318376, 0.5051116385318376, 0.5051116385318376, 0.21579026098916454, 0.21579026098916454, 0.21579026098916454, 0.21384421603969372, 0.21384421603969372, 0.21384421603969372, 0.9694536052549205, 0.9694536052549205, 0.9694536052549205, 0.1541321216890923, 0.1541321216890923, 0.1541321216890923, 0.9402890317474402, 0.9402890317474402, 0.9402890317474402, 0.21279102340593248, 0.21279102340593248, 0.21279102340593248, 0.18674109984484488, 0.18674109984484488, 0.18674109984484488, 0.186085166816103, 0.186085166816103, 0.186085166816103, 0.20461510591371712, 0.20461510591371712, 0.20461510591371712, 0.19482016767384158, 0.19482016767384158, 0.19482016767384158, 0.08446123786204784, 0.08446123786204784, 0.08446123786204784, 0.08936846296285239, 0.08936846296285239, 0.08936846296285239, 0.08427507265784784, 0.08427507265784784, 0.08427507265784784]}, "mutation_prompt": null}
