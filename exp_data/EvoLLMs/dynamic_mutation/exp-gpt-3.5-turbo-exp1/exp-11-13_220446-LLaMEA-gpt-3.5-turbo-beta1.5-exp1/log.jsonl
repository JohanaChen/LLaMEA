{"id": "3b4f261c-2b40-4ef8-a1e0-cdfacacbf61d", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "10e729fb-3900-4c3d-a23b-a0045fa133a2", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b4f261c-2b40-4ef8-a1e0-cdfacacbf61d", "metadata": {}, "mutation_prompt": null}
{"id": "104507ce-7735-40ce-aee3-bbf0dfd6ffe0", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3b4f261c-2b40-4ef8-a1e0-cdfacacbf61d", "metadata": {}, "mutation_prompt": null}
{"id": "56626ac5-e8e4-41c4-8a2f-8bfc4cd39359", "solution": "import numpy as np\n\nclass HybridPSOADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.best_positions = self.particles.copy()\n        self.best_fitness = np.full(self.population_size, np.inf)\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)", "name": "HybridPSOADE", "description": "Utilizing a combination of particle swarm optimization and adaptive differential evolution with a hybrid approach to balance exploration and exploitation in the search space.", "configspace": "", "generation": 3, "fitness": 0.06501105272959694, "feedback": "The algorithm HybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "3b4f261c-2b40-4ef8-a1e0-cdfacacbf61d", "metadata": {"aucs": [0.16242048987238245, 0.1404261777131951, 0.20877335054417223, 0.11090219645458821, 0.07745832703122102, 0.11774398471545988, 0.13128221737943824, 0.12269832984392504, 0.08811398393583092, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008537804577561703, 0.044729115908167305, 0.009067011232614441, 0.041073579102688385, 0.032836808245097604, 0.0360431718793105, 0.032094191226954005, 0.01426813498798929, 0.05549725482617118, 9.999999999998899e-05, 0.007376428359583076, 0.0008712275535109892, 0.05024651008926828, 0.0022992764915193975, 0.00180404711829929, 0.008188554802766923, 0.011443243291028526, 0.005397679072438266, 0.06012627947601379, 0.04081361046978671, 0.117457262113694, 0.05704635788863088, 0.06564476053170387, 0.06247112265970789, 0.07629748074976173, 0.07350373955465528, 0.06499339506715152, 0.02650619580851088, 9.999999999998899e-05, 0.043884209467330404, 0.0780545749142244, 0.01668331282576141, 0.032435270008188355, 9.999999999998899e-05, 0.02605936353662963, 9.999999999998899e-05, 0.1386274093689086, 0.09668902907525534, 0.06247802242402045, 0.06784468143155586, 0.06304577348654727, 0.009581599944971875, 0.07843497959631973, 0.0966445526125399, 0.04939937472920375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00769592600764768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041645409182831106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012184201456430288, 0.006817063959831837, 0.03135632267248201, 0.030157914305659728, 0.0032353728724465736, 0.04626443946262715, 0.003585504197169964, 0.022920527410426605, 0.0028578577297390106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16499062069478643, 0.20330456831696142, 0.16920031657458512, 0.14606718848725175, 0.11694545783297039, 0.10022149185308848, 0.1535271510576578, 0.21018992544109938, 0.20695073597981506, 0.006431304530651105, 0.010212659680740033, 0.010961025070559294, 0.021855840990678166, 0.03371399972400235, 0.027218224404236713, 0.034156957935513876, 0.029538005399129208, 0.04435901366501216, 0.13879290666981048, 0.15515847737936206, 0.16950741148769377, 0.11568158965130915, 0.1172264444270611, 0.1644777199499009, 0.12457986282341771, 0.11404538773554973, 0.12178520321293307, 0.12472166302279952, 0.1229742630655013, 0.11942144372296692, 0.12101027700412903, 0.1550396220399185, 0.13123494388649126, 0.12916116734082828, 0.18467834329091326, 0.10984571029484813, 0.06589206177044238, 0.045409238080872605, 0.0755792392002892, 0.14057977302216618, 0.09019418015394909, 0.08676132649901447, 0.075026968000795, 0.13122044054048398, 0.05664358709229089, 0.15449777339413417, 0.19786977937899453, 0.1683164701360369, 0.14847583259972796, 0.14238460542921516, 0.16141797967746585, 0.1477740229211515, 0.12395777768277261, 0.14764785732665442, 9.999999999998899e-05, 0.015958617124440355, 0.1616117802698478, 0.14127646116104897, 0.02278338372172506, 0.09569158410237921, 0.1306592702994971, 9.999999999998899e-05, 0.02265855258095706, 0.12031614658571421, 0.11050534241365262, 0.10324583498291562, 0.12783030855717004, 0.12495546817867254, 0.15825273599051526, 0.08060547111390082, 0.1151716941999199, 0.10103682464668529, 0.14845094990118723, 0.0812408432462598, 0.06459737100748575, 0.10888293735761656, 0.11180925428962396, 0.06616649692267451, 0.0936361712975946, 0.14635962062018193, 0.06682451101227072, 0.1677625942776727, 0.17216066063580748, 0.179811924914149, 0.1836919272727231, 0.22625863607005925, 0.17359737564493605, 0.1738700645900899, 0.18051485553289726, 0.1824418841203027, 0.04620948211255904, 0.040275452289899816, 0.03891874561638886, 0.03436697719882209, 0.04080740556638507, 0.03049570830723136, 0.03377163801544325, 0.05543433932244257, 0.051798255717013686]}, "mutation_prompt": null}
{"id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing the HybridPSOADE algorithm by introducing a mutation operator for diversified search.", "configspace": "", "generation": 4, "fitness": 0.08816817317120262, "feedback": "The algorithm EnhancedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "56626ac5-e8e4-41c4-8a2f-8bfc4cd39359", "metadata": {"aucs": [0.14864464358177232, 0.17750756676748003, 0.20996276035556016, 0.16884713945616348, 0.1065246399368589, 0.196003251965149, 0.15696009671216504, 0.16092410706822535, 0.12886603583978395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026610374972501072, 0.029356381715535784, 0.03143584914945008, 0.034334355863419486, 0.05487490148607488, 0.09939275457738261, 0.0325120917201146, 0.05336043813229385, 0.055619087781374366, 0.053260378210501, 0.02151599800276327, 0.012810342253067764, 0.05107716367459758, 0.02630521554411247, 0.009751348296819562, 0.016742884814558767, 0.008678216476987521, 0.0114803643446596, 0.07932198251276645, 0.049016139931660985, 0.08253725867571193, 0.0744720478240748, 0.07166310177406099, 0.06849285332289523, 0.09380636472353032, 0.07727226164544887, 0.0658515580049871, 0.09737051855200551, 0.07516593305503283, 0.06932026498593746, 0.050238819712380645, 0.06313277935148331, 0.06057668592009191, 0.08037465462093984, 0.04485291205203079, 0.015900785679032192, 0.21047756537476903, 0.117502708203847, 0.11654660437217912, 0.15149395719575898, 0.05228476625587686, 0.07147470759119201, 0.16199325348760962, 0.12821093497621683, 0.14696938978160834, 0.014367019760738398, 0.0007541681918264986, 0.013744976130149578, 9.999999999998899e-05, 0.06413562597009181, 9.999999999998899e-05, 0.044942902637747695, 0.010661025403647217, 0.03421849822182754, 0.08238527324650546, 0.055066070702344594, 0.01379736286138289, 0.025945565793683234, 0.08366242155164205, 0.019557529877056168, 0.07034452900758859, 0.0022663416002322023, 0.039779462952983846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0733104946485349, 0.03012751856189022, 0.07413521790923694, 0.01859644751637457, 0.046620559765555125, 0.009898796223810513, 0.05889261233674992, 0.04686847349657364, 0.027224428393422984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020272764933310428, 0.013097481945039902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002839008460643111, 0.00507749906174626, 0.005463687374275605, 0.19022654321496524, 0.1981781062957223, 0.24227749278688637, 0.21517470167136332, 0.12431246195521584, 0.1444255272483812, 0.1823492791166188, 0.22579476521522368, 0.2515591861193066, 0.02815728987260535, 0.015478193403775542, 0.00018058381894703324, 0.05857273787851258, 0.0400077497909721, 0.05345153527108959, 0.041126738721346756, 0.03789201944413256, 0.06052570782680322, 0.16437141541611888, 0.13003789431767165, 0.18273971177965354, 0.14888481423351152, 0.14367490329377308, 0.1430440558126751, 0.15183420608494902, 0.14176647354365957, 0.1418426716372655, 0.1548231299693612, 0.15275399012088697, 0.13945177781082252, 0.19465511882062103, 0.16128663414662714, 0.15457858954129733, 0.13209743403780516, 0.2055776327119595, 0.12405569939949146, 0.07523247874782302, 0.1161204351477223, 0.08680163169103583, 0.11395882260714696, 0.1100380800582842, 0.09900594788005324, 0.08103202045283175, 0.1539163284319497, 0.06364832858209157, 0.15540141834274923, 0.18041089567876645, 0.15420642413615238, 0.14456139627482556, 0.1537488239364202, 0.19092743179708804, 0.15929247333137775, 0.1642392264233229, 0.18511685814942125, 0.14432445399432492, 0.12382478031658228, 0.15803943644301055, 0.1655656789305645, 0.15174636452176749, 0.153351608281052, 0.14053206385121086, 0.16730726749533442, 0.11125192935675243, 0.16820096813565866, 0.138479910998221, 0.15051102380217252, 0.16776329427746695, 0.16866160271738295, 0.16377547473784193, 0.1439167744920583, 0.14757253424971328, 0.2364084210928571, 0.15630166241164056, 0.14217942232505287, 0.19521390889305068, 0.1422571289813297, 0.11292559172117267, 0.16365759479423636, 0.1568330785380273, 0.19327896781081755, 0.1429275175467677, 0.17458286800391165, 0.17758037471323385, 0.18056689296440032, 0.17757665740473805, 0.19397778988733494, 0.19672187037231859, 0.17978032117766485, 0.18411767215871166, 0.1743523967471723, 0.05633521179928924, 0.05239929727323833, 0.0483294930486019, 0.0628536783413638, 0.04691105209086566, 0.050307988146364946, 0.04832372490724213, 0.03773313067674755, 0.05920776773230607]}, "mutation_prompt": null}
{"id": "dcc7ed0e-d329-4743-a197-38fb3bcfbf34", "solution": "import numpy as np\n\nclass DynamicMutHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.mutation_rate_min = 0.05\n        self.mutation_rate_max = 0.2\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                    if self.mutation_rate < self.mutation_rate_max:\n                        self.mutation_rate += 0.001\n                else:\n                    if self.mutation_rate > self.mutation_rate_min:\n                        self.mutation_rate -= 0.001\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "DynamicMutHybridPSOADE", "description": "Enhancing the EnhancedHybridPSOADE algorithm by introducing a dynamic mutation rate adaptation strategy based on individual performance.", "configspace": "", "generation": 5, "fitness": 0.08125658602026285, "feedback": "The algorithm DynamicMutHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.1588052939367568, 0.1369460193802492, 0.16928327098868745, 0.13885653360334016, 0.09057966334651668, 0.1658225508147101, 0.1349504141793837, 0.18946725535139042, 0.13364940884917886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03181115522484501, 0.03019444213062239, 0.036666854787133385, 0.043180358929321705, 0.04373095777987379, 0.042437018190456866, 0.029605749855461494, 0.04098173030859398, 0.044865649403232566, 0.03615163884867867, 0.051604487123836806, 0.01336775970535986, 0.037371027624037545, 0.027204486313841314, 0.00895743651571701, 0.012091769746455205, 0.014335784366486415, 0.03077731198322564, 0.0765344557017037, 0.051812407799858406, 0.07421378256425593, 0.0698050072701184, 0.07502093607692262, 0.05795945428074578, 0.09526838663558157, 0.0769620772777807, 0.06011793277407762, 0.07231136343097877, 0.028686759292597674, 0.04879107301939822, 0.04395163024483684, 0.02826495623916725, 0.041876132301399194, 0.07966075607179901, 0.04035436581750507, 0.049568803434387854, 0.1951852938626355, 0.08246188193375925, 0.1289420510961209, 0.08968019781804981, 0.07236276999382485, 0.11053299929285898, 0.0952128437789872, 0.11575001387093475, 0.11156719517842262, 0.0027688127411802377, 0.049513738981821764, 9.999999999998899e-05, 0.01209445753853966, 0.05817843304429404, 9.999999999998899e-05, 9.999999999998899e-05, 0.006482343810981561, 0.007512007741808158, 0.09047419745260499, 0.00557690378297504, 0.03329334580728249, 0.01172993534056277, 0.03259432072718338, 0.016707745550715858, 9.999999999998899e-05, 0.02445932647311788, 0.021867610798798842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05470104706282508, 0.014987860486989302, 0.07457569360251493, 0.0241993582618365, 0.01342246964701721, 0.04343582895432119, 0.08458381999170472, 0.029839127971156953, 0.011044981896816686, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005477505109199643, 0.007933609664007801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21422384997699961, 0.1841306294611279, 0.1823761426378857, 0.1619454878636608, 0.12847963815054686, 0.1299542721145266, 0.17692405631646013, 0.19553887202774234, 0.23220964984624215, 0.024751626516342218, 0.02777868157220642, 0.0026943328246148424, 0.0438132843282365, 0.040581526633918785, 0.04616316791735864, 0.040757476584793007, 0.03363666745321092, 0.05256880881501513, 0.13566193397932713, 0.1328631859594701, 0.13365850435665838, 0.15271160842068932, 0.2037686471932656, 0.14069158518143798, 0.1587379107431296, 0.17446728797112443, 0.13490083139925924, 0.14645344686168305, 0.1856401772344699, 0.14430292335401318, 0.18152037297261336, 0.15849470292967893, 0.15159583082094263, 0.13455708962672397, 0.2265710484797041, 0.1296503458073872, 0.06595225568041296, 0.09915227301547636, 0.0923009051969611, 0.10790370157089835, 0.10387657448850318, 0.10864368398634472, 0.07819445066089448, 0.13654873881775298, 0.06276280635901399, 0.16462779224612167, 0.17650429526138067, 0.14692594189683694, 0.1647624615380966, 0.1379403012360897, 0.1824912148896315, 0.1567169932593271, 0.13960424444275288, 0.15605294295703842, 0.07401086539503943, 0.16891237768920386, 0.15454396629101574, 0.16948010094637866, 0.15471769050091078, 0.12471807736821594, 0.14389258944129124, 0.13548258458284035, 0.09316815323725092, 0.13681187985161958, 0.15530701326302954, 0.13828589501681732, 0.16609015761596635, 0.16314100426046552, 0.16799665216780946, 0.11622214409224962, 0.16211203776219296, 0.11613367902334226, 0.193119960449197, 0.11762586450477375, 0.1446923827930886, 0.15776998025687117, 0.118322522272714, 0.12234352500807089, 0.13129422319761996, 0.12905134136507512, 0.11011105445956071, 0.18658950062274549, 0.17590793764033275, 0.18315586976204068, 0.17245630360132014, 0.17659994536155532, 0.17436344680306115, 0.18013261968366823, 0.17660011469651127, 0.16783408530366195, 0.06027570681357031, 0.05180648788681408, 0.05710261453499699, 0.06156392029571012, 0.04729133516196993, 0.03698050422060006, 0.04015690462832788, 0.045674406244482046, 0.05802993368043863]}, "mutation_prompt": null}
{"id": "5dc80157-d7be-49d7-8045-ba4481d387a1", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing the HybridPSOADE algorithm by introducing a mutation operator for diversified search.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.14864464358177232, 0.17750756676748003, 0.20996276035556016, 0.16884713945616348, 0.1065246399368589, 0.196003251965149, 0.15696009671216504, 0.16092410706822535, 0.12886603583978395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026610374972501072, 0.029356381715535784, 0.03143584914945008, 0.034334355863419486, 0.05487490148607488, 0.09939275457738261, 0.0325120917201146, 0.05336043813229385, 0.055619087781374366, 0.053260378210501, 0.02151599800276327, 0.012810342253067764, 0.05107716367459758, 0.02630521554411247, 0.009751348296819562, 0.016742884814558767, 0.008678216476987521, 0.0114803643446596, 0.07932198251276645, 0.049016139931660985, 0.08253725867571193, 0.0744720478240748, 0.07166310177406099, 0.06849285332289523, 0.09380636472353032, 0.07727226164544887, 0.0658515580049871, 0.09737051855200551, 0.07516593305503283, 0.06932026498593746, 0.050238819712380645, 0.06313277935148331, 0.06057668592009191, 0.08037465462093984, 0.04485291205203079, 0.015900785679032192, 0.21047756537476903, 0.117502708203847, 0.11654660437217912, 0.15149395719575898, 0.05228476625587686, 0.07147470759119201, 0.16199325348760962, 0.12821093497621683, 0.14696938978160834, 0.014367019760738398, 0.0007541681918264986, 0.013744976130149578, 9.999999999998899e-05, 0.06413562597009181, 9.999999999998899e-05, 0.044942902637747695, 0.010661025403647217, 0.03421849822182754, 0.08238527324650546, 0.055066070702344594, 0.01379736286138289, 0.025945565793683234, 0.08366242155164205, 0.019557529877056168, 0.07034452900758859, 0.0022663416002322023, 0.039779462952983846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0733104946485349, 0.03012751856189022, 0.07413521790923694, 0.01859644751637457, 0.046620559765555125, 0.009898796223810513, 0.05889261233674992, 0.04686847349657364, 0.027224428393422984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020272764933310428, 0.013097481945039902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002839008460643111, 0.00507749906174626, 0.005463687374275605, 0.19022654321496524, 0.1981781062957223, 0.24227749278688637, 0.21517470167136332, 0.12431246195521584, 0.1444255272483812, 0.1823492791166188, 0.22579476521522368, 0.2515591861193066, 0.02815728987260535, 0.015478193403775542, 0.00018058381894703324, 0.05857273787851258, 0.0400077497909721, 0.05345153527108959, 0.041126738721346756, 0.03789201944413256, 0.06052570782680322, 0.16437141541611888, 0.13003789431767165, 0.18273971177965354, 0.14888481423351152, 0.14367490329377308, 0.1430440558126751, 0.15183420608494902, 0.14176647354365957, 0.1418426716372655, 0.1548231299693612, 0.15275399012088697, 0.13945177781082252, 0.19465511882062103, 0.16128663414662714, 0.15457858954129733, 0.13209743403780516, 0.2055776327119595, 0.12405569939949146, 0.07523247874782302, 0.1161204351477223, 0.08680163169103583, 0.11395882260714696, 0.1100380800582842, 0.09900594788005324, 0.08103202045283175, 0.1539163284319497, 0.06364832858209157, 0.15540141834274923, 0.18041089567876645, 0.15420642413615238, 0.14456139627482556, 0.1537488239364202, 0.19092743179708804, 0.15929247333137775, 0.1642392264233229, 0.18511685814942125, 0.14432445399432492, 0.12382478031658228, 0.15803943644301055, 0.1655656789305645, 0.15174636452176749, 0.153351608281052, 0.14053206385121086, 0.16730726749533442, 0.11125192935675243, 0.16820096813565866, 0.138479910998221, 0.15051102380217252, 0.16776329427746695, 0.16866160271738295, 0.16377547473784193, 0.1439167744920583, 0.14757253424971328, 0.2364084210928571, 0.15630166241164056, 0.14217942232505287, 0.19521390889305068, 0.1422571289813297, 0.11292559172117267, 0.16365759479423636, 0.1568330785380273, 0.19327896781081755, 0.1429275175467677, 0.17458286800391165, 0.17758037471323385, 0.18056689296440032, 0.17757665740473805, 0.19397778988733494, 0.19672187037231859, 0.17978032117766485, 0.18411767215871166, 0.1743523967471723, 0.05633521179928924, 0.05239929727323833, 0.0483294930486019, 0.0628536783413638, 0.04691105209086566, 0.050307988146364946, 0.04832372490724213, 0.03773313067674755, 0.05920776773230607]}, "mutation_prompt": null}
{"id": "50d99ee2-72c1-46ed-a189-7091df4cc52e", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.base_mutation_rate = 0.1\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                    self.mutation_rate = self.base_mutation_rate * (1 - fitness)  # Dynamic mutation rate\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "DynamicMutationHybridPSOADE", "description": "Introducing a dynamic mutation rate based on fitness improvement for enhanced exploration and exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.07909519178145619, "feedback": "The algorithm DynamicMutationHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.09.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.18273025602630055, 0.14116655893847996, 0.14053816628583193, 0.10791821631159315, 0.10160584469436018, 0.16519593463341897, 0.32293999443340327, 0.3216278573917467, 0.3131056184869311, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01216641393679152, 0.0652991105461741, 0.04283142247855298, 0.03175964957305133, 0.04919788666802272, 0.02940686730728026, 0.029399512019973706, 0.023408827697728563, 0.040605809415700245, 0.01117780280869829, 0.058583098448248716, 0.00789627873864196, 0.035091659058002156, 0.0035863988567198524, 0.013154634897544426, 9.999999999998899e-05, 0.0035851740728356507, 9.999999999998899e-05, 0.08823023696460897, 0.04719679700261736, 0.07167926779113809, 0.05776815371978605, 0.07807885591265784, 0.05448329138805075, 0.07823765971576357, 0.07796567537233912, 0.06359541635268073, 0.06427184352715154, 9.999999999998899e-05, 0.04829032032919345, 0.06454775046072192, 0.037976217438742466, 0.03175973326793324, 0.019626481592943446, 0.0182818894171487, 9.999999999998899e-05, 0.10312722683141695, 0.12427154191818868, 0.06353776559207802, 0.08302377913136028, 0.0542833425432111, 0.025621922403284758, 0.059951294206501915, 0.08506794649955829, 0.06707564055364179, 0.0006223179655971967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002179624333031871, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022524860305200844, 0.03507479101430888, 0.020786647010916703, 0.00021486942232062933, 0.026171937536014767, 0.015529077759384058, 0.0026759782674667942, 0.001598075016081002, 0.03784520189731699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17346016218221738, 0.3297490485278739, 0.3679969800797601, 0.34547412506054775, 0.301506385412178, 0.29530642311942945, 0.17715094371137874, 0.17878290444112666, 0.14278987781301855, 0.002156721382378768, 0.0043427637509370065, 9.999999999998899e-05, 0.02501667503022542, 0.023754819738765254, 0.03249476191227918, 0.03160559036493793, 0.016959204885216073, 0.03588573693562813, 0.1038440943194644, 0.1001281307148707, 0.11855849368971849, 0.21367581656680357, 0.20758042479758732, 0.15929485142026556, 0.1389652792800411, 0.11942516723121333, 0.13428917881849356, 0.13508307782799855, 0.14950726579969031, 0.12033331657095314, 0.146343059185012, 0.1495300289878465, 0.1350602497120984, 0.12094519688702932, 0.1834576444987921, 0.10893922021826818, 0.07937290053552803, 0.06882931419444505, 0.07388130449665109, 0.09038820530859282, 0.103997139796143, 0.11287371369019694, 0.06488577522689432, 0.13835983552980868, 0.06522408397601698, 0.15239992496890065, 0.16580270322822654, 0.1726345728368588, 0.13407261689545102, 0.14647635791269964, 0.18086390127297713, 0.14897558861899052, 0.14258742194256124, 0.154836556515612, 0.1293130034455009, 9.999999999998899e-05, 0.14235793441199895, 0.14009551631847084, 0.14154303177803196, 0.06859474530733023, 0.09126651221950055, 9.999999999998899e-05, 0.1274047972115453, 0.16314128875000555, 0.08606347249533175, 0.10927671248177262, 0.15868073951919248, 0.15368003284317633, 0.1626136221557659, 0.15370573742930227, 0.1649167610286586, 0.34143631643440253, 0.44127044907808677, 0.2832008317733038, 0.21426363627135558, 0.0809639130318277, 0.06635430125747821, 0.08871832932292856, 0.13921715250736744, 0.1325703504732486, 0.09911433021896665, 0.17252936944803166, 0.18768844996616973, 0.18116279635853216, 0.16786285095393927, 0.17963702015774452, 0.17333267588263557, 0.18451857119191273, 0.1722224975613773, 0.18969963885890895, 0.045122441785775846, 0.02739280864093485, 0.05371500899148762, 0.043847866821860815, 0.04069802337995365, 0.041708682305755196, 0.04188850872442451, 0.04865135386148578, 0.0361730420317925]}, "mutation_prompt": null}
{"id": "97dd1d08-8527-4449-8030-26f9bebbdf6e", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOADE(EnhancedHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.base_mutation_rate = 0.1\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            mutation_rate = self.base_mutation_rate * (1 - _ / self.budget)  # Dynamic mutation rate\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "DynamicMutationHybridPSOADE", "description": "Enhancing the EnhancedHybridPSOADE algorithm by incorporating a dynamic mutation rate for adaptive exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": 0.08815887850116405, "feedback": "The algorithm DynamicMutationHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.14864464358177232, 0.1775097928740097, 0.235320910510864, 0.16883600533581788, 0.10652640932509294, 0.20490369021651134, 0.15696927790221848, 0.16091385228118593, 0.15508057103985906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028086792635950375, 0.02935829262273293, 0.029548925362079315, 0.03433532389403393, 0.05487630089416762, 0.0962956762956505, 0.0325120917201146, 0.05335976191509473, 0.05695856135613342, 0.053260378210501, 0.021550542623190783, 0.014356808856874737, 0.05107716367459758, 0.030461086174834007, 0.01724985901715459, 0.016741361567109148, 0.008678216476987521, 0.007890452711624474, 0.07932285772679493, 0.049016170292419114, 0.08096378043262398, 0.0744720478240748, 0.07166516560763525, 0.0698023824231424, 0.09380636472353032, 0.07727226164544887, 0.06256754162003797, 0.09735983344884003, 0.07516814239261183, 0.07562691236897867, 0.050238819712380645, 0.06313441844903478, 0.0533888072254487, 0.08036870936702434, 0.04485163294504457, 0.022452429253666528, 0.21047756537476903, 0.1175027598732804, 0.10910381407940872, 0.14964368897279368, 0.053347973841859075, 0.08554749994027677, 0.16199325348760962, 0.12821093497621683, 0.16289945765267133, 0.014367019760738398, 0.0007541681918264986, 0.0036008332665830034, 9.999999999998899e-05, 0.06413054183604383, 9.999999999998899e-05, 0.04495598351901886, 0.010661025403647217, 0.0018656821985947314, 0.08238418433659278, 0.05507574406670013, 0.02243672858635959, 0.025945565793683234, 0.08366242155164205, 0.01916211537246615, 0.07034452900758859, 0.002264717277611794, 0.03369836821638761, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0733104946485349, 0.03012751856189022, 0.0762046901046981, 0.020559909997055925, 0.046620559765555125, 0.009785880032736505, 0.05892134067338539, 0.04686847349657364, 0.033503095254636905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024611088987540608, 0.018594122686542147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002835216742979485, 0.005074336395541779, 0.0001905758698436122, 0.19022654321496524, 0.19818222583169354, 0.22798046830034646, 0.21517470167136332, 0.12456682248744377, 0.14047262079017941, 0.18433824517820085, 0.22579426933724023, 0.23260173841588017, 0.028156791750806986, 0.015478193403775542, 0.005629632746134705, 0.05857602676405271, 0.04000784962856074, 0.04825389648831391, 0.041126738721346756, 0.03789169636219336, 0.059475105270990425, 0.16437141541611888, 0.1300387387985804, 0.1653316228946312, 0.14888481423351152, 0.1441767331990894, 0.1467174409323223, 0.15183501671136435, 0.141737021073442, 0.14591566499436248, 0.15736989641250765, 0.15275420822454377, 0.14301190780312478, 0.19465511882062103, 0.16353782109522486, 0.14348092600240048, 0.1320966342354737, 0.20557979917875024, 0.1240330146169536, 0.07523472715218327, 0.11612087447102493, 0.0884417289645788, 0.11395882260714696, 0.11168837117469543, 0.09864542885711658, 0.08103202045283175, 0.1539163284319497, 0.05999643404224775, 0.15540141834274923, 0.18041089567876645, 0.17542947911989415, 0.14456139627482556, 0.16180592682129913, 0.19092743179708804, 0.15929247333137775, 0.16423948834745405, 0.18511685814942125, 0.144322123801515, 0.12498492931722904, 0.15697539906408275, 0.16499329638888938, 0.15174636452176749, 0.15118778899237495, 0.14053206385121086, 0.16544893531194227, 0.11246554042015067, 0.1679318342148517, 0.1384818149667283, 0.1302728961802273, 0.1677658630084563, 0.16857958465716816, 0.1653313088492856, 0.14391600472015964, 0.14757569647597046, 0.22496663165357866, 0.15630327253616338, 0.1421796878034125, 0.15808321517242607, 0.1422544816553415, 0.11292548197291086, 0.15122813036671157, 0.1568353865878025, 0.1932789420177019, 0.1811952895686333, 0.17458294870927016, 0.1742692185411746, 0.18507576340788634, 0.17757884464221607, 0.19397778988733494, 0.19672187037231859, 0.1796809312503861, 0.18411767215871166, 0.17189983064916736, 0.05633521179928924, 0.052398946324537565, 0.0480429943366133, 0.0628536783413638, 0.04691105209086566, 0.05355446484077386, 0.04248114780797241, 0.03773313067674755, 0.05933392497816892]}, "mutation_prompt": null}
{"id": "61ce217c-bb59-4a20-972e-daa16fe665a4", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.base_mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                    if np.random.uniform() < self.base_mutation_rate * (1 - (fitness - np.min(self.best_fitness)) / (np.max(self.best_fitness) - np.min(self.best_fitness))):\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5)\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                    ", "name": "DynamicMutationHybridPSOADE", "description": "Introducing dynamic mutation rate adaptation based on individual particle performance to improve exploration and exploitation.", "configspace": "", "generation": 9, "fitness": 0.06707411071951953, "feedback": "The algorithm DynamicMutationHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.12829437238545127, 0.11668143644894557, 0.21521576941143716, 0.10331358898992238, 0.0814944419749849, 0.13754601928478327, 0.11522289026638777, 0.12599454162039747, 0.09542246054308179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023217916635986158, 0.05859850991060267, 0.019246791916210704, 0.04803521527394927, 0.027029596773268882, 0.024063032990877753, 0.05111219562966185, 0.0171974440702084, 0.035446730314259045, 0.03630593331594045, 0.024314144962961692, 0.022317230265341048, 0.027850448022648355, 0.007286172111899081, 0.0065880485752634055, 0.011167260846784322, 9.999999999998899e-05, 0.007052152138026346, 0.07305511644698814, 0.04468278178735707, 0.09263484043154568, 0.06911362744308813, 0.07538311328022651, 0.05897761508710753, 0.08332202116182652, 0.08018153374303183, 0.07274155530604554, 0.033035080541956474, 0.015216062709022649, 0.030875034380695388, 0.04197391217034252, 0.013757022587770229, 0.03288492036817259, 9.999999999998899e-05, 0.02228973692724323, 9.999999999998899e-05, 0.12484260787880996, 0.1307265150368805, 0.0576487133024286, 0.08351156552787475, 0.055076761856517775, 0.01902923749254881, 0.059806106357061295, 0.10947507897691522, 0.046382494990745315, 0.00032130473354941014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0117685817442571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007933989618406856, 0.01571378608729679, 0.0956534133699557, 0.02986373166929812, 0.021924814449605923, 9.999999999998899e-05, 0.00435366150736094, 0.0023086441003746794, 0.009196681059745582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16170206037387613, 0.1504531483391114, 0.1816458343665649, 0.14457941265603824, 0.14730490629104165, 0.0982963868332567, 0.16135486160099421, 0.16531717393641776, 0.17466772767013083, 0.0025110216051753564, 0.00485055997294781, 9.999999999998899e-05, 0.02844325761799904, 0.027107882046163323, 0.021482356115675616, 0.04764605801901145, 0.028231461786547896, 0.04193603672340451, 0.1229876183230868, 0.10958895943498481, 0.10426937333373898, 0.16559816328829025, 0.1294160078126082, 0.11419391565493409, 0.1101085161951545, 0.15561949738093195, 0.13356565585146196, 0.13252996542722484, 0.1542217953499514, 0.11214168055349605, 0.14332351881315208, 0.15532178040344202, 0.14917907670167518, 0.12604098076680292, 0.17375561517230143, 0.11633243471934696, 0.06522963539562765, 0.10167149132955489, 0.0698099078220048, 0.12212814214302525, 0.10332460956971268, 0.09575691075580939, 0.07426549046479325, 0.13041093987314056, 0.06561537268466222, 0.16022789142689253, 0.1503772648940228, 0.15859310902099333, 0.12617192524669119, 0.15074620763588664, 0.17257993706178199, 0.13751413968860504, 0.14477678970029406, 0.16155145616637578, 9.999999999998899e-05, 9.999999999998899e-05, 0.15933840383704756, 0.1461511113593308, 0.15956440467817357, 0.04851525431739323, 0.14108033306031498, 0.14487563681169136, 0.14341872331472694, 0.11141827695926365, 0.11007249764195037, 0.10317593159011795, 0.12667866064830502, 0.15572803156676873, 0.15998794113981407, 0.08473623383517292, 0.15384430491373935, 0.1003583493932727, 0.15092355010349257, 0.10621405225257552, 0.16754105974157496, 0.0736934248975113, 0.10403743527920373, 0.0918154687361481, 0.07886265139504689, 0.17022469136356955, 0.0725758346926143, 0.17891723537917592, 0.1887305933918667, 0.16337346724874713, 0.18103127268318409, 0.1787999883072402, 0.17864742873616646, 0.17909914159874918, 0.16633178725070485, 0.17682749007981313, 0.04534191290708345, 0.04152249575853095, 0.04049258687273227, 0.04114925184006246, 0.03487263190444756, 0.03812984300517841, 0.042892566608241256, 0.025187087436029154, 0.037776940051297614]}, "mutation_prompt": null}
{"id": "c8509667-0a49-4c4a-9bb2-c0bf27f69997", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing the HybridPSOADE algorithm by introducing a mutation operator for diversified search.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.14864464358177232, 0.17750756676748003, 0.20996276035556016, 0.16884713945616348, 0.1065246399368589, 0.196003251965149, 0.15696009671216504, 0.16092410706822535, 0.12886603583978395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026610374972501072, 0.029356381715535784, 0.03143584914945008, 0.034334355863419486, 0.05487490148607488, 0.09939275457738261, 0.0325120917201146, 0.05336043813229385, 0.055619087781374366, 0.053260378210501, 0.02151599800276327, 0.012810342253067764, 0.05107716367459758, 0.02630521554411247, 0.009751348296819562, 0.016742884814558767, 0.008678216476987521, 0.0114803643446596, 0.07932198251276645, 0.049016139931660985, 0.08253725867571193, 0.0744720478240748, 0.07166310177406099, 0.06849285332289523, 0.09380636472353032, 0.07727226164544887, 0.0658515580049871, 0.09737051855200551, 0.07516593305503283, 0.06932026498593746, 0.050238819712380645, 0.06313277935148331, 0.06057668592009191, 0.08037465462093984, 0.04485291205203079, 0.015900785679032192, 0.21047756537476903, 0.117502708203847, 0.11654660437217912, 0.15149395719575898, 0.05228476625587686, 0.07147470759119201, 0.16199325348760962, 0.12821093497621683, 0.14696938978160834, 0.014367019760738398, 0.0007541681918264986, 0.013744976130149578, 9.999999999998899e-05, 0.06413562597009181, 9.999999999998899e-05, 0.044942902637747695, 0.010661025403647217, 0.03421849822182754, 0.08238527324650546, 0.055066070702344594, 0.01379736286138289, 0.025945565793683234, 0.08366242155164205, 0.019557529877056168, 0.07034452900758859, 0.0022663416002322023, 0.039779462952983846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0733104946485349, 0.03012751856189022, 0.07413521790923694, 0.01859644751637457, 0.046620559765555125, 0.009898796223810513, 0.05889261233674992, 0.04686847349657364, 0.027224428393422984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020272764933310428, 0.013097481945039902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002839008460643111, 0.00507749906174626, 0.005463687374275605, 0.19022654321496524, 0.1981781062957223, 0.24227749278688637, 0.21517470167136332, 0.12431246195521584, 0.1444255272483812, 0.1823492791166188, 0.22579476521522368, 0.2515591861193066, 0.02815728987260535, 0.015478193403775542, 0.00018058381894703324, 0.05857273787851258, 0.0400077497909721, 0.05345153527108959, 0.041126738721346756, 0.03789201944413256, 0.06052570782680322, 0.16437141541611888, 0.13003789431767165, 0.18273971177965354, 0.14888481423351152, 0.14367490329377308, 0.1430440558126751, 0.15183420608494902, 0.14176647354365957, 0.1418426716372655, 0.1548231299693612, 0.15275399012088697, 0.13945177781082252, 0.19465511882062103, 0.16128663414662714, 0.15457858954129733, 0.13209743403780516, 0.2055776327119595, 0.12405569939949146, 0.07523247874782302, 0.1161204351477223, 0.08680163169103583, 0.11395882260714696, 0.1100380800582842, 0.09900594788005324, 0.08103202045283175, 0.1539163284319497, 0.06364832858209157, 0.15540141834274923, 0.18041089567876645, 0.15420642413615238, 0.14456139627482556, 0.1537488239364202, 0.19092743179708804, 0.15929247333137775, 0.1642392264233229, 0.18511685814942125, 0.14432445399432492, 0.12382478031658228, 0.15803943644301055, 0.1655656789305645, 0.15174636452176749, 0.153351608281052, 0.14053206385121086, 0.16730726749533442, 0.11125192935675243, 0.16820096813565866, 0.138479910998221, 0.15051102380217252, 0.16776329427746695, 0.16866160271738295, 0.16377547473784193, 0.1439167744920583, 0.14757253424971328, 0.2364084210928571, 0.15630166241164056, 0.14217942232505287, 0.19521390889305068, 0.1422571289813297, 0.11292559172117267, 0.16365759479423636, 0.1568330785380273, 0.19327896781081755, 0.1429275175467677, 0.17458286800391165, 0.17758037471323385, 0.18056689296440032, 0.17757665740473805, 0.19397778988733494, 0.19672187037231859, 0.17978032117766485, 0.18411767215871166, 0.1743523967471723, 0.05633521179928924, 0.05239929727323833, 0.0483294930486019, 0.0628536783413638, 0.04691105209086566, 0.050307988146364946, 0.04832372490724213, 0.03773313067674755, 0.05920776773230607]}, "mutation_prompt": null}
{"id": "9f989380-4535-419b-b40a-0e97598d7e81", "solution": "import numpy as np\n\nclass DynamicMutPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.base_mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.base_mutation_rate * (1 - self.best_fitness[i] / np.max(self.best_fitness)):\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "DynamicMutPSOADE", "description": "Introducing a dynamic mutation rate based on individual particle performance to enhance exploration-exploitation balance.", "configspace": "", "generation": 11, "fitness": 0.07857806583889745, "feedback": "The algorithm DynamicMutPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.16325482478077646, 0.1236623565257643, 0.14257784814359753, 0.1115177527531509, 0.1160584547686585, 0.14818478542202518, 0.11186710234325403, 0.16208151754455025, 0.07060505855579291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01800303497197908, 0.024961491816124504, 0.025969124868347016, 0.03251253522539033, 0.04490188066663481, 0.06477046806830344, 0.05666050420665303, 0.06623258093254114, 0.060473437345986314, 0.031180261631718942, 0.049601966561948596, 0.01011007203881198, 0.056596812736970925, 0.029150073632295825, 0.024084577449653755, 0.010166441026908224, 0.010095369594670722, 0.008588208823485877, 0.0789839404438355, 0.05063340790666693, 0.07245755980577362, 0.0608805366005678, 0.07828116857413192, 0.054849768210419425, 0.0913068995628199, 0.07723476380311334, 0.06143605705671029, 0.08005994308410558, 0.014828112094394053, 0.051710983749241324, 0.06233120127089131, 0.03743674535986197, 0.05833400328283156, 0.09785246668951098, 0.0438751772999223, 0.04083327987225549, 0.17130962874237576, 0.07596888609325347, 0.10019473257968126, 0.11639878352717714, 0.06826668249931123, 0.08023672910545998, 0.12031710408279428, 0.12055593057624503, 0.1173355957669453, 9.999999999998899e-05, 0.003112422149963434, 0.021286098262748188, 0.0012023632517641492, 0.05960936784233728, 9.999999999998899e-05, 0.02215186983890094, 9.999999999998899e-05, 0.015827531500765324, 0.03915649352155792, 0.025055249800680413, 0.009776270426589462, 0.0736841443373929, 0.04361835536222736, 0.018052699585067833, 0.025608966220910023, 9.999999999998899e-05, 0.002995305415926075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057259167521759635, 0.041610300246058274, 0.07413521790923694, 0.059784922054070155, 0.029445294478807726, 0.020659302170877192, 0.06354618055446704, 0.04029833344660061, 0.026407132394166588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02124353705227877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001945258243100767, 0.0017197602951087854, 0.009130834788571573, 0.27224600154625245, 0.28664608317269036, 0.16994509793347357, 0.10130324564744642, 0.12984557431334742, 0.1057554526574992, 0.1610030380246662, 0.20132442672935624, 0.16417401407714005, 0.02649652226064736, 0.019652845863328938, 9.999999999998899e-05, 0.04911675213236444, 0.03209189803060364, 0.0461140034636639, 0.06300468281587768, 0.042377386378714466, 0.05142576011749844, 0.12773006853005808, 0.13601269768110846, 0.13814973312678758, 0.11271235114804423, 0.2092577965655945, 0.11406032754447915, 0.13067979549537978, 0.13741082775561242, 0.13694819231899946, 0.13726855711571062, 0.19102696126834662, 0.1265755891135807, 0.14141139960831495, 0.15179520056603846, 0.14993998578626833, 0.1321790564211276, 0.19916629791645368, 0.10893922021826818, 0.07581605834424154, 0.12112906691065761, 0.0983845491126043, 0.13434306340923396, 0.08971861098309453, 0.10265500620627477, 0.05972957230593179, 0.13700645301120273, 0.053604127124031176, 0.13084421846468774, 0.13703297222859478, 0.16660166308182656, 0.13526579160482777, 0.13407944163767427, 0.18086390127297713, 0.1474798020433049, 0.15582730931406386, 0.13911327498035075, 0.14524883734524863, 0.10034641395164001, 0.15766576301884994, 0.1592392086301062, 0.14005649481323923, 0.15054535968959593, 0.14497863397249877, 0.15343843284404268, 0.12488604287778182, 0.16442988685108395, 0.11083895494372409, 0.15050781976366634, 0.19165440754960805, 0.1659165883926722, 0.1679478887507161, 0.11597638841685798, 0.10977763767120519, 0.13491221185371816, 0.08465258226477601, 0.09260939134045476, 0.07715812882242468, 0.09865076072518308, 0.07224445824296521, 0.0959398160824847, 0.12502226117481607, 0.2458631419957794, 0.13352520456137718, 0.17427954950218938, 0.17056837341932973, 0.16929615527468145, 0.16922354568531028, 0.2084571142096736, 0.16851307541732208, 0.17819260513048119, 0.16844819889254725, 0.16834684449836135, 0.03712413400752723, 0.04438349043347567, 0.04869654738827034, 0.05945801112494464, 0.05319474448028072, 0.043062943486915195, 0.04025107576298559, 0.037283814129301596, 0.046966547683186755]}, "mutation_prompt": null}
{"id": "07ee95ff-f9d2-4e4a-bc4d-c8b4461102d4", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.base_mutation_rate = 0.1\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.base_mutation_rate * (1.0 - self.best_fitness[i]/func(best_global_position)):\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "DynamicMutationHybridPSOADE", "description": "Introducing a dynamic mutation rate adaptation based on individual performance to enhance exploration-exploitation balance in the algorithm.", "configspace": "", "generation": 12, "fitness": 0.07493165697483352, "feedback": "The algorithm DynamicMutationHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.22215511068210436, 0.13736228048121124, 0.1714764588587625, 0.12812474017517594, 0.11155255699241151, 0.16962495655896037, 0.1118329002730839, 0.16194391025671573, 0.07802327750643767, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02732773009113243, 0.03839504773198277, 0.0589949084890774, 0.03817343028873854, 0.039261042306638405, 0.04045126458641857, 0.05990697611614271, 0.029064240323072643, 0.05077617191194572, 0.016933579749146332, 0.02849555252192726, 0.016960746799053572, 0.04179116190868226, 0.017213189410182683, 0.03288206222485457, 0.016213358812058654, 0.019333072256884742, 0.0034290436332985452, 0.09021814545953477, 0.052525526675760714, 0.07305671239689093, 0.059120234986395515, 0.07816185204232629, 0.0545714016173281, 0.08284883932762421, 0.07805934993976948, 0.06677101919750406, 0.08431740751053896, 0.027349804169207736, 0.04896436810621452, 0.0513352571204565, 0.06214813147440579, 0.03776769565535487, 0.07368853563348365, 0.03578065649167039, 0.03108192904684437, 0.15363536105913933, 0.15033569867991992, 0.10945805644265605, 0.11516422301958662, 0.07090541348083956, 0.039431650429130105, 0.1064350976365146, 0.1169488852189805, 0.1338397654754001, 0.006626456378725609, 0.01398044628736439, 0.012685620988888369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05859572855402362, 9.999999999998899e-05, 0.03662545980672416, 0.01099503025762405, 9.999999999998899e-05, 0.04943698091148585, 0.006234039351987519, 0.002022422185785966, 0.003855143546238282, 0.038857725490875406, 9.999999999998899e-05, 0.0014154006800763952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050117121626440664, 0.025616552406260595, 0.05483151736712899, 0.03938720769427473, 0.03835031555708135, 0.0012324071382056045, 0.03614403555672885, 0.057439784818479334, 0.010070206544394056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007658762729600532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035667352714250367, 0.003721296215058789, 0.23369733209350785, 0.17851871926080298, 0.17959139462417295, 0.14861112590224235, 0.10676145413403537, 0.1095039308704796, 0.1779782729453987, 0.1736943215987432, 0.16013644156309004, 0.015354714119449664, 0.03696839935616658, 0.00026091745063405725, 0.04674575315287166, 0.019167459391329578, 0.038944402543402035, 0.05786813907124744, 0.030015219640955326, 0.047889498555361176, 0.11203268826866208, 0.10077579645274803, 0.12065101589697447, 0.10975213502880965, 0.1219730146280128, 0.11245643030745234, 0.13908113357121132, 0.1055978389372596, 0.1252261512307148, 0.16850625385186135, 0.19418872298462797, 0.1315737305525776, 0.15141580942262423, 0.16970861338557985, 0.16785059035130412, 0.12094384501582067, 0.18925972112819378, 0.10890833406329714, 0.06938018405915158, 0.07601882270821458, 0.10110709452594635, 0.10486836759452234, 0.10552657397315002, 0.09198781856662686, 0.06490248234524609, 0.1382874219465624, 0.06362190281312707, 0.15068756609086964, 0.13379188383434704, 0.14550203380878224, 0.1333078000432757, 0.14190513787247705, 0.18081047553256824, 0.16019011175127362, 0.15207846392567648, 0.15650958712393326, 0.11239292491744635, 0.07276460120682082, 0.15794551723835104, 0.13703892221973057, 0.1599995944643957, 0.15167295144615656, 0.13458575419236551, 0.16614201878676127, 0.06522526001954632, 0.16769612156420877, 0.11598033509562122, 0.11086041153764103, 0.127957608686307, 0.16589436273652103, 0.1727155500548121, 0.11590264648471127, 0.10739135098146457, 0.11967268123550401, 0.08460896106018556, 0.09244234340762525, 0.07363527583514695, 0.09436458834768036, 0.06716389641616383, 0.0895699295509208, 0.09203572871281829, 0.23802517808044055, 0.1598448973365193, 0.18451115911491345, 0.17660014707309823, 0.17359451882833288, 0.18799873317532523, 0.17550018874925877, 0.17044608793490368, 0.1658628009938733, 0.16300573523841866, 0.16363159979757513, 0.04709323362628404, 0.03622633829956812, 0.059806984117439455, 0.03991896527316696, 0.0428633729471154, 0.026621013547279637, 0.037355472166711645, 0.033586980675732625, 0.04000592691735094]}, "mutation_prompt": null}
{"id": "048b0efb-ab97-4658-bd88-558717f1edaa", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing the HybridPSOADE algorithm by introducing a mutation operator for diversified search.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.14864464358177232, 0.17750756676748003, 0.20996276035556016, 0.16884713945616348, 0.1065246399368589, 0.196003251965149, 0.15696009671216504, 0.16092410706822535, 0.12886603583978395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026610374972501072, 0.029356381715535784, 0.03143584914945008, 0.034334355863419486, 0.05487490148607488, 0.09939275457738261, 0.0325120917201146, 0.05336043813229385, 0.055619087781374366, 0.053260378210501, 0.02151599800276327, 0.012810342253067764, 0.05107716367459758, 0.02630521554411247, 0.009751348296819562, 0.016742884814558767, 0.008678216476987521, 0.0114803643446596, 0.07932198251276645, 0.049016139931660985, 0.08253725867571193, 0.0744720478240748, 0.07166310177406099, 0.06849285332289523, 0.09380636472353032, 0.07727226164544887, 0.0658515580049871, 0.09737051855200551, 0.07516593305503283, 0.06932026498593746, 0.050238819712380645, 0.06313277935148331, 0.06057668592009191, 0.08037465462093984, 0.04485291205203079, 0.015900785679032192, 0.21047756537476903, 0.117502708203847, 0.11654660437217912, 0.15149395719575898, 0.05228476625587686, 0.07147470759119201, 0.16199325348760962, 0.12821093497621683, 0.14696938978160834, 0.014367019760738398, 0.0007541681918264986, 0.013744976130149578, 9.999999999998899e-05, 0.06413562597009181, 9.999999999998899e-05, 0.044942902637747695, 0.010661025403647217, 0.03421849822182754, 0.08238527324650546, 0.055066070702344594, 0.01379736286138289, 0.025945565793683234, 0.08366242155164205, 0.019557529877056168, 0.07034452900758859, 0.0022663416002322023, 0.039779462952983846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0733104946485349, 0.03012751856189022, 0.07413521790923694, 0.01859644751637457, 0.046620559765555125, 0.009898796223810513, 0.05889261233674992, 0.04686847349657364, 0.027224428393422984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020272764933310428, 0.013097481945039902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002839008460643111, 0.00507749906174626, 0.005463687374275605, 0.19022654321496524, 0.1981781062957223, 0.24227749278688637, 0.21517470167136332, 0.12431246195521584, 0.1444255272483812, 0.1823492791166188, 0.22579476521522368, 0.2515591861193066, 0.02815728987260535, 0.015478193403775542, 0.00018058381894703324, 0.05857273787851258, 0.0400077497909721, 0.05345153527108959, 0.041126738721346756, 0.03789201944413256, 0.06052570782680322, 0.16437141541611888, 0.13003789431767165, 0.18273971177965354, 0.14888481423351152, 0.14367490329377308, 0.1430440558126751, 0.15183420608494902, 0.14176647354365957, 0.1418426716372655, 0.1548231299693612, 0.15275399012088697, 0.13945177781082252, 0.19465511882062103, 0.16128663414662714, 0.15457858954129733, 0.13209743403780516, 0.2055776327119595, 0.12405569939949146, 0.07523247874782302, 0.1161204351477223, 0.08680163169103583, 0.11395882260714696, 0.1100380800582842, 0.09900594788005324, 0.08103202045283175, 0.1539163284319497, 0.06364832858209157, 0.15540141834274923, 0.18041089567876645, 0.15420642413615238, 0.14456139627482556, 0.1537488239364202, 0.19092743179708804, 0.15929247333137775, 0.1642392264233229, 0.18511685814942125, 0.14432445399432492, 0.12382478031658228, 0.15803943644301055, 0.1655656789305645, 0.15174636452176749, 0.153351608281052, 0.14053206385121086, 0.16730726749533442, 0.11125192935675243, 0.16820096813565866, 0.138479910998221, 0.15051102380217252, 0.16776329427746695, 0.16866160271738295, 0.16377547473784193, 0.1439167744920583, 0.14757253424971328, 0.2364084210928571, 0.15630166241164056, 0.14217942232505287, 0.19521390889305068, 0.1422571289813297, 0.11292559172117267, 0.16365759479423636, 0.1568330785380273, 0.19327896781081755, 0.1429275175467677, 0.17458286800391165, 0.17758037471323385, 0.18056689296440032, 0.17757665740473805, 0.19397778988733494, 0.19672187037231859, 0.17978032117766485, 0.18411767215871166, 0.1743523967471723, 0.05633521179928924, 0.05239929727323833, 0.0483294930486019, 0.0628536783413638, 0.04691105209086566, 0.050307988146364946, 0.04832372490724213, 0.03773313067674755, 0.05920776773230607]}, "mutation_prompt": null}
{"id": "6ef19ac7-fc4a-4711-9ab3-bfeb061fa374", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.base_mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.base_mutation_rate * (1 - self.best_fitness[i] / np.max(self.best_fitness)):\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "DynamicMutationHybridPSOADE", "description": "Improving diversity by incorporating a dynamic mutation strategy that adapts the mutation rate based on local search performance.", "configspace": "", "generation": 14, "fitness": 0.07857806583889745, "feedback": "The algorithm DynamicMutationHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.16325482478077646, 0.1236623565257643, 0.14257784814359753, 0.1115177527531509, 0.1160584547686585, 0.14818478542202518, 0.11186710234325403, 0.16208151754455025, 0.07060505855579291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01800303497197908, 0.024961491816124504, 0.025969124868347016, 0.03251253522539033, 0.04490188066663481, 0.06477046806830344, 0.05666050420665303, 0.06623258093254114, 0.060473437345986314, 0.031180261631718942, 0.049601966561948596, 0.01011007203881198, 0.056596812736970925, 0.029150073632295825, 0.024084577449653755, 0.010166441026908224, 0.010095369594670722, 0.008588208823485877, 0.0789839404438355, 0.05063340790666693, 0.07245755980577362, 0.0608805366005678, 0.07828116857413192, 0.054849768210419425, 0.0913068995628199, 0.07723476380311334, 0.06143605705671029, 0.08005994308410558, 0.014828112094394053, 0.051710983749241324, 0.06233120127089131, 0.03743674535986197, 0.05833400328283156, 0.09785246668951098, 0.0438751772999223, 0.04083327987225549, 0.17130962874237576, 0.07596888609325347, 0.10019473257968126, 0.11639878352717714, 0.06826668249931123, 0.08023672910545998, 0.12031710408279428, 0.12055593057624503, 0.1173355957669453, 9.999999999998899e-05, 0.003112422149963434, 0.021286098262748188, 0.0012023632517641492, 0.05960936784233728, 9.999999999998899e-05, 0.02215186983890094, 9.999999999998899e-05, 0.015827531500765324, 0.03915649352155792, 0.025055249800680413, 0.009776270426589462, 0.0736841443373929, 0.04361835536222736, 0.018052699585067833, 0.025608966220910023, 9.999999999998899e-05, 0.002995305415926075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057259167521759635, 0.041610300246058274, 0.07413521790923694, 0.059784922054070155, 0.029445294478807726, 0.020659302170877192, 0.06354618055446704, 0.04029833344660061, 0.026407132394166588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02124353705227877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001945258243100767, 0.0017197602951087854, 0.009130834788571573, 0.27224600154625245, 0.28664608317269036, 0.16994509793347357, 0.10130324564744642, 0.12984557431334742, 0.1057554526574992, 0.1610030380246662, 0.20132442672935624, 0.16417401407714005, 0.02649652226064736, 0.019652845863328938, 9.999999999998899e-05, 0.04911675213236444, 0.03209189803060364, 0.0461140034636639, 0.06300468281587768, 0.042377386378714466, 0.05142576011749844, 0.12773006853005808, 0.13601269768110846, 0.13814973312678758, 0.11271235114804423, 0.2092577965655945, 0.11406032754447915, 0.13067979549537978, 0.13741082775561242, 0.13694819231899946, 0.13726855711571062, 0.19102696126834662, 0.1265755891135807, 0.14141139960831495, 0.15179520056603846, 0.14993998578626833, 0.1321790564211276, 0.19916629791645368, 0.10893922021826818, 0.07581605834424154, 0.12112906691065761, 0.0983845491126043, 0.13434306340923396, 0.08971861098309453, 0.10265500620627477, 0.05972957230593179, 0.13700645301120273, 0.053604127124031176, 0.13084421846468774, 0.13703297222859478, 0.16660166308182656, 0.13526579160482777, 0.13407944163767427, 0.18086390127297713, 0.1474798020433049, 0.15582730931406386, 0.13911327498035075, 0.14524883734524863, 0.10034641395164001, 0.15766576301884994, 0.1592392086301062, 0.14005649481323923, 0.15054535968959593, 0.14497863397249877, 0.15343843284404268, 0.12488604287778182, 0.16442988685108395, 0.11083895494372409, 0.15050781976366634, 0.19165440754960805, 0.1659165883926722, 0.1679478887507161, 0.11597638841685798, 0.10977763767120519, 0.13491221185371816, 0.08465258226477601, 0.09260939134045476, 0.07715812882242468, 0.09865076072518308, 0.07224445824296521, 0.0959398160824847, 0.12502226117481607, 0.2458631419957794, 0.13352520456137718, 0.17427954950218938, 0.17056837341932973, 0.16929615527468145, 0.16922354568531028, 0.2084571142096736, 0.16851307541732208, 0.17819260513048119, 0.16844819889254725, 0.16834684449836135, 0.03712413400752723, 0.04438349043347567, 0.04869654738827034, 0.05945801112494464, 0.05319474448028072, 0.043062943486915195, 0.04025107576298559, 0.037283814129301596, 0.046966547683186755]}, "mutation_prompt": null}
{"id": "95c24140-7971-4409-8477-11b4c9cebf57", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing the HybridPSOADE algorithm by introducing a mutation operator for diversified search.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.14864464358177232, 0.17750756676748003, 0.20996276035556016, 0.16884713945616348, 0.1065246399368589, 0.196003251965149, 0.15696009671216504, 0.16092410706822535, 0.12886603583978395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026610374972501072, 0.029356381715535784, 0.03143584914945008, 0.034334355863419486, 0.05487490148607488, 0.09939275457738261, 0.0325120917201146, 0.05336043813229385, 0.055619087781374366, 0.053260378210501, 0.02151599800276327, 0.012810342253067764, 0.05107716367459758, 0.02630521554411247, 0.009751348296819562, 0.016742884814558767, 0.008678216476987521, 0.0114803643446596, 0.07932198251276645, 0.049016139931660985, 0.08253725867571193, 0.0744720478240748, 0.07166310177406099, 0.06849285332289523, 0.09380636472353032, 0.07727226164544887, 0.0658515580049871, 0.09737051855200551, 0.07516593305503283, 0.06932026498593746, 0.050238819712380645, 0.06313277935148331, 0.06057668592009191, 0.08037465462093984, 0.04485291205203079, 0.015900785679032192, 0.21047756537476903, 0.117502708203847, 0.11654660437217912, 0.15149395719575898, 0.05228476625587686, 0.07147470759119201, 0.16199325348760962, 0.12821093497621683, 0.14696938978160834, 0.014367019760738398, 0.0007541681918264986, 0.013744976130149578, 9.999999999998899e-05, 0.06413562597009181, 9.999999999998899e-05, 0.044942902637747695, 0.010661025403647217, 0.03421849822182754, 0.08238527324650546, 0.055066070702344594, 0.01379736286138289, 0.025945565793683234, 0.08366242155164205, 0.019557529877056168, 0.07034452900758859, 0.0022663416002322023, 0.039779462952983846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0733104946485349, 0.03012751856189022, 0.07413521790923694, 0.01859644751637457, 0.046620559765555125, 0.009898796223810513, 0.05889261233674992, 0.04686847349657364, 0.027224428393422984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020272764933310428, 0.013097481945039902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002839008460643111, 0.00507749906174626, 0.005463687374275605, 0.19022654321496524, 0.1981781062957223, 0.24227749278688637, 0.21517470167136332, 0.12431246195521584, 0.1444255272483812, 0.1823492791166188, 0.22579476521522368, 0.2515591861193066, 0.02815728987260535, 0.015478193403775542, 0.00018058381894703324, 0.05857273787851258, 0.0400077497909721, 0.05345153527108959, 0.041126738721346756, 0.03789201944413256, 0.06052570782680322, 0.16437141541611888, 0.13003789431767165, 0.18273971177965354, 0.14888481423351152, 0.14367490329377308, 0.1430440558126751, 0.15183420608494902, 0.14176647354365957, 0.1418426716372655, 0.1548231299693612, 0.15275399012088697, 0.13945177781082252, 0.19465511882062103, 0.16128663414662714, 0.15457858954129733, 0.13209743403780516, 0.2055776327119595, 0.12405569939949146, 0.07523247874782302, 0.1161204351477223, 0.08680163169103583, 0.11395882260714696, 0.1100380800582842, 0.09900594788005324, 0.08103202045283175, 0.1539163284319497, 0.06364832858209157, 0.15540141834274923, 0.18041089567876645, 0.15420642413615238, 0.14456139627482556, 0.1537488239364202, 0.19092743179708804, 0.15929247333137775, 0.1642392264233229, 0.18511685814942125, 0.14432445399432492, 0.12382478031658228, 0.15803943644301055, 0.1655656789305645, 0.15174636452176749, 0.153351608281052, 0.14053206385121086, 0.16730726749533442, 0.11125192935675243, 0.16820096813565866, 0.138479910998221, 0.15051102380217252, 0.16776329427746695, 0.16866160271738295, 0.16377547473784193, 0.1439167744920583, 0.14757253424971328, 0.2364084210928571, 0.15630166241164056, 0.14217942232505287, 0.19521390889305068, 0.1422571289813297, 0.11292559172117267, 0.16365759479423636, 0.1568330785380273, 0.19327896781081755, 0.1429275175467677, 0.17458286800391165, 0.17758037471323385, 0.18056689296440032, 0.17757665740473805, 0.19397778988733494, 0.19672187037231859, 0.17978032117766485, 0.18411767215871166, 0.1743523967471723, 0.05633521179928924, 0.05239929727323833, 0.0483294930486019, 0.0628536783413638, 0.04691105209086566, 0.050307988146364946, 0.04832372490724213, 0.03773313067674755, 0.05920776773230607]}, "mutation_prompt": null}
{"id": "736d997d-600c-478e-aabc-856b5564af82", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.base_mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.base_mutation_rate * (1 - self.best_fitness[i]):\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "DynamicMutationHybridPSOADE", "description": "Introducing a dynamic mutation rate that adapts based on the performance of the particles.", "configspace": "", "generation": 16, "fitness": 0.08462560707713432, "feedback": "The algorithm DynamicMutationHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.09.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.18273025602630055, 0.14116655893847996, 0.14053816628583193, 0.10791821631159315, 0.10160584469436018, 0.16519593463341897, 0.32293999443340327, 0.3216278573917467, 0.3131056184869311, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03676805204703648, 0.067863882996129, 0.04283142247855298, 0.03175964957305133, 0.04919788666802272, 0.02940686730728026, 0.029399512019973706, 0.023408827697728563, 0.040605809415700245, 0.05847994242884724, 0.032110809106938754, 0.03766249229349472, 0.035091659058002156, 0.0035863988567198524, 0.013154634897544426, 9.999999999998899e-05, 0.0035851740728356507, 9.999999999998899e-05, 0.08823023696460897, 0.04719679700261736, 0.07167926779113809, 0.05776815371978605, 0.07807885591265784, 0.05448329138805075, 0.07823765971576357, 0.07796567537233912, 0.06359541635268073, 0.06427184352715154, 9.999999999998899e-05, 0.04829032032919345, 0.06454775046072192, 0.037976217438742466, 0.03175973326793324, 0.11298312979032765, 0.1378186065416248, 9.999999999998899e-05, 0.10312722683141695, 0.12427154191818868, 0.06353776559207802, 0.08302377913136028, 0.0542833425432111, 0.025621922403284758, 0.059951294206501915, 0.08506794649955829, 0.06707564055364179, 0.0006223179655971967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09276397591294028, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002179624333031871, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022524860305200844, 0.03507479101430888, 0.020786647010916703, 0.00021486942232062933, 0.026171937536014767, 0.015529077759384058, 0.0026759782674667942, 0.001598075016081002, 0.03784520189731699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036361608087963404, 9.999999999998899e-05, 0.3178713188399801, 0.312916612924917, 0.3321265307889105, 0.3285788708171572, 0.301506385412178, 0.2741714595024469, 0.17715094371137874, 0.17878290444112666, 0.14278987781301855, 0.002156721382378768, 0.0043427637509370065, 9.999999999998899e-05, 0.02501667503022542, 0.023754819738765254, 0.03249476191227918, 0.03753655018772939, 0.020836828007342767, 0.07215598979946192, 0.1038440943194644, 0.1001281307148707, 0.11855849368971849, 0.21367581656680357, 0.20758042479758732, 0.15929485142026556, 0.1389652792800411, 0.11942516723121333, 0.13428917881849356, 0.16643868580867316, 0.2069340847312795, 0.14472122624357087, 0.146343059185012, 0.1495300289878465, 0.1350602497120984, 0.12094519688702932, 0.1834576444987921, 0.10893922021826818, 0.1060505096583122, 0.07335253908554784, 0.07388130449665109, 0.09038820530859282, 0.103997139796143, 0.11287371369019694, 0.06488577522689432, 0.13835983552980868, 0.06522408397601698, 0.19887212347838845, 0.16580270322822654, 0.1726345728368588, 0.13407261689545102, 0.14647635791269964, 0.18086390127297713, 0.14897558861899052, 0.14258742194256124, 0.154836556515612, 0.15199474958644899, 9.999999999998899e-05, 0.1727449876604814, 0.14009551631847084, 0.14154303177803196, 0.06859474530733023, 0.09126651221950055, 9.999999999998899e-05, 0.1274047972115453, 0.16314128875000555, 0.08606347249533175, 0.10927671248177262, 0.15868073951919248, 0.1553660675853824, 0.16375563897338885, 0.15370573742930227, 0.1649167610286586, 0.34143631643440253, 0.44127044907808677, 0.2832008317733038, 0.21426363627135558, 0.0809639130318277, 0.06635430125747821, 0.08871832932292856, 0.2755354094566148, 0.22387053852309324, 0.2999870555998462, 0.17252936944803166, 0.18768844996616973, 0.18116279635853216, 0.16786285095393927, 0.17963702015774452, 0.17333267588263557, 0.18451857119191273, 0.1722224975613773, 0.18969963885890895, 0.045122441785775846, 0.02739280864093485, 0.05371500899148762, 0.043847866821860815, 0.04069802337995365, 0.041708682305755196, 0.04188850872442451, 0.04865135386148578, 0.0361730420317925]}, "mutation_prompt": null}
{"id": "7ef76260-059b-444d-842e-ae6f5ffe277c", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.base_mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                dynamic_mutation_rate = self.base_mutation_rate / (1 + fitness)  # Adjust mutation rate based on individual performance\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < dynamic_mutation_rate:  # Use dynamic mutation rate\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5)\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "DynamicMutationHybridPSOADE", "description": "Introducing a dynamic mutation rate based on individual particle performance to adapt the search strategy.", "configspace": "", "generation": 17, "fitness": 0.06791448908547874, "feedback": "The algorithm DynamicMutationHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.18225579453070828, 0.12195211660598815, 0.13998537318124948, 0.1295634003567251, 0.08471219808641561, 0.12798847418106563, 0.11550984097614603, 0.16283120522478656, 0.10271142169039393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012204987194609718, 0.06787248000333934, 0.027513557776380537, 0.023791855268416096, 0.027849587700967238, 0.06245172273428545, 0.036467838602352476, 0.01745373505673664, 0.0336909544336671, 0.026336454130695852, 0.011181406136510086, 0.023440234924715475, 0.013079907263882529, 0.008754340193637966, 0.0029330830726694845, 0.008796870313527716, 9.999999999998899e-05, 0.028816855411862186, 0.05980753315340337, 0.05262688266355675, 0.07765931951080784, 0.06609389643036723, 0.0320193129253219, 0.060427922024791636, 0.07054052558116386, 0.03203676355842744, 0.06004637600745777, 0.04517689170719108, 9.999999999998899e-05, 0.02978775470541639, 0.03762420176372727, 0.026210749198046557, 0.06591016012883955, 9.999999999998899e-05, 0.02083982438691223, 9.999999999998899e-05, 0.08923350210228853, 0.12239202497378243, 0.040294280909466185, 0.03259983672763933, 0.0683774760668231, 0.021927916588299734, 0.07471155456136092, 0.11220710362480735, 0.1252842961864652, 9.999999999998899e-05, 0.0022995126692058054, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002906271587758247, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022926395468296, 9.999999999998899e-05, 0.03543289642159364, 0.00867693849251061, 0.03199255894277009, 9.999999999998899e-05, 0.013935524955125622, 0.005631387122873588, 0.022812433141978894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034872421355591765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20647922283266884, 0.1959090162793483, 0.15159740762725138, 0.13898227721359546, 0.15405940051682332, 0.1305167441997428, 0.1432797592543238, 0.1548509561579885, 0.1697369311113478, 0.0036114317027433618, 0.00975548074546928, 9.999999999998899e-05, 0.028515724823839683, 0.03166350988893829, 0.02727927206031877, 0.029054377885133875, 0.03606965238719129, 0.026376235826475525, 0.1196829359166608, 0.11500233324506681, 0.12018281108838569, 0.13203047700134485, 0.11882205823138736, 0.117158095774482, 0.13068184143646777, 0.11513255080308138, 0.13458144957886164, 0.1326211742748432, 0.1347726729073282, 0.13474212139555397, 0.15154627628996908, 0.15433450504529633, 0.14967722975934594, 0.12095803966351282, 0.1863174731736026, 0.11527508222315119, 0.11342095114623718, 0.1142896770157884, 0.049822902197329655, 0.1012088048186266, 0.07729388099375278, 0.09709316119705158, 0.06490010474368335, 0.12228568926706307, 0.07515324263280343, 0.14514703454498334, 0.12687186140028262, 0.1474130439250072, 0.20920480234626482, 0.15124638306175986, 0.13841600965149115, 0.15105440317696162, 0.1444719601369706, 0.15773488371710298, 0.09554328715300875, 0.048234560207066735, 0.1502067770242913, 0.11902171571378362, 0.14501296241920414, 0.012919925877535543, 0.1452920663462708, 0.15388413516489052, 0.13674678175659427, 0.11731066658792955, 0.16130395320540958, 0.17232403319793155, 0.14388193983071684, 0.13132947001782103, 0.12570690836789256, 0.11249462682178457, 0.11678794795407033, 0.15345261208545724, 0.26681394579917195, 0.05914070326944765, 0.06358948172619294, 0.1163660824800965, 0.09329233633291056, 0.10499662465153758, 0.1012778133432154, 0.09680061933116046, 0.10388807195828409, 0.18491123210453275, 0.19047606480723722, 0.18543155318322269, 0.1779424092648163, 0.17368184215989535, 0.18200976511651568, 0.17802176308162776, 0.16727241505819435, 0.17582607739314515, 0.03717467724394119, 0.03906176240200798, 0.05595379458086869, 0.06553224592853457, 0.05879951630956859, 0.039220653690959284, 0.042699028797670846, 0.03437348482913172, 0.04849154003939571]}, "mutation_prompt": null}
{"id": "92a216c7-3f0b-47c3-9f98-b4ba3d6e5f20", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.base_mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                    improvement_ratio = (self.best_fitness[i] - fitness) / max(1e-10, self.best_fitness[i])\n                    self.mutation_rate = self.base_mutation_rate + 0.1 * improvement_ratio\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "DynamicMutationHybridPSOADE", "description": "Introducing a dynamic mutation rate based on the fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 18, "fitness": 0.08816817317120262, "feedback": "The algorithm DynamicMutationHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.14864464358177232, 0.17750756676748003, 0.20996276035556016, 0.16884713945616348, 0.1065246399368589, 0.196003251965149, 0.15696009671216504, 0.16092410706822535, 0.12886603583978395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026610374972501072, 0.029356381715535784, 0.03143584914945008, 0.034334355863419486, 0.05487490148607488, 0.09939275457738261, 0.0325120917201146, 0.05336043813229385, 0.055619087781374366, 0.053260378210501, 0.02151599800276327, 0.012810342253067764, 0.05107716367459758, 0.02630521554411247, 0.009751348296819562, 0.016742884814558767, 0.008678216476987521, 0.0114803643446596, 0.07932198251276645, 0.049016139931660985, 0.08253725867571193, 0.0744720478240748, 0.07166310177406099, 0.06849285332289523, 0.09380636472353032, 0.07727226164544887, 0.0658515580049871, 0.09737051855200551, 0.07516593305503283, 0.06932026498593746, 0.050238819712380645, 0.06313277935148331, 0.06057668592009191, 0.08037465462093984, 0.04485291205203079, 0.015900785679032192, 0.21047756537476903, 0.117502708203847, 0.11654660437217912, 0.15149395719575898, 0.05228476625587686, 0.07147470759119201, 0.16199325348760962, 0.12821093497621683, 0.14696938978160834, 0.014367019760738398, 0.0007541681918264986, 0.013744976130149578, 9.999999999998899e-05, 0.06413562597009181, 9.999999999998899e-05, 0.044942902637747695, 0.010661025403647217, 0.03421849822182754, 0.08238527324650546, 0.055066070702344594, 0.01379736286138289, 0.025945565793683234, 0.08366242155164205, 0.019557529877056168, 0.07034452900758859, 0.0022663416002322023, 0.039779462952983846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0733104946485349, 0.03012751856189022, 0.07413521790923694, 0.01859644751637457, 0.046620559765555125, 0.009898796223810513, 0.05889261233674992, 0.04686847349657364, 0.027224428393422984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020272764933310428, 0.013097481945039902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002839008460643111, 0.00507749906174626, 0.005463687374275605, 0.19022654321496524, 0.1981781062957223, 0.24227749278688637, 0.21517470167136332, 0.12431246195521584, 0.1444255272483812, 0.1823492791166188, 0.22579476521522368, 0.2515591861193066, 0.02815728987260535, 0.015478193403775542, 0.00018058381894703324, 0.05857273787851258, 0.0400077497909721, 0.05345153527108959, 0.041126738721346756, 0.03789201944413256, 0.06052570782680322, 0.16437141541611888, 0.13003789431767165, 0.18273971177965354, 0.14888481423351152, 0.14367490329377308, 0.1430440558126751, 0.15183420608494902, 0.14176647354365957, 0.1418426716372655, 0.1548231299693612, 0.15275399012088697, 0.13945177781082252, 0.19465511882062103, 0.16128663414662714, 0.15457858954129733, 0.13209743403780516, 0.2055776327119595, 0.12405569939949146, 0.07523247874782302, 0.1161204351477223, 0.08680163169103583, 0.11395882260714696, 0.1100380800582842, 0.09900594788005324, 0.08103202045283175, 0.1539163284319497, 0.06364832858209157, 0.15540141834274923, 0.18041089567876645, 0.15420642413615238, 0.14456139627482556, 0.1537488239364202, 0.19092743179708804, 0.15929247333137775, 0.1642392264233229, 0.18511685814942125, 0.14432445399432492, 0.12382478031658228, 0.15803943644301055, 0.1655656789305645, 0.15174636452176749, 0.153351608281052, 0.14053206385121086, 0.16730726749533442, 0.11125192935675243, 0.16820096813565866, 0.138479910998221, 0.15051102380217252, 0.16776329427746695, 0.16866160271738295, 0.16377547473784193, 0.1439167744920583, 0.14757253424971328, 0.2364084210928571, 0.15630166241164056, 0.14217942232505287, 0.19521390889305068, 0.1422571289813297, 0.11292559172117267, 0.16365759479423636, 0.1568330785380273, 0.19327896781081755, 0.1429275175467677, 0.17458286800391165, 0.17758037471323385, 0.18056689296440032, 0.17757665740473805, 0.19397778988733494, 0.19672187037231859, 0.17978032117766485, 0.18411767215871166, 0.1743523967471723, 0.05633521179928924, 0.05239929727323833, 0.0483294930486019, 0.0628536783413638, 0.04691105209086566, 0.050307988146364946, 0.04832372490724213, 0.03773313067674755, 0.05920776773230607]}, "mutation_prompt": null}
{"id": "60129b96-85c7-4f45-bb27-8a0d8c775f3f", "solution": "class ImprovedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.dynamic_mutation_rate = np.full(self.population_size, self.mutation_rate)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                    if np.random.uniform() < 0.1:\n                        self.dynamic_mutation_rate[i] = np.clip(self.dynamic_mutation_rate[i] + np.random.uniform(-0.05, 0.05), 0.05, 0.5)\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.dynamic_mutation_rate[i]:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "ImprovedHybridPSOADE", "description": "Adding a dynamic mutation rate that adapts based on the performance of individual particles to enhance exploration and exploitation balance.", "configspace": "", "generation": 19, "fitness": 0.08786830560827387, "feedback": "The algorithm ImprovedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.2071249485432083, 0.17628225302574208, 0.190386975211847, 0.1983903790969319, 0.09874167153616509, 0.25837904820331925, 0.1436023680464681, 0.17812066348369737, 0.13696800025930478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028293771373782195, 0.05780662003273063, 0.03874331957207888, 0.05327804771671785, 0.03911840080745532, 0.041300566359746105, 0.0424384835840812, 0.03603745389274682, 0.046617145624334055, 0.010982103818808042, 0.029897984933622168, 0.024926686830004874, 0.04720078412195139, 0.030178384623240295, 0.006583401157076341, 0.05981014953249397, 0.026653250717955213, 0.02315183065245341, 0.06405616771558831, 0.04489571845721674, 0.08974815426399252, 0.07179770146185493, 0.06676988628518588, 0.06549501750391451, 0.09553654476709472, 0.06951117669215345, 0.066252319950042, 0.11474812328360118, 0.02503061280628116, 0.04592347873339153, 0.04851589238242027, 0.03877685346021886, 0.07279821571071354, 0.021283275588498296, 0.041902365831170574, 0.013487313167633297, 0.18088185246696709, 0.10770157959300064, 0.07693754223760352, 0.09798530995428933, 0.14804373353930622, 0.055946964662754395, 0.07874566487388746, 0.12194259431550658, 0.09086468217781529, 0.045157990252930214, 0.0029069034785126346, 0.015443396068631099, 9.999999999998899e-05, 0.026398919835141865, 9.999999999998899e-05, 0.03272844824352128, 0.014278629021138856, 0.07773877685758257, 0.034939981650429, 0.04119847278824251, 0.025834253996308454, 0.03496642364095437, 0.03797593489567119, 0.016175272152109565, 0.02574763383326062, 0.003699230064458603, 0.061483287110700835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037158349171922955, 0.02838573750195461, 0.0372843055473977, 0.04918834390814697, 0.02494519313943766, 0.014650673778035861, 0.0641360785077264, 0.05912245388291015, 0.01949734793336355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402135665625199, 0.006277190475084016, 0.01372823752664265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007501042358883936, 0.23023787559570652, 0.17304006228621116, 0.21422729579611555, 0.23521593878496927, 0.15169963455116509, 0.1483262286406445, 0.20518507815183284, 0.24062405299396605, 0.22394652971876783, 0.016625703050840324, 0.015128460269680177, 0.0029660931546022784, 0.046877862645691715, 0.040222353585029125, 0.06738415613228521, 0.05046781131954281, 0.04484766473570234, 0.05430865420306563, 0.12513809523494546, 0.16733834648956525, 0.15964678193818382, 0.13256952007587075, 0.16771797769064456, 0.1432683905547808, 0.15044415348720397, 0.14268908152109872, 0.14388641495862853, 0.14557844767711992, 0.16212608744526935, 0.14329848332051665, 0.17438418838992242, 0.17398366285246025, 0.17650000797022125, 0.15827322283209544, 0.2103132414180523, 0.13777636652343006, 0.08984883796429144, 0.08746609959135254, 0.10540700896342514, 0.1089751232871129, 0.11108743313774971, 0.09233882715030028, 0.07969398047663212, 0.15016261005103482, 0.0926995341709822, 0.1692492344827955, 0.15254872772835149, 0.15933532218130642, 0.16805692606781797, 0.1653270751713677, 0.157011374951327, 0.18070976575123854, 0.1624162034275578, 0.1577426000530293, 0.1106565237035182, 0.14284364654290926, 0.15838511620773765, 0.15271481918189478, 0.13984040706862155, 0.16069287279901268, 0.14260427367647244, 0.15848579608198887, 0.1607005445863855, 0.19129892214761468, 0.2122562479526502, 0.16793304274028742, 0.16653301740476922, 0.17379074722052523, 0.22195634115307117, 0.13016454180326253, 0.1412414559767896, 0.14268906278155669, 0.20809977194562612, 0.22791411129772454, 0.19188418552087527, 0.13868322775209418, 0.14820010268104145, 0.2362350724125758, 0.14246726321640257, 0.16612585317963802, 0.10393648268482447, 0.19516050581570243, 0.17209305935366281, 0.19453411786681685, 0.1600133574167676, 0.18006117290438506, 0.18757214212057116, 0.1673524295826193, 0.16899336087474526, 0.169393443623034, 0.05263738197874279, 0.06136712650837639, 0.04915461425578471, 0.046997914442901356, 0.06337597251592653, 0.04682612290596411, 0.04706442094065211, 0.04277818237562392, 0.052560547654718404]}, "mutation_prompt": null}
{"id": "bd87b6dd-07ee-49e8-bd79-84bb239041ec", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                if np.random.uniform() < 0.5:  # Introduce a selection mechanism here\n                    self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                else:\n                    self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (best_global_position - self.particles[i]) + 1.5 * r2 * (self.best_positions[i] - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing the HybridPSOADE algorithm by introducing a new selection mechanism to promote exploration and exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.08475450069465333, "feedback": "The algorithm EnhancedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.24158541621609708, 0.1681617601347034, 0.2508133420094977, 0.1567267237442045, 0.10138528360342403, 0.18237022779406387, 0.17166111160668573, 0.14379906552124322, 0.1552254439630084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022969782149846796, 0.04367279000010549, 0.0296617322577698, 0.04117664618954209, 0.046872402018448334, 0.06256567939118518, 0.05428963500764328, 0.039397267805708513, 0.08225221454447529, 0.04338067409693103, 0.026550244864822936, 0.02536967918791322, 0.04323225571673117, 0.027312500280044838, 0.015798697446403054, 0.03288500560151064, 0.01786181691490696, 0.009181415515559954, 0.07838537770605547, 0.047416013643645005, 0.08256338458379942, 0.07169530245198841, 0.07253226401104018, 0.06770870632537374, 0.08747988156606112, 0.07253937780758701, 0.07930068162723258, 0.08162755115808917, 0.008636786182747547, 0.04827207291222535, 0.06070432174045437, 0.04050818633120057, 0.08685889526672763, 0.04442941074108242, 0.06823652975690842, 0.0376424777903861, 0.16495096244880025, 0.15693232796882917, 0.09826322782378705, 0.10343186709403307, 0.09150028282845946, 0.054389932745237846, 0.09944620705155571, 0.11805102342042428, 0.14385495615660382, 0.015312790503011486, 0.001921561224167423, 0.009191447781335071, 0.0088609696991101, 0.016760233911415012, 9.999999999998899e-05, 0.03044520655206684, 0.00027154309835952795, 0.030186141379049847, 0.028899068329391042, 0.0007785931712991356, 0.004004788786284408, 0.011869562338788664, 0.018240601664061384, 0.03308026765506766, 0.02183443618466463, 0.026292708140070675, 0.0037478086118241105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04082102286402445, 0.03977780876997239, 0.07160299641959411, 0.03929300418565107, 0.03465438573056967, 0.008237916781339338, 0.0771005905563934, 0.05039969300819447, 0.04571854828403943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005881644471778968, 0.0057870606204689645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008556771511961658, 0.006776565781466015, 0.01263098606984514, 0.22777276655921697, 0.16767839487888647, 0.2130581593917652, 0.18368785754110373, 0.15084184460134398, 0.1509107631287785, 0.16385122736595148, 0.18946963678819717, 0.23166409636894691, 0.024633640700494674, 0.026897124357615265, 0.0038816495176319243, 0.037260481309104976, 0.045818321634438886, 0.05410640853486259, 0.04447138243841364, 0.032694530201486494, 0.052628121049247634, 0.1300002812777319, 0.15238661650667296, 0.13531767257833127, 0.15796058117891676, 0.1675473054192962, 0.13210643095096652, 0.13946600512031204, 0.16390727543136197, 0.16103752254047055, 0.18229581908997472, 0.150458374351087, 0.1420307613885432, 0.15779045266162461, 0.1681248607076815, 0.20035927776157691, 0.13986807355082198, 0.2095399485787084, 0.12187108755550546, 0.0667821985869177, 0.08576743330219683, 0.10588568662813846, 0.10124733776804429, 0.11092827540382821, 0.13375734575864462, 0.08265530869424742, 0.15539801748105642, 0.0669649458512902, 0.15307716603174248, 0.15492027137922848, 0.1499704897395362, 0.15234905873438442, 0.147109358630661, 0.17515437780473442, 0.14918726429486528, 0.14817416598958244, 0.16316149249654022, 0.0798634369797675, 0.1199907277353337, 0.15764520903483825, 0.16914311441769747, 0.1419384016195776, 0.14941730814900545, 0.13825738439187862, 0.15163266499932293, 0.08830540641200224, 0.1919873745547367, 0.13980922702262466, 0.13697760560903394, 0.24853937650365687, 0.17382311042705823, 0.18508401580755784, 0.14585768105037333, 0.15494033880392488, 0.13047439053428878, 0.20953424641957497, 0.1503204704485901, 0.14883887640049853, 0.14569745016886648, 0.11814087648562599, 0.09956964316507033, 0.14723743511202192, 0.15062692051129, 0.13030437433650766, 0.1758724203837313, 0.1916793959835883, 0.17972730213486143, 0.1785508386421879, 0.17704268969549408, 0.1891419171771901, 0.1865199091201878, 0.1796856419648768, 0.17880891038694413, 0.037873696755033825, 0.04912662191843897, 0.045849661159680144, 0.0592354321780304, 0.06301350247827431, 0.0460162063879237, 0.04810979157453765, 0.046722176697745144, 0.046201568265643034]}, "mutation_prompt": null}
{"id": "05f78434-e0d6-4009-8bc8-e7d247f182d8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADEImproved(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            \n            # Calculate crowding distance for diversity maintenance\n            crowding_dist = np.zeros(self.population_size)\n            for i in range(self.population_size):\n                for j in range(self.population_size):\n                    crowding_dist[i] += np.linalg.norm(self.particles[i] - self.particles[j])\n            \n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    selection_prob = crowding_dist / np.sum(crowding_dist)\n                    selected_index = np.random.choice(np.arange(self.population_size), p=selection_prob)\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[selected_index] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[selected_index]:\n                        self.particles[selected_index] = mutated_position\n                        self.best_fitness[selected_index] = func(mutated_position)", "name": "EnhancedHybridPSOADEImproved", "description": "Improving diversity maintenance by incorporating crowding distance in selection for mutation.", "configspace": "", "generation": 21, "fitness": 0.08546852729693821, "feedback": "The algorithm EnhancedHybridPSOADEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.18998978405124567, 0.1590827094067625, 0.19186173404244777, 0.13933096858003957, 0.1271965967310542, 0.1691520844539116, 0.1998561042356498, 0.14780048343717878, 0.11212710845048934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02654864914300903, 0.05405288306696543, 0.022235636296676242, 0.048238627939393375, 0.045043542107941925, 0.055342798660810155, 0.0415694689476066, 0.0343866028798282, 0.04681713865794246, 0.025828542148880307, 0.021179061073155925, 0.0201676461220599, 0.03990368092536589, 0.03332770664309703, 0.0175911897652532, 0.025082698132159797, 0.013308626814387159, 0.01637811527248778, 0.0781464994103459, 0.053295563383229494, 0.08232995673617094, 0.07309916457024479, 0.08065081767422821, 0.07977910945318323, 0.09455300089525231, 0.0793914634055991, 0.07117097125341076, 0.0879423981863734, 0.022809796237932667, 0.06226328932584024, 0.06178213471466587, 0.05051042622439805, 0.040322226292274665, 0.0328395801814777, 0.043625251060741554, 0.0005913639730981135, 0.14596061199363775, 0.13743881313964124, 0.14273637906329917, 0.11056545692138442, 0.07602982793191826, 0.07636968856516901, 0.13941221175862084, 0.11030739968022463, 0.09919453872182549, 0.028767099011470565, 0.009468714135714595, 9.999999999998899e-05, 0.00029373765743989644, 0.07422521691309591, 9.999999999998899e-05, 0.029724267835600005, 0.029083050028176904, 9.999999999998899e-05, 0.0889007421339798, 0.02828984259875378, 0.03703459633623496, 0.04827671599562322, 0.010231104888334674, 0.008364807929185925, 0.023858168093011556, 0.018510954215446906, 0.022628856583249424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058945973841738275, 0.04678179111079661, 0.16441792879190675, 0.0283894655975111, 0.04429223250245118, 0.0031444315901593134, 0.07997185363415138, 0.03323199011569211, 0.027194475969479548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019385550337139845, 0.022464726159508563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004945359178045505, 0.2112730716734701, 0.2591369424037552, 0.22011688921429673, 0.17285314912950978, 0.16483908356396226, 0.12831404179880956, 0.17490776683550924, 0.21158231108686054, 0.22877825392215878, 0.015385035923744406, 0.018685649542213967, 0.01125508655514873, 0.0644175694628375, 0.03995627183474515, 0.042876899031975335, 0.027273874473000448, 0.06594002267921151, 0.05033790746886058, 0.14329490419614543, 0.16962275861239873, 0.12590814898277058, 0.13277058987722523, 0.15521455893618463, 0.13298355466315404, 0.12551345848390516, 0.13299760018953488, 0.13772637232789398, 0.14405977920917323, 0.13702773228862608, 0.14092315331848781, 0.16600491569754416, 0.1726128079149588, 0.15304613790058197, 0.15103991437198638, 0.2182745404299935, 0.12963315210373816, 0.08360304078000336, 0.10416938613619608, 0.11408419883538312, 0.11866128954975397, 0.10613100843234191, 0.09987180112469818, 0.08974204677023356, 0.13766264083295554, 0.060819221783677824, 0.15795900364683513, 0.147031483688142, 0.16683500863585266, 0.15411833534646702, 0.16588159437162098, 0.18086390127297713, 0.21969502276122277, 0.14763011508426682, 0.17980280583532549, 0.10466015674084406, 0.08559451234411952, 0.16220267235479457, 0.16237036514279246, 0.14717579725794383, 0.14287607982682915, 0.14686908577127722, 0.14503026701864818, 0.12801414425043056, 0.17738843162100115, 0.15044066316154237, 0.1403542450282773, 0.1748395781883042, 0.17882424576702416, 0.18982137223575923, 0.15626523111303736, 0.15812375305203752, 0.1368457997168212, 0.19965360790974895, 0.20576420819943364, 0.12794570596477295, 0.11623863677164192, 0.1337235852567803, 0.09170991247229343, 0.18997054799131607, 0.16224972167952634, 0.11816420781517933, 0.17267924378378552, 0.17101493527442668, 0.1889573219413836, 0.1832597577325703, 0.1894844866394666, 0.1714001695423525, 0.17435271728351653, 0.1835723389535543, 0.1749906257108107, 0.049192046031395376, 0.05236287990763777, 0.0658344119017602, 0.05718342012027422, 0.054906446392795405, 0.03723856731837605, 0.04888757977279434, 0.062334343399999326, 0.04579347216679108]}, "mutation_prompt": null}
{"id": "55b935dd-00d5-410e-a1e1-80ccc3957e80", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.mutation_step_size = 0.1\n        self.mutation_direction = np.random.choice([-1, 1], size=(self.population_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_step = np.random.uniform(0, self.mutation_step_size)\n                    mutated_position = self.particles[i] + mutation_step * self.mutation_direction[i]\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)\n", "name": "DynamicMutationHybridPSOADE", "description": "Integrating a dynamic mutation strategy based on adaptive step size and direction for enhanced exploration.", "configspace": "", "generation": 22, "fitness": 0.07276117351035365, "feedback": "The algorithm DynamicMutationHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.07.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.15389279835299552, 0.11423469776740536, 0.15537959398898715, 0.12539929205469724, 0.09545314650010672, 0.14747175689863468, 0.13906709940744755, 0.1268327766896057, 0.08124472043953423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039392769142110984, 0.04019179219021152, 0.016738787697420765, 0.03787475584494404, 0.01309901919443035, 0.05095915141022489, 0.03381994271911848, 0.010382371449248917, 0.041889657016938475, 0.021019074397816473, 0.04802771770402958, 0.01828922139874889, 0.056227290109099104, 0.028944451171507013, 0.019961557385287598, 0.017699565720279864, 0.00864868034463051, 0.010470197467750797, 0.060753879591294524, 0.04701508521974285, 0.07227647668406556, 0.06500292308238331, 0.07471225079238653, 0.05883182608678528, 0.0880665457086236, 0.08272049103841927, 0.06197962894164177, 0.020655089429519657, 0.00841856882458103, 0.04241340970437957, 0.0925216149346515, 0.022747796480056648, 0.03389243832221023, 0.06272511535063074, 0.02916641326406244, 9.999999999998899e-05, 0.1552747599587183, 0.05983539866988208, 0.1315308751821982, 0.10715836344731433, 0.02945444493512661, 0.04293587550611122, 0.04532818523386395, 0.10655747128536674, 0.018439038148072684, 0.004102439974899452, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027154187858717926, 9.999999999998899e-05, 0.004232942040944709, 0.023683819570808895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04180452488376307, 0.04344162490359482, 0.0718408933225001, 0.05157302799558294, 0.031693132650461475, 0.028753718419341157, 0.045040149848197486, 0.04996144309982886, 0.02131329941333371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1594653354387754, 0.20039139594504995, 0.19289144685317583, 0.14014285159475126, 0.12956609728488566, 0.1323532945070609, 0.16922280605296036, 0.1887797453168385, 0.20003606558037623, 0.010566107015519077, 0.019345473992664508, 0.017633398930071764, 0.04371737585296165, 0.023553831635224953, 0.036618468015437666, 0.042654570477983156, 0.020858482084889274, 0.04769473476880126, 0.15127942576552322, 0.12561968966175896, 0.12748477992132778, 0.18120474359376337, 0.13683653189946965, 0.1206785091277689, 0.12772568167009213, 0.12115595197843798, 0.15543672591868163, 0.13820757402772654, 0.126751728444931, 0.13059410071636668, 0.15264822647141885, 0.17157107965995544, 0.15488851361334333, 0.13588705233499354, 0.1873788368363426, 0.11434242075185885, 0.07624773200662271, 0.09423390134486531, 0.0902549666541207, 0.08914965967946886, 0.10514294496288368, 0.10787063085339976, 0.07466272798831719, 0.14917396236264646, 0.0527849104194309, 0.16861862086900814, 0.14584597155065582, 0.1463949934971822, 0.17277914002976635, 0.15199441405193082, 0.18565153433168957, 0.142455787396219, 0.12863222245942252, 0.14099052341882345, 0.15770257062329474, 0.011228876127931997, 0.15943246513064202, 0.14634918643478523, 0.15523004120691553, 0.14699452851147343, 0.09196903372248266, 0.16050295796776737, 0.014375024040789719, 0.15880455256249737, 0.15548604192548787, 0.11416387659653193, 0.14819448797660772, 0.12498942287188763, 0.20550872999111103, 0.13219809255068982, 0.11447041833987148, 0.15626927608668206, 0.2685148013526869, 0.08090270634988461, 0.06752457814831392, 0.07031660102854698, 0.08072089625075984, 0.07688511683877564, 0.09581883180886541, 0.11464120146985113, 0.12609718392952451, 0.17876349667473534, 0.17899432889915334, 0.21512810589359288, 0.1841487528103053, 0.17476104490385447, 0.18270667748786595, 0.18277188506611597, 0.1754488268514699, 0.18022422055011356, 0.04905432206071947, 0.04257846791870801, 0.056796034554400854, 0.0415574646703164, 0.09130461381710864, 0.035218300775075706, 0.05086735564264766, 0.03509699022980184, 0.04491233770082659]}, "mutation_prompt": null}
{"id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "solution": "import numpy as np\n\nclass ImprovedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "ImprovedHybridPSOADE", "description": "Improving the EnhancedHybridPSOADE algorithm by adding an adaptive mutation rate based on population diversity.", "configspace": "", "generation": 23, "fitness": 0.09930611754390511, "feedback": "The algorithm ImprovedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "fb4e159d-143b-4014-a337-cc96aaaa9e1f", "metadata": {"aucs": [0.2436554980943605, 0.23511701096137183, 0.23899026152034908, 0.2131811724338475, 0.16665121040116304, 0.23555420154002538, 0.2037310255757122, 0.226936231015488, 0.12522926042769178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031664757799609644, 0.049773353240644025, 0.04418535158926118, 0.03921106015813114, 0.05655599665909761, 0.06157916914683592, 0.03964185015372568, 0.04189236774137439, 0.045990011838903944, 0.04003582270300121, 0.035467117188530906, 0.019249014691440247, 0.06031093512900676, 0.05814786205987543, 0.033878046119614424, 0.028611329105285965, 0.026127383974688057, 0.0056093785347201, 0.1023657591419509, 0.055083489449481604, 0.10463051648622645, 0.07886266257230856, 0.06875162115164402, 0.07389282577575196, 0.09998143042281737, 0.07525588067999489, 0.08686212344137656, 0.11149845043916962, 0.0934299583062328, 0.12662266100819253, 0.09365937584630957, 0.0656954950011821, 0.07212924801156173, 0.09025361425134948, 0.05576373641286392, 0.06642567305802316, 0.19165953779025435, 0.15900196605058703, 0.10636924474236076, 0.10750789185143583, 0.15611044229495308, 0.1170681640689889, 0.13267905938348667, 0.13563827022311215, 0.1276118295934251, 0.024122396560943504, 0.0034533751765054577, 0.06617525181406037, 0.03821103083485178, 0.06527032908109176, 0.04247559908927834, 0.047948317136556895, 0.03393332898374446, 0.05656599131617934, 0.07944601409777297, 0.0341201137486179, 0.04619887032467518, 0.04822386829288827, 0.06408235026812148, 0.025878223742320516, 0.03837650967873418, 0.03890686402301069, 0.016577858834888493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06054477753879961, 0.026983160116444527, 0.05569923103518015, 0.0599553723572841, 0.03459991192295453, 0.04672506160215362, 0.10358311960926181, 0.053100298155621006, 0.028757000014190237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004141105069301876, 0.014242166446842064, 0.02246211097477846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008991069482826575, 0.005910870890545095, 0.014413885414567673, 0.2348490252212163, 0.21857753938036295, 0.25775769763802714, 0.15673060618973556, 0.19146008139487491, 0.18278080039830524, 0.22568393046005808, 0.2466136781647802, 0.2386261791742681, 0.03324330140102938, 0.021902166129156853, 0.009796161266446335, 0.04734421722113147, 0.030054834499594785, 0.04491825044539022, 0.052790106256249913, 0.053115939890353236, 0.07459570395605986, 0.16079019506196146, 0.20198443415608203, 0.16427828597866423, 0.15724587589160588, 0.1805650305162142, 0.1713081039452491, 0.17645458102275113, 0.16440418238317767, 0.15174763447104256, 0.14656981389116353, 0.1924451078941387, 0.14429376100191715, 0.17729893055945778, 0.17359124599504683, 0.17537905247791186, 0.14531349171684338, 0.23353588828484184, 0.1316307678259232, 0.06965425495034216, 0.10542716802453156, 0.11376241358748718, 0.11020392835425741, 0.13449167665508943, 0.11857077317629405, 0.10739493320056404, 0.1745928530830232, 0.09779323181365884, 0.15011972101031967, 0.19578074891438135, 0.1495870726465106, 0.15226357618604403, 0.14766524047156904, 0.19218889998435984, 0.18011633294431761, 0.15955226942873413, 0.17313210200675422, 0.1281104416885711, 0.12267110513332169, 0.16584836570695338, 0.17100188656348525, 0.1697050625597667, 0.14885313472535, 0.14680487262163844, 0.17711652437821235, 0.1543857819610781, 0.21969794024894596, 0.21897345889425102, 0.1522078904633063, 0.23544846640901929, 0.18332144329723365, 0.2517883813687939, 0.14857327825725297, 0.15862010656120895, 0.18409704520696668, 0.22840679079434378, 0.16051498035690825, 0.16194241219779837, 0.1644690256697957, 0.16415101176016944, 0.21003706131820432, 0.18234353335938935, 0.26971779047369204, 0.11774710055967774, 0.16341584686572752, 0.18618943787845688, 0.18213294006714797, 0.17620901107394615, 0.17467546997104655, 0.17658681471904059, 0.16696249699461807, 0.18941585321129184, 0.18722045525402897, 0.05398225512730659, 0.049140335875981656, 0.057418812529426266, 0.06449957922888094, 0.06405258324561458, 0.043621751363711936, 0.05092995094991548, 0.043201688122026294, 0.058893332073857385]}, "mutation_prompt": null}
{"id": "b1b2756a-4f49-410b-8dba-188779be3eb4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                    self.mutation_step = 0.1 + 0.3 * np.tanh(self.best_fitness[i] - fitness)\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutated_position = self.particles[i] + self.mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing the diversity exploration by incorporating a dynamic mutation step size based on particle fitness improvement.", "configspace": "", "generation": 24, "fitness": 0.08889577670514602, "feedback": "The algorithm EnhancedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "metadata": {"aucs": [0.18026218435599073, 0.1351357208500098, 0.3445976458843709, 0.14735019464228372, 0.11729808398819208, 0.1676129147018488, 0.17257356724817252, 0.16591675368453485, 0.09790727313616376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034170364519730545, 0.04948949016309723, 0.03376671103751816, 0.056895854320174855, 0.053698129989438126, 0.0579783935147945, 0.03478645566486449, 0.021415028324417884, 0.05022678487679555, 0.038146388246143026, 0.023542646427003766, 0.05384483634900694, 0.05170372195880901, 0.03150825403270652, 0.030506557493656494, 0.01584762356844871, 0.012487734019535623, 0.02352176450684018, 0.07810932113043523, 0.04839040108181003, 0.094703472488051, 0.0668000186621941, 0.0729813088343726, 0.060502545163548915, 0.08403525540483547, 0.07804503852878153, 0.06426652005441924, 0.15793002856136318, 0.0008936535779395793, 0.0571216581537376, 0.06492151687321379, 0.04024769649493942, 0.02623950900017369, 0.07140251466399716, 0.025356362712061098, 0.016682038682282463, 0.15294203387785765, 0.14895492102047536, 0.10851498567353901, 0.087266651835469, 0.0896836496500909, 0.01819586417497543, 0.11774687470471856, 0.12085530455384597, 0.12475934834500113, 0.02957643133114851, 0.017148474844283168, 0.019384523209595828, 9.999999999998899e-05, 0.04132736286533567, 0.03764836559436591, 0.01793378744500529, 9.999999999998899e-05, 0.0916950339874878, 0.04360320761316183, 0.040045022770686445, 0.07761754726982384, 0.033121784521261355, 0.08967981522331281, 0.03925106896784525, 0.02119193992554025, 0.051826481078009246, 0.0038676719468648812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054861051141417705, 0.04937156076536742, 0.07580689023451159, 0.06991451048991548, 0.05398101813542766, 0.04246921119808156, 0.11090228429020532, 0.07882309340384985, 0.03529992152458361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017973135218426473, 0.014118046429709263, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013956506128179336, 9.999999999998899e-05, 0.21767110649681432, 0.17394880947121616, 0.22536838907751566, 0.14131610545186846, 0.1351230019741484, 0.11220695879699305, 0.18344604455085656, 0.1884975174959268, 0.24063303727458818, 0.02417809904108892, 0.022525994155587648, 9.999999999998899e-05, 0.05415201711116935, 0.028711902724408156, 0.052115716553442715, 0.05464213745538038, 0.048590356128980994, 0.053698261879288056, 0.16822504033767072, 0.1485072866787297, 0.13407167818774035, 0.15301256982026246, 0.2034413526762684, 0.1745148905595184, 0.16791975339026755, 0.15840305763243012, 0.18310907819615585, 0.1472633821322601, 0.17817947798347655, 0.15419643800375893, 0.14499940071249728, 0.15512536230156726, 0.1697929621995209, 0.1317242993744081, 0.2020769621187697, 0.13075395687643887, 0.07668823981980644, 0.09186749446948905, 0.10796021478682927, 0.10907351036798207, 0.10066730055351636, 0.13355063779865228, 0.06622359807132416, 0.1431113158153383, 0.07098525110261766, 0.16290752584922408, 0.16356984436810706, 0.15128721460565375, 0.1679425478901425, 0.14964073947731615, 0.17079993758007972, 0.15465709271601025, 0.16802850006856118, 0.15228133703241387, 0.1676496952191977, 0.16209202844718873, 0.16143277765902786, 0.16421367927434039, 0.13818124995308734, 0.1590334854979636, 0.13277877005243532, 0.1569218708096467, 0.12248579048785813, 0.16752045524519488, 0.1449719877633443, 0.13115010034722197, 0.15650756182110637, 0.1799472316006131, 0.20864405470072755, 0.12382568669966809, 0.15751514675696632, 0.16781851943680182, 0.19179993426155195, 0.14360757581140748, 0.18266675193387993, 0.11615056087999165, 0.13210848506521067, 0.2272317060255975, 0.10002223404331212, 0.18825236852230431, 0.18229320833441998, 0.1777056591272661, 0.18113131062868493, 0.2164853269107564, 0.18590723710524282, 0.18184669878891901, 0.17362087725821052, 0.17260690348098284, 0.17715697336992764, 0.20606507411201191, 0.07084662478599113, 0.05264248998038168, 0.06632609804020062, 0.05578973109051999, 0.05366527564265178, 0.03917358370281654, 0.05803470193443461, 0.04097003859037107, 0.06557022095594678]}, "mutation_prompt": null}
{"id": "3c919aa4-7d3e-496b-9e18-7e03d037ac4a", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutated_position = self.particles[i] + self.calculate_mutation_step() * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)\n    \n    def calculate_mutation_step(self):\n        return np.random.uniform(0, 0.5)", "name": "DynamicMutationHybridPSOADE", "description": "Adjusting the mutation step size based on a dynamic strategy to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 25, "fitness": 0.09930611754390511, "feedback": "The algorithm DynamicMutationHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "metadata": {"aucs": [0.2436554980943605, 0.23511701096137183, 0.23899026152034908, 0.2131811724338475, 0.16665121040116304, 0.23555420154002538, 0.2037310255757122, 0.226936231015488, 0.12522926042769178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031664757799609644, 0.049773353240644025, 0.04418535158926118, 0.03921106015813114, 0.05655599665909761, 0.06157916914683592, 0.03964185015372568, 0.04189236774137439, 0.045990011838903944, 0.04003582270300121, 0.035467117188530906, 0.019249014691440247, 0.06031093512900676, 0.05814786205987543, 0.033878046119614424, 0.028611329105285965, 0.026127383974688057, 0.0056093785347201, 0.1023657591419509, 0.055083489449481604, 0.10463051648622645, 0.07886266257230856, 0.06875162115164402, 0.07389282577575196, 0.09998143042281737, 0.07525588067999489, 0.08686212344137656, 0.11149845043916962, 0.0934299583062328, 0.12662266100819253, 0.09365937584630957, 0.0656954950011821, 0.07212924801156173, 0.09025361425134948, 0.05576373641286392, 0.06642567305802316, 0.19165953779025435, 0.15900196605058703, 0.10636924474236076, 0.10750789185143583, 0.15611044229495308, 0.1170681640689889, 0.13267905938348667, 0.13563827022311215, 0.1276118295934251, 0.024122396560943504, 0.0034533751765054577, 0.06617525181406037, 0.03821103083485178, 0.06527032908109176, 0.04247559908927834, 0.047948317136556895, 0.03393332898374446, 0.05656599131617934, 0.07944601409777297, 0.0341201137486179, 0.04619887032467518, 0.04822386829288827, 0.06408235026812148, 0.025878223742320516, 0.03837650967873418, 0.03890686402301069, 0.016577858834888493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06054477753879961, 0.026983160116444527, 0.05569923103518015, 0.0599553723572841, 0.03459991192295453, 0.04672506160215362, 0.10358311960926181, 0.053100298155621006, 0.028757000014190237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004141105069301876, 0.014242166446842064, 0.02246211097477846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008991069482826575, 0.005910870890545095, 0.014413885414567673, 0.2348490252212163, 0.21857753938036295, 0.25775769763802714, 0.15673060618973556, 0.19146008139487491, 0.18278080039830524, 0.22568393046005808, 0.2466136781647802, 0.2386261791742681, 0.03324330140102938, 0.021902166129156853, 0.009796161266446335, 0.04734421722113147, 0.030054834499594785, 0.04491825044539022, 0.052790106256249913, 0.053115939890353236, 0.07459570395605986, 0.16079019506196146, 0.20198443415608203, 0.16427828597866423, 0.15724587589160588, 0.1805650305162142, 0.1713081039452491, 0.17645458102275113, 0.16440418238317767, 0.15174763447104256, 0.14656981389116353, 0.1924451078941387, 0.14429376100191715, 0.17729893055945778, 0.17359124599504683, 0.17537905247791186, 0.14531349171684338, 0.23353588828484184, 0.1316307678259232, 0.06965425495034216, 0.10542716802453156, 0.11376241358748718, 0.11020392835425741, 0.13449167665508943, 0.11857077317629405, 0.10739493320056404, 0.1745928530830232, 0.09779323181365884, 0.15011972101031967, 0.19578074891438135, 0.1495870726465106, 0.15226357618604403, 0.14766524047156904, 0.19218889998435984, 0.18011633294431761, 0.15955226942873413, 0.17313210200675422, 0.1281104416885711, 0.12267110513332169, 0.16584836570695338, 0.17100188656348525, 0.1697050625597667, 0.14885313472535, 0.14680487262163844, 0.17711652437821235, 0.1543857819610781, 0.21969794024894596, 0.21897345889425102, 0.1522078904633063, 0.23544846640901929, 0.18332144329723365, 0.2517883813687939, 0.14857327825725297, 0.15862010656120895, 0.18409704520696668, 0.22840679079434378, 0.16051498035690825, 0.16194241219779837, 0.1644690256697957, 0.16415101176016944, 0.21003706131820432, 0.18234353335938935, 0.26971779047369204, 0.11774710055967774, 0.16341584686572752, 0.18618943787845688, 0.18213294006714797, 0.17620901107394615, 0.17467546997104655, 0.17658681471904059, 0.16696249699461807, 0.18941585321129184, 0.18722045525402897, 0.05398225512730659, 0.049140335875981656, 0.057418812529426266, 0.06449957922888094, 0.06405258324561458, 0.043621751363711936, 0.05092995094991548, 0.043201688122026294, 0.058893332073857385]}, "mutation_prompt": null}
{"id": "53d95baa-088a-449c-a58d-5b55014081bd", "solution": "import numpy as np\n\nclass ImprovedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "ImprovedHybridPSOADE", "description": "Improving the EnhancedHybridPSOADE algorithm by adding an adaptive mutation rate based on population diversity.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "metadata": {"aucs": [0.2436554980943605, 0.23511701096137183, 0.23899026152034908, 0.2131811724338475, 0.16665121040116304, 0.23555420154002538, 0.2037310255757122, 0.226936231015488, 0.12522926042769178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031664757799609644, 0.049773353240644025, 0.04418535158926118, 0.03921106015813114, 0.05655599665909761, 0.06157916914683592, 0.03964185015372568, 0.04189236774137439, 0.045990011838903944, 0.04003582270300121, 0.035467117188530906, 0.019249014691440247, 0.06031093512900676, 0.05814786205987543, 0.033878046119614424, 0.028611329105285965, 0.026127383974688057, 0.0056093785347201, 0.1023657591419509, 0.055083489449481604, 0.10463051648622645, 0.07886266257230856, 0.06875162115164402, 0.07389282577575196, 0.09998143042281737, 0.07525588067999489, 0.08686212344137656, 0.11149845043916962, 0.0934299583062328, 0.12662266100819253, 0.09365937584630957, 0.0656954950011821, 0.07212924801156173, 0.09025361425134948, 0.05576373641286392, 0.06642567305802316, 0.19165953779025435, 0.15900196605058703, 0.10636924474236076, 0.10750789185143583, 0.15611044229495308, 0.1170681640689889, 0.13267905938348667, 0.13563827022311215, 0.1276118295934251, 0.024122396560943504, 0.0034533751765054577, 0.06617525181406037, 0.03821103083485178, 0.06527032908109176, 0.04247559908927834, 0.047948317136556895, 0.03393332898374446, 0.05656599131617934, 0.07944601409777297, 0.0341201137486179, 0.04619887032467518, 0.04822386829288827, 0.06408235026812148, 0.025878223742320516, 0.03837650967873418, 0.03890686402301069, 0.016577858834888493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06054477753879961, 0.026983160116444527, 0.05569923103518015, 0.0599553723572841, 0.03459991192295453, 0.04672506160215362, 0.10358311960926181, 0.053100298155621006, 0.028757000014190237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004141105069301876, 0.014242166446842064, 0.02246211097477846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008991069482826575, 0.005910870890545095, 0.014413885414567673, 0.2348490252212163, 0.21857753938036295, 0.25775769763802714, 0.15673060618973556, 0.19146008139487491, 0.18278080039830524, 0.22568393046005808, 0.2466136781647802, 0.2386261791742681, 0.03324330140102938, 0.021902166129156853, 0.009796161266446335, 0.04734421722113147, 0.030054834499594785, 0.04491825044539022, 0.052790106256249913, 0.053115939890353236, 0.07459570395605986, 0.16079019506196146, 0.20198443415608203, 0.16427828597866423, 0.15724587589160588, 0.1805650305162142, 0.1713081039452491, 0.17645458102275113, 0.16440418238317767, 0.15174763447104256, 0.14656981389116353, 0.1924451078941387, 0.14429376100191715, 0.17729893055945778, 0.17359124599504683, 0.17537905247791186, 0.14531349171684338, 0.23353588828484184, 0.1316307678259232, 0.06965425495034216, 0.10542716802453156, 0.11376241358748718, 0.11020392835425741, 0.13449167665508943, 0.11857077317629405, 0.10739493320056404, 0.1745928530830232, 0.09779323181365884, 0.15011972101031967, 0.19578074891438135, 0.1495870726465106, 0.15226357618604403, 0.14766524047156904, 0.19218889998435984, 0.18011633294431761, 0.15955226942873413, 0.17313210200675422, 0.1281104416885711, 0.12267110513332169, 0.16584836570695338, 0.17100188656348525, 0.1697050625597667, 0.14885313472535, 0.14680487262163844, 0.17711652437821235, 0.1543857819610781, 0.21969794024894596, 0.21897345889425102, 0.1522078904633063, 0.23544846640901929, 0.18332144329723365, 0.2517883813687939, 0.14857327825725297, 0.15862010656120895, 0.18409704520696668, 0.22840679079434378, 0.16051498035690825, 0.16194241219779837, 0.1644690256697957, 0.16415101176016944, 0.21003706131820432, 0.18234353335938935, 0.26971779047369204, 0.11774710055967774, 0.16341584686572752, 0.18618943787845688, 0.18213294006714797, 0.17620901107394615, 0.17467546997104655, 0.17658681471904059, 0.16696249699461807, 0.18941585321129184, 0.18722045525402897, 0.05398225512730659, 0.049140335875981656, 0.057418812529426266, 0.06449957922888094, 0.06405258324561458, 0.043621751363711936, 0.05092995094991548, 0.043201688122026294, 0.058893332073857385]}, "mutation_prompt": null}
{"id": "1cb45ea0-025f-4a01-b18c-1db4e9f0787d", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        inertia_weight = 0.5  # Initialize dynamic inertia weight\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)\n            inertia_weight = 0.9 - 0.4 * _ / self.budget  # Update inertia weight dynamically", "name": "EnhancedHybridPSOADE", "description": "Utilizing a dynamic inertia weight factor in the velocity update equation to enhance exploration-exploitation balance.", "configspace": "", "generation": 27, "fitness": 0.09691011763038097, "feedback": "The algorithm EnhancedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "metadata": {"aucs": [0.24112601979413406, 0.20612040787780317, 0.2330330985796052, 0.21049208939380037, 0.162386407830323, 0.2618653559710419, 0.20683379468166607, 0.27352645958953314, 0.13561717530583428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04102330117268216, 0.05965103217154122, 0.033840650019319574, 0.066765771018512, 0.054517254685968686, 0.052189754599993865, 0.040735868259158314, 0.05039359657490439, 0.04597964124889953, 0.04410215062091938, 0.044577058528987634, 0.03483989255753406, 0.04989602853405961, 0.04432370244489814, 0.01082834535495436, 0.017687776556244317, 0.041948663842432454, 0.028461513493264423, 0.10236752538447458, 0.052360819589549856, 0.1054363770874921, 0.07886613424493205, 0.0856415221434641, 0.09097528092561902, 0.10298902688545497, 0.09510341579564352, 0.07803753631234955, 0.0890544817352753, 0.10684505824730517, 0.13068652847586582, 0.09985825086411437, 0.06865655980957419, 0.07047409675794536, 0.14154810192923672, 0.06285908461388279, 0.07417471610517534, 0.17053508509247783, 0.18407699485202988, 0.1447164503377677, 0.1368506141667627, 0.18294646963488426, 0.12263767842135453, 0.12785900329439248, 0.1278569258528912, 0.10574820882122604, 0.027324872174595338, 0.01757669886905755, 9.999999999998899e-05, 0.002598422054541527, 0.06677646373549762, 0.004886123943227738, 0.044205759076155315, 0.03008348318358134, 0.054670906511573025, 0.08812164593026117, 0.03835178099853842, 0.04926028764264845, 0.0659834540972506, 0.04518929572450814, 0.024767872488286602, 0.032647607853922844, 0.015805580660975482, 0.01660028027965821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0536398110232813, 0.03323926239815611, 0.05267744889672865, 0.0534654988685197, 0.01362329607757351, 0.0515546423887272, 0.0990218505157009, 0.04764957557691718, 0.04048202420919955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007527973796046528, 0.01846900201344359, 0.022489462411966255, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012104812764925699, 0.00592359563286482, 0.010611744466669015, 0.21030958257677845, 0.22550163278495217, 0.2545651765253292, 0.16245162460391727, 0.2099635073278464, 0.17529085836904157, 0.2086016659411709, 0.29138764666898265, 0.23149568286808708, 0.03333081757509604, 0.026529562982898325, 0.04333171177000783, 0.045644895075286906, 0.03244988563655482, 0.04563391730926869, 0.053880819180081696, 0.029429403629673834, 0.06028476139715078, 0.15834670935111206, 0.1432727917058857, 0.13637984135887982, 0.13347710900630994, 0.12880623553538373, 0.12506940139007638, 0.17405477689397864, 0.15613569583548814, 0.14097752856253631, 0.14232968651739086, 0.1913474584280419, 0.1394179821325695, 0.16553838183760927, 0.18002364869521903, 0.1682684011570511, 0.14677751122751903, 0.2358404667956232, 0.1607593294421107, 0.06826043326052422, 0.12019610672673098, 0.10976798902159257, 0.13837306933593296, 0.12210592737631765, 0.1213203248450011, 0.10407505212308366, 0.17491017493280892, 0.07376463814266665, 0.14937244745910083, 0.1624896969621361, 0.14210466952302248, 0.1509449140191571, 0.16178159258592661, 0.19121125702481978, 0.18012104325437028, 0.15145451815375288, 0.16298398090893895, 0.13457746623144706, 0.11504375579823478, 0.1651252851677013, 0.1614860281839403, 0.1617777253841437, 0.15192321114531038, 0.15240301841304948, 0.17193478921529748, 0.15582678769665637, 0.17436963091571778, 0.20093990015757413, 0.1498409271421428, 0.16299384822665774, 0.17640286285123163, 0.23140337561182833, 0.1419923601625367, 0.1879151668375627, 0.18754240828688007, 0.26278019439961264, 0.1472213270331202, 0.14113153564344716, 0.1010512280742607, 0.15731233687917867, 0.11637657457873596, 0.15524214575656947, 0.26561381291484365, 0.15089948619546578, 0.16268076622928385, 0.1757285703929754, 0.17078372350474125, 0.19864440623337043, 0.16879371021028167, 0.16778278299074245, 0.16803231432794252, 0.16610225640783616, 0.1751327605893248, 0.05227703290000629, 0.053528269100025505, 0.05000972427725281, 0.06451213124928412, 0.06444426371956402, 0.033119734862097516, 0.04690356428226894, 0.049226482281179096, 0.056031664012458404]}, "mutation_prompt": null}
{"id": "1d0b5e2a-cc58-4d4e-97ec-d198f69417dd", "solution": "import numpy as np\n\nclass ImprovedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "ImprovedHybridPSOADE", "description": "Improving the EnhancedHybridPSOADE algorithm by adding an adaptive mutation rate based on population diversity.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "metadata": {"aucs": [0.2436554980943605, 0.23511701096137183, 0.23899026152034908, 0.2131811724338475, 0.16665121040116304, 0.23555420154002538, 0.2037310255757122, 0.226936231015488, 0.12522926042769178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031664757799609644, 0.049773353240644025, 0.04418535158926118, 0.03921106015813114, 0.05655599665909761, 0.06157916914683592, 0.03964185015372568, 0.04189236774137439, 0.045990011838903944, 0.04003582270300121, 0.035467117188530906, 0.019249014691440247, 0.06031093512900676, 0.05814786205987543, 0.033878046119614424, 0.028611329105285965, 0.026127383974688057, 0.0056093785347201, 0.1023657591419509, 0.055083489449481604, 0.10463051648622645, 0.07886266257230856, 0.06875162115164402, 0.07389282577575196, 0.09998143042281737, 0.07525588067999489, 0.08686212344137656, 0.11149845043916962, 0.0934299583062328, 0.12662266100819253, 0.09365937584630957, 0.0656954950011821, 0.07212924801156173, 0.09025361425134948, 0.05576373641286392, 0.06642567305802316, 0.19165953779025435, 0.15900196605058703, 0.10636924474236076, 0.10750789185143583, 0.15611044229495308, 0.1170681640689889, 0.13267905938348667, 0.13563827022311215, 0.1276118295934251, 0.024122396560943504, 0.0034533751765054577, 0.06617525181406037, 0.03821103083485178, 0.06527032908109176, 0.04247559908927834, 0.047948317136556895, 0.03393332898374446, 0.05656599131617934, 0.07944601409777297, 0.0341201137486179, 0.04619887032467518, 0.04822386829288827, 0.06408235026812148, 0.025878223742320516, 0.03837650967873418, 0.03890686402301069, 0.016577858834888493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06054477753879961, 0.026983160116444527, 0.05569923103518015, 0.0599553723572841, 0.03459991192295453, 0.04672506160215362, 0.10358311960926181, 0.053100298155621006, 0.028757000014190237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004141105069301876, 0.014242166446842064, 0.02246211097477846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008991069482826575, 0.005910870890545095, 0.014413885414567673, 0.2348490252212163, 0.21857753938036295, 0.25775769763802714, 0.15673060618973556, 0.19146008139487491, 0.18278080039830524, 0.22568393046005808, 0.2466136781647802, 0.2386261791742681, 0.03324330140102938, 0.021902166129156853, 0.009796161266446335, 0.04734421722113147, 0.030054834499594785, 0.04491825044539022, 0.052790106256249913, 0.053115939890353236, 0.07459570395605986, 0.16079019506196146, 0.20198443415608203, 0.16427828597866423, 0.15724587589160588, 0.1805650305162142, 0.1713081039452491, 0.17645458102275113, 0.16440418238317767, 0.15174763447104256, 0.14656981389116353, 0.1924451078941387, 0.14429376100191715, 0.17729893055945778, 0.17359124599504683, 0.17537905247791186, 0.14531349171684338, 0.23353588828484184, 0.1316307678259232, 0.06965425495034216, 0.10542716802453156, 0.11376241358748718, 0.11020392835425741, 0.13449167665508943, 0.11857077317629405, 0.10739493320056404, 0.1745928530830232, 0.09779323181365884, 0.15011972101031967, 0.19578074891438135, 0.1495870726465106, 0.15226357618604403, 0.14766524047156904, 0.19218889998435984, 0.18011633294431761, 0.15955226942873413, 0.17313210200675422, 0.1281104416885711, 0.12267110513332169, 0.16584836570695338, 0.17100188656348525, 0.1697050625597667, 0.14885313472535, 0.14680487262163844, 0.17711652437821235, 0.1543857819610781, 0.21969794024894596, 0.21897345889425102, 0.1522078904633063, 0.23544846640901929, 0.18332144329723365, 0.2517883813687939, 0.14857327825725297, 0.15862010656120895, 0.18409704520696668, 0.22840679079434378, 0.16051498035690825, 0.16194241219779837, 0.1644690256697957, 0.16415101176016944, 0.21003706131820432, 0.18234353335938935, 0.26971779047369204, 0.11774710055967774, 0.16341584686572752, 0.18618943787845688, 0.18213294006714797, 0.17620901107394615, 0.17467546997104655, 0.17658681471904059, 0.16696249699461807, 0.18941585321129184, 0.18722045525402897, 0.05398225512730659, 0.049140335875981656, 0.057418812529426266, 0.06449957922888094, 0.06405258324561458, 0.043621751363711936, 0.05092995094991548, 0.043201688122026294, 0.058893332073857385]}, "mutation_prompt": null}
{"id": "2cb597ab-dc77-4fb0-a570-1583a35a812e", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                self.mutation_rate = 0.1 + 0.1 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing the mutation strategy by incorporating a self-adaptive mechanism based on individual particle fitness to improve exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.08743060193823596, "feedback": "The algorithm EnhancedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "metadata": {"aucs": [0.21716765700974028, 0.200196464538675, 0.2700342190861559, 0.16368242058117322, 0.13302818954089313, 0.23666025080108133, 0.15694239375634356, 0.20399388530318974, 0.12535807394430576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030831540805183577, 0.032423415359643104, 0.02800653327119018, 0.03164933438551143, 0.05228557532869149, 0.06583205033097639, 0.043436770662214075, 0.03423064964217226, 0.07720675418557188, 0.028050735560411377, 0.01830688381024881, 0.04302937802028939, 0.05109749954141152, 0.032114576562656705, 0.030135375686475507, 0.030567558991219768, 0.014537215352195876, 0.01887000569614372, 0.093424534585266, 0.04829893463764112, 0.08291355142827184, 0.06886899662569557, 0.08591068090753384, 0.0667427878855007, 0.08818653281728273, 0.07825481145873636, 0.06649783393162378, 0.09274932138727254, 0.024660292939017947, 0.06639216216090427, 0.07091587931372045, 0.056414317796161795, 0.04817159608748134, 0.0701875926405352, 0.03909714010515386, 0.02924871950894392, 0.1525003075996827, 0.14065344583346173, 0.09161189836501193, 0.13481953718485096, 0.1057157135971103, 0.05550616406083808, 0.10416990992023056, 0.11309704584826052, 0.1337534923891126, 0.0037112519707607206, 0.06210199221726964, 9.999999999998899e-05, 0.00426669975165983, 0.002065051447677768, 9.999999999998899e-05, 0.04488476445677603, 9.999999999998899e-05, 0.011108966015562882, 0.006212887869051387, 0.025722838907961565, 0.031165229362907332, 0.01075778049389342, 0.0066981449885046285, 0.018820827998091927, 0.02738409617118831, 0.01778721185718246, 0.0023978883621835756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048213046812200955, 0.026883939041612015, 0.061546711248451014, 0.05460031906967344, 0.028710948810396597, 0.00028465566348823135, 0.08614951183275077, 0.03622028219149376, 0.036495493827719105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033651502415317225, 0.006769417918637388, 9.999999999998899e-05, 0.003994062193540926, 9.999999999998899e-05, 0.0027207735742460493, 0.009723251676061806, 0.008918983926020752, 0.20675743384755485, 0.1554116351909628, 0.2473238780917021, 0.22222930554602993, 0.14393257953731808, 0.14699872550127036, 0.23780539191029115, 0.21483016264067922, 0.21914062493065423, 0.022907200275617323, 0.02691105880748923, 0.018087920981512018, 0.05203157980696138, 0.02234704429477008, 0.059616593263149276, 0.05758121749604872, 0.043692106536551534, 0.05632638053281702, 0.1472210486643185, 0.14400550079991903, 0.1722442630882337, 0.12920536042985276, 0.1854392993178552, 0.14115024549958266, 0.15817139697265525, 0.1541510387005861, 0.19557752584472532, 0.1474891451556719, 0.16837172366812359, 0.13470315908107, 0.18973537127039386, 0.16120948188186734, 0.15579908883444427, 0.1352498858022515, 0.21444051953051113, 0.13043689701838335, 0.07154390181829473, 0.1003432177736231, 0.10943681835155783, 0.1161665541854553, 0.1381090565613473, 0.10353023389884397, 0.0824324722208718, 0.1455441590736607, 0.06841029328814419, 0.1430050026351808, 0.1613335515066261, 0.1494987264233576, 0.14630541325983448, 0.1320997888184553, 0.19063267339475987, 0.1609654305366217, 0.1484618886070741, 0.16002980322037585, 0.1486056291234692, 0.08804979141241243, 0.16694406239402793, 0.1737704029451097, 0.16292287673258254, 0.14298400102864728, 0.13240103947601745, 0.15471844647750954, 0.1605538899516742, 0.251147900098579, 0.15048718874401001, 0.1331566049728461, 0.15465883887059062, 0.16710581437856853, 0.18102663803042118, 0.13512414704326492, 0.15318474873605847, 0.15276064295159975, 0.2162501771260391, 0.12441650934079751, 0.1546724117799726, 0.11761942587742835, 0.1251009153383733, 0.12053807747387923, 0.09925649821576843, 0.20554673504247756, 0.13542503751677026, 0.17087017757783574, 0.19552239714068687, 0.1824718873246678, 0.1742772193455494, 0.1775074197784705, 0.18780122608344973, 0.18174520119336013, 0.18709536493617773, 0.1813310796436165, 0.08127110627595813, 0.05852731472819561, 0.05511165683874275, 0.06059879834169457, 0.0642965450036872, 0.04859146580118212, 0.03910539500347676, 0.03602473012090446, 0.04634466527515724]}, "mutation_prompt": null}
{"id": "6c5e63dc-34b9-4e60-9b77-e003f6558e0e", "solution": "import numpy as np\n\nclass ImprovedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "ImprovedHybridPSOADE", "description": "Improving the EnhancedHybridPSOADE algorithm by adding an adaptive mutation rate based on population diversity.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "metadata": {"aucs": [0.2436554980943605, 0.23511701096137183, 0.23899026152034908, 0.2131811724338475, 0.16665121040116304, 0.23555420154002538, 0.2037310255757122, 0.226936231015488, 0.12522926042769178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031664757799609644, 0.049773353240644025, 0.04418535158926118, 0.03921106015813114, 0.05655599665909761, 0.06157916914683592, 0.03964185015372568, 0.04189236774137439, 0.045990011838903944, 0.04003582270300121, 0.035467117188530906, 0.019249014691440247, 0.06031093512900676, 0.05814786205987543, 0.033878046119614424, 0.028611329105285965, 0.026127383974688057, 0.0056093785347201, 0.1023657591419509, 0.055083489449481604, 0.10463051648622645, 0.07886266257230856, 0.06875162115164402, 0.07389282577575196, 0.09998143042281737, 0.07525588067999489, 0.08686212344137656, 0.11149845043916962, 0.0934299583062328, 0.12662266100819253, 0.09365937584630957, 0.0656954950011821, 0.07212924801156173, 0.09025361425134948, 0.05576373641286392, 0.06642567305802316, 0.19165953779025435, 0.15900196605058703, 0.10636924474236076, 0.10750789185143583, 0.15611044229495308, 0.1170681640689889, 0.13267905938348667, 0.13563827022311215, 0.1276118295934251, 0.024122396560943504, 0.0034533751765054577, 0.06617525181406037, 0.03821103083485178, 0.06527032908109176, 0.04247559908927834, 0.047948317136556895, 0.03393332898374446, 0.05656599131617934, 0.07944601409777297, 0.0341201137486179, 0.04619887032467518, 0.04822386829288827, 0.06408235026812148, 0.025878223742320516, 0.03837650967873418, 0.03890686402301069, 0.016577858834888493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06054477753879961, 0.026983160116444527, 0.05569923103518015, 0.0599553723572841, 0.03459991192295453, 0.04672506160215362, 0.10358311960926181, 0.053100298155621006, 0.028757000014190237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004141105069301876, 0.014242166446842064, 0.02246211097477846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008991069482826575, 0.005910870890545095, 0.014413885414567673, 0.2348490252212163, 0.21857753938036295, 0.25775769763802714, 0.15673060618973556, 0.19146008139487491, 0.18278080039830524, 0.22568393046005808, 0.2466136781647802, 0.2386261791742681, 0.03324330140102938, 0.021902166129156853, 0.009796161266446335, 0.04734421722113147, 0.030054834499594785, 0.04491825044539022, 0.052790106256249913, 0.053115939890353236, 0.07459570395605986, 0.16079019506196146, 0.20198443415608203, 0.16427828597866423, 0.15724587589160588, 0.1805650305162142, 0.1713081039452491, 0.17645458102275113, 0.16440418238317767, 0.15174763447104256, 0.14656981389116353, 0.1924451078941387, 0.14429376100191715, 0.17729893055945778, 0.17359124599504683, 0.17537905247791186, 0.14531349171684338, 0.23353588828484184, 0.1316307678259232, 0.06965425495034216, 0.10542716802453156, 0.11376241358748718, 0.11020392835425741, 0.13449167665508943, 0.11857077317629405, 0.10739493320056404, 0.1745928530830232, 0.09779323181365884, 0.15011972101031967, 0.19578074891438135, 0.1495870726465106, 0.15226357618604403, 0.14766524047156904, 0.19218889998435984, 0.18011633294431761, 0.15955226942873413, 0.17313210200675422, 0.1281104416885711, 0.12267110513332169, 0.16584836570695338, 0.17100188656348525, 0.1697050625597667, 0.14885313472535, 0.14680487262163844, 0.17711652437821235, 0.1543857819610781, 0.21969794024894596, 0.21897345889425102, 0.1522078904633063, 0.23544846640901929, 0.18332144329723365, 0.2517883813687939, 0.14857327825725297, 0.15862010656120895, 0.18409704520696668, 0.22840679079434378, 0.16051498035690825, 0.16194241219779837, 0.1644690256697957, 0.16415101176016944, 0.21003706131820432, 0.18234353335938935, 0.26971779047369204, 0.11774710055967774, 0.16341584686572752, 0.18618943787845688, 0.18213294006714797, 0.17620901107394615, 0.17467546997104655, 0.17658681471904059, 0.16696249699461807, 0.18941585321129184, 0.18722045525402897, 0.05398225512730659, 0.049140335875981656, 0.057418812529426266, 0.06449957922888094, 0.06405258324561458, 0.043621751363711936, 0.05092995094991548, 0.043201688122026294, 0.058893332073857385]}, "mutation_prompt": null}
{"id": "8fa4925c-c35a-4706-a1e3-7826d8bad4ae", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) * np.tanh(0.5 * (self.best_fitness[i] - func(new_position)))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing the mutation process by introducing a dynamic mutation step size based on individual particle fitness improvement.", "configspace": "", "generation": 31, "fitness": 0.09543726129911348, "feedback": "The algorithm EnhancedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "metadata": {"aucs": [0.2492998611235464, 0.1904911869157213, 0.23470942209931434, 0.16726389524353202, 0.11781750875204211, 0.24999284360637164, 0.2000831591305624, 0.20770435475600602, 0.14086794210582887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03380199213747348, 0.040867738824890476, 0.0554734803658814, 0.043788542735046954, 0.04347912756098271, 0.07231001847882923, 0.035226113649568846, 0.04171895112199342, 0.05151536174323268, 0.03601073928776477, 0.07119240946128158, 0.022314145585362155, 0.05211386977026944, 0.04197250115198803, 0.03746488018177929, 0.02077445529980726, 0.01624552995270856, 0.018038696233229734, 0.08982035547163492, 0.05294492607364898, 0.09124540859313934, 0.07460696404610556, 0.07173838767476359, 0.062001897595704736, 0.09178809487844064, 0.07100556033341032, 0.06404137942020593, 0.11880626662463833, 0.03975453169301468, 0.08160754621542454, 0.11450846175341556, 0.08595350128524692, 0.10902820178869099, 0.10753118080976276, 0.055202423299596015, 0.05563579991959777, 0.1915540328258799, 0.16017087218051784, 0.11633117443724972, 0.11193239952571443, 0.1213006873922301, 0.08391122481370517, 0.1423832488569935, 0.12579713159812234, 0.09359997130949027, 0.001430990116028763, 0.023018168687628515, 0.026680722343447316, 0.02050881878632449, 0.1283519240009966, 0.004710358338372189, 0.020521317242579107, 0.03441036544294862, 0.08027558935649104, 0.05073028059008233, 0.06176585629224696, 0.061574216587159, 0.07884143541926292, 0.05553673009950166, 0.026383414847900855, 0.06589582723571819, 0.03395394616600811, 0.05514788612263932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06798846107219036, 0.050073659144609484, 0.047020973364389596, 0.050799082643280924, 0.05457814571735686, 0.04748836410425106, 0.11699998777120568, 0.05318589173130772, 0.045137644759223106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013656174996948489, 0.019814334034942815, 9.999999999998899e-05, 0.0043217273690164815, 9.999999999998899e-05, 0.0015283455292921522, 0.0162181522466035, 0.01009382125987901, 0.24994069305260447, 0.22264069696736255, 0.24725829536036115, 0.1730330066630661, 0.19619213344860253, 0.15006059252308934, 0.24570006931455324, 0.24317991015453455, 0.22691577834780297, 0.0412253632355134, 0.024136569595422985, 0.02009737344979967, 0.047910698705244226, 0.029686036007669503, 0.04888594158443649, 0.05931617123673205, 0.04604336249165497, 0.0629188224979722, 0.15995809412314577, 0.15756047361101122, 0.12868026577987735, 0.14944212447423177, 0.15359716973781268, 0.12847278190262168, 0.1520389458774547, 0.15808738965357882, 0.141951859028684, 0.15325670647049228, 0.1602566364574035, 0.13611597245045992, 0.16025605048107716, 0.17766932683246817, 0.16191881122148644, 0.14113835340162928, 0.2213520141605222, 0.130452868085835, 0.10203010659413592, 0.11591545206059906, 0.11201666187350001, 0.10485203882199279, 0.11127276870209846, 0.1127180184427814, 0.09261710803227563, 0.15387694146580977, 0.06005271585893279, 0.15154492903613204, 0.15027652632088973, 0.15530220911804393, 0.14967147326870434, 0.15542496350663515, 0.16852595805485016, 0.15272292462085713, 0.16897413854881016, 0.16317846680527948, 0.1204934410870866, 0.14395394429109842, 0.16033101796034555, 0.1653495298921871, 0.15524618306751126, 0.1463123210356212, 0.13951873374301627, 0.17741135379559658, 0.171369622417338, 0.23655478378772143, 0.2104082535770475, 0.15137131330247522, 0.17497215486131357, 0.18693359205284565, 0.2335687998472864, 0.14905824945402224, 0.200274834164755, 0.13972645257880523, 0.25004623463859477, 0.17535392627181334, 0.1502061153629196, 0.13903220318969545, 0.15226118267459132, 0.1370676403775094, 0.15085121335089047, 0.17165169702130856, 0.14428830093420786, 0.16604794613049834, 0.1800940015332173, 0.16841138340851836, 0.18764381705612465, 0.1829260428595123, 0.17988421291937562, 0.17750408013920826, 0.19432361220750805, 0.17775282603878173, 0.04662467441961726, 0.04745736320607774, 0.05760195998167006, 0.06446428084104106, 0.05229912203818199, 0.04745900849088669, 0.050086554894509194, 0.04468749933758043, 0.05886322973886382]}, "mutation_prompt": null}
{"id": "8789a999-595c-4ae5-a032-03d44da337b7", "solution": "import numpy as np\n\nclass ImprovedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5)\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "ImprovedHybridPSOADE", "description": "Improving the EnhancedHybridPSOADE algorithm by adding an adaptive mutation rate based on population diversity.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "metadata": {"aucs": [0.2436554980943605, 0.23511701096137183, 0.23899026152034908, 0.2131811724338475, 0.16665121040116304, 0.23555420154002538, 0.2037310255757122, 0.226936231015488, 0.12522926042769178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031664757799609644, 0.049773353240644025, 0.04418535158926118, 0.03921106015813114, 0.05655599665909761, 0.06157916914683592, 0.03964185015372568, 0.04189236774137439, 0.045990011838903944, 0.04003582270300121, 0.035467117188530906, 0.019249014691440247, 0.06031093512900676, 0.05814786205987543, 0.033878046119614424, 0.028611329105285965, 0.026127383974688057, 0.0056093785347201, 0.1023657591419509, 0.055083489449481604, 0.10463051648622645, 0.07886266257230856, 0.06875162115164402, 0.07389282577575196, 0.09998143042281737, 0.07525588067999489, 0.08686212344137656, 0.11149845043916962, 0.0934299583062328, 0.12662266100819253, 0.09365937584630957, 0.0656954950011821, 0.07212924801156173, 0.09025361425134948, 0.05576373641286392, 0.06642567305802316, 0.19165953779025435, 0.15900196605058703, 0.10636924474236076, 0.10750789185143583, 0.15611044229495308, 0.1170681640689889, 0.13267905938348667, 0.13563827022311215, 0.1276118295934251, 0.024122396560943504, 0.0034533751765054577, 0.06617525181406037, 0.03821103083485178, 0.06527032908109176, 0.04247559908927834, 0.047948317136556895, 0.03393332898374446, 0.05656599131617934, 0.07944601409777297, 0.0341201137486179, 0.04619887032467518, 0.04822386829288827, 0.06408235026812148, 0.025878223742320516, 0.03837650967873418, 0.03890686402301069, 0.016577858834888493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06054477753879961, 0.026983160116444527, 0.05569923103518015, 0.0599553723572841, 0.03459991192295453, 0.04672506160215362, 0.10358311960926181, 0.053100298155621006, 0.028757000014190237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004141105069301876, 0.014242166446842064, 0.02246211097477846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008991069482826575, 0.005910870890545095, 0.014413885414567673, 0.2348490252212163, 0.21857753938036295, 0.25775769763802714, 0.15673060618973556, 0.19146008139487491, 0.18278080039830524, 0.22568393046005808, 0.2466136781647802, 0.2386261791742681, 0.03324330140102938, 0.021902166129156853, 0.009796161266446335, 0.04734421722113147, 0.030054834499594785, 0.04491825044539022, 0.052790106256249913, 0.053115939890353236, 0.07459570395605986, 0.16079019506196146, 0.20198443415608203, 0.16427828597866423, 0.15724587589160588, 0.1805650305162142, 0.1713081039452491, 0.17645458102275113, 0.16440418238317767, 0.15174763447104256, 0.14656981389116353, 0.1924451078941387, 0.14429376100191715, 0.17729893055945778, 0.17359124599504683, 0.17537905247791186, 0.14531349171684338, 0.23353588828484184, 0.1316307678259232, 0.06965425495034216, 0.10542716802453156, 0.11376241358748718, 0.11020392835425741, 0.13449167665508943, 0.11857077317629405, 0.10739493320056404, 0.1745928530830232, 0.09779323181365884, 0.15011972101031967, 0.19578074891438135, 0.1495870726465106, 0.15226357618604403, 0.14766524047156904, 0.19218889998435984, 0.18011633294431761, 0.15955226942873413, 0.17313210200675422, 0.1281104416885711, 0.12267110513332169, 0.16584836570695338, 0.17100188656348525, 0.1697050625597667, 0.14885313472535, 0.14680487262163844, 0.17711652437821235, 0.1543857819610781, 0.21969794024894596, 0.21897345889425102, 0.1522078904633063, 0.23544846640901929, 0.18332144329723365, 0.2517883813687939, 0.14857327825725297, 0.15862010656120895, 0.18409704520696668, 0.22840679079434378, 0.16051498035690825, 0.16194241219779837, 0.1644690256697957, 0.16415101176016944, 0.21003706131820432, 0.18234353335938935, 0.26971779047369204, 0.11774710055967774, 0.16341584686572752, 0.18618943787845688, 0.18213294006714797, 0.17620901107394615, 0.17467546997104655, 0.17658681471904059, 0.16696249699461807, 0.18941585321129184, 0.18722045525402897, 0.05398225512730659, 0.049140335875981656, 0.057418812529426266, 0.06449957922888094, 0.06405258324561458, 0.043621751363711936, 0.05092995094991548, 0.043201688122026294, 0.058893332073857385]}, "mutation_prompt": null}
{"id": "4d434484-6a9b-4732-b767-ae20cf76c0b3", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i]))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing the mutation strategy by incorporating a dynamic step size based on the fitness landscape's curvature.", "configspace": "", "generation": 33, "fitness": 0.10319308518586492, "feedback": "The algorithm EnhancedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "6aa6142a-15f8-4f98-87f6-31a20b5e898c", "metadata": {"aucs": [0.25183105570146846, 0.24152164016218558, 0.23426433017769832, 0.22558060947157255, 0.1919809389961057, 0.22982201419080128, 0.20856992250829554, 0.2574379500638202, 0.18758198966988726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04879494854117328, 0.058609846622345696, 0.0489596804381599, 0.05800807625746873, 0.04630733879304594, 0.04515710980543064, 0.039639220450669255, 0.04325068144030464, 0.0454573839456236, 0.037113624906236486, 0.03577602117260159, 0.025592105527944664, 0.06665186204870788, 0.03823069418782288, 0.04082322804697758, 0.03401748358202006, 0.03473228829905006, 0.025034778268199998, 0.10424145430213028, 0.06420567073247507, 0.12092919520913525, 0.0865002792573859, 0.08246502948853363, 0.12103892670376826, 0.10692975587404452, 0.08835010896739715, 0.1085474103096089, 0.10260644754681325, 0.07788723146470489, 0.11860017144692048, 0.09333404224418407, 0.10009084330622497, 0.09327080949090993, 0.11658523651153574, 0.07907817375469717, 0.09821333568237811, 0.16486337024237763, 0.15807441403082123, 0.1300450188501121, 0.15538502149379152, 0.1467603273484761, 0.18527129564483025, 0.14097534853736338, 0.1364501924511149, 0.14122609830630062, 0.01939870131538357, 0.04403357651946027, 0.07378679806447963, 0.007332207543379599, 0.08451538397414915, 0.021655644797882068, 0.062268327446742155, 0.05227423885244242, 0.04554145385755981, 0.07210531372299156, 0.0642692360495668, 0.05119257514605946, 0.052424821710373215, 0.05865168868719284, 0.037408631354845956, 0.0610709578484373, 0.026960627201534915, 0.055635221023892845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04131301875210758, 0.05351950757139767, 0.04337687425302317, 0.03212646511496109, 0.013532674519588506, 0.012102374425069673, 0.11474503567914796, 0.06067158870241551, 0.011194902556144415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002987596309115159, 0.005428786862448742, 0.002364248739077479, 0.011788818568289727, 0.0015413631165601682, 0.016953258329140963, 0.02295355569202817, 0.008511987288862155, 0.26304294989776644, 0.23988417346401325, 0.24844404850626944, 0.17511924131505152, 0.19061667995199194, 0.18699624657995384, 0.24470146789905767, 0.25854017413553865, 0.25610648416510595, 0.048872441680333445, 0.027627965281744382, 0.018742639305286857, 0.08400482125765518, 0.039274386295273134, 0.05227400043005814, 0.0567455199072725, 0.04253066811576067, 0.05528759631828162, 0.140683017266499, 0.13440438727737802, 0.12186452984104812, 0.1422755629168938, 0.151245516246716, 0.13382672184422117, 0.13854810016034658, 0.14525764266817842, 0.13495190429202664, 0.18077471363262776, 0.18870743973837778, 0.1547629730327741, 0.20859577136781438, 0.16666587489176077, 0.15888233283502484, 0.1499356951415941, 0.22054866694305664, 0.132945990587517, 0.09100194376454929, 0.10094703035887376, 0.12255388690418845, 0.13890295881592007, 0.13855473058302648, 0.11078301889459541, 0.1048117594484047, 0.16432023670922424, 0.09395550627742033, 0.17407551243473718, 0.15983075823420967, 0.17077285626379657, 0.17718426295258272, 0.15486508728875792, 0.16172102810907962, 0.20108069155487696, 0.18415667912560008, 0.16067518508276446, 0.1512585796460555, 0.14869644533289117, 0.15379921442507416, 0.1675652841570916, 0.15642621928639, 0.15838643517491147, 0.15763402537708604, 0.1634767877066653, 0.15605097738420481, 0.1989555767544623, 0.2688184121700363, 0.14615614806064425, 0.20777691238284568, 0.17043858481534002, 0.22189600336011928, 0.14607506567517525, 0.16516970781695473, 0.1522111849974488, 0.2416633487325741, 0.17268404172127905, 0.16954506805554848, 0.2808541115236277, 0.1658087197510646, 0.26221550813965144, 0.3262813796636085, 0.16779084778223552, 0.12418410321761986, 0.17669590584270367, 0.1849344805356139, 0.1745940481003765, 0.17515595404183582, 0.1719592755582433, 0.1866168464784107, 0.16205269414605972, 0.1779786567247864, 0.17598978567521606, 0.059763576465754364, 0.04671217713625264, 0.06318695394786178, 0.055028095348830686, 0.07219223740426428, 0.06220974545981184, 0.05502649622662725, 0.049768662077913306, 0.06303114380337138]}, "mutation_prompt": null}
{"id": "bdf1f5ad-320e-4915-9019-cfb7c62f97bb", "solution": "import numpy as np\n\nclass CrowdedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            crowding_factors = np.zeros(self.population_size)\n            for i in range(self.population_size):\n                crowding_factors[i] = np.sum(np.square(self.particles[i] - best_global_position))\n            selection_probs = crowding_factors / np.sum(crowding_factors)\n            selected_indices = np.random.choice(range(self.population_size), size=self.population_size, p=selection_probs, replace=True)\n            for i in range(self.population_size):\n                selected_index = selected_indices[i]\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[selected_index] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i]))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "CrowdedHybridPSOADE", "description": "Improving diversity maintenance by introducing a novel crowding-based selection mechanism to preserve diversity within the population.", "configspace": "", "generation": 34, "fitness": 0.09834848391552807, "feedback": "The algorithm CrowdedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "4d434484-6a9b-4732-b767-ae20cf76c0b3", "metadata": {"aucs": [0.24499457194995955, 0.2068049201697547, 0.24674781125329937, 0.22224649656261297, 0.18635479169878832, 0.25465880443009015, 0.1841272332937436, 0.21555049093320955, 0.19239005629118955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048517857251918595, 0.04601682949670516, 0.04212379912441577, 0.04074726087964553, 0.034065283058571705, 0.0465463366282749, 0.055492630520289965, 0.044077169955176076, 0.041824394659583986, 0.027972683424145495, 0.02622096017637654, 0.029481245236972042, 0.044240334803561376, 0.036042749097716875, 0.01997908733417919, 0.028929391101192414, 0.03324769717694254, 0.03753324177208961, 0.07145585559911527, 0.08454313737863706, 0.0858226326871987, 0.0805309757357251, 0.18376363289687347, 0.11492815811844481, 0.10350223283957949, 0.1069302047654408, 0.11816385653476702, 0.07175392603430919, 0.09750554624179275, 0.0761074406120904, 0.08900207613962285, 0.09649645382332817, 0.10863560128344596, 0.08139881994775222, 0.08928131524547989, 0.048601372289628686, 0.18358390320880347, 0.12730155354472172, 0.14459808372661132, 0.1374703480233207, 0.15178517612999753, 0.10169149685845735, 0.12265058118274552, 0.13918260524478776, 0.1441057844847683, 0.02927184583799103, 0.01126553092554039, 0.06836614875165359, 0.026197784891612397, 0.06484140713885278, 0.019162806316389114, 0.059050708779177286, 0.06653070563480756, 0.04289394115383638, 0.059634058175336624, 0.04884894420708785, 0.046016293896926075, 0.05891898516213823, 0.015415116576020904, 0.04070304446817752, 0.049457629129627256, 0.06212319851662651, 0.047727323046259706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03118196898807657, 0.09957404502590417, 0.07003955020313302, 0.07020684782404407, 0.020567632944382575, 0.031056231926546607, 0.04748784334412648, 0.05828746560865605, 0.019388429570664445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009720131453664571, 0.012484988612361803, 0.020482276419562906, 0.0004805910409513281, 9.999999999998899e-05, 0.015204675019836356, 0.004687983751986979, 0.008443386677276954, 0.012544403461884013, 0.2657975901378683, 0.22723219979110965, 0.25588722208062764, 0.22375746420660925, 0.2139979657505119, 0.21067968013458316, 0.2231118227171358, 0.23659572364981774, 0.2457033743954381, 0.03660068191533683, 0.041750295399912596, 0.03353768996469497, 0.04920033098100285, 0.03088179946277614, 0.05599359582592567, 0.04683451318559473, 0.03810747525703262, 0.044217939552288255, 0.1392217404618621, 0.12799434421098232, 0.1946038838733103, 0.16770037309847663, 0.15341468854589402, 0.13515833787128262, 0.1485203485370874, 0.13495367390009705, 0.13944789884343534, 0.14593933765596467, 0.14631327456350096, 0.135631565015367, 0.16462466314464475, 0.16503216293492717, 0.1711737553348357, 0.14862344599343302, 0.21499806378382014, 0.13493505845890819, 0.12939473822085712, 0.13814387710470288, 0.0998749459832663, 0.13014641475271982, 0.13075119541652025, 0.12581833303781464, 0.11633136633478591, 0.13708417011922847, 0.07564087227996641, 0.15907266627970873, 0.14858340377053647, 0.16057841494362513, 0.16901898994427977, 0.15100265687317116, 0.16274436973971584, 0.1652257199268714, 0.14135033125027097, 0.16590108248565993, 0.12477400921438075, 0.1396483249296956, 0.15836544690558074, 0.1673718129383115, 0.15925852712046795, 0.15758204724091718, 0.1495369888986603, 0.15879919654573715, 0.15252145436141695, 0.14630299096930144, 0.24226356556907946, 0.1544003805989751, 0.15983027269514438, 0.16626141967705643, 0.1565592400043594, 0.1281577087987662, 0.16760358384034968, 0.14820841942285, 0.1478695646877659, 0.2026327516940284, 0.1769909877702781, 0.22354579352040793, 0.15383301793119242, 0.14833424327569134, 0.20496511629549197, 0.18676806218667363, 0.17322193850140322, 0.18155675130455506, 0.1800167610376624, 0.21639775338204803, 0.17527222176337232, 0.16994318964801036, 0.16406191125583902, 0.1770054542770415, 0.17538707833815492, 0.17943806180828248, 0.05132774479222246, 0.04630343984368779, 0.04272262118057146, 0.04527123620621443, 0.061931219509457125, 0.052167764537774386, 0.0682553988257516, 0.042268253188746385, 0.05471044682192028]}, "mutation_prompt": null}
{"id": "d13e75d9-cdea-422f-b348-21554a104ed0", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADEImproved(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n        self.inertia_weight = 0.9\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = self.inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i]))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADEImproved", "description": "Improving exploration by adding a dynamic inertia weight factor to balance global and local search capabilities.", "configspace": "", "generation": 35, "fitness": 0.09918652395884353, "feedback": "The algorithm EnhancedHybridPSOADEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "4d434484-6a9b-4732-b767-ae20cf76c0b3", "metadata": {"aucs": [0.24038502404280093, 0.22651321612572783, 0.23474987733372743, 0.2072843896363099, 0.17796609323369827, 0.2370390246389129, 0.20735845521119567, 0.23093526005859988, 0.17581071418186078, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0559376011265027, 0.06030909800171158, 0.048395621061335214, 0.04881954164399249, 0.04359849387842529, 0.054510373828230874, 0.03282007653888597, 0.037594981775128655, 0.050863930850612804, 0.031491713342365446, 0.04420154843743018, 0.03544649704381264, 0.05342890593228877, 0.02875923900487065, 0.016855760989862745, 0.027312293337624194, 0.033173385332189165, 0.024340218276199255, 0.10658818567584205, 0.0637208898384315, 0.14064141331352353, 0.08650245522797417, 0.09452697690383283, 0.09144519194630663, 0.11140401336431294, 0.09510448619701217, 0.11357721196714687, 0.09731284724256362, 0.07425271951317713, 0.08497565648865035, 0.11592764215218354, 0.07885579342078963, 0.09399689609224315, 0.10554073121064667, 0.07959770316220272, 0.08843633813024265, 0.17897692168665713, 0.17009745822888944, 0.1438032411301463, 0.14886750663232373, 0.14287516866557015, 0.1716157580625799, 0.11949342090169279, 0.13913219204219518, 0.13211886669658068, 0.052542560240684155, 0.038447723048076976, 0.014103757141254225, 0.0231632144996069, 0.06688442501326186, 0.023648797594801763, 0.04526563477288914, 0.029846497740880662, 0.0657363521510359, 0.0743927076788945, 0.07700854642615507, 0.053937983544008916, 0.04276538963079435, 0.04805438249065941, 0.010356563301759492, 0.0622039590596809, 0.021058306470553734, 0.05567268842819417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03506350457497609, 0.037300731983975544, 0.03898937964825122, 0.04256230647361703, 0.012972038473268, 0.009775778589294903, 0.08458381999170472, 0.05018893395674373, 0.020905735802713044, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010542439991782393, 0.006663912151483986, 0.0023221895625791245, 0.013608662839266983, 0.0006704791870902893, 0.015582891471833338, 0.02297711340466191, 0.020404077545111088, 0.2523599230359834, 0.24137644617706167, 0.2927424646935768, 0.22208555056112678, 0.23871071875510874, 0.19629150381909444, 0.21957537118104586, 0.24195759630793845, 0.25235274450407497, 0.03834091467247924, 0.04160182864476569, 0.02447306384272474, 0.08814473070575712, 0.037777191345774064, 0.0452874902416055, 0.05425809213359645, 0.04305076968051458, 0.057123902043689334, 0.14061126678403268, 0.14440303709896485, 0.11495321587461371, 0.12870747025879758, 0.14867254983581424, 0.12105649309004607, 0.1401592441224524, 0.12180956656833242, 0.14243835008706907, 0.15536228602131175, 0.19764967230981967, 0.1513475925090032, 0.15025694080255014, 0.1678100004573866, 0.1722456380951034, 0.14994393120449934, 0.20618995804386808, 0.12908253580623585, 0.10015868771622738, 0.1295106130639393, 0.10961778139645106, 0.13603185325476552, 0.12282056583028023, 0.12738818699425136, 0.10057068641247424, 0.16090281520630545, 0.0775030573357739, 0.17407428325756136, 0.16275446936131888, 0.15376008664035812, 0.16071864230562827, 0.16754532924845866, 0.15024502454771138, 0.15569817496946758, 0.18363816945349987, 0.16641054873452688, 0.13985408417364253, 0.13232858047250173, 0.15168063523860487, 0.16404050889277388, 0.15819693572655846, 0.158367248905944, 0.14868976788213728, 0.1597440033062314, 0.1560197770559829, 0.24155043071898985, 0.18449357702759084, 0.1455702054559238, 0.2026981681002349, 0.17378195266836027, 0.21939645195936164, 0.15664899884753247, 0.22558350796499138, 0.18613256999133887, 0.21165804191022686, 0.17704518414227755, 0.19074311791593468, 0.13630221724866043, 0.15766728221030057, 0.14306902575464553, 0.14303543083445625, 0.22891721456825564, 0.11555345258147887, 0.18736086447670341, 0.1604357273191377, 0.17550382142787202, 0.1632042408010862, 0.17158794443432002, 0.1755413628870367, 0.1792343094081814, 0.17917372165653855, 0.17702078671348787, 0.04865126305645151, 0.06167490988279334, 0.047787729891302866, 0.04665738462015889, 0.06800156702049753, 0.04605205351952357, 0.04509797312785191, 0.04831796180323966, 0.05636564882469941]}, "mutation_prompt": null}
{"id": "ef584463-79f2-40a3-9c5e-906608e5fe81", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                    self.mutation_rate = 0.1 + 0.1 * np.tanh(fitness - self.best_fitness[i])  # Dynamic mutation rate based on fitness improvement\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i]))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicMutationPSOADE", "description": "Incorporating a dynamic mutation step size based on individual particle fitness improvement and global best fitness for enhanced exploration and exploitation balance.", "configspace": "", "generation": 36, "fitness": 0.10176975674250727, "feedback": "The algorithm EnhancedDynamicMutationPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "4d434484-6a9b-4732-b767-ae20cf76c0b3", "metadata": {"aucs": [0.20575932321269907, 0.24010710531350732, 0.2646839773497399, 0.23652455173966147, 0.2029775047643817, 0.22284820112252346, 0.20631785539832181, 0.22276389086277615, 0.1828446928366908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052637723690916904, 0.041074728381268466, 0.03353526129974893, 0.0735484838968381, 0.042524035674759264, 0.04706829195381923, 0.03503365630702904, 0.04338496758757171, 0.051922605709688985, 0.027981140684692263, 0.03035399712892972, 0.030466789223509982, 0.07234234613648782, 0.03718014307797035, 0.02449668003310712, 0.03379087459282437, 0.022437613521154365, 0.030032311666385092, 0.10482816586305621, 0.0648041226613233, 0.14115258569727962, 0.08326338771757125, 0.09972709963391735, 0.08997344679583508, 0.10937235961398961, 0.09039732544892753, 0.08087968665153733, 0.10457209754179642, 0.05400150246719726, 0.09944411758622118, 0.05747045133751305, 0.11462500149029098, 0.08148054361614743, 0.0965488000935526, 0.07578716366639526, 0.11876924477363959, 0.1909964748238232, 0.11903477586428923, 0.1604171118350518, 0.15664750583386666, 0.14297495248387115, 0.1273215487393642, 0.12325779635410195, 0.1295463034515726, 0.15596115474307604, 0.03544651712431046, 0.03997813672751038, 0.042764937541128756, 0.02303292417636349, 0.05731172725688827, 0.034829206132233614, 0.03385591023595513, 0.04084877728736025, 0.0495734902933882, 0.04469585460779113, 0.075390654466436, 0.0599026654627256, 0.06065088224681581, 0.047994351920226275, 0.0285515263279984, 0.0712206478830778, 0.029697924258452857, 0.0526305049063891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061029943942524034, 0.03391009271210077, 0.04739083444501635, 0.06221904273154011, 0.06800384861802267, 0.0641492782894385, 0.1289470554696096, 0.033669183017685955, 0.024748525589956216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008123740694437553, 0.019779028368957396, 0.012322256268208598, 0.0001303511376732347, 0.005706762878466942, 0.000671824685287925, 0.014987490726645403, 0.006865540123828451, 0.010314904477615183, 0.22775350336980826, 0.22740738431854735, 0.25722345621674436, 0.22771190591237545, 0.1940848820389387, 0.19473958235074873, 0.2512252501708365, 0.28030407786736655, 0.23542594855120647, 0.05091131937046778, 0.03525335980964106, 0.018593420256160842, 0.050184898767302366, 0.042022960318216285, 0.05866758171832409, 0.05437331463125228, 0.041835009907807086, 0.056046564877382465, 0.15250700280461027, 0.13094027285772203, 0.13681355768999315, 0.15113404167596522, 0.13792171705267864, 0.13607884979582108, 0.13639320515508357, 0.12569403001740065, 0.13682408691371872, 0.19075364373974735, 0.17676932862932915, 0.13435443465517016, 0.18621487175843787, 0.17468903853614848, 0.16265101723601105, 0.15031875338105327, 0.20529021149024151, 0.13366831495542808, 0.08019243505476537, 0.12508178921001978, 0.10657287501261636, 0.112324198001585, 0.13183211721761112, 0.1407252402646194, 0.10155624548326903, 0.15628361928967993, 0.09121897373839838, 0.19722648125244502, 0.16724281892183412, 0.16241543037815465, 0.1555330451007334, 0.15813985917827778, 0.18518293728131263, 0.16619591076295692, 0.14811466752931068, 0.15944331363213737, 0.15192706935894063, 0.15024806231014354, 0.15885623774875424, 0.16804874985302287, 0.15675133768697413, 0.15949770722176781, 0.1574897494325982, 0.16033920565011672, 0.14102343452775168, 0.17398816050274724, 0.1561181323834948, 0.16574383722760289, 0.17907145615058362, 0.18028040701880332, 0.3088104058389569, 0.11741139445493898, 0.19798601684615091, 0.1484271284051294, 0.24344450541470997, 0.19478525936020308, 0.1621270185418371, 0.31401171851117704, 0.14202309459803764, 0.15490724042186554, 0.3263100567129539, 0.189153541428966, 0.12980767706822405, 0.18064235607978008, 0.18296219981717055, 0.18048762297582666, 0.1768833120848794, 0.1935275213072175, 0.18205144470101142, 0.19588006186944518, 0.1806557206683317, 0.16414361547535605, 0.058289245412499024, 0.0646070185691544, 0.05749343683070163, 0.05896972168748704, 0.051546495884746246, 0.05832116997224712, 0.04841461716448081, 0.0633797210503948, 0.0654209910626985]}, "mutation_prompt": null}
{"id": "5e33c603-8f8a-492b-935a-547e749ac14f", "solution": "import numpy as np\n\nclass DynamicPopSizeEnhancedHybridPSOADE(EnhancedHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.lower_bound_pop_size = 10\n        self.upper_bound_pop_size = 50\n        self.convergence_threshold = 0.5\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            current_pop_size = self.lower_bound_pop_size + int((self.upper_bound_pop_size - self.lower_bound_pop_size) * np.tanh(population_diversity - self.convergence_threshold))\n            self.update_population_size(current_pop_size)\n            \n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = 0.5 * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i]))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)\n\n    def update_population_size(self, new_size):\n        if new_size > self.population_size:\n            self.particles = np.vstack((self.particles, np.random.uniform(-5.0, 5.0, (new_size - self.population_size, self.dim))))\n            self.velocities = np.vstack((self.velocities, np.zeros((new_size - self.population_size, self.dim))))\n            self.best_positions = np.vstack((self.best_positions, np.random.uniform(-5.0, 5.0, (new_size - self.population_size, self.dim))))\n            self.best_fitness = np.hstack((self.best_fitness, np.full(new_size - self.population_size, np.inf)))\n        elif new_size < self.population_size:\n            indices_to_remove = np.random.choice(np.arange(self.population_size), size=self.population_size - new_size, replace=False)\n            self.particles = np.delete(self.particles, indices_to_remove, axis=0)\n            self.velocities = np.delete(self.velocities, indices_to_remove, axis=0)\n            self.best_positions = np.delete(self.best_positions, indices_to_remove, axis=0)\n            self.best_fitness = np.delete(self.best_fitness, indices_to_remove)\n        self.population_size = new_size", "name": "DynamicPopSizeEnhancedHybridPSOADE", "description": "Enhancing the algorithm by introducing a dynamic population size that adapts based on the convergence rate, promoting exploration and exploitation balance. ", "configspace": "", "generation": 37, "fitness": 0.10177883271524388, "feedback": "The algorithm DynamicPopSizeEnhancedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "4d434484-6a9b-4732-b767-ae20cf76c0b3", "metadata": {"aucs": [0.24102503339984138, 0.19620450888281937, 0.21642952151979034, 0.228951855678601, 0.1998898947712454, 0.22170563376275254, 0.19524952725638123, 0.20008406329941786, 0.2109662680545441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0419463449862415, 0.04476640396970377, 0.06299229782242144, 0.04135984789511027, 0.03829286155370426, 0.04205911011889507, 0.03888408357861628, 0.06989701670819393, 0.056856033936450556, 0.04092249301647444, 0.03192296865643818, 0.05418898497470104, 0.04991167464908319, 0.04262791142087208, 0.0261246539047979, 0.04421174834320396, 0.03566205034923353, 0.027201612034911005, 0.09656853387415665, 0.07007265932367501, 0.08579803449967294, 0.07764578549099466, 0.0831252652323079, 0.07811829131446835, 0.10381282472663311, 0.08924489370619271, 0.0857306904760402, 0.09370061786088424, 0.07374170884215747, 0.062776430637141, 0.12096518646760801, 0.08036189253615211, 0.05524628252871766, 0.05079681522515089, 0.08513183289875303, 0.09327658700793051, 0.1952210554186905, 0.18668081007066117, 0.172014918216421, 0.2099022118693128, 0.16381892580760282, 0.15284995648165, 0.12689426277022176, 0.14832438180280483, 0.15635959001858768, 0.08784038300288088, 0.01715026475941539, 0.023783562757203836, 0.01074433946459652, 0.06672600087455882, 0.002029039312447134, 0.04031577706118383, 0.024336349031031546, 0.03152521090986915, 0.07910475581830267, 0.022299903500208385, 0.011753472976693269, 0.06304126299341284, 0.02314752201807735, 0.03937685124349721, 0.07927740577920761, 0.029470934474842392, 0.02273299740620527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09145630547498751, 0.02321292608848058, 0.0514124303485014, 0.02702240182999671, 0.010800211023554551, 0.057658314493479024, 0.04617757718945592, 0.027236468820783344, 0.03599856706716276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006405300244883283, 0.003022252317039009, 0.03040643951024935, 0.006967501275582988, 0.0037332683532180777, 0.03739602330420089, 0.022123257122941165, 0.00892740226880484, 0.008760989095246252, 0.25061727906224573, 0.23436313636949646, 0.24242387982757185, 0.2118911345296135, 0.17706077023802558, 0.24012845465502797, 0.25850534604146747, 0.2416394181296978, 0.26128556928601787, 0.06929967819534322, 0.039709070264474344, 0.04594064169861323, 0.05445869714461227, 0.050552561943622676, 0.05006003950030902, 0.044137957611644185, 0.030910570387868597, 0.06087841389910831, 0.11768627764861062, 0.14763154935642064, 0.12977073831074526, 0.16043729874064416, 0.145392757375445, 0.1358651695687786, 0.18906910500463803, 0.1387482808490209, 0.14399361596757387, 0.18854104398129368, 0.17950660625872883, 0.20098040034857512, 0.21409683638588506, 0.17307978912495892, 0.19853989406028194, 0.1671408718630235, 0.20572193445014286, 0.17192418461826142, 0.11274125724395412, 0.10124056005495097, 0.15484829737481176, 0.1334738545188653, 0.11270576374175112, 0.12661052548214502, 0.12710902095085874, 0.13572552876481425, 0.12038122150830499, 0.17685347729686096, 0.1524432214738779, 0.16087063898302278, 0.19315853019182494, 0.16985774624418593, 0.1510712635222068, 0.16529238214516828, 0.19701847773323444, 0.1604332811642878, 0.16060568347044768, 0.15878579527355396, 0.1533114121674387, 0.1651366208782491, 0.14378702212616867, 0.16281315847584954, 0.1572095174249014, 0.15683373070175655, 0.1455339013374063, 0.17350527918478942, 0.1491864598694851, 0.1486999851225973, 0.23391960867984984, 0.1790940173887391, 0.22320936683731285, 0.12919233640857564, 0.1598919727807142, 0.22168850407123297, 0.20843055731285487, 0.19553025372816535, 0.12220685608222792, 0.21163238110062255, 0.15743346763555677, 0.22143389685323223, 0.15522799373903395, 0.11363698456631299, 0.28570494678239367, 0.18330416380601566, 0.1813587477476788, 0.17334933373078254, 0.16989367863829774, 0.18251522515533392, 0.17725625676229606, 0.19002170645890426, 0.1759914250660508, 0.2173768495376478, 0.06410109025723909, 0.053097970466042366, 0.0491600544842844, 0.06722731260270154, 0.06149832561396684, 0.07240925084221339, 0.0562994668351563, 0.06728438876003817, 0.05002836977440894]}, "mutation_prompt": null}
{"id": "4e59c0af-3222-40b8-9ce1-8cd47937c153", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i]))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "AdaptiveHybridPSOADE", "description": "Incorporating adaptive inertia weight to balance exploration and exploitation in the particle swarm optimization process.", "configspace": "", "generation": 38, "fitness": 0.10631604350379921, "feedback": "The algorithm AdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "4d434484-6a9b-4732-b767-ae20cf76c0b3", "metadata": {"aucs": [0.2561475170231573, 0.2244274116950017, 0.2581099506691509, 0.2283665891279516, 0.18024861735995146, 0.23520722629076485, 0.19811268243092506, 0.2538375920410173, 0.17501448785788543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04824728749352103, 0.05481841396001996, 0.04228307154525934, 0.04050453993304293, 0.06085603867476819, 0.04681319020898156, 0.04085703962759413, 0.05890356033782518, 0.055935741143458784, 0.039923144573968394, 0.04864588134355996, 0.026944325024106375, 0.05418452714595168, 0.03140670867465056, 0.03146531054549251, 0.039998249981324285, 0.025953857270559322, 0.01957191353070198, 0.10391548797495176, 0.06333081715844513, 0.13979883597920484, 0.08686173933737917, 0.09200878471361229, 0.08614180700105478, 0.10192547242680916, 0.07876830518819822, 0.10658762480157324, 0.13233642316185434, 0.07693632733110967, 0.10322072974070273, 0.11268285448965631, 0.07704768975552156, 0.12193116365627155, 0.1097988582497379, 0.07423335500201467, 0.09682103282669563, 0.1832096564128317, 0.1713760227632034, 0.16592839552620298, 0.12777405094958683, 0.15388337227212812, 0.12727432370594272, 0.14493279565636275, 0.1539983071445542, 0.15821072724431728, 0.07724764438654852, 0.046013803363419536, 0.0704309674069391, 0.03937523315439084, 0.0751994969636458, 0.0019808707637439804, 0.053666490454352234, 0.05219490539812832, 0.05658439476552524, 0.06096675930966944, 0.07327234886266576, 0.049541599467677444, 0.048329288412240046, 0.035803604182875315, 0.04154927738061964, 0.055392170568314913, 0.07425037532454082, 0.07574338489996135, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03950182374742961, 0.048428438852392675, 0.05688114050645254, 0.018198607086674423, 0.008479076371807004, 0.010733140136516495, 0.11449268300351267, 0.0830192932801811, 0.006215908806333381, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009780107752643818, 0.017265193171762783, 0.007730410718692293, 9.999999999998899e-05, 0.00034294919634614285, 0.0005489135336098627, 0.014748200305412906, 0.02232306905035586, 0.012324032134062746, 0.24724044431604042, 0.2344765706916604, 0.2536865488828619, 0.23128515629917712, 0.2364663250883967, 0.17857589886653802, 0.25482750585458824, 0.2572349134445038, 0.23919139893165753, 0.04825645597230288, 0.034334190706296286, 0.028010024471224804, 0.06134817471083365, 0.0394802562375286, 0.056872373532573905, 0.060501442748084666, 0.05014900003450817, 0.05959019557520184, 0.14805453880384722, 0.17149440891746603, 0.13695290826510587, 0.1309197324423872, 0.13413483888961286, 0.17784661243885402, 0.17219165351478005, 0.1352463274712924, 0.14934333343472495, 0.15183779284660504, 0.19720735285035995, 0.15082754630297768, 0.18240024914562258, 0.22226637162482787, 0.19955983967297464, 0.14690933633634218, 0.21487503033409328, 0.13009135185780962, 0.07993709620967748, 0.1223325712363037, 0.1231073130044471, 0.1432809782584401, 0.12311430400287915, 0.14160916627546594, 0.09676572385238702, 0.16292863173004246, 0.08837985648613345, 0.16062925264767658, 0.15953269283235405, 0.19540838632427626, 0.18272085895354395, 0.1543303034378325, 0.15157854463552844, 0.18037588362636503, 0.19303966750098, 0.16320937293022164, 0.15664995643845037, 0.15546851523791816, 0.15496069461673434, 0.16391445902929458, 0.16362416209191855, 0.15856406886364616, 0.15380999754854896, 0.17342013350174768, 0.15619223990868636, 0.22543072595398939, 0.29972463602313415, 0.1450761424981445, 0.20580486646710827, 0.22616405788210736, 0.19465180218638767, 0.14248461402898904, 0.25585653665944497, 0.15211666683135683, 0.2825757469021547, 0.19767220791256046, 0.21103081979063487, 0.24446098755379408, 0.21038534990109292, 0.2513133808266562, 0.25897712568746056, 0.20963132674228313, 0.1503172397935938, 0.18459446334722007, 0.17494767683948298, 0.18616385851135742, 0.1797626894983798, 0.1752305984493744, 0.17445565406055552, 0.18123658966600686, 0.17653524539407572, 0.18736478854438687, 0.064940216423365, 0.05495285852919041, 0.054524787034171074, 0.060364843096711085, 0.06797751824974241, 0.045985690046460914, 0.05857281535047221, 0.05412907891927565, 0.05600751680176541]}, "mutation_prompt": null}
{"id": "df3d03b1-a5db-4642-a8c0-f554b00dab7a", "solution": "import numpy as np\n\nclass AdaptiveHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i]))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "AdaptiveHybridPSOADE", "description": "Incorporating adaptive inertia weight to balance exploration and exploitation in the particle swarm optimization process.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "4e59c0af-3222-40b8-9ce1-8cd47937c153", "metadata": {"aucs": [0.2561475170231573, 0.2244274116950017, 0.2581099506691509, 0.2283665891279516, 0.18024861735995146, 0.23520722629076485, 0.19811268243092506, 0.2538375920410173, 0.17501448785788543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04824728749352103, 0.05481841396001996, 0.04228307154525934, 0.04050453993304293, 0.06085603867476819, 0.04681319020898156, 0.04085703962759413, 0.05890356033782518, 0.055935741143458784, 0.039923144573968394, 0.04864588134355996, 0.026944325024106375, 0.05418452714595168, 0.03140670867465056, 0.03146531054549251, 0.039998249981324285, 0.025953857270559322, 0.01957191353070198, 0.10391548797495176, 0.06333081715844513, 0.13979883597920484, 0.08686173933737917, 0.09200878471361229, 0.08614180700105478, 0.10192547242680916, 0.07876830518819822, 0.10658762480157324, 0.13233642316185434, 0.07693632733110967, 0.10322072974070273, 0.11268285448965631, 0.07704768975552156, 0.12193116365627155, 0.1097988582497379, 0.07423335500201467, 0.09682103282669563, 0.1832096564128317, 0.1713760227632034, 0.16592839552620298, 0.12777405094958683, 0.15388337227212812, 0.12727432370594272, 0.14493279565636275, 0.1539983071445542, 0.15821072724431728, 0.07724764438654852, 0.046013803363419536, 0.0704309674069391, 0.03937523315439084, 0.0751994969636458, 0.0019808707637439804, 0.053666490454352234, 0.05219490539812832, 0.05658439476552524, 0.06096675930966944, 0.07327234886266576, 0.049541599467677444, 0.048329288412240046, 0.035803604182875315, 0.04154927738061964, 0.055392170568314913, 0.07425037532454082, 0.07574338489996135, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03950182374742961, 0.048428438852392675, 0.05688114050645254, 0.018198607086674423, 0.008479076371807004, 0.010733140136516495, 0.11449268300351267, 0.0830192932801811, 0.006215908806333381, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009780107752643818, 0.017265193171762783, 0.007730410718692293, 9.999999999998899e-05, 0.00034294919634614285, 0.0005489135336098627, 0.014748200305412906, 0.02232306905035586, 0.012324032134062746, 0.24724044431604042, 0.2344765706916604, 0.2536865488828619, 0.23128515629917712, 0.2364663250883967, 0.17857589886653802, 0.25482750585458824, 0.2572349134445038, 0.23919139893165753, 0.04825645597230288, 0.034334190706296286, 0.028010024471224804, 0.06134817471083365, 0.0394802562375286, 0.056872373532573905, 0.060501442748084666, 0.05014900003450817, 0.05959019557520184, 0.14805453880384722, 0.17149440891746603, 0.13695290826510587, 0.1309197324423872, 0.13413483888961286, 0.17784661243885402, 0.17219165351478005, 0.1352463274712924, 0.14934333343472495, 0.15183779284660504, 0.19720735285035995, 0.15082754630297768, 0.18240024914562258, 0.22226637162482787, 0.19955983967297464, 0.14690933633634218, 0.21487503033409328, 0.13009135185780962, 0.07993709620967748, 0.1223325712363037, 0.1231073130044471, 0.1432809782584401, 0.12311430400287915, 0.14160916627546594, 0.09676572385238702, 0.16292863173004246, 0.08837985648613345, 0.16062925264767658, 0.15953269283235405, 0.19540838632427626, 0.18272085895354395, 0.1543303034378325, 0.15157854463552844, 0.18037588362636503, 0.19303966750098, 0.16320937293022164, 0.15664995643845037, 0.15546851523791816, 0.15496069461673434, 0.16391445902929458, 0.16362416209191855, 0.15856406886364616, 0.15380999754854896, 0.17342013350174768, 0.15619223990868636, 0.22543072595398939, 0.29972463602313415, 0.1450761424981445, 0.20580486646710827, 0.22616405788210736, 0.19465180218638767, 0.14248461402898904, 0.25585653665944497, 0.15211666683135683, 0.2825757469021547, 0.19767220791256046, 0.21103081979063487, 0.24446098755379408, 0.21038534990109292, 0.2513133808266562, 0.25897712568746056, 0.20963132674228313, 0.1503172397935938, 0.18459446334722007, 0.17494767683948298, 0.18616385851135742, 0.1797626894983798, 0.1752305984493744, 0.17445565406055552, 0.18123658966600686, 0.17653524539407572, 0.18736478854438687, 0.064940216423365, 0.05495285852919041, 0.054524787034171074, 0.060364843096711085, 0.06797751824974241, 0.045985690046460914, 0.05857281535047221, 0.05412907891927565, 0.05600751680176541]}, "mutation_prompt": null}
{"id": "a6b64686-9fe3-4d9d-8690-70bdad9cfae0", "solution": "import numpy as np\n\nclass EnhancedHybridPSOADE(HybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n        self.diversity_threshold = 0.2\n        self.crowding_factor = 0.1\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i] + self.crowding_factor * np.mean(self.velocities, axis=0) * np.tanh(population_diversity - self.diversity_threshold)\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i]))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedHybridPSOADE", "description": "Enhancing diversity maintenance by introducing a crowding factor to encourage exploration and prevent premature convergence.", "configspace": "", "generation": 40, "fitness": 0.1052208633627084, "feedback": "The algorithm EnhancedHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "4e59c0af-3222-40b8-9ce1-8cd47937c153", "metadata": {"aucs": [0.24233689660112046, 0.24847835421276465, 0.24731390231642258, 0.23302547005110397, 0.1871891787549801, 0.2318113460182466, 0.23328369245656488, 0.23281772268948764, 0.17437457995883254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049985703849843466, 0.07813324676198719, 0.029120642295372146, 0.07456878172222481, 0.05547820366490652, 0.061591380239676474, 0.04796870515606588, 0.03931209295856175, 0.04750655003437787, 0.03820730143756701, 0.03871870672813982, 0.044939243862465394, 0.05063062175058952, 0.035744024192855384, 0.036894158395744836, 0.03842880787663594, 0.03353935375183015, 0.027201101966970787, 0.10362504545652396, 0.06484077834709201, 0.14092491373001825, 0.08032083879849938, 0.08781785594024549, 0.1056785545001998, 0.10403683428852295, 0.0810080901923127, 0.10628659555981834, 0.11917855233584174, 0.0702726201524132, 0.11365627767289044, 0.12456485104023962, 0.10144384259242145, 0.12903327971641998, 0.10813030822023517, 0.08514436784998869, 0.0968288579844151, 0.16064990827447567, 0.19381163101227372, 0.14750850107939983, 0.13203540357606902, 0.16150526286449096, 0.13918216917220194, 0.15240724166937925, 0.1451514401572418, 0.14313288129105717, 0.06556664054980132, 0.05007322273179793, 0.030011756061990802, 0.021476637155877887, 0.07214693267339789, 0.03381774489233669, 0.02488265539760215, 0.036537115630516426, 0.0625382196319848, 0.04072580751858901, 0.05658912347238876, 0.06740556332987002, 0.05768029167138955, 0.018762099600901805, 0.043597593221878395, 0.060731420829815974, 0.051389343779308705, 0.054046145468779616, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09332959428179644, 0.05003915048041341, 0.07144833471831968, 0.06258552155613084, 0.01695539642850763, 0.004603240242760931, 0.11487071454041686, 0.04964471773191548, 0.01732487158870677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003329615915861228, 0.016089667982341016, 0.006209393405488095, 0.0016388011878272213, 0.0063024260573836255, 0.000805273495496639, 0.009353837111822028, 0.019499770225250512, 0.009625262958990466, 0.2458374332071458, 0.24071692691719793, 0.25574427408201184, 0.2254276886330957, 0.19469779477840388, 0.18119230932862163, 0.24703563157878594, 0.2586787123804848, 0.23146925885642644, 0.03775277441634184, 0.03989646640325395, 0.025202512498932683, 0.057131889508918565, 0.05337633275352005, 0.057811862493897026, 0.06512527911704435, 0.051928404435339526, 0.05845932226587247, 0.1265307071408579, 0.14535438365063835, 0.12518249513346713, 0.14931692908164673, 0.17423740733559812, 0.1293469516476491, 0.143945585329039, 0.1297740123550506, 0.14286223613275395, 0.1507475568213491, 0.2024265214014972, 0.15027237757958734, 0.20173410834793637, 0.17580996639318214, 0.19033758244983046, 0.15360830278883675, 0.21693224866997118, 0.1367593418269113, 0.1010789673060255, 0.12560521588149098, 0.1057963386480344, 0.13533468031895357, 0.12833599379180138, 0.10440221108810532, 0.11869849472656657, 0.16542106766414066, 0.08236853990841553, 0.17706874797446237, 0.18573303746148162, 0.20309424397686027, 0.15268663793241444, 0.16277648818662516, 0.19457058960598295, 0.15097439554366132, 0.16260557934395614, 0.1657841999852544, 0.13930932543938468, 0.14729954627647224, 0.16343102195892623, 0.16032981953170133, 0.16515010995770896, 0.15273013037641991, 0.15436543792117063, 0.1576437174567118, 0.15966122240863, 0.24488642342944777, 0.26921120777258534, 0.17423402179402858, 0.19073652767902316, 0.17853407313381053, 0.24998232526880038, 0.15291354493925646, 0.17989257129435632, 0.15153988238465022, 0.24865234714052198, 0.2062447065187989, 0.1908633311056981, 0.1843526547362907, 0.199755388034337, 0.2577910672545186, 0.23080190437307502, 0.2229956005392314, 0.17803974321449856, 0.16597494117543488, 0.1962512981329998, 0.18304288808059033, 0.17945130770290252, 0.1711701795710061, 0.18160073028538792, 0.176593241968788, 0.16819553685939315, 0.16744771765120658, 0.06466266630520334, 0.06548777115120341, 0.05887632974868284, 0.059278807882415685, 0.07399620228630843, 0.07058632964553158, 0.06409299489498954, 0.05135818388911484, 0.06218211338078872]}, "mutation_prompt": null}
{"id": "46512b3b-f056-4952-aa61-3e6ae855d427", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Enhancing exploration by introducing a dynamic mutation step size based on individual particle fitness.", "configspace": "", "generation": 41, "fitness": 0.10662024822425346, "feedback": "The algorithm EnhancedAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "4e59c0af-3222-40b8-9ce1-8cd47937c153", "metadata": {"aucs": [0.25275327716313956, 0.23414262405287756, 0.24644887201970178, 0.20454723372261474, 0.19780092061939702, 0.2586594242962955, 0.2378655488433541, 0.24848437174206073, 0.15455092718693453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04048816811988254, 0.06300360257718585, 0.04642772200690992, 0.05018678632948015, 0.07553132616912428, 0.05447875507180311, 0.042243306398646596, 0.04475639913500018, 0.059901751634421796, 0.04621013052401357, 0.03577495555441679, 0.029213915929930945, 0.0533838263926274, 0.03165569762341547, 0.032453333371050386, 0.051740931077560726, 0.026183311608587445, 0.01835666415307391, 0.10463604332695264, 0.058593134681803716, 0.0993567453357862, 0.07569094963389433, 0.08431086775753172, 0.07714513992710748, 0.09840955145711017, 0.07702233563210792, 0.08859857812089067, 0.1536214873330165, 0.06986630627988466, 0.09793455121204331, 0.15148727138208873, 0.09440373554284742, 0.09901297666112063, 0.10070165578808665, 0.07116191934563199, 0.10346163550131693, 0.16012050418952617, 0.19193167020142976, 0.1543589510761456, 0.13713293281853056, 0.15932325913964474, 0.10381409839715072, 0.19134798267159348, 0.1464201743669602, 0.2048683752079653, 0.05167663661758182, 0.015501799369382896, 0.05225353842928526, 0.02110965812748633, 0.08941825065226527, 0.007656893567526968, 0.038089377045122275, 0.031493209464103944, 0.05164465796308393, 0.09918890318711471, 0.05309867214946751, 0.07399316279502277, 0.05744439776083854, 0.01397301873552792, 0.04818262687757979, 0.06255953602420328, 0.07152299433326115, 0.04096511354720711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04331265513241511, 0.06347041436268552, 0.13069316086944893, 0.05271921364307641, 0.04783048101080112, 0.003973243830867279, 0.08455836027699093, 0.028667682328686217, 0.012355342197217012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004159499322373694, 0.013935167681117688, 0.017486796248745273, 9.999999999998899e-05, 0.0004351621379169446, 9.999999999998899e-05, 0.0065981554306170365, 0.030928743934808156, 0.0009370967909446692, 0.23618905910991894, 0.2290059414786526, 0.24758541054933048, 0.22956216124980322, 0.20984842629877354, 0.16837411362919497, 0.27545792326377583, 0.2701508836737022, 0.254824106863092, 0.04185175098329397, 0.02742038699415006, 0.031121100777298127, 0.08371786514238466, 0.043112717840976256, 0.06448138601146924, 0.05346975553792477, 0.05492955587747983, 0.05330069069879151, 0.14288645463283633, 0.13010941282182575, 0.1269303944597241, 0.132505027984399, 0.14963033364466427, 0.15695713732931893, 0.14413006630951264, 0.14371763197551024, 0.14747564861070228, 0.1444757701421806, 0.18581721225902448, 0.13956016782176917, 0.17232996261483424, 0.20403346929700705, 0.16024663449307663, 0.13802997595055821, 0.21456766083755896, 0.13299714427388698, 0.08525961198559895, 0.14018952575729726, 0.10660536723965486, 0.14676736075858954, 0.13469785972578852, 0.12721287096544787, 0.0927666581650406, 0.1865411827100827, 0.09479215842484123, 0.16775209633132382, 0.16805104846835417, 0.17642582408235707, 0.15562693387975446, 0.15499468322578192, 0.18665529964181038, 0.15812564342270563, 0.20300874253497836, 0.1673864178573713, 0.16102127851750137, 0.15755074694434157, 0.16577726575233775, 0.16526430125433056, 0.1578403163182449, 0.15012119899599674, 0.16374252987932136, 0.1712927734668207, 0.15208781574582975, 0.19333674487313068, 0.2858988118706929, 0.15996667763419303, 0.2087805354851031, 0.18631375480263102, 0.24073862860494344, 0.15286870229714566, 0.31263279872674665, 0.29451923821390635, 0.3030201940211785, 0.33656505884036003, 0.20122585136826798, 0.16610764598198346, 0.2587212973467441, 0.1707968754775715, 0.22104373099749663, 0.2319363029766549, 0.14138501191956387, 0.17247677387509952, 0.18314834950686243, 0.1734986540412654, 0.17586898920666083, 0.17275102690583666, 0.17722292547786622, 0.18025217265447901, 0.19207856264488665, 0.18151819445153294, 0.06299033585955827, 0.05584076093610579, 0.054469126977873206, 0.06196600170027544, 0.06780784900272119, 0.040718244720374996, 0.05386338754249298, 0.050331518069415826, 0.05598533917090953]}, "mutation_prompt": null}
{"id": "cbfbf38c-eabd-47be-afb0-fbe6742efb14", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Enhancing exploration by introducing a dynamic mutation step size based on individual particle fitness.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.25275327716313956, 0.23414262405287756, 0.24644887201970178, 0.20454723372261474, 0.19780092061939702, 0.2586594242962955, 0.2378655488433541, 0.24848437174206073, 0.15455092718693453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04048816811988254, 0.06300360257718585, 0.04642772200690992, 0.05018678632948015, 0.07553132616912428, 0.05447875507180311, 0.042243306398646596, 0.04475639913500018, 0.059901751634421796, 0.04621013052401357, 0.03577495555441679, 0.029213915929930945, 0.0533838263926274, 0.03165569762341547, 0.032453333371050386, 0.051740931077560726, 0.026183311608587445, 0.01835666415307391, 0.10463604332695264, 0.058593134681803716, 0.0993567453357862, 0.07569094963389433, 0.08431086775753172, 0.07714513992710748, 0.09840955145711017, 0.07702233563210792, 0.08859857812089067, 0.1536214873330165, 0.06986630627988466, 0.09793455121204331, 0.15148727138208873, 0.09440373554284742, 0.09901297666112063, 0.10070165578808665, 0.07116191934563199, 0.10346163550131693, 0.16012050418952617, 0.19193167020142976, 0.1543589510761456, 0.13713293281853056, 0.15932325913964474, 0.10381409839715072, 0.19134798267159348, 0.1464201743669602, 0.2048683752079653, 0.05167663661758182, 0.015501799369382896, 0.05225353842928526, 0.02110965812748633, 0.08941825065226527, 0.007656893567526968, 0.038089377045122275, 0.031493209464103944, 0.05164465796308393, 0.09918890318711471, 0.05309867214946751, 0.07399316279502277, 0.05744439776083854, 0.01397301873552792, 0.04818262687757979, 0.06255953602420328, 0.07152299433326115, 0.04096511354720711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04331265513241511, 0.06347041436268552, 0.13069316086944893, 0.05271921364307641, 0.04783048101080112, 0.003973243830867279, 0.08455836027699093, 0.028667682328686217, 0.012355342197217012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004159499322373694, 0.013935167681117688, 0.017486796248745273, 9.999999999998899e-05, 0.0004351621379169446, 9.999999999998899e-05, 0.0065981554306170365, 0.030928743934808156, 0.0009370967909446692, 0.23618905910991894, 0.2290059414786526, 0.24758541054933048, 0.22956216124980322, 0.20984842629877354, 0.16837411362919497, 0.27545792326377583, 0.2701508836737022, 0.254824106863092, 0.04185175098329397, 0.02742038699415006, 0.031121100777298127, 0.08371786514238466, 0.043112717840976256, 0.06448138601146924, 0.05346975553792477, 0.05492955587747983, 0.05330069069879151, 0.14288645463283633, 0.13010941282182575, 0.1269303944597241, 0.132505027984399, 0.14963033364466427, 0.15695713732931893, 0.14413006630951264, 0.14371763197551024, 0.14747564861070228, 0.1444757701421806, 0.18581721225902448, 0.13956016782176917, 0.17232996261483424, 0.20403346929700705, 0.16024663449307663, 0.13802997595055821, 0.21456766083755896, 0.13299714427388698, 0.08525961198559895, 0.14018952575729726, 0.10660536723965486, 0.14676736075858954, 0.13469785972578852, 0.12721287096544787, 0.0927666581650406, 0.1865411827100827, 0.09479215842484123, 0.16775209633132382, 0.16805104846835417, 0.17642582408235707, 0.15562693387975446, 0.15499468322578192, 0.18665529964181038, 0.15812564342270563, 0.20300874253497836, 0.1673864178573713, 0.16102127851750137, 0.15755074694434157, 0.16577726575233775, 0.16526430125433056, 0.1578403163182449, 0.15012119899599674, 0.16374252987932136, 0.1712927734668207, 0.15208781574582975, 0.19333674487313068, 0.2858988118706929, 0.15996667763419303, 0.2087805354851031, 0.18631375480263102, 0.24073862860494344, 0.15286870229714566, 0.31263279872674665, 0.29451923821390635, 0.3030201940211785, 0.33656505884036003, 0.20122585136826798, 0.16610764598198346, 0.2587212973467441, 0.1707968754775715, 0.22104373099749663, 0.2319363029766549, 0.14138501191956387, 0.17247677387509952, 0.18314834950686243, 0.1734986540412654, 0.17586898920666083, 0.17275102690583666, 0.17722292547786622, 0.18025217265447901, 0.19207856264488665, 0.18151819445153294, 0.06299033585955827, 0.05584076093610579, 0.054469126977873206, 0.06196600170027544, 0.06780784900272119, 0.040718244720374996, 0.05386338754249298, 0.050331518069415826, 0.05598533917090953]}, "mutation_prompt": null}
{"id": "fef533bf-5e1e-48a1-b67e-17cbc7475017", "solution": "import numpy as np\n\nclass EnhancedRefinedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)\n                        self.velocities[i] *= 1.1  # Adjust velocity after successful mutation for refined exploration", "name": "EnhancedRefinedAdaptiveHybridPSOADE", "description": "Dynamically adapt mutation step size and velocity influence based on particle diversity and global best fitness, respectively, for enhanced exploration and exploitation in optimization.", "configspace": "", "generation": 43, "fitness": 0.10531328851376767, "feedback": "The algorithm EnhancedRefinedAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.2533604034910465, 0.23436349063112194, 0.23567350897699246, 0.2045470678688759, 0.19780415618592861, 0.258659424527764, 0.24119591800487572, 0.2497445067856554, 0.1491717880254826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040275378978413934, 0.052242849110526346, 0.0454983468290826, 0.0685278718486606, 0.08256444594534373, 0.05447917673025604, 0.04228991633766399, 0.054568769636002434, 0.059901751634421796, 0.046238112461455594, 0.03559759871342827, 0.02945690248568389, 0.05337815403233781, 0.03318752440882178, 0.03203690842046525, 0.05173793569903973, 0.02148212237325353, 0.018363386283695382, 0.10463604332695264, 0.05859313626354601, 0.0993567453357862, 0.07569098905483573, 0.08431204846884577, 0.07714707193839554, 0.09840956804158707, 0.07702239547803169, 0.0885975746930926, 0.11214283478775455, 0.06833281555611359, 0.1023232602699603, 0.13734824550346858, 0.09439122338301498, 0.09903026718175367, 0.11058643089561115, 0.06172668661782388, 0.10344353751509006, 0.16012050418952617, 0.16533015424154562, 0.1543589510761456, 0.13208280794181304, 0.18669997198103394, 0.1038110783426287, 0.17561352333597502, 0.16473032594439685, 0.2048590972970764, 0.09383815410236185, 0.014252408890469082, 0.05225353842928526, 0.021118672863471688, 0.08759791267830208, 0.006635986702648755, 0.03808740931150134, 0.05854095729763198, 0.051631924708813504, 0.08309586830949645, 0.05312924103119565, 0.07406383997290489, 0.07356003499932962, 0.01514981417147332, 0.047291012184204395, 0.0625657045554171, 0.07376031051280774, 0.04069566611048103, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04331764863019616, 0.045326187063399304, 0.08974137624316303, 0.021899685268466196, 0.052446295092009265, 0.06672109342286692, 0.08455836027699093, 0.02865501733559961, 0.012355342197217012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00041609703197786896, 0.013748207674980084, 0.017487114987531305, 9.999999999998899e-05, 0.0009817332665156275, 9.999999999998899e-05, 0.00792575557387154, 0.030953961949614306, 0.0009373178978215879, 0.2377858466815036, 0.24350029837473797, 0.24758532204550754, 0.22926303973352802, 0.2109416816714853, 0.19656332074031646, 0.2751759596932901, 0.2701383070750205, 0.2579449710491686, 0.04185175091374038, 0.0274135361962079, 0.031120225713474392, 0.06442126656864344, 0.043158712794596044, 0.06448138601146924, 0.05335311066825488, 0.054934334628301995, 0.054149726002659215, 0.1392608349065746, 0.1239103677995379, 0.1267807156616193, 0.1579774261201603, 0.1414486676644543, 0.15431434199119543, 0.16137132206715865, 0.13926794983737634, 0.13553389672521476, 0.1459601198864442, 0.17307871135855457, 0.14198021110221415, 0.18049586111595906, 0.20404501096173966, 0.1738373992340443, 0.15421709275039497, 0.2180562318239332, 0.13556031960221093, 0.08237804766452972, 0.1281006919639367, 0.10661657926592871, 0.14692465546731182, 0.12252602567722548, 0.1380162183690018, 0.09276259955900001, 0.17043117512753614, 0.09479022372250023, 0.15684918890109745, 0.152551456839785, 0.18547933637247127, 0.1614182674835678, 0.15823336142040056, 0.1902716677200248, 0.17393571433473298, 0.15979529682358518, 0.1668107093784842, 0.15837213251150384, 0.15764500059994846, 0.16576870542724087, 0.16570492097549883, 0.16356570347031063, 0.15012187143767663, 0.16527284144218957, 0.17128287557808275, 0.1542818913591395, 0.18938081557933206, 0.15856741798910412, 0.16061511512515958, 0.18614596062268207, 0.18147666822797404, 0.2409846570367583, 0.15290111502179082, 0.3050946052433303, 0.29453293750733167, 0.3029293962434916, 0.22069537336108136, 0.1735000498434327, 0.16561497065646857, 0.2502035202874887, 0.1851892644561386, 0.22104380499228482, 0.23116388294770818, 0.13926002653783676, 0.17355186751304585, 0.17635073668415913, 0.18211211129121252, 0.1764583938908343, 0.18335618754617788, 0.17439395179849582, 0.1763019088352783, 0.1775038964336212, 0.17774972752242324, 0.06307287695465258, 0.04990039785630829, 0.054987603679722996, 0.05977589465366384, 0.067802172111041, 0.04934848574833761, 0.06507508180004784, 0.04402813795232918, 0.07113051312754992]}, "mutation_prompt": null}
{"id": "8548ccc6-c40e-4060-9866-3c1486de8bb0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = np.min(self.best_fitness)\n            inertia_weight = 0.5 + 0.3 * np.tanh(global_best_fitness - func(self.best_positions[np.argmin(self.best_fitness)])) + 0.2 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness)) + 0.15 * np.tanh(global_best_fitness - func(self.particles[i]))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Enhancing exploration and exploitation by incorporating a dynamic scaling factor for mutation step size based on global best fitness and a novel velocity update mechanism.", "configspace": "", "generation": 44, "fitness": 0.10178246137970431, "feedback": "The algorithm EnhancedAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.2416403404437093, 0.22429154562018427, 0.23921381943823705, 0.169020378646489, 0.1350538517096862, 0.24478142298960248, 0.17980657605221417, 0.19501719051909427, 0.1430800547382145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031320686391634656, 0.06741752808166279, 0.04145020815077349, 0.0358674216004754, 0.05218256448434366, 0.05258503775101997, 0.041602701935247954, 0.05657254339216777, 0.055312303055289114, 0.05060009002887089, 0.0397923030076649, 0.032176304749404694, 0.04844391614588017, 0.04551851988247413, 0.03317890966063264, 0.04275450334729303, 0.02276885907655546, 0.038592789698329355, 0.10199175483235501, 0.053934055795654245, 0.11063054787291748, 0.07590288078640972, 0.06866751358977052, 0.06471386636696097, 0.09234095353450544, 0.06587192579614876, 0.0792042435492516, 0.10989629183074845, 0.09660762074594365, 0.0903162064394557, 0.09002938184565923, 0.08658246016805338, 0.10861043762441969, 0.08763581672517062, 0.05884022736770389, 0.06552118384225758, 0.17765862177619618, 0.18412352387730757, 0.15752288624179034, 0.10361258718886768, 0.10761772571877959, 0.10347599761488013, 0.13411165346157594, 0.13136086396491464, 0.168404045329426, 0.07125979362398793, 0.036328615332478664, 0.08656055260573958, 0.00032840902879083256, 0.07052002485939923, 9.999999999998899e-05, 0.0525064853574253, 0.026292741216583426, 0.03335865509431313, 0.0858797922308624, 0.06196845600431844, 0.058487745287600035, 0.045047769893213796, 0.07857019783902619, 0.06502725961246592, 0.08318515928556558, 0.03974088093532968, 0.04951348788148846, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06598848710218919, 0.045426035357558625, 0.06133407910087407, 0.027472927940042413, 0.030947500429196806, 0.057309093765494756, 0.09791388122114952, 0.04801947421263153, 0.05364397496708173, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03594634562431387, 0.012145235617879724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008836468937332809, 0.006372128200488825, 0.006257127905175741, 0.2550781177500687, 0.22879328025896062, 0.24564953592562155, 0.16251123265575407, 0.1924875359466074, 0.17262638775014438, 0.21633506142301528, 0.2790743412999631, 0.24214778692744754, 0.043334600725450034, 0.021492898930172144, 9.999999999998899e-05, 0.05865443025870076, 0.04580460262512931, 0.04351585858486595, 0.05291857232305741, 0.04389856904225309, 0.06243199942263933, 0.1465020612979111, 0.1511082028873736, 0.12233416907745964, 0.19981187826351643, 0.1436316620453847, 0.14211866580912325, 0.1592120160573609, 0.13265012134432141, 0.13476676262975928, 0.16254172309728532, 0.1704962227006066, 0.15000124550225447, 0.16337863370119576, 0.17672698678153442, 0.16415975783826942, 0.15611749384462215, 0.22296504676852935, 0.12376718212640192, 0.078269834517118, 0.13544323394348357, 0.14426121145158144, 0.10640012430351109, 0.11827851121869992, 0.11504415526484968, 0.10657528800439942, 0.15800105549873966, 0.08215134869593022, 0.1755791518997346, 0.17146158191139893, 0.17815670217032642, 0.19690338984926314, 0.21384104682048355, 0.17195625179837715, 0.21154200366696652, 0.15092344878669406, 0.18958531871616502, 0.1542353503837065, 0.14419459986526018, 0.15278213082951175, 0.1681254390213064, 0.1622089502748444, 0.15270382040045494, 0.1614205815619656, 0.16615401256478124, 0.1526402979254321, 0.21713090445419603, 0.17158935358743688, 0.16780292026453159, 0.22618100748770897, 0.18289026374356077, 0.204492350423208, 0.17135703929685353, 0.29435706471202405, 0.17951572452623854, 0.27848362755280887, 0.18330513801931225, 0.20928381496594972, 0.24365141943715152, 0.185572027874075, 0.128420027236416, 0.25111349099759184, 0.21000976535404703, 0.14082826288100936, 0.17674061508571903, 0.19030170684668168, 0.17186230573999617, 0.201017608348539, 0.17727636670540792, 0.17515389140697812, 0.1799441479441004, 0.19258108520495576, 0.20076356577640053, 0.057736110496079185, 0.05619764498523949, 0.060293135685878796, 0.06439082727192413, 0.05852528644293631, 0.07044422294519304, 0.05249836388524487, 0.04856921790338742, 0.05613143660532893]}, "mutation_prompt": null}
{"id": "bfc5181e-dff5-4765-8aa3-8993c697f0be", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Enhancing exploration by introducing a dynamic mutation step size based on individual particle fitness.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.25275327716313956, 0.23414262405287756, 0.24644887201970178, 0.20454723372261474, 0.19780092061939702, 0.2586594242962955, 0.2378655488433541, 0.24848437174206073, 0.15455092718693453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04048816811988254, 0.06300360257718585, 0.04642772200690992, 0.05018678632948015, 0.07553132616912428, 0.05447875507180311, 0.042243306398646596, 0.04475639913500018, 0.059901751634421796, 0.04621013052401357, 0.03577495555441679, 0.029213915929930945, 0.0533838263926274, 0.03165569762341547, 0.032453333371050386, 0.051740931077560726, 0.026183311608587445, 0.01835666415307391, 0.10463604332695264, 0.058593134681803716, 0.0993567453357862, 0.07569094963389433, 0.08431086775753172, 0.07714513992710748, 0.09840955145711017, 0.07702233563210792, 0.08859857812089067, 0.1536214873330165, 0.06986630627988466, 0.09793455121204331, 0.15148727138208873, 0.09440373554284742, 0.09901297666112063, 0.10070165578808665, 0.07116191934563199, 0.10346163550131693, 0.16012050418952617, 0.19193167020142976, 0.1543589510761456, 0.13713293281853056, 0.15932325913964474, 0.10381409839715072, 0.19134798267159348, 0.1464201743669602, 0.2048683752079653, 0.05167663661758182, 0.015501799369382896, 0.05225353842928526, 0.02110965812748633, 0.08941825065226527, 0.007656893567526968, 0.038089377045122275, 0.031493209464103944, 0.05164465796308393, 0.09918890318711471, 0.05309867214946751, 0.07399316279502277, 0.05744439776083854, 0.01397301873552792, 0.04818262687757979, 0.06255953602420328, 0.07152299433326115, 0.04096511354720711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04331265513241511, 0.06347041436268552, 0.13069316086944893, 0.05271921364307641, 0.04783048101080112, 0.003973243830867279, 0.08455836027699093, 0.028667682328686217, 0.012355342197217012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004159499322373694, 0.013935167681117688, 0.017486796248745273, 9.999999999998899e-05, 0.0004351621379169446, 9.999999999998899e-05, 0.0065981554306170365, 0.030928743934808156, 0.0009370967909446692, 0.23618905910991894, 0.2290059414786526, 0.24758541054933048, 0.22956216124980322, 0.20984842629877354, 0.16837411362919497, 0.27545792326377583, 0.2701508836737022, 0.254824106863092, 0.04185175098329397, 0.02742038699415006, 0.031121100777298127, 0.08371786514238466, 0.043112717840976256, 0.06448138601146924, 0.05346975553792477, 0.05492955587747983, 0.05330069069879151, 0.14288645463283633, 0.13010941282182575, 0.1269303944597241, 0.132505027984399, 0.14963033364466427, 0.15695713732931893, 0.14413006630951264, 0.14371763197551024, 0.14747564861070228, 0.1444757701421806, 0.18581721225902448, 0.13956016782176917, 0.17232996261483424, 0.20403346929700705, 0.16024663449307663, 0.13802997595055821, 0.21456766083755896, 0.13299714427388698, 0.08525961198559895, 0.14018952575729726, 0.10660536723965486, 0.14676736075858954, 0.13469785972578852, 0.12721287096544787, 0.0927666581650406, 0.1865411827100827, 0.09479215842484123, 0.16775209633132382, 0.16805104846835417, 0.17642582408235707, 0.15562693387975446, 0.15499468322578192, 0.18665529964181038, 0.15812564342270563, 0.20300874253497836, 0.1673864178573713, 0.16102127851750137, 0.15755074694434157, 0.16577726575233775, 0.16526430125433056, 0.1578403163182449, 0.15012119899599674, 0.16374252987932136, 0.1712927734668207, 0.15208781574582975, 0.19333674487313068, 0.2858988118706929, 0.15996667763419303, 0.2087805354851031, 0.18631375480263102, 0.24073862860494344, 0.15286870229714566, 0.31263279872674665, 0.29451923821390635, 0.3030201940211785, 0.33656505884036003, 0.20122585136826798, 0.16610764598198346, 0.2587212973467441, 0.1707968754775715, 0.22104373099749663, 0.2319363029766549, 0.14138501191956387, 0.17247677387509952, 0.18314834950686243, 0.1734986540412654, 0.17586898920666083, 0.17275102690583666, 0.17722292547786622, 0.18025217265447901, 0.19207856264488665, 0.18151819445153294, 0.06299033585955827, 0.05584076093610579, 0.054469126977873206, 0.06196600170027544, 0.06780784900272119, 0.040718244720374996, 0.05386338754249298, 0.050331518069415826, 0.05598533917090953]}, "mutation_prompt": null}
{"id": "d188338a-9a63-4c90-8a2b-fdc2528470e2", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.neighborhood_radius = 0.2\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                neighborhood_indices = np.argsort(np.linalg.norm(self.particles - self.particles[i], axis=1))[:int(self.population_size * self.neighborhood_radius)]\n                best_neighbor_index = neighborhood_indices[np.argmin(func(self.particles[neighborhood_indices]))]\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                if func(self.particles[best_neighbor_index]) < self.best_fitness[i]:\n                    self.best_fitness[i] = func(self.particles[best_neighbor_index])\n                    self.best_positions[i] = self.particles[best_neighbor_index].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "ImprovedAdaptiveHybridPSOADE", "description": "Improving diversity maintenance by incorporating a dynamic neighborhood strategy for particle interactions.", "configspace": "", "generation": 46, "fitness": 0.1041960554725398, "feedback": "The algorithm ImprovedAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.13.", "error": "", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.20928320041773552, 0.23903637486526363, 0.2256749183689143, 0.16507907760929086, 0.2460599549848831, 0.26718827128967826, 0.1849666859850153, 0.2734205771068088, 0.18707496334884222, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050159747403110466, 0.037175908451138606, 0.025312041910948935, 0.03972561554534859, 0.06818444840109583, 0.04044198515776243, 0.058009564353543985, 0.03784855655168262, 0.052264558887049284, 0.03494327322644841, 0.02305083063858926, 0.026795091087148504, 0.027907063161388357, 0.0410297483331471, 0.006761076639745789, 0.0437374738707198, 0.007636062257965537, 0.010436650335916009, 0.9703703191108892, 0.1261626386515483, 0.13124676187137863, 0.5891844904897356, 0.12848265740637288, 0.9204459159152473, 0.9268420180585845, 0.6596377254202478, 0.41385647676572124, 0.05236734224280304, 0.05898755898396468, 0.05917509010930444, 0.1141025437830342, 0.054611286783959656, 0.07985430500278234, 0.11854417039435994, 0.054956344534317414, 0.04931844736759616, 0.11932334191205662, 0.1251228366656736, 0.09699168250147083, 0.14195265514051225, 0.10993525454022879, 0.09428256987929928, 0.12699341437517542, 0.15715987824031652, 0.16215924051686015, 9.999999999998899e-05, 0.0017309144981610958, 9.999999999998899e-05, 0.00012404319449710322, 0.06112099675116822, 0.002531263791981986, 0.028536013935932858, 9.999999999998899e-05, 0.006653476927308666, 0.003230041332164535, 0.0610106569818194, 0.01577102976429101, 0.005280342797493565, 0.08789155550639716, 9.999999999998899e-05, 9.999999999998899e-05, 0.004737137273278513, 0.013775357367869057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02665841489703702, 9.999999999998899e-05, 0.04204879908696857, 0.0596510859106385, 0.01698929097875823, 0.02870691550906923, 0.0836418105472958, 0.014953264251513443, 0.018247909320043054, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020678892317977926, 0.008058026970026888, 0.006335598904739004, 9.999999999998899e-05, 0.0014048719063058934, 0.0010564257615452988, 0.029128860752425156, 0.001592711360068333, 0.01890596253202259, 0.1852617915898751, 0.17206047801295976, 0.21000865609070285, 0.2097401591440381, 0.11860371292036764, 0.19946344318948317, 0.17373852472622964, 0.2471446559044127, 0.2027064529943685, 0.025017301232322597, 0.03739684821195988, 0.06356383491157325, 0.049249493193420646, 0.08332127986331783, 0.057910173200870885, 0.03813698647883412, 0.054224567825021275, 0.051671918588542254, 0.1654424324946342, 0.13217952949946066, 0.14516957532642172, 0.12488360351617489, 0.11452053244777094, 0.14621439812132742, 0.13704795082218157, 0.10117899565146671, 0.12854195044110406, 0.12830718551757925, 0.1834447742051657, 0.1424819517679876, 0.1587236280719635, 0.15502485425322898, 0.15848389038228505, 0.14890849034871823, 0.20932053164649156, 0.12758201682522252, 0.07264563280892633, 0.09227320209157819, 0.09816450158710144, 0.1357057580690364, 0.10994240644763653, 0.097808847633022, 0.10322816097330945, 0.1620208345075842, 0.05009408193914022, 0.13190596921286957, 0.136664339773225, 0.1468316121642651, 0.15516855989518374, 0.13766795555780864, 0.1457060959765737, 0.12860486686527817, 0.13145841396376767, 0.13132914975838417, 0.15943163151923923, 0.14491249367189485, 0.14655886764496895, 0.04893576423681656, 0.15721173690264856, 0.14156237570858232, 0.135808390180712, 0.15485323449077182, 0.13440512512223812, 0.16070125316904726, 0.10388629333332067, 0.13804970409612738, 0.14491975267149415, 0.15917193745955083, 0.15352204188240726, 0.09404599354583931, 0.12579946056924218, 0.12709691221036168, 0.17326703496556417, 0.11161818887917341, 0.057849422561468744, 0.14589711212554723, 0.1545618158022184, 0.21626558192383094, 0.12155214467868392, 0.19489151338433408, 0.11411962533163789, 0.1637143921962475, 0.163711226350976, 0.15637766384144247, 0.16004475375069183, 0.17009338765234994, 0.16395649434138782, 0.15772128083076364, 0.16739468501172217, 0.1561153591661194, 0.05509264834584482, 0.04849877891665544, 0.06431325500177532, 0.04781189430821209, 0.05447992192712059, 0.0367313207747626, 0.059053318325609006, 0.03626096959304592, 0.04367291012873398]}, "mutation_prompt": null}
{"id": "27ca68d7-f918-4568-bd77-50344aa7a2de", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Enhancing exploration by introducing a dynamic mutation step size based on individual particle fitness.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.25275327716313956, 0.23414262405287756, 0.24644887201970178, 0.20454723372261474, 0.19780092061939702, 0.2586594242962955, 0.2378655488433541, 0.24848437174206073, 0.15455092718693453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04048816811988254, 0.06300360257718585, 0.04642772200690992, 0.05018678632948015, 0.07553132616912428, 0.05447875507180311, 0.042243306398646596, 0.04475639913500018, 0.059901751634421796, 0.04621013052401357, 0.03577495555441679, 0.029213915929930945, 0.0533838263926274, 0.03165569762341547, 0.032453333371050386, 0.051740931077560726, 0.026183311608587445, 0.01835666415307391, 0.10463604332695264, 0.058593134681803716, 0.0993567453357862, 0.07569094963389433, 0.08431086775753172, 0.07714513992710748, 0.09840955145711017, 0.07702233563210792, 0.08859857812089067, 0.1536214873330165, 0.06986630627988466, 0.09793455121204331, 0.15148727138208873, 0.09440373554284742, 0.09901297666112063, 0.10070165578808665, 0.07116191934563199, 0.10346163550131693, 0.16012050418952617, 0.19193167020142976, 0.1543589510761456, 0.13713293281853056, 0.15932325913964474, 0.10381409839715072, 0.19134798267159348, 0.1464201743669602, 0.2048683752079653, 0.05167663661758182, 0.015501799369382896, 0.05225353842928526, 0.02110965812748633, 0.08941825065226527, 0.007656893567526968, 0.038089377045122275, 0.031493209464103944, 0.05164465796308393, 0.09918890318711471, 0.05309867214946751, 0.07399316279502277, 0.05744439776083854, 0.01397301873552792, 0.04818262687757979, 0.06255953602420328, 0.07152299433326115, 0.04096511354720711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04331265513241511, 0.06347041436268552, 0.13069316086944893, 0.05271921364307641, 0.04783048101080112, 0.003973243830867279, 0.08455836027699093, 0.028667682328686217, 0.012355342197217012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004159499322373694, 0.013935167681117688, 0.017486796248745273, 9.999999999998899e-05, 0.0004351621379169446, 9.999999999998899e-05, 0.0065981554306170365, 0.030928743934808156, 0.0009370967909446692, 0.23618905910991894, 0.2290059414786526, 0.24758541054933048, 0.22956216124980322, 0.20984842629877354, 0.16837411362919497, 0.27545792326377583, 0.2701508836737022, 0.254824106863092, 0.04185175098329397, 0.02742038699415006, 0.031121100777298127, 0.08371786514238466, 0.043112717840976256, 0.06448138601146924, 0.05346975553792477, 0.05492955587747983, 0.05330069069879151, 0.14288645463283633, 0.13010941282182575, 0.1269303944597241, 0.132505027984399, 0.14963033364466427, 0.15695713732931893, 0.14413006630951264, 0.14371763197551024, 0.14747564861070228, 0.1444757701421806, 0.18581721225902448, 0.13956016782176917, 0.17232996261483424, 0.20403346929700705, 0.16024663449307663, 0.13802997595055821, 0.21456766083755896, 0.13299714427388698, 0.08525961198559895, 0.14018952575729726, 0.10660536723965486, 0.14676736075858954, 0.13469785972578852, 0.12721287096544787, 0.0927666581650406, 0.1865411827100827, 0.09479215842484123, 0.16775209633132382, 0.16805104846835417, 0.17642582408235707, 0.15562693387975446, 0.15499468322578192, 0.18665529964181038, 0.15812564342270563, 0.20300874253497836, 0.1673864178573713, 0.16102127851750137, 0.15755074694434157, 0.16577726575233775, 0.16526430125433056, 0.1578403163182449, 0.15012119899599674, 0.16374252987932136, 0.1712927734668207, 0.15208781574582975, 0.19333674487313068, 0.2858988118706929, 0.15996667763419303, 0.2087805354851031, 0.18631375480263102, 0.24073862860494344, 0.15286870229714566, 0.31263279872674665, 0.29451923821390635, 0.3030201940211785, 0.33656505884036003, 0.20122585136826798, 0.16610764598198346, 0.2587212973467441, 0.1707968754775715, 0.22104373099749663, 0.2319363029766549, 0.14138501191956387, 0.17247677387509952, 0.18314834950686243, 0.1734986540412654, 0.17586898920666083, 0.17275102690583666, 0.17722292547786622, 0.18025217265447901, 0.19207856264488665, 0.18151819445153294, 0.06299033585955827, 0.05584076093610579, 0.054469126977873206, 0.06196600170027544, 0.06780784900272119, 0.040718244720374996, 0.05386338754249298, 0.050331518069415826, 0.05598533917090953]}, "mutation_prompt": null}
{"id": "7f7bc32a-25f3-4b4f-82bf-16e8039c04ea", "solution": "import numpy as np\n\nclass EnhancedAdaptiveChaosHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                chaos_factor = np.random.normal(0.5, 0.1, size=self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_factor\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveChaosHybridPSOADE", "description": "Introducing a novel adaptive chaos-based mutation strategy to enhance exploration and exploitation in the optimization process.", "configspace": "", "generation": 48, "fitness": 0.10401170992940469, "feedback": "The algorithm EnhancedAdaptiveChaosHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.25634263828248105, 0.2407051947043669, 0.2753905757461713, 0.21688099898451763, 0.14407219173430963, 0.18920452666234155, 0.25781548658254627, 0.19432031184574994, 0.14914307344589084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05182396541501133, 0.04798448358909935, 0.031638859215564086, 0.06367953311157293, 0.045499216217265936, 0.07918920213986258, 0.0501241403962116, 0.05261853429760488, 0.054504996431699704, 0.046901992500331335, 0.04901225263166653, 0.03506766430532515, 0.04753704760886723, 0.03532925430033307, 0.03582939210511449, 0.03999499202260681, 0.020871025715414326, 0.03920259539236082, 0.09595018480302153, 0.07081814539829212, 0.12435026005423444, 0.07415043444961444, 0.07217933984981706, 0.077750813577527, 0.09925952578585218, 0.0747928714077305, 0.07062530852933668, 0.11980039786302299, 0.07467140546632745, 0.09449474163054783, 0.09938180380606187, 0.09677735650010022, 0.037165086544169945, 0.06654506497116197, 0.06370917345777694, 0.10849830014881523, 0.17605569400833343, 0.1801341212645362, 0.16086538391041338, 0.16213663443321125, 0.15023188458268355, 0.14227264215085156, 0.1292026858289268, 0.12453371774465194, 0.15222046296945613, 0.05696158750002123, 0.017129227548670523, 0.04381764274463518, 0.037459040875018945, 0.046172180130088614, 9.999999999998899e-05, 0.04325821471669711, 0.033854129115809206, 0.04370683376344264, 0.05391659619011713, 0.07909489270994763, 0.04437614194013184, 0.06321802221803408, 0.07088582505842156, 0.06963150949208963, 0.11741994498143249, 0.04369983886033424, 0.05739997599704272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06375394768930542, 0.021856573574091764, 0.0729803960830876, 0.026752218342011247, 0.04587821764831701, 0.01630843314888175, 0.08758910406490505, 0.08345655379723449, 0.07294260370049765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022725969995756046, 0.022685483931959793, 0.010145806894320542, 9.999999999998899e-05, 0.002749976797027154, 0.0010208800190998346, 0.004726064476888836, 0.006924203943911245, 0.01432079213058024, 0.23507918109440384, 0.19027631811515044, 0.25842369200377757, 0.21977705695347816, 0.20392670849656735, 0.2226345011656372, 0.22497919975706027, 0.24979562874177352, 0.26989057872851874, 0.04510616405904855, 0.034591992283762196, 0.03447117791351517, 0.05418839152248489, 0.04152177279660518, 0.06219030118239499, 0.0548650659851142, 0.04918031185630567, 0.045899586455817376, 0.1366962666955085, 0.13170572522785517, 0.13554450564609288, 0.12210653346104738, 0.19977055972577606, 0.155032607454215, 0.15287372473593608, 0.1280478138947121, 0.1703571488083211, 0.1777317518821283, 0.1809745516926604, 0.16611715767945756, 0.19689311069846294, 0.18536416400290645, 0.20983322143470795, 0.1564956622285496, 0.20588317558096259, 0.12240945253858537, 0.1073913310354665, 0.1112854728417848, 0.11919012715676836, 0.13082096608586857, 0.12393372284461801, 0.15764448853981994, 0.10638281916814007, 0.15339428346041295, 0.08078586585931502, 0.15342441668717255, 0.1570527993611851, 0.17534530122604441, 0.14695225905333553, 0.15985880107024242, 0.16878095281653172, 0.1747688912903701, 0.14872720418349472, 0.18594913253883005, 0.1432569276117932, 0.16203759579874533, 0.15699437622116053, 0.15865276957106267, 0.15287153436389866, 0.15860568923449536, 0.1483997045127846, 0.15848116679638968, 0.13469216619026791, 0.2581052542442124, 0.16555936902217727, 0.2134812082458053, 0.16601884317148774, 0.20406886401635538, 0.27547856155849126, 0.12799089252863016, 0.30876992023390726, 0.22315334242029516, 0.28029120655899875, 0.16952056012927075, 0.21364725816379737, 0.19979350352713832, 0.17193574574765502, 0.1809318233734104, 0.21723559687848226, 0.22906390269261023, 0.20267182705676456, 0.18623340647486453, 0.18822476310709157, 0.19519747335668358, 0.1753838542991265, 0.17770935885863692, 0.19706622179347455, 0.18536579491506766, 0.16160128711450472, 0.17541853445507982, 0.06136439492600387, 0.04546482529912832, 0.062177522499991755, 0.05875298681525942, 0.06337707602187415, 0.04963726403899671, 0.052183490657518594, 0.06408996727864502, 0.0627248716462836]}, "mutation_prompt": null}
{"id": "945c1645-406a-4f12-b918-f9cb7ad62e34", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Enhancing exploration by introducing a dynamic mutation step size based on individual particle fitness.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.25275327716313956, 0.23414262405287756, 0.24644887201970178, 0.20454723372261474, 0.19780092061939702, 0.2586594242962955, 0.2378655488433541, 0.24848437174206073, 0.15455092718693453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04048816811988254, 0.06300360257718585, 0.04642772200690992, 0.05018678632948015, 0.07553132616912428, 0.05447875507180311, 0.042243306398646596, 0.04475639913500018, 0.059901751634421796, 0.04621013052401357, 0.03577495555441679, 0.029213915929930945, 0.0533838263926274, 0.03165569762341547, 0.032453333371050386, 0.051740931077560726, 0.026183311608587445, 0.01835666415307391, 0.10463604332695264, 0.058593134681803716, 0.0993567453357862, 0.07569094963389433, 0.08431086775753172, 0.07714513992710748, 0.09840955145711017, 0.07702233563210792, 0.08859857812089067, 0.1536214873330165, 0.06986630627988466, 0.09793455121204331, 0.15148727138208873, 0.09440373554284742, 0.09901297666112063, 0.10070165578808665, 0.07116191934563199, 0.10346163550131693, 0.16012050418952617, 0.19193167020142976, 0.1543589510761456, 0.13713293281853056, 0.15932325913964474, 0.10381409839715072, 0.19134798267159348, 0.1464201743669602, 0.2048683752079653, 0.05167663661758182, 0.015501799369382896, 0.05225353842928526, 0.02110965812748633, 0.08941825065226527, 0.007656893567526968, 0.038089377045122275, 0.031493209464103944, 0.05164465796308393, 0.09918890318711471, 0.05309867214946751, 0.07399316279502277, 0.05744439776083854, 0.01397301873552792, 0.04818262687757979, 0.06255953602420328, 0.07152299433326115, 0.04096511354720711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04331265513241511, 0.06347041436268552, 0.13069316086944893, 0.05271921364307641, 0.04783048101080112, 0.003973243830867279, 0.08455836027699093, 0.028667682328686217, 0.012355342197217012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004159499322373694, 0.013935167681117688, 0.017486796248745273, 9.999999999998899e-05, 0.0004351621379169446, 9.999999999998899e-05, 0.0065981554306170365, 0.030928743934808156, 0.0009370967909446692, 0.23618905910991894, 0.2290059414786526, 0.24758541054933048, 0.22956216124980322, 0.20984842629877354, 0.16837411362919497, 0.27545792326377583, 0.2701508836737022, 0.254824106863092, 0.04185175098329397, 0.02742038699415006, 0.031121100777298127, 0.08371786514238466, 0.043112717840976256, 0.06448138601146924, 0.05346975553792477, 0.05492955587747983, 0.05330069069879151, 0.14288645463283633, 0.13010941282182575, 0.1269303944597241, 0.132505027984399, 0.14963033364466427, 0.15695713732931893, 0.14413006630951264, 0.14371763197551024, 0.14747564861070228, 0.1444757701421806, 0.18581721225902448, 0.13956016782176917, 0.17232996261483424, 0.20403346929700705, 0.16024663449307663, 0.13802997595055821, 0.21456766083755896, 0.13299714427388698, 0.08525961198559895, 0.14018952575729726, 0.10660536723965486, 0.14676736075858954, 0.13469785972578852, 0.12721287096544787, 0.0927666581650406, 0.1865411827100827, 0.09479215842484123, 0.16775209633132382, 0.16805104846835417, 0.17642582408235707, 0.15562693387975446, 0.15499468322578192, 0.18665529964181038, 0.15812564342270563, 0.20300874253497836, 0.1673864178573713, 0.16102127851750137, 0.15755074694434157, 0.16577726575233775, 0.16526430125433056, 0.1578403163182449, 0.15012119899599674, 0.16374252987932136, 0.1712927734668207, 0.15208781574582975, 0.19333674487313068, 0.2858988118706929, 0.15996667763419303, 0.2087805354851031, 0.18631375480263102, 0.24073862860494344, 0.15286870229714566, 0.31263279872674665, 0.29451923821390635, 0.3030201940211785, 0.33656505884036003, 0.20122585136826798, 0.16610764598198346, 0.2587212973467441, 0.1707968754775715, 0.22104373099749663, 0.2319363029766549, 0.14138501191956387, 0.17247677387509952, 0.18314834950686243, 0.1734986540412654, 0.17586898920666083, 0.17275102690583666, 0.17722292547786622, 0.18025217265447901, 0.19207856264488665, 0.18151819445153294, 0.06299033585955827, 0.05584076093610579, 0.054469126977873206, 0.06196600170027544, 0.06780784900272119, 0.040718244720374996, 0.05386338754249298, 0.050331518069415826, 0.05598533917090953]}, "mutation_prompt": null}
{"id": "bd9895e3-fbcd-464a-a61d-960d22517cae", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                \n                velocity_magnitude = np.linalg.norm(self.velocities[i])\n                positional_difference = np.linalg.norm(best_global_position - self.particles[i])\n                adaptive_mutation_step = 0.2 * np.tanh(velocity_magnitude) + 0.1 * np.tanh(positional_difference) + 0.2 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                \n                new_position = self.particles[i] + adaptive_mutation_step * self.velocities[i]  # Adaptive mutation\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Introducing a novel adaptive mutation strategy based on particle velocity magnitude and positional difference to enhance exploration capability.", "configspace": "", "generation": 50, "fitness": 0.08113245427847406, "feedback": "The algorithm EnhancedAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.17387259588340354, 0.19385989704492246, 0.2097788269352221, 0.10379787136210872, 0.08296077218009179, 0.14671616610958627, 0.12403848009555363, 0.12052730317462701, 0.07844583038454311, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021069161882582343, 0.04251778509279591, 0.026926065494189966, 0.041559598441457624, 0.038386241459662185, 0.05399323663589761, 0.06746908681301289, 0.024654588103959596, 0.026284806372758984, 0.02780377674789447, 0.04000846202212993, 0.027387496904879627, 0.05782037592805189, 0.017561269479669184, 0.01812199968039263, 0.019100850840451877, 0.00691201419239218, 0.023482208927063986, 0.0602241914780518, 0.040370184281654065, 0.05992058770769959, 0.05540903581297296, 0.0671780981013983, 0.047642086830030905, 0.06702733653936843, 0.06990918080728714, 0.04918165655152862, 0.10732812941010961, 0.018841886945174302, 0.039311010047929584, 0.08885631478211131, 0.05912143142519599, 0.055354638583278604, 0.06977830896594173, 0.015138030533366154, 9.999999999998899e-05, 0.14599954559348316, 0.12870544374569348, 0.10135859509040279, 0.037779323919384655, 0.07726981121176324, 0.041852100700742856, 0.1334048194994999, 0.10155429988314957, 0.13285121166058367, 0.006959216591717943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021163771024638844, 9.999999999998899e-05, 0.006749103168587345, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016653121706990737, 0.07335706794947894, 9.999999999998899e-05, 0.023252973337712368, 0.04216869839494197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03323172353876802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0959947759519999, 0.08808920894048022, 0.13646904415900774, 0.055656917384296345, 0.027733906005386277, 0.012072313096462173, 0.08266403600148753, 9.999999999998899e-05, 0.0467834299273292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011459099932994654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23385126207538942, 0.15446975100182225, 0.20210104109218985, 0.15041697722323533, 0.14930055907119966, 0.1496571010411062, 0.17894381300167683, 0.2044703826095593, 0.21870593484085088, 0.0010091782951423545, 0.00511824129232008, 9.999999999998899e-05, 0.040124883994204774, 0.04530962351001544, 0.0406502612118782, 0.06318642259918139, 0.04233718895403349, 0.044517158798230594, 0.13238665963998497, 0.1206258536231597, 0.11480866979424409, 0.14103588624078234, 0.14581683989572136, 0.1296136972292561, 0.13248445967917066, 0.11574835620423551, 0.15089137984460899, 0.13535520396973266, 0.14285685860532904, 0.13742922998212304, 0.162299484063276, 0.17435807196186037, 0.1888452154190975, 0.13635485721498042, 0.19028770947541473, 0.11824167228493465, 0.06902702687548112, 0.07825348228599271, 0.08801195739182599, 0.13548826074391795, 0.13437087336831233, 0.12132059072576773, 0.06756126523813022, 0.1336572402353038, 0.07450430698378352, 0.18383844800594462, 0.18098863126235476, 0.18440552630813722, 0.19405231726453265, 0.15019163435152572, 0.20150211234250281, 0.19793880663364327, 0.18747393915560273, 0.16991296943062284, 0.16376619366547407, 0.15643971654213107, 0.16751045487704874, 0.157917673568723, 0.16531078763115403, 0.15151415753064412, 0.14571894338139224, 0.1471861720865003, 0.14761832860918533, 0.13618229952382122, 0.14201048576103237, 0.09857814861545144, 0.18040320528042175, 0.16505213875228275, 0.16770870104585578, 0.11063648117491143, 0.17046191309898873, 0.14244558306381427, 0.04920480652559622, 0.1281818156276917, 0.16070356575957356, 0.06284498457980703, 0.11381660001707683, 0.059850053650984725, 0.23018807770604888, 0.21573238552908192, 0.11798874094100842, 0.1784039130189472, 0.1721825261941793, 0.17724638056512798, 0.16720456241726078, 0.18509732254532818, 0.1680958314238744, 0.1624192937091602, 0.17731375786630665, 0.17391938628781012, 0.06700683660592022, 0.06374175027517825, 0.07103304647435749, 0.06567709019479584, 0.07217271897450339, 0.06453904227555052, 0.06567081928247587, 0.055004522425128766, 0.06511719931607585]}, "mutation_prompt": null}
{"id": "abc926d1-03eb-41a2-b202-8f7227c02548", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position += np.random.normal(0, np.abs(mutation_step * 0.2), size=self.dim) # Introducing Gaussian perturbation with adaptive std\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Improving population diversity by incorporating a Gaussian perturbation with adaptive standard deviation during position updates.", "configspace": "", "generation": 51, "fitness": 0.10269217727602181, "feedback": "The algorithm EnhancedAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.2780520292834011, 0.2217340452288975, 0.23276745017752887, 0.2374020645697127, 0.16549006371420183, 0.24510403324134022, 0.20611467192143418, 0.24144291543860552, 0.15295655274017794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0365966756985594, 0.055128838534162616, 0.03588033734444507, 0.055719792137876145, 0.05888497602434872, 0.06003028076265704, 0.048180298037731384, 0.04791416993939568, 0.08533774764256508, 0.023122128717634194, 0.03626610814544473, 0.02934440675449501, 0.06101540572085229, 0.030883319386988295, 0.03303124899500631, 0.021037243595659838, 0.026263435797042933, 0.03965328611424224, 0.0818084975617891, 0.06133666265186566, 0.12279802336028856, 0.07761546828577448, 0.08262967326988324, 0.07279602545323449, 0.09391341456057711, 0.08131197950095082, 0.07510540725452097, 0.1473064970863479, 0.03973950140240723, 0.0929638463321597, 0.1079561149641517, 0.09255941901675979, 0.08558624300170159, 0.11677912383475997, 0.06181286211819059, 0.05142783972203835, 0.18065048781432236, 0.1568793539881006, 0.10086040164473886, 0.18632846279500204, 0.14239398256117852, 0.10805654144581345, 0.1207229603351494, 0.12623376654289054, 0.1652664313535055, 0.05958765770949559, 0.009897744681671039, 0.02330507541812732, 0.0314465697089954, 0.04780247029996787, 0.01457714945268307, 0.04365963342380508, 0.04836038316193858, 0.08404437172483614, 0.10087835588786476, 0.06146021721658235, 0.035553398029959715, 0.08672206325278908, 0.033596010375940955, 0.09420214009573014, 0.04138842337248294, 0.02661328605601687, 0.03261651950755462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08041966593441352, 0.021334416801200295, 0.12069128453185951, 0.059354722908429025, 0.03535228761145448, 0.06691390863025204, 0.03221248194368176, 0.02322495888101217, 0.023027630933388, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029395326233805363, 0.029123319448808305, 0.020661219052717228, 0.0002746229836823044, 9.999999999998899e-05, 9.999999999998899e-05, 0.018505487844257873, 0.010446329974411306, 0.014062120437304149, 0.2849486549244159, 0.23103451703169975, 0.23630673908182132, 0.2187340734480252, 0.214783046004012, 0.22140593244134765, 0.2337273596210765, 0.26030945455646837, 0.24594179039518127, 0.02269301827663328, 0.03731944366893891, 0.0146200350706438, 0.0684466291164294, 0.03849536779835161, 0.050339589780575844, 0.06272728493551016, 0.04749299453921063, 0.04882737921212432, 0.1634855868038927, 0.12243746641849651, 0.15914756600339464, 0.15803136488868064, 0.13360360843936525, 0.13447770300228712, 0.1471384763346919, 0.1500656263343242, 0.1583665678531324, 0.16819364533389958, 0.15773494142792643, 0.14993632374566512, 0.17530412600230305, 0.17960271849441234, 0.15546951324212077, 0.15374670282155545, 0.2037990287007757, 0.1307392588692552, 0.08659281230312277, 0.11281632826992749, 0.10144552501843396, 0.15495021766086559, 0.14039330208739043, 0.12577699222083905, 0.09487248463268516, 0.15433396273571998, 0.08184915845752494, 0.17222986136927088, 0.15922304237391183, 0.17681582403963747, 0.18332264107222462, 0.17594702334688228, 0.16349197253051828, 0.17486858838651353, 0.18067951358383072, 0.20066127860005267, 0.15280597431423926, 0.1403114347656763, 0.15842613455402277, 0.15666646689085773, 0.16037973458384547, 0.1556639478914874, 0.14926744596836083, 0.1566041824195119, 0.1562799403946481, 0.23225993997937444, 0.14611029639109496, 0.14326798182497658, 0.1962187639561226, 0.17488599692947615, 0.28485022522169334, 0.1530564315905254, 0.19801052731622304, 0.2717214890677615, 0.23199983538458513, 0.18138977478160867, 0.27467550214188363, 0.2658589640973299, 0.16014692253940466, 0.1759787753468116, 0.19417610831740661, 0.2227784690154464, 0.1502080230237669, 0.17503942130214623, 0.17290548304650488, 0.17367642593121513, 0.1796091416524761, 0.17229111763511262, 0.20068516711075512, 0.1697208896748834, 0.1823203132698451, 0.18855450019796194, 0.055590217328552405, 0.0572976912664086, 0.05389975467222807, 0.05253062029467315, 0.05479274427290459, 0.05778586236210448, 0.061737956689460916, 0.059500282593529685, 0.0545213768646059]}, "mutation_prompt": null}
{"id": "64f7991e-e2f0-43fe-91d8-32e048ebe4ef", "solution": "# import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]) + np.std(self.best_fitness))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Improving convergence by introducing adaptive inertia weight based on local fitness diversity.", "configspace": "", "generation": 52, "fitness": 0.03611679250351812, "feedback": "The algorithm EnhancedAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.04.", "error": "", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.0718138109735883, 0.06432460976916532, 0.0916918329009655, 0.08951420741631877, 0.06213311473028338, 0.07709149964077444, 0.07794958097696925, 0.07431020351519546, 0.06710781959496204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014669338533379817, 9.999999999998899e-05, 0.010642355355837574, 0.001218539437521371, 0.006669305046874796, 0.01824644811137477, 9.999999999998899e-05, 0.010673678960087862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019597770043008444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04517568547096129, 0.03366435258513045, 0.04287349165563159, 0.053334933238826654, 0.04687217344623662, 0.03742511286477934, 0.06387964823212877, 0.04898335876294946, 0.03919814743026129, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.011292213577072885, 9.999999999998899e-05, 0.10027004417442908, 0.03775217826057542, 0.006486833957271343, 0.004561771729970299, 0.027252248008640678, 9.999999999998899e-05, 0.02627668515388637, 0.059304632896505116, 0.009907484787565202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1088702730506651, 0.1114042953899661, 0.14837810020606357, 0.09425652285785169, 0.09707895162055225, 0.0957948413568176, 0.1240539521001005, 0.09715863079048503, 0.12104520753741799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006101168768040455, 9.999999999998899e-05, 0.01759818170346239, 9.999999999998899e-05, 9.999999999998899e-05, 0.026763001531589725, 0.07036901900116899, 0.06735406738372463, 0.059328500275339646, 0.0985435782233568, 0.10851959135830935, 0.05642983770908139, 0.08807407285448776, 0.04855577880821127, 0.07725621674899796, 0.0960621934493533, 0.09624794068114839, 0.10359296882550939, 0.10847108935212091, 0.09261411075997383, 0.09311752787600813, 0.11420206329748472, 0.1737669631246248, 0.07784553641409953, 0.033317647089537106, 0.034004755011573295, 0.0378103338228597, 0.044650675553987496, 0.06406307399171562, 0.04630845700666286, 0.05648699256316181, 0.09385144474454099, 0.03456979074465982, 0.0916346253723066, 0.06586408506661079, 0.1334443235715277, 0.1028893985113617, 0.07854632514073145, 0.08853499337089255, 0.12245976138762271, 0.06493636970864736, 0.1261912930780078, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055683465570127155, 0.07465976174787525, 0.08166357691907433, 0.06718651143652299, 0.12078069006322056, 0.06660902120430745, 0.0724518273432373, 0.09643205867477556, 0.053670997913283114, 0.038238731760179334, 0.06533252723421612, 0.02052473107406927, 0.050681820412651124, 0.037379827516166864, 0.04550781131567705, 0.046900275432602556, 0.028606700522414208, 0.04143165207415789, 0.13479405580822146, 0.1283713162032296, 0.14762356991934633, 0.11599401224261496, 0.11401955995800339, 0.12465113207635137, 0.1284980961680372, 0.10862155931137019, 0.14688266491484736, 9.999999999998899e-05, 0.013476807442564187, 0.03139134998907267, 0.027012596730931038, 0.01848549009816358, 0.008260095692050329, 0.011148716375581347, 9.999999999998899e-05, 0.017455033039913137]}, "mutation_prompt": null}
{"id": "803882ef-ecfc-49cc-b1b3-ebba6abf5c62", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.learning_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.learning_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "DynamicAdaptiveHybridPSOADE", "description": "Optimizing Enhanced Adaptive Hybrid PSO-ade algorithm by incorporating a dynamic learning rate adjustment based on population diversity and fitness variation to enhance exploration and exploitation balance.", "configspace": "", "generation": 53, "fitness": 0.10662024822425346, "feedback": "The algorithm DynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.25275327716313956, 0.23414262405287756, 0.24644887201970178, 0.20454723372261474, 0.19780092061939702, 0.2586594242962955, 0.2378655488433541, 0.24848437174206073, 0.15455092718693453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04048816811988254, 0.06300360257718585, 0.04642772200690992, 0.05018678632948015, 0.07553132616912428, 0.05447875507180311, 0.042243306398646596, 0.04475639913500018, 0.059901751634421796, 0.04621013052401357, 0.03577495555441679, 0.029213915929930945, 0.0533838263926274, 0.03165569762341547, 0.032453333371050386, 0.051740931077560726, 0.026183311608587445, 0.01835666415307391, 0.10463604332695264, 0.058593134681803716, 0.0993567453357862, 0.07569094963389433, 0.08431086775753172, 0.07714513992710748, 0.09840955145711017, 0.07702233563210792, 0.08859857812089067, 0.1536214873330165, 0.06986630627988466, 0.09793455121204331, 0.15148727138208873, 0.09440373554284742, 0.09901297666112063, 0.10070165578808665, 0.07116191934563199, 0.10346163550131693, 0.16012050418952617, 0.19193167020142976, 0.1543589510761456, 0.13713293281853056, 0.15932325913964474, 0.10381409839715072, 0.19134798267159348, 0.1464201743669602, 0.2048683752079653, 0.05167663661758182, 0.015501799369382896, 0.05225353842928526, 0.02110965812748633, 0.08941825065226527, 0.007656893567526968, 0.038089377045122275, 0.031493209464103944, 0.05164465796308393, 0.09918890318711471, 0.05309867214946751, 0.07399316279502277, 0.05744439776083854, 0.01397301873552792, 0.04818262687757979, 0.06255953602420328, 0.07152299433326115, 0.04096511354720711, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04331265513241511, 0.06347041436268552, 0.13069316086944893, 0.05271921364307641, 0.04783048101080112, 0.003973243830867279, 0.08455836027699093, 0.028667682328686217, 0.012355342197217012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004159499322373694, 0.013935167681117688, 0.017486796248745273, 9.999999999998899e-05, 0.0004351621379169446, 9.999999999998899e-05, 0.0065981554306170365, 0.030928743934808156, 0.0009370967909446692, 0.23618905910991894, 0.2290059414786526, 0.24758541054933048, 0.22956216124980322, 0.20984842629877354, 0.16837411362919497, 0.27545792326377583, 0.2701508836737022, 0.254824106863092, 0.04185175098329397, 0.02742038699415006, 0.031121100777298127, 0.08371786514238466, 0.043112717840976256, 0.06448138601146924, 0.05346975553792477, 0.05492955587747983, 0.05330069069879151, 0.14288645463283633, 0.13010941282182575, 0.1269303944597241, 0.132505027984399, 0.14963033364466427, 0.15695713732931893, 0.14413006630951264, 0.14371763197551024, 0.14747564861070228, 0.1444757701421806, 0.18581721225902448, 0.13956016782176917, 0.17232996261483424, 0.20403346929700705, 0.16024663449307663, 0.13802997595055821, 0.21456766083755896, 0.13299714427388698, 0.08525961198559895, 0.14018952575729726, 0.10660536723965486, 0.14676736075858954, 0.13469785972578852, 0.12721287096544787, 0.0927666581650406, 0.1865411827100827, 0.09479215842484123, 0.16775209633132382, 0.16805104846835417, 0.17642582408235707, 0.15562693387975446, 0.15499468322578192, 0.18665529964181038, 0.15812564342270563, 0.20300874253497836, 0.1673864178573713, 0.16102127851750137, 0.15755074694434157, 0.16577726575233775, 0.16526430125433056, 0.1578403163182449, 0.15012119899599674, 0.16374252987932136, 0.1712927734668207, 0.15208781574582975, 0.19333674487313068, 0.2858988118706929, 0.15996667763419303, 0.2087805354851031, 0.18631375480263102, 0.24073862860494344, 0.15286870229714566, 0.31263279872674665, 0.29451923821390635, 0.3030201940211785, 0.33656505884036003, 0.20122585136826798, 0.16610764598198346, 0.2587212973467441, 0.1707968754775715, 0.22104373099749663, 0.2319363029766549, 0.14138501191956387, 0.17247677387509952, 0.18314834950686243, 0.1734986540412654, 0.17586898920666083, 0.17275102690583666, 0.17722292547786622, 0.18025217265447901, 0.19207856264488665, 0.18151819445153294, 0.06299033585955827, 0.05584076093610579, 0.054469126977873206, 0.06196600170027544, 0.06780784900272119, 0.040718244720374996, 0.05386338754249298, 0.050331518069415826, 0.05598533917090953]}, "mutation_prompt": null}
{"id": "787dea9b-8f0a-4712-9576-6fd2c3c8d090", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n            best_global_index = np.argmin(self.best_fitness)\n            best_global_position = self.best_positions[best_global_index]\n            for i in range(self.population_size):\n                r1, r2 = np.random.uniform(0, 1, 2)\n                self.velocities[i] = inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i])\n                new_position = self.particles[i] + self.velocities[i]\n                new_position = np.clip(new_position, -5.0, 5.0)\n                if func(new_position) < self.best_fitness[i]:\n                    self.particles[i] = new_position\n                    self.best_fitness[i] = func(new_position)\n                if np.random.uniform() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                    mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness)) + 0.1 * np.tanh(np.linalg.norm(self.particles[i] - best_global_position))\n                    mutated_position = self.particles[i] + mutation_step * mutation_direction\n                    mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                    if func(mutated_position) < self.best_fitness[i]:\n                        self.particles[i] = mutated_position\n                        self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Enhancing exploration and exploitation by incorporating a dynamic adjustment of the mutation step size based on a combination of particle distances and fitness values.", "configspace": "", "generation": 54, "fitness": 0.10467078588610634, "feedback": "The algorithm EnhancedAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.2540289953710936, 0.22961626107464905, 0.24572909383936214, 0.21585187851293997, 0.17967438645319456, 0.22055519937479973, 0.19877977124089818, 0.2500843436825785, 0.18115041272354704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05269639671858439, 0.054734321852197176, 0.041811180172542706, 0.0559351312197196, 0.05121365110626663, 0.044659815426860594, 0.04807686556574553, 0.056606963642466646, 0.05064956697807044, 0.03972593477046793, 0.05551651660945445, 0.02264749113145703, 0.05096058911578205, 0.034353226201864207, 0.028911495947475663, 0.044980008420446804, 0.02962722070987822, 0.035336967248106754, 0.1092553891068535, 0.06136178131109593, 0.13720584671991654, 0.0861930090976859, 0.08304541779128971, 0.08373282258256931, 0.10529993501813462, 0.07971322913727164, 0.10155872433134572, 0.1305437443121309, 0.06968073854718437, 0.12876238973485366, 0.12906040207709868, 0.0757041174336287, 0.11650124158260511, 0.10336343943638626, 0.07760144317675643, 0.09181528891592439, 0.16531891587220693, 0.1593731657240931, 0.16429672379959082, 0.12880155040904917, 0.16312600589056547, 0.11461630294881198, 0.14300432853177403, 0.1571820838736785, 0.1554952411452698, 0.07598079423661397, 0.03044107798641471, 0.06437153133510476, 0.03164551389893733, 0.07448703381768773, 0.005352093824059212, 0.03924107280093536, 0.05053820658018071, 0.041361162239697324, 0.06106427654549662, 0.04837462095558365, 0.04838916611055699, 0.038125451584549386, 0.031212072815058334, 0.0474534652529599, 0.048995831292131475, 0.03960374093728247, 0.061586770450453465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059251890987851, 0.030572463335701627, 0.1175398097572804, 0.02580569891202633, 0.006007577303189682, 0.004512811859500698, 0.08455836027699093, 0.061935673528074386, 0.02495889410146046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016136883474664465, 0.025941885499362938, 0.0043225055736333395, 0.0028370006421312155, 9.999999999998899e-05, 9.999999999998899e-05, 0.009652164292422327, 0.01890473569250084, 0.00914564706473342, 0.2451381834214711, 0.22225663414124697, 0.24776103968684637, 0.22439839045243914, 0.2200811546107726, 0.18736749052855983, 0.23845301835933075, 0.25080600280246457, 0.26275332087520387, 0.03932666531857121, 0.03271438226630108, 0.029406684842981146, 0.0471868405546525, 0.05051728961639723, 0.052497255453140546, 0.09487767507182032, 0.049200644746930866, 0.05717538001274647, 0.15613418978843074, 0.142307378543573, 0.11751056511750413, 0.17578757648438226, 0.15300617632267755, 0.11440266660158849, 0.15949046301727143, 0.12668948466444285, 0.13555749837803854, 0.15059781851786247, 0.1964235945182996, 0.1574331257207523, 0.1787826891173281, 0.1923154404447135, 0.18380629361226553, 0.14892322491921606, 0.22559150033669617, 0.12702781926981965, 0.08348058705901551, 0.11591073245513539, 0.1372482516643898, 0.14337797629837934, 0.13809291801713575, 0.11812132033397571, 0.10687567778130613, 0.16695877341646914, 0.08881969507100329, 0.15608233204200528, 0.15938377848854413, 0.17387567859108533, 0.1652999196980165, 0.16151821607375316, 0.15962070257713457, 0.15309803016746648, 0.16536564210740767, 0.1799662738660558, 0.15175462626663994, 0.1619063807573019, 0.15794531009327206, 0.16324870979443606, 0.16259544159123596, 0.15192443252028787, 0.15315628423242267, 0.17307792354095086, 0.15518653746471012, 0.2257660226143502, 0.16426745076727167, 0.14624280154446057, 0.20763119043437217, 0.16806156121059268, 0.2095577666488624, 0.1369066175886312, 0.24422866056727566, 0.24293420097183993, 0.24602023863563216, 0.25923831203921277, 0.2688783005592962, 0.211662288725727, 0.20987598660393214, 0.2533202479505038, 0.2475480635506745, 0.23081075317514133, 0.1490626978963513, 0.17661656448456964, 0.17491311605398263, 0.173708751689028, 0.17360847971236437, 0.17609651861381048, 0.17444473765851942, 0.18747497552889714, 0.18403249426615798, 0.17489286264762138, 0.06818758233695499, 0.062126164406760664, 0.06239330009777111, 0.07088561159888884, 0.05993380620679711, 0.062240527267053425, 0.06429286521774624, 0.060726454949221575, 0.0584924136161713]}, "mutation_prompt": null}
{"id": "2fa5cf0e-0a34-4952-b32d-b7998c870f51", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedAdaptiveHybridPSOADE", "description": "Introducing a dynamic scaling factor for velocity updates based on individual particle fitness to enhance exploration and exploitation balance.", "configspace": "", "generation": 55, "fitness": 0.11799736100928314, "feedback": "The algorithm EnhancedAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "46512b3b-f056-4952-aa61-3e6ae855d427", "metadata": {"aucs": [0.2725415850665407, 0.24783240302318332, 0.30126772080835174, 0.2261418952778942, 0.221849342015085, 0.2829584183471955, 0.25765224204380277, 0.26200153055429587, 0.23555098314165002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033386859898677734, 0.0676821013944795, 0.05655850327950307, 0.06048094523279757, 0.04827685406828097, 0.06199495799416177, 0.05549104469159005, 0.03953390094425846, 0.06440504292276727, 0.04997176473964704, 0.03060766164660067, 0.049198594346040014, 0.05170192332652224, 0.03709637173039282, 0.04075513866289493, 0.04416021414741644, 0.021756569203451703, 0.03652276531399823, 0.11185508680652112, 0.08495057923196914, 0.1117143908912469, 0.09486965204812348, 0.08285476895016086, 0.10129701199381502, 0.12033750702643753, 0.0802968082431893, 0.09927407014942669, 0.12037950868673852, 0.10153642936998952, 0.12673914990219948, 0.14071633328085098, 0.13565821779715026, 0.11244897690483979, 0.1155373401967218, 0.10097082934328916, 0.08789824263182111, 0.17377168738323212, 0.1563019067203415, 0.14677814375269083, 0.1823200349891373, 0.17185703745785408, 0.16273819054867222, 0.15243913806419407, 0.15240607926551142, 0.17321932029858866, 0.08882905409317432, 0.05535373775161245, 0.08512387163072377, 0.05906889027856288, 0.06751729529183814, 0.02035390080940036, 0.09070753063737225, 0.07740783936157092, 0.06824632552973176, 0.09625518859196347, 0.09649771084064795, 0.08358570201455207, 0.08543274881976559, 0.08162442762617117, 0.08990761105770739, 0.10510621266552556, 0.08707170168706635, 0.11432632456332281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.078237543083023, 0.059833087128730034, 0.07117979624988569, 0.04150797636971115, 0.048735477888917744, 0.05896242161574772, 0.07234524419453647, 0.049924980107763584, 0.09244534087761747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952075928325525, 0.02188171470997402, 0.03720063729737044, 0.0037666940233240798, 0.024764680502524228, 0.003996539131086885, 0.011371698608345415, 0.01332795533566311, 0.0295851188017765, 0.2692409595657659, 0.2877717814185251, 0.267104159917973, 0.204388187010772, 0.219171485023973, 0.2317075979797829, 0.25957304736839526, 0.2663477362333351, 0.27667510419196506, 0.04027069286265961, 0.04408863340552871, 0.010647991663940926, 0.06823640533496278, 0.05703043528101648, 0.06431794871763974, 0.06143642938958105, 0.05460656947266762, 0.06662160505996384, 0.15980917957456953, 0.17139024759982135, 0.17795512206247355, 0.18098385580806764, 0.16577942772266197, 0.14278742053495153, 0.18155691209214764, 0.15275284540581358, 0.2107386336866911, 0.14526826575607443, 0.192903448080326, 0.15651599790508586, 0.21821427771803525, 0.20013299336804768, 0.20771769342675783, 0.17739034197469006, 0.19552723424004936, 0.1442759347870719, 0.09013927279029488, 0.15192825800779552, 0.12317828057756264, 0.14986403769334322, 0.14039758547755554, 0.14845506194918145, 0.10808181780273174, 0.14459816469309061, 0.09457040686104845, 0.18502248741187954, 0.19630121504684972, 0.17106476240891821, 0.17993344435739722, 0.22837076069245155, 0.17748100491251806, 0.16971293497719286, 0.16990413821617745, 0.17070714745257887, 0.1652370890040744, 0.17231908534303353, 0.15963009275504358, 0.1611881718571907, 0.16757445397800297, 0.16072256657874173, 0.15724175013086839, 0.1643805836964397, 0.18836773125503026, 0.17488158784871555, 0.205546330188082, 0.1779905150261597, 0.2755510773715276, 0.1987388345377118, 0.309966222609935, 0.149970392436658, 0.19361720988429143, 0.16231530791549031, 0.36700279496746757, 0.3354310089964607, 0.2607288045954528, 0.268120732838384, 0.1443161417731209, 0.3051051860348817, 0.27380707894624645, 0.17679475691368807, 0.20571769192627232, 0.19013441042827206, 0.19768639876853322, 0.19796246241312065, 0.17775608748235194, 0.18358067501684416, 0.17773735794821555, 0.18339932924285496, 0.19615735311610394, 0.2033410365535132, 0.06553507791907853, 0.059041419785294424, 0.05665145286533002, 0.0769531767806686, 0.06978535315753875, 0.11498911958713487, 0.05784522922184443, 0.05095998734391305, 0.06275595377906762]}, "mutation_prompt": null}
{"id": "f9e1bbd8-287f-4a89-b91c-af19ab7277e6", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        \n    def chaotic_map(self, x):\n        return np.mod((self.chaos_map[0] * x * (1 - x) + self.chaos_map[1] * np.sin(np.pi * x)) * (1 - x), 1.0)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]))\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "ImprovedAdaptiveHybridPSOADE", "description": "Improving the exploration phase by incorporating a chaotic search strategy to enhance population diversity and escape local optima.", "configspace": "", "generation": 56, "fitness": 0.12108553322236985, "feedback": "The algorithm ImprovedAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "2fa5cf0e-0a34-4952-b32d-b7998c870f51", "metadata": {"aucs": [0.2508982254117864, 0.2819941182093536, 0.2887437672092703, 0.2647505455772302, 0.21186344236368782, 0.2665098538631061, 0.27164408376017424, 0.259548522591712, 0.22177703683714933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05216402512296192, 0.0771072447253367, 0.04573468898320221, 0.0601250357703238, 0.06470963685984021, 0.0574135297733821, 0.05336766768185752, 0.03858577856599621, 0.05767736739574647, 0.04820203487713004, 0.041829460614753566, 0.05731621852250102, 0.051495488599314965, 0.03726949508261568, 0.04219389478411251, 0.032078008657272394, 0.042729819671392, 0.037655629636276666, 0.1312094739263362, 0.08000523308587704, 0.0929702923808623, 0.0867434015146551, 0.08987896040984211, 0.11503440643901941, 0.12829012002573015, 0.09051745109260556, 0.07901314688665917, 0.1007039640544195, 0.08355520219638457, 0.10720422394568485, 0.13186683531101862, 0.13457789983862134, 0.09958856983957753, 0.11714039211548155, 0.10720439672295778, 0.10867431950584538, 0.1987001344803604, 0.15102254242161184, 0.1630358734630799, 0.162683486424819, 0.18849704197770567, 0.16320569447326505, 0.15797422971732922, 0.15833768200745657, 0.1893956945010402, 0.07260369794690413, 0.07844827289834955, 0.06756408679203219, 0.06362732303177676, 0.07609095478676231, 0.053042116762150204, 0.07549606975449419, 0.06579272280128767, 0.0624195402106954, 0.1029979072263546, 0.08881853399010509, 0.09653551130666072, 0.06466200769934727, 0.07562561483643493, 0.08473791706914324, 0.09501670292384046, 0.07278393741204514, 0.09187113069675013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04264552540087885, 0.04606145290431973, 0.11264775837459651, 0.06612817491396306, 0.04625009735601526, 0.05598590850045326, 0.12275110143111001, 0.11651081867375446, 0.08688398803060793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02206222216648679, 0.03403769947220803, 0.008979059429037428, 0.008971290728715386, 0.01789649981940078, 0.020809013745267113, 0.034650602244949535, 0.02808178811914408, 0.029966363943383256, 0.2752324476302106, 0.30568002575145314, 0.2606061375013402, 0.25696762347021573, 0.24460073025320184, 0.25233147039243153, 0.2640175729405656, 0.25977363036363155, 0.26561941244687315, 0.028660852063608022, 0.05458325995568025, 0.0186313688468579, 0.07093137982183217, 0.06558578551749505, 0.08323601110800194, 0.06794452630902215, 0.06492303141164779, 0.06203716844203322, 0.15566332174868713, 0.15770269274153847, 0.15680544764166793, 0.18132535003844064, 0.2092627407625488, 0.12253000002482206, 0.17217061933551725, 0.14270402415542394, 0.1386040134807256, 0.15914796911882367, 0.2173320760570524, 0.16135564527225232, 0.22699404394593514, 0.2101798525997558, 0.19677848351368799, 0.1589331839463437, 0.21103203056352182, 0.16129815248314194, 0.08414741089702926, 0.1119767156886845, 0.11965594630776977, 0.18484906345331742, 0.1479762281656375, 0.18512626013503952, 0.10467829749868474, 0.18220059811227352, 0.12011548065106203, 0.1724749133810397, 0.17951128822940388, 0.17161369921812142, 0.17445430949671226, 0.18676757196356664, 0.18675426548521468, 0.1700503920102877, 0.17314037649278058, 0.18656460372753725, 0.15155242808477665, 0.17250316610832883, 0.15849565767611673, 0.16263742695845596, 0.1766861459989928, 0.15617790402450904, 0.1629025774838616, 0.17452107850619814, 0.15570933219850192, 0.18215026879533203, 0.18413187628689198, 0.16920004023912139, 0.3171365760857642, 0.1711962375095376, 0.38706754269034593, 0.2462168983192794, 0.3912180213501939, 0.1660623678064016, 0.36288245995395996, 0.31558132587607457, 0.29875357307965567, 0.2909686476767468, 0.1680885671048562, 0.29711983433983113, 0.2807398627027824, 0.18627796990102896, 0.1808114882373466, 0.19808438340917078, 0.19279795594055626, 0.18512094266613444, 0.1820801748298262, 0.18293949962980727, 0.19070583589118306, 0.18058874585189055, 0.18118794331406285, 0.17928241664235733, 0.058476546455361156, 0.07264476647365714, 0.06971725908099291, 0.05997118645808874, 0.07738661180649087, 0.08191950942335702, 0.06636740041102474, 0.05221791694366862, 0.0683885999340591]}, "mutation_prompt": null}
{"id": "be548e99-dec2-44be-9d84-a98d92523cb1", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        \n    def chaotic_map(self, x):\n        return np.mod((self.chaos_map[0] * x * (1 - x) + self.chaos_map[1] * np.sin(np.pi * x)) * (1 - x), 1.0)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]))\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "ImprovedAdaptiveHybridPSOADE", "description": "Improving the exploration phase by incorporating a chaotic search strategy to enhance population diversity and escape local optima.", "configspace": "", "generation": 57, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f9e1bbd8-287f-4a89-b91c-af19ab7277e6", "metadata": {"aucs": [0.2508982254117864, 0.2819941182093536, 0.2887437672092703, 0.2647505455772302, 0.21186344236368782, 0.2665098538631061, 0.27164408376017424, 0.259548522591712, 0.22177703683714933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05216402512296192, 0.0771072447253367, 0.04573468898320221, 0.0601250357703238, 0.06470963685984021, 0.0574135297733821, 0.05336766768185752, 0.03858577856599621, 0.05767736739574647, 0.04820203487713004, 0.041829460614753566, 0.05731621852250102, 0.051495488599314965, 0.03726949508261568, 0.04219389478411251, 0.032078008657272394, 0.042729819671392, 0.037655629636276666, 0.1312094739263362, 0.08000523308587704, 0.0929702923808623, 0.0867434015146551, 0.08987896040984211, 0.11503440643901941, 0.12829012002573015, 0.09051745109260556, 0.07901314688665917, 0.1007039640544195, 0.08355520219638457, 0.10720422394568485, 0.13186683531101862, 0.13457789983862134, 0.09958856983957753, 0.11714039211548155, 0.10720439672295778, 0.10867431950584538, 0.1987001344803604, 0.15102254242161184, 0.1630358734630799, 0.162683486424819, 0.18849704197770567, 0.16320569447326505, 0.15797422971732922, 0.15833768200745657, 0.1893956945010402, 0.07260369794690413, 0.07844827289834955, 0.06756408679203219, 0.06362732303177676, 0.07609095478676231, 0.053042116762150204, 0.07549606975449419, 0.06579272280128767, 0.0624195402106954, 0.1029979072263546, 0.08881853399010509, 0.09653551130666072, 0.06466200769934727, 0.07562561483643493, 0.08473791706914324, 0.09501670292384046, 0.07278393741204514, 0.09187113069675013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04264552540087885, 0.04606145290431973, 0.11264775837459651, 0.06612817491396306, 0.04625009735601526, 0.05598590850045326, 0.12275110143111001, 0.11651081867375446, 0.08688398803060793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02206222216648679, 0.03403769947220803, 0.008979059429037428, 0.008971290728715386, 0.01789649981940078, 0.020809013745267113, 0.034650602244949535, 0.02808178811914408, 0.029966363943383256, 0.2752324476302106, 0.30568002575145314, 0.2606061375013402, 0.25696762347021573, 0.24460073025320184, 0.25233147039243153, 0.2640175729405656, 0.25977363036363155, 0.26561941244687315, 0.028660852063608022, 0.05458325995568025, 0.0186313688468579, 0.07093137982183217, 0.06558578551749505, 0.08323601110800194, 0.06794452630902215, 0.06492303141164779, 0.06203716844203322, 0.15566332174868713, 0.15770269274153847, 0.15680544764166793, 0.18132535003844064, 0.2092627407625488, 0.12253000002482206, 0.17217061933551725, 0.14270402415542394, 0.1386040134807256, 0.15914796911882367, 0.2173320760570524, 0.16135564527225232, 0.22699404394593514, 0.2101798525997558, 0.19677848351368799, 0.1589331839463437, 0.21103203056352182, 0.16129815248314194, 0.08414741089702926, 0.1119767156886845, 0.11965594630776977, 0.18484906345331742, 0.1479762281656375, 0.18512626013503952, 0.10467829749868474, 0.18220059811227352, 0.12011548065106203, 0.1724749133810397, 0.17951128822940388, 0.17161369921812142, 0.17445430949671226, 0.18676757196356664, 0.18675426548521468, 0.1700503920102877, 0.17314037649278058, 0.18656460372753725, 0.15155242808477665, 0.17250316610832883, 0.15849565767611673, 0.16263742695845596, 0.1766861459989928, 0.15617790402450904, 0.1629025774838616, 0.17452107850619814, 0.15570933219850192, 0.18215026879533203, 0.18413187628689198, 0.16920004023912139, 0.3171365760857642, 0.1711962375095376, 0.38706754269034593, 0.2462168983192794, 0.3912180213501939, 0.1660623678064016, 0.36288245995395996, 0.31558132587607457, 0.29875357307965567, 0.2909686476767468, 0.1680885671048562, 0.29711983433983113, 0.2807398627027824, 0.18627796990102896, 0.1808114882373466, 0.19808438340917078, 0.19279795594055626, 0.18512094266613444, 0.1820801748298262, 0.18293949962980727, 0.19070583589118306, 0.18058874585189055, 0.18118794331406285, 0.17928241664235733, 0.058476546455361156, 0.07264476647365714, 0.06971725908099291, 0.05997118645808874, 0.07738661180649087, 0.08191950942335702, 0.06636740041102474, 0.05221791694366862, 0.0683885999340591]}, "mutation_prompt": null}
{"id": "d0247c6e-18a6-4ebc-b748-7845c168cd15", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        \n    def chaotic_map(self, x, iteration):\n        dynamic_chaos_map = np.array([0.4 + np.sin(0.1*iteration), 0.7 + np.cos(0.05*iteration), 0.9 - np.tanh(0.02*iteration), 0.1 + np.sin(0.03*iteration), 0.3 - np.cos(0.08*iteration)])\n        return np.mod((dynamic_chaos_map[0] * x * (1 - x) + dynamic_chaos_map[1] * np.sin(np.pi * x)) * (1 - x), 1.0)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "DynamicAdaptiveHybridPSOADE", "description": "Introducing dynamic adjustment of chaotic map parameters to adapt to the optimization process for improved exploration.", "configspace": "", "generation": 58, "fitness": 0.12159960323580118, "feedback": "The algorithm DynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "f9e1bbd8-287f-4a89-b91c-af19ab7277e6", "metadata": {"aucs": [0.283706747600628, 0.2559427680248104, 0.26494346386173506, 0.2517936852747652, 0.20139169722611583, 0.26779979962847167, 0.24659009991044667, 0.24634857524585796, 0.2382739673148907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627349992015828, 0.07418646055954792, 0.04369728345602564, 0.062301834197948436, 0.05753907309164297, 0.06047649336295835, 0.05083644864031234, 0.037314801837200706, 0.06447934637509001, 0.04970260864600473, 0.03190894103840258, 0.04933267516195261, 0.050452203766243264, 0.032447077413220726, 0.03915901577160552, 0.027947503883591907, 0.041278889779323036, 0.035598551438404846, 0.11778700719838964, 0.07795393432763509, 0.09544829972637214, 0.08832262879419628, 0.08509052110351312, 0.12600303450856354, 0.1297133610381921, 0.0955637597060961, 0.0965571650298862, 0.12221880854791067, 0.14521560426582636, 0.0932182017469213, 0.1286418422053055, 0.13645756691556632, 0.12919119557233116, 0.11806449703605537, 0.07850348479455738, 0.09195710086953002, 0.228110281180245, 0.1839790834347541, 0.154165133178211, 0.18312284508867738, 0.1689781116256951, 0.15593502772528334, 0.15864432997377098, 0.15483876003464625, 0.20763522385091615, 0.0859340722523042, 0.08560090610589, 0.07567486087105679, 0.08137744402383562, 0.11126951841108512, 0.028993835359450548, 0.0863003505817711, 0.11243657331346091, 0.07654908622536682, 0.0807423310341856, 0.07503730177715584, 0.06648565079456326, 0.07833151993563736, 0.09149846323749733, 0.09476760245710814, 0.11343005615972779, 0.0613760927296253, 0.09635063338862948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05585393109965009, 0.041559296419372505, 0.1039567738347219, 0.07250576449390356, 0.04896936156670617, 0.05310722208051344, 0.1483424154804286, 0.0882195858825704, 0.06935428681488143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021893235296886804, 0.04266695875338189, 0.017126750636681565, 0.007867076727791078, 0.021468382811663522, 0.04934043635351115, 0.04343617482239348, 0.0240203360000949, 0.01985015339253604, 0.28312791932477843, 0.252858732165981, 0.26532921710531776, 0.20582883362979998, 0.24974346184287421, 0.2394430147385299, 0.24800956440199085, 0.2940241879839921, 0.29007206106574546, 0.043797900592487116, 0.047730536660838374, 0.02363663054330678, 0.05948031480805038, 0.07019345820208378, 0.0620248372737755, 0.07245412549959818, 0.053424904968468745, 0.057671819516812994, 0.17519172425084706, 0.1437452215315872, 0.1566866228479954, 0.1551591146751925, 0.16614501486196764, 0.15467648972017833, 0.1478250159901079, 0.15004453322743172, 0.1582618474940526, 0.16732943125954536, 0.2084670950153681, 0.1860868114218831, 0.22508328559665225, 0.1972023190279515, 0.19896418978636965, 0.14195837186096272, 0.21805501663418614, 0.13120651058263944, 0.12197302758078499, 0.13986812718118358, 0.11984119057162057, 0.17509154345428524, 0.15382818617184146, 0.14219759737804494, 0.12210160978336715, 0.17351025508833207, 0.12615721482004227, 0.1871116367585508, 0.19730957334760402, 0.19225352966951514, 0.1990187189203223, 0.19047308317902556, 0.19770207712280496, 0.18559248698879915, 0.1653813500216902, 0.18512920045734127, 0.15410733482784822, 0.16650850880858503, 0.15723117700815636, 0.1652518015353016, 0.15515945739074521, 0.16274423322789555, 0.1598944791466893, 0.15534255663328056, 0.15283529469122537, 0.17933649975980448, 0.1622895705915427, 0.22303513676448505, 0.24766999148332702, 0.17883268854430134, 0.40428994021918085, 0.25365301947005714, 0.2837053314540423, 0.4010141039018117, 0.3879006470659956, 0.31454421365535934, 0.22710363385510113, 0.20160752338749954, 0.1832570981612276, 0.23320344339795862, 0.3561443952177694, 0.23075032168253562, 0.16075212635064873, 0.17720736779853996, 0.18096159261022726, 0.182229724384517, 0.18096270251109137, 0.17621081303475916, 0.1730984699063689, 0.2050029046464864, 0.17249117419870907, 0.18925169996153535, 0.07140993581055011, 0.06283932821707838, 0.05220930390643608, 0.060299927170207934, 0.07755281833081795, 0.05981199593098718, 0.07482120556371297, 0.0574482029872625, 0.08062529609444613]}, "mutation_prompt": null}
{"id": "6c50647d-c135-40aa-89c6-5bf4cd61025b", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        \n    def chaotic_map(self, x, iteration):\n        dynamic_chaos_map = np.array([0.4 + np.sin(0.1*iteration), 0.7 + np.cos(0.05*iteration), 0.9 - np.tanh(0.02*iteration), 0.1 + np.sin(0.03*iteration), 0.3 - np.cos(0.08*iteration)])\n        return np.mod((dynamic_chaos_map[0] * x * (1 - x) + dynamic_chaos_map[1] * np.sin(np.pi * x)) * (1 - x), 1.0)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "DynamicAdaptiveHybridPSOADE", "description": "Introducing dynamic adjustment of chaotic map parameters to adapt to the optimization process for improved exploration.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d0247c6e-18a6-4ebc-b748-7845c168cd15", "metadata": {"aucs": [0.283706747600628, 0.2559427680248104, 0.26494346386173506, 0.2517936852747652, 0.20139169722611583, 0.26779979962847167, 0.24659009991044667, 0.24634857524585796, 0.2382739673148907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627349992015828, 0.07418646055954792, 0.04369728345602564, 0.062301834197948436, 0.05753907309164297, 0.06047649336295835, 0.05083644864031234, 0.037314801837200706, 0.06447934637509001, 0.04970260864600473, 0.03190894103840258, 0.04933267516195261, 0.050452203766243264, 0.032447077413220726, 0.03915901577160552, 0.027947503883591907, 0.041278889779323036, 0.035598551438404846, 0.11778700719838964, 0.07795393432763509, 0.09544829972637214, 0.08832262879419628, 0.08509052110351312, 0.12600303450856354, 0.1297133610381921, 0.0955637597060961, 0.0965571650298862, 0.12221880854791067, 0.14521560426582636, 0.0932182017469213, 0.1286418422053055, 0.13645756691556632, 0.12919119557233116, 0.11806449703605537, 0.07850348479455738, 0.09195710086953002, 0.228110281180245, 0.1839790834347541, 0.154165133178211, 0.18312284508867738, 0.1689781116256951, 0.15593502772528334, 0.15864432997377098, 0.15483876003464625, 0.20763522385091615, 0.0859340722523042, 0.08560090610589, 0.07567486087105679, 0.08137744402383562, 0.11126951841108512, 0.028993835359450548, 0.0863003505817711, 0.11243657331346091, 0.07654908622536682, 0.0807423310341856, 0.07503730177715584, 0.06648565079456326, 0.07833151993563736, 0.09149846323749733, 0.09476760245710814, 0.11343005615972779, 0.0613760927296253, 0.09635063338862948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05585393109965009, 0.041559296419372505, 0.1039567738347219, 0.07250576449390356, 0.04896936156670617, 0.05310722208051344, 0.1483424154804286, 0.0882195858825704, 0.06935428681488143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021893235296886804, 0.04266695875338189, 0.017126750636681565, 0.007867076727791078, 0.021468382811663522, 0.04934043635351115, 0.04343617482239348, 0.0240203360000949, 0.01985015339253604, 0.28312791932477843, 0.252858732165981, 0.26532921710531776, 0.20582883362979998, 0.24974346184287421, 0.2394430147385299, 0.24800956440199085, 0.2940241879839921, 0.29007206106574546, 0.043797900592487116, 0.047730536660838374, 0.02363663054330678, 0.05948031480805038, 0.07019345820208378, 0.0620248372737755, 0.07245412549959818, 0.053424904968468745, 0.057671819516812994, 0.17519172425084706, 0.1437452215315872, 0.1566866228479954, 0.1551591146751925, 0.16614501486196764, 0.15467648972017833, 0.1478250159901079, 0.15004453322743172, 0.1582618474940526, 0.16732943125954536, 0.2084670950153681, 0.1860868114218831, 0.22508328559665225, 0.1972023190279515, 0.19896418978636965, 0.14195837186096272, 0.21805501663418614, 0.13120651058263944, 0.12197302758078499, 0.13986812718118358, 0.11984119057162057, 0.17509154345428524, 0.15382818617184146, 0.14219759737804494, 0.12210160978336715, 0.17351025508833207, 0.12615721482004227, 0.1871116367585508, 0.19730957334760402, 0.19225352966951514, 0.1990187189203223, 0.19047308317902556, 0.19770207712280496, 0.18559248698879915, 0.1653813500216902, 0.18512920045734127, 0.15410733482784822, 0.16650850880858503, 0.15723117700815636, 0.1652518015353016, 0.15515945739074521, 0.16274423322789555, 0.1598944791466893, 0.15534255663328056, 0.15283529469122537, 0.17933649975980448, 0.1622895705915427, 0.22303513676448505, 0.24766999148332702, 0.17883268854430134, 0.40428994021918085, 0.25365301947005714, 0.2837053314540423, 0.4010141039018117, 0.3879006470659956, 0.31454421365535934, 0.22710363385510113, 0.20160752338749954, 0.1832570981612276, 0.23320344339795862, 0.3561443952177694, 0.23075032168253562, 0.16075212635064873, 0.17720736779853996, 0.18096159261022726, 0.182229724384517, 0.18096270251109137, 0.17621081303475916, 0.1730984699063689, 0.2050029046464864, 0.17249117419870907, 0.18925169996153535, 0.07140993581055011, 0.06283932821707838, 0.05220930390643608, 0.060299927170207934, 0.07755281833081795, 0.05981199593098718, 0.07482120556371297, 0.0574482029872625, 0.08062529609444613]}, "mutation_prompt": null}
{"id": "841f7b56-a13d-4c5e-a035-7ca62d068dab", "solution": "import numpy as np\n\nclass ImprovedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def adaptive_mutation(self, fitness, diversity):\n        return 0.1 + 0.1 * np.tanh(fitness - 2 * diversity)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = self.adaptive_mutation(np.mean(self.best_fitness), population_diversity)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "ImprovedDynamicAdaptiveHybridPSOADE", "description": "Improving the solution by introducing an adaptive mutation approach based on individual particle fitness and diversity.", "configspace": "", "generation": 60, "fitness": 0.1110196526220611, "feedback": "The algorithm ImprovedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "d0247c6e-18a6-4ebc-b748-7845c168cd15", "metadata": {"aucs": [0.30551699946513433, 0.30711865373955183, 0.2683399641001354, 0.2487640160805369, 0.2089321302210685, 0.2732969195879613, 0.16145304760502766, 0.13489530371512903, 0.1036823762626804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03126353101823476, 0.06210820917486126, 0.04587053526981111, 0.060605491852961824, 0.06287194284365993, 0.05952940667482376, 0.05400049884731706, 0.03772340709766653, 0.05456903209518771, 0.03478813889004506, 0.016286886357203212, 0.042395565015968306, 0.04873322526480295, 0.04182430251197844, 0.04749095650872892, 0.027214092589848415, 0.03303851793044832, 0.047274203281605476, 0.13647835211858705, 0.08571898019214952, 0.10581612094427761, 0.09521254508100652, 0.08980476340960808, 0.12125025034589598, 0.11044054087959487, 0.08746685951569166, 0.08845461555796752, 0.10123309008100112, 0.10299413240154498, 0.09285852326104649, 0.1256985486844957, 0.13765855637608815, 0.11208262943117875, 0.10863157484548269, 0.05889305582401161, 0.08193633176931958, 0.1856572109034128, 0.19546801371325706, 0.18969834092703453, 0.1746119249994863, 0.1808770160322739, 0.18847299531630413, 0.1535995859530065, 0.15728498989765904, 0.20065055670662812, 0.09518659113639771, 0.11542267442019105, 0.08754486981041976, 0.04542543731129933, 0.05933539780038277, 0.010528074152163946, 0.07771806651118551, 0.0879504665825489, 0.07478377435665262, 0.08289726867488645, 0.07178624128795164, 0.07353419573111819, 0.07289316064334739, 0.11561288323105678, 0.09304755202747328, 0.09395520270285374, 0.07809911956031701, 0.09411367370722179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0748710010332223, 0.07769351877541686, 0.10621217230653801, 0.07078596451526586, 0.04896936156670617, 0.05310301143892926, 0.13756217514796754, 0.09024419806083683, 0.054607616021929095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024817988192027074, 0.03856326556822898, 0.012197395351723372, 0.007492356213085416, 0.02240753193302847, 0.01578006860890291, 0.04805197580639908, 0.034186800088826796, 0.01443453101544434, 0.20032794799155418, 0.17476096619950565, 0.20784177677139537, 0.12450922274974852, 0.163338974621013, 0.15765131812253808, 0.2599978884229378, 0.2621213546111869, 0.28451100514347405, 0.043990842894224946, 0.06534585252342517, 0.028287738045274846, 0.051327929613955714, 0.050638869347526594, 0.06519394808625256, 0.07766355899071054, 0.050241971516339246, 0.05623197354782283, 0.13438889635081164, 0.1437304732508744, 0.13356589775322514, 0.13086807568671155, 0.15484131997315564, 0.16205741174924548, 0.14838296229149905, 0.15095346635644324, 0.17347339012666307, 0.14969446043472057, 0.16906743706434368, 0.1465051631292532, 0.22676721958275026, 0.20394002391809962, 0.19405702484531828, 0.14454722124723285, 0.21880353688995213, 0.11469062190752832, 0.11648168419347238, 0.13374303056943704, 0.11065743294452735, 0.1703514075304463, 0.13598461292385622, 0.13642582455924313, 0.12589188609044977, 0.17613740562494817, 0.12918122195307313, 0.1963280644604234, 0.18708509441800236, 0.1645084789654857, 0.19533769970598092, 0.18848426807624985, 0.1788019905564675, 0.18276415792816425, 0.16357911280170612, 0.1917249407695668, 0.1484128834531503, 0.1631114139355917, 0.17039485867393456, 0.16514725213194414, 0.16443702281429795, 0.162780400027703, 0.1717260350031603, 0.16508767486077502, 0.16208411181808113, 0.20470986606794261, 0.16607444069144772, 0.24763054929607486, 0.24571053218145533, 0.16296431746562556, 0.3256505024968963, 0.13286852583244657, 0.11701922045952617, 0.14897954906872002, 0.29825861321576963, 0.11410167826614159, 0.08110979459020784, 0.17228030819703177, 0.21936301990604956, 0.268873406412962, 0.324405709675591, 0.1462611370378991, 0.11566713375730564, 0.19436418922361787, 0.1766697050422361, 0.18746797280584737, 0.18414420391858333, 0.17553282122037273, 0.1792112029474039, 0.2048825000718023, 0.18044681785633943, 0.1761528050385377, 0.06438750444970387, 0.06388546455040556, 0.05590683414037212, 0.06814500880220253, 0.07332876351903883, 0.0619609737965493, 0.08030965896745079, 0.06065976021568531, 0.06683972617076561]}, "mutation_prompt": null}
{"id": "150d827c-3737-48ba-ba23-86a4da2e3f99", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        \n    def chaotic_map(self, x, iteration):\n        dynamic_chaos_map = np.array([0.4 + np.sin(0.1*iteration), 0.7 + np.cos(0.05*iteration), 0.9 - np.tanh(0.02*iteration), 0.1 + np.sin(0.03*iteration), 0.3 - np.cos(0.08*iteration)])\n        return np.mod((dynamic_chaos_map[0] * x * (1 - x) + dynamic_chaos_map[1] * np.sin(np.pi * x)) * (1 - x), 1.0)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "DynamicAdaptiveHybridPSOADE", "description": "Introducing dynamic adjustment of chaotic map parameters to adapt to the optimization process for improved exploration.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0247c6e-18a6-4ebc-b748-7845c168cd15", "metadata": {"aucs": [0.283706747600628, 0.2559427680248104, 0.26494346386173506, 0.2517936852747652, 0.20139169722611583, 0.26779979962847167, 0.24659009991044667, 0.24634857524585796, 0.2382739673148907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627349992015828, 0.07418646055954792, 0.04369728345602564, 0.062301834197948436, 0.05753907309164297, 0.06047649336295835, 0.05083644864031234, 0.037314801837200706, 0.06447934637509001, 0.04970260864600473, 0.03190894103840258, 0.04933267516195261, 0.050452203766243264, 0.032447077413220726, 0.03915901577160552, 0.027947503883591907, 0.041278889779323036, 0.035598551438404846, 0.11778700719838964, 0.07795393432763509, 0.09544829972637214, 0.08832262879419628, 0.08509052110351312, 0.12600303450856354, 0.1297133610381921, 0.0955637597060961, 0.0965571650298862, 0.12221880854791067, 0.14521560426582636, 0.0932182017469213, 0.1286418422053055, 0.13645756691556632, 0.12919119557233116, 0.11806449703605537, 0.07850348479455738, 0.09195710086953002, 0.228110281180245, 0.1839790834347541, 0.154165133178211, 0.18312284508867738, 0.1689781116256951, 0.15593502772528334, 0.15864432997377098, 0.15483876003464625, 0.20763522385091615, 0.0859340722523042, 0.08560090610589, 0.07567486087105679, 0.08137744402383562, 0.11126951841108512, 0.028993835359450548, 0.0863003505817711, 0.11243657331346091, 0.07654908622536682, 0.0807423310341856, 0.07503730177715584, 0.06648565079456326, 0.07833151993563736, 0.09149846323749733, 0.09476760245710814, 0.11343005615972779, 0.0613760927296253, 0.09635063338862948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05585393109965009, 0.041559296419372505, 0.1039567738347219, 0.07250576449390356, 0.04896936156670617, 0.05310722208051344, 0.1483424154804286, 0.0882195858825704, 0.06935428681488143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021893235296886804, 0.04266695875338189, 0.017126750636681565, 0.007867076727791078, 0.021468382811663522, 0.04934043635351115, 0.04343617482239348, 0.0240203360000949, 0.01985015339253604, 0.28312791932477843, 0.252858732165981, 0.26532921710531776, 0.20582883362979998, 0.24974346184287421, 0.2394430147385299, 0.24800956440199085, 0.2940241879839921, 0.29007206106574546, 0.043797900592487116, 0.047730536660838374, 0.02363663054330678, 0.05948031480805038, 0.07019345820208378, 0.0620248372737755, 0.07245412549959818, 0.053424904968468745, 0.057671819516812994, 0.17519172425084706, 0.1437452215315872, 0.1566866228479954, 0.1551591146751925, 0.16614501486196764, 0.15467648972017833, 0.1478250159901079, 0.15004453322743172, 0.1582618474940526, 0.16732943125954536, 0.2084670950153681, 0.1860868114218831, 0.22508328559665225, 0.1972023190279515, 0.19896418978636965, 0.14195837186096272, 0.21805501663418614, 0.13120651058263944, 0.12197302758078499, 0.13986812718118358, 0.11984119057162057, 0.17509154345428524, 0.15382818617184146, 0.14219759737804494, 0.12210160978336715, 0.17351025508833207, 0.12615721482004227, 0.1871116367585508, 0.19730957334760402, 0.19225352966951514, 0.1990187189203223, 0.19047308317902556, 0.19770207712280496, 0.18559248698879915, 0.1653813500216902, 0.18512920045734127, 0.15410733482784822, 0.16650850880858503, 0.15723117700815636, 0.1652518015353016, 0.15515945739074521, 0.16274423322789555, 0.1598944791466893, 0.15534255663328056, 0.15283529469122537, 0.17933649975980448, 0.1622895705915427, 0.22303513676448505, 0.24766999148332702, 0.17883268854430134, 0.40428994021918085, 0.25365301947005714, 0.2837053314540423, 0.4010141039018117, 0.3879006470659956, 0.31454421365535934, 0.22710363385510113, 0.20160752338749954, 0.1832570981612276, 0.23320344339795862, 0.3561443952177694, 0.23075032168253562, 0.16075212635064873, 0.17720736779853996, 0.18096159261022726, 0.182229724384517, 0.18096270251109137, 0.17621081303475916, 0.1730984699063689, 0.2050029046464864, 0.17249117419870907, 0.18925169996153535, 0.07140993581055011, 0.06283932821707838, 0.05220930390643608, 0.060299927170207934, 0.07755281833081795, 0.05981199593098718, 0.07482120556371297, 0.0574482029872625, 0.08062529609444613]}, "mutation_prompt": null}
{"id": "8f46a5b0-61ee-4704-a6c0-cb010c82189e", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        \n    def chaotic_map(self, x, iteration):\n        dynamic_chaos_map = np.array([0.4 + np.sin(0.1*iteration), 0.7 + np.cos(0.05*iteration), 0.9 - np.tanh(0.02*iteration), 0.1 + np.sin(0.03*iteration), 0.3 - np.cos(0.08*iteration)]) + np.random.uniform(-0.05, 0.05, 5)\n        return np.mod((dynamic_chaos_map[0] * x * (1 - x) + dynamic_chaos_map[1] * np.sin(np.pi * x)) * (1 - x), 1.0)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing population diversity through adaptive chaotic map parameter updates for improved exploration.", "configspace": "", "generation": 62, "fitness": 0.12009538038254729, "feedback": "The algorithm EnhancedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "d0247c6e-18a6-4ebc-b748-7845c168cd15", "metadata": {"aucs": [0.2971565832776889, 0.24102183113108122, 0.310640606308093, 0.245884214266052, 0.29830668275670613, 0.26759637856379537, 0.24060528362178502, 0.2558995199999422, 0.23932654037492795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03940893885707286, 0.07158994574218247, 0.04894628973473192, 0.05731770598053321, 0.0638103828067571, 0.06133836695808237, 0.0460402500837952, 0.0413987199975685, 0.05388554482782948, 0.03589633404261261, 0.03793608522502234, 0.05920266042823219, 0.05948467198595009, 0.048081333242144475, 0.04174090472600567, 0.060933178839331914, 0.030995894031087157, 0.0460859192471218, 0.09654373356112922, 0.07053673653153836, 0.09371478133940714, 0.1014056744724432, 0.09322205088034752, 0.1149391819443164, 0.13750898309448512, 0.07616386401042563, 0.07927361660667698, 0.11830759925475354, 0.05577703629654662, 0.13935513163254276, 0.13426365623361858, 0.0981879494663559, 0.1112571805648962, 0.14234727477176967, 0.09170152855713509, 0.08894238476804839, 0.20439880401025778, 0.19846802870612779, 0.1591669348564677, 0.18952549943356767, 0.1605797184057386, 0.18405571970068302, 0.1361132230034574, 0.172252548364207, 0.18871105938295918, 0.0818306982699174, 0.08605510854769727, 0.08730104793240301, 0.06512298162299535, 0.12289867816831812, 0.026338054574595815, 0.1073979332628604, 0.08726107574168818, 0.07337399475448891, 0.10397491958665073, 0.0963624216554434, 0.09938482178912178, 0.10243076368246729, 0.0987324381170469, 0.10513506490299607, 0.10140199086436263, 0.10782548358829158, 0.08237866244018077, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05831972969885757, 0.04466641151878559, 0.09459302941298231, 0.07563820867351279, 0.054677760415346, 0.03549347403999126, 0.13343053206146938, 0.056238869154125126, 0.07067889476831313, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00902759824653876, 0.0332801275523279, 0.0175318923527088, 0.005196089602162668, 0.015734898073014314, 0.011349575203192241, 0.02482191824631841, 0.009157913737599888, 0.01849107166009012, 0.29242326771301563, 0.25244593675357774, 0.25982773291241723, 0.2649948961853401, 0.22323765027361364, 0.2463920600756222, 0.29093294110462775, 0.27108947899584745, 0.29485447874263104, 0.03575692133324815, 0.04138838892862551, 0.031814462996140325, 0.059359230215529135, 0.062249877854967384, 0.06767321024139128, 0.0760937350717078, 0.05974101455028036, 0.06479311950882782, 0.16345031369964913, 0.2181689402268716, 0.15797675850617865, 0.14551898112132078, 0.16217591727205405, 0.20826184147652005, 0.16220871220997268, 0.15547365443151195, 0.15250085151356174, 0.1601549928071878, 0.21670862348182762, 0.17177219628684093, 0.20342348771401364, 0.1903165599827341, 0.18347592765930676, 0.15700620131407939, 0.20593073878469403, 0.15448255005572042, 0.09191076536878284, 0.16070432090671638, 0.12343712933769002, 0.16759581030967874, 0.13817058233897062, 0.14120996562742638, 0.10418707030928287, 0.15545875794421082, 0.14289387053810554, 0.17277644238976553, 0.15945210805567112, 0.18979910798693245, 0.2007159965699452, 0.16680886427187147, 0.17379335216152225, 0.17546015892869493, 0.1852530749985608, 0.17135030363897785, 0.16195374066887414, 0.15348102443963707, 0.1682308346855259, 0.1754543157566406, 0.16536447181732927, 0.1571637747847392, 0.17289442270532496, 0.15708360888514528, 0.15549875061631213, 0.17125543502965956, 0.1777097084472049, 0.3004981934516141, 0.2706988349940319, 0.17939175841695854, 0.2670465223478331, 0.20245185063722215, 0.2508592253453906, 0.23817623610957273, 0.31820683631560365, 0.27663322933512047, 0.27808540712005514, 0.15953107419650192, 0.17905629559892056, 0.24731325677590177, 0.2616691542352769, 0.21116895254919055, 0.18362915963125848, 0.20077017954785636, 0.18328578503755955, 0.1823421432602621, 0.19096106813057157, 0.1891735938381751, 0.17747635156381858, 0.1861983434679344, 0.18214473403627862, 0.1828685211706026, 0.056979421334201086, 0.05551391206113965, 0.059811764159684255, 0.06923143720354075, 0.07151055134666018, 0.08719539322063485, 0.061966265145623534, 0.07353255574689121, 0.06059593295277732]}, "mutation_prompt": null}
{"id": "a9499f5d-1547-46e1-a296-793ebd48844c", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        \n    def chaotic_map(self, x, iteration):\n        dynamic_chaos_map = np.array([0.4 + np.sin(0.1*iteration), 0.7 + np.cos(0.05*iteration), 0.9 - np.tanh(0.02*iteration), 0.1 + np.sin(0.03*iteration), 0.3 - np.cos(0.08*iteration)])\n        return np.mod((dynamic_chaos_map[0] * x * (1 - x) + dynamic_chaos_map[1] * np.sin(np.pi * x)) * (1 - x), 1.0)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "DynamicAdaptiveHybridPSOADE", "description": "Introducing dynamic adjustment of chaotic map parameters to adapt to the optimization process for improved exploration.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0247c6e-18a6-4ebc-b748-7845c168cd15", "metadata": {"aucs": [0.283706747600628, 0.2559427680248104, 0.26494346386173506, 0.2517936852747652, 0.20139169722611583, 0.26779979962847167, 0.24659009991044667, 0.24634857524585796, 0.2382739673148907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627349992015828, 0.07418646055954792, 0.04369728345602564, 0.062301834197948436, 0.05753907309164297, 0.06047649336295835, 0.05083644864031234, 0.037314801837200706, 0.06447934637509001, 0.04970260864600473, 0.03190894103840258, 0.04933267516195261, 0.050452203766243264, 0.032447077413220726, 0.03915901577160552, 0.027947503883591907, 0.041278889779323036, 0.035598551438404846, 0.11778700719838964, 0.07795393432763509, 0.09544829972637214, 0.08832262879419628, 0.08509052110351312, 0.12600303450856354, 0.1297133610381921, 0.0955637597060961, 0.0965571650298862, 0.12221880854791067, 0.14521560426582636, 0.0932182017469213, 0.1286418422053055, 0.13645756691556632, 0.12919119557233116, 0.11806449703605537, 0.07850348479455738, 0.09195710086953002, 0.228110281180245, 0.1839790834347541, 0.154165133178211, 0.18312284508867738, 0.1689781116256951, 0.15593502772528334, 0.15864432997377098, 0.15483876003464625, 0.20763522385091615, 0.0859340722523042, 0.08560090610589, 0.07567486087105679, 0.08137744402383562, 0.11126951841108512, 0.028993835359450548, 0.0863003505817711, 0.11243657331346091, 0.07654908622536682, 0.0807423310341856, 0.07503730177715584, 0.06648565079456326, 0.07833151993563736, 0.09149846323749733, 0.09476760245710814, 0.11343005615972779, 0.0613760927296253, 0.09635063338862948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05585393109965009, 0.041559296419372505, 0.1039567738347219, 0.07250576449390356, 0.04896936156670617, 0.05310722208051344, 0.1483424154804286, 0.0882195858825704, 0.06935428681488143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021893235296886804, 0.04266695875338189, 0.017126750636681565, 0.007867076727791078, 0.021468382811663522, 0.04934043635351115, 0.04343617482239348, 0.0240203360000949, 0.01985015339253604, 0.28312791932477843, 0.252858732165981, 0.26532921710531776, 0.20582883362979998, 0.24974346184287421, 0.2394430147385299, 0.24800956440199085, 0.2940241879839921, 0.29007206106574546, 0.043797900592487116, 0.047730536660838374, 0.02363663054330678, 0.05948031480805038, 0.07019345820208378, 0.0620248372737755, 0.07245412549959818, 0.053424904968468745, 0.057671819516812994, 0.17519172425084706, 0.1437452215315872, 0.1566866228479954, 0.1551591146751925, 0.16614501486196764, 0.15467648972017833, 0.1478250159901079, 0.15004453322743172, 0.1582618474940526, 0.16732943125954536, 0.2084670950153681, 0.1860868114218831, 0.22508328559665225, 0.1972023190279515, 0.19896418978636965, 0.14195837186096272, 0.21805501663418614, 0.13120651058263944, 0.12197302758078499, 0.13986812718118358, 0.11984119057162057, 0.17509154345428524, 0.15382818617184146, 0.14219759737804494, 0.12210160978336715, 0.17351025508833207, 0.12615721482004227, 0.1871116367585508, 0.19730957334760402, 0.19225352966951514, 0.1990187189203223, 0.19047308317902556, 0.19770207712280496, 0.18559248698879915, 0.1653813500216902, 0.18512920045734127, 0.15410733482784822, 0.16650850880858503, 0.15723117700815636, 0.1652518015353016, 0.15515945739074521, 0.16274423322789555, 0.1598944791466893, 0.15534255663328056, 0.15283529469122537, 0.17933649975980448, 0.1622895705915427, 0.22303513676448505, 0.24766999148332702, 0.17883268854430134, 0.40428994021918085, 0.25365301947005714, 0.2837053314540423, 0.4010141039018117, 0.3879006470659956, 0.31454421365535934, 0.22710363385510113, 0.20160752338749954, 0.1832570981612276, 0.23320344339795862, 0.3561443952177694, 0.23075032168253562, 0.16075212635064873, 0.17720736779853996, 0.18096159261022726, 0.182229724384517, 0.18096270251109137, 0.17621081303475916, 0.1730984699063689, 0.2050029046464864, 0.17249117419870907, 0.18925169996153535, 0.07140993581055011, 0.06283932821707838, 0.05220930390643608, 0.060299927170207934, 0.07755281833081795, 0.05981199593098718, 0.07482120556371297, 0.0574482029872625, 0.08062529609444613]}, "mutation_prompt": null}
{"id": "9d0153a3-e191-4549-8bdd-75b11047c5f9", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        \n    def chaotic_map(self, x, iteration):\n        dynamic_chaos_map = np.array([0.4 + np.sin(0.1*iteration), 0.7 + np.cos(0.05*iteration), 0.9 - np.tanh(0.02*iteration), 0.1 + np.sin(0.03*iteration), 0.3 - np.cos(0.08*iteration)])\n        return np.mod((dynamic_chaos_map[0] * x * (1 - x) + dynamic_chaos_map[1] * np.sin(np.pi * x)) * (1 - x), 1.0)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "DynamicAdaptiveHybridPSOADE", "description": "Introducing dynamic adjustment of chaotic map parameters to adapt to the optimization process for improved exploration.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0247c6e-18a6-4ebc-b748-7845c168cd15", "metadata": {"aucs": [0.283706747600628, 0.2559427680248104, 0.26494346386173506, 0.2517936852747652, 0.20139169722611583, 0.26779979962847167, 0.24659009991044667, 0.24634857524585796, 0.2382739673148907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627349992015828, 0.07418646055954792, 0.04369728345602564, 0.062301834197948436, 0.05753907309164297, 0.06047649336295835, 0.05083644864031234, 0.037314801837200706, 0.06447934637509001, 0.04970260864600473, 0.03190894103840258, 0.04933267516195261, 0.050452203766243264, 0.032447077413220726, 0.03915901577160552, 0.027947503883591907, 0.041278889779323036, 0.035598551438404846, 0.11778700719838964, 0.07795393432763509, 0.09544829972637214, 0.08832262879419628, 0.08509052110351312, 0.12600303450856354, 0.1297133610381921, 0.0955637597060961, 0.0965571650298862, 0.12221880854791067, 0.14521560426582636, 0.0932182017469213, 0.1286418422053055, 0.13645756691556632, 0.12919119557233116, 0.11806449703605537, 0.07850348479455738, 0.09195710086953002, 0.228110281180245, 0.1839790834347541, 0.154165133178211, 0.18312284508867738, 0.1689781116256951, 0.15593502772528334, 0.15864432997377098, 0.15483876003464625, 0.20763522385091615, 0.0859340722523042, 0.08560090610589, 0.07567486087105679, 0.08137744402383562, 0.11126951841108512, 0.028993835359450548, 0.0863003505817711, 0.11243657331346091, 0.07654908622536682, 0.0807423310341856, 0.07503730177715584, 0.06648565079456326, 0.07833151993563736, 0.09149846323749733, 0.09476760245710814, 0.11343005615972779, 0.0613760927296253, 0.09635063338862948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05585393109965009, 0.041559296419372505, 0.1039567738347219, 0.07250576449390356, 0.04896936156670617, 0.05310722208051344, 0.1483424154804286, 0.0882195858825704, 0.06935428681488143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021893235296886804, 0.04266695875338189, 0.017126750636681565, 0.007867076727791078, 0.021468382811663522, 0.04934043635351115, 0.04343617482239348, 0.0240203360000949, 0.01985015339253604, 0.28312791932477843, 0.252858732165981, 0.26532921710531776, 0.20582883362979998, 0.24974346184287421, 0.2394430147385299, 0.24800956440199085, 0.2940241879839921, 0.29007206106574546, 0.043797900592487116, 0.047730536660838374, 0.02363663054330678, 0.05948031480805038, 0.07019345820208378, 0.0620248372737755, 0.07245412549959818, 0.053424904968468745, 0.057671819516812994, 0.17519172425084706, 0.1437452215315872, 0.1566866228479954, 0.1551591146751925, 0.16614501486196764, 0.15467648972017833, 0.1478250159901079, 0.15004453322743172, 0.1582618474940526, 0.16732943125954536, 0.2084670950153681, 0.1860868114218831, 0.22508328559665225, 0.1972023190279515, 0.19896418978636965, 0.14195837186096272, 0.21805501663418614, 0.13120651058263944, 0.12197302758078499, 0.13986812718118358, 0.11984119057162057, 0.17509154345428524, 0.15382818617184146, 0.14219759737804494, 0.12210160978336715, 0.17351025508833207, 0.12615721482004227, 0.1871116367585508, 0.19730957334760402, 0.19225352966951514, 0.1990187189203223, 0.19047308317902556, 0.19770207712280496, 0.18559248698879915, 0.1653813500216902, 0.18512920045734127, 0.15410733482784822, 0.16650850880858503, 0.15723117700815636, 0.1652518015353016, 0.15515945739074521, 0.16274423322789555, 0.1598944791466893, 0.15534255663328056, 0.15283529469122537, 0.17933649975980448, 0.1622895705915427, 0.22303513676448505, 0.24766999148332702, 0.17883268854430134, 0.40428994021918085, 0.25365301947005714, 0.2837053314540423, 0.4010141039018117, 0.3879006470659956, 0.31454421365535934, 0.22710363385510113, 0.20160752338749954, 0.1832570981612276, 0.23320344339795862, 0.3561443952177694, 0.23075032168253562, 0.16075212635064873, 0.17720736779853996, 0.18096159261022726, 0.182229724384517, 0.18096270251109137, 0.17621081303475916, 0.1730984699063689, 0.2050029046464864, 0.17249117419870907, 0.18925169996153535, 0.07140993581055011, 0.06283932821707838, 0.05220930390643608, 0.060299927170207934, 0.07755281833081795, 0.05981199593098718, 0.07482120556371297, 0.0574482029872625, 0.08062529609444613]}, "mutation_prompt": null}
{"id": "d8e2f69c-a62d-473c-b654-08383d1f9180", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        \n    def chaotic_map(self, x, iteration):\n        dynamic_chaos_map = np.array([0.4 + np.sin(0.1*iteration), 0.7 + np.cos(0.05*iteration), 0.9 - np.tanh(0.02*iteration), 0.1 + np.sin(0.03*iteration), 0.3 - np.cos(0.08*iteration)])\n        return np.mod((dynamic_chaos_map[0] * x * (1 - x) + dynamic_chaos_map[1] * np.sin(np.pi * x)) * (1 - x), 1.0)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "DynamicAdaptiveHybridPSOADE", "description": "Introducing dynamic adjustment of chaotic map parameters to adapt to the optimization process for improved exploration.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0247c6e-18a6-4ebc-b748-7845c168cd15", "metadata": {"aucs": [0.283706747600628, 0.2559427680248104, 0.26494346386173506, 0.2517936852747652, 0.20139169722611583, 0.26779979962847167, 0.24659009991044667, 0.24634857524585796, 0.2382739673148907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627349992015828, 0.07418646055954792, 0.04369728345602564, 0.062301834197948436, 0.05753907309164297, 0.06047649336295835, 0.05083644864031234, 0.037314801837200706, 0.06447934637509001, 0.04970260864600473, 0.03190894103840258, 0.04933267516195261, 0.050452203766243264, 0.032447077413220726, 0.03915901577160552, 0.027947503883591907, 0.041278889779323036, 0.035598551438404846, 0.11778700719838964, 0.07795393432763509, 0.09544829972637214, 0.08832262879419628, 0.08509052110351312, 0.12600303450856354, 0.1297133610381921, 0.0955637597060961, 0.0965571650298862, 0.12221880854791067, 0.14521560426582636, 0.0932182017469213, 0.1286418422053055, 0.13645756691556632, 0.12919119557233116, 0.11806449703605537, 0.07850348479455738, 0.09195710086953002, 0.228110281180245, 0.1839790834347541, 0.154165133178211, 0.18312284508867738, 0.1689781116256951, 0.15593502772528334, 0.15864432997377098, 0.15483876003464625, 0.20763522385091615, 0.0859340722523042, 0.08560090610589, 0.07567486087105679, 0.08137744402383562, 0.11126951841108512, 0.028993835359450548, 0.0863003505817711, 0.11243657331346091, 0.07654908622536682, 0.0807423310341856, 0.07503730177715584, 0.06648565079456326, 0.07833151993563736, 0.09149846323749733, 0.09476760245710814, 0.11343005615972779, 0.0613760927296253, 0.09635063338862948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05585393109965009, 0.041559296419372505, 0.1039567738347219, 0.07250576449390356, 0.04896936156670617, 0.05310722208051344, 0.1483424154804286, 0.0882195858825704, 0.06935428681488143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021893235296886804, 0.04266695875338189, 0.017126750636681565, 0.007867076727791078, 0.021468382811663522, 0.04934043635351115, 0.04343617482239348, 0.0240203360000949, 0.01985015339253604, 0.28312791932477843, 0.252858732165981, 0.26532921710531776, 0.20582883362979998, 0.24974346184287421, 0.2394430147385299, 0.24800956440199085, 0.2940241879839921, 0.29007206106574546, 0.043797900592487116, 0.047730536660838374, 0.02363663054330678, 0.05948031480805038, 0.07019345820208378, 0.0620248372737755, 0.07245412549959818, 0.053424904968468745, 0.057671819516812994, 0.17519172425084706, 0.1437452215315872, 0.1566866228479954, 0.1551591146751925, 0.16614501486196764, 0.15467648972017833, 0.1478250159901079, 0.15004453322743172, 0.1582618474940526, 0.16732943125954536, 0.2084670950153681, 0.1860868114218831, 0.22508328559665225, 0.1972023190279515, 0.19896418978636965, 0.14195837186096272, 0.21805501663418614, 0.13120651058263944, 0.12197302758078499, 0.13986812718118358, 0.11984119057162057, 0.17509154345428524, 0.15382818617184146, 0.14219759737804494, 0.12210160978336715, 0.17351025508833207, 0.12615721482004227, 0.1871116367585508, 0.19730957334760402, 0.19225352966951514, 0.1990187189203223, 0.19047308317902556, 0.19770207712280496, 0.18559248698879915, 0.1653813500216902, 0.18512920045734127, 0.15410733482784822, 0.16650850880858503, 0.15723117700815636, 0.1652518015353016, 0.15515945739074521, 0.16274423322789555, 0.1598944791466893, 0.15534255663328056, 0.15283529469122537, 0.17933649975980448, 0.1622895705915427, 0.22303513676448505, 0.24766999148332702, 0.17883268854430134, 0.40428994021918085, 0.25365301947005714, 0.2837053314540423, 0.4010141039018117, 0.3879006470659956, 0.31454421365535934, 0.22710363385510113, 0.20160752338749954, 0.1832570981612276, 0.23320344339795862, 0.3561443952177694, 0.23075032168253562, 0.16075212635064873, 0.17720736779853996, 0.18096159261022726, 0.182229724384517, 0.18096270251109137, 0.17621081303475916, 0.1730984699063689, 0.2050029046464864, 0.17249117419870907, 0.18925169996153535, 0.07140993581055011, 0.06283932821707838, 0.05220930390643608, 0.060299927170207934, 0.07755281833081795, 0.05981199593098718, 0.07482120556371297, 0.0574482029872625, 0.08062529609444613]}, "mutation_prompt": null}
{"id": "e8b0a22a-d12e-4abf-9a8e-4c560d3ba431", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridPSOADE(AdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        \n    def chaotic_map(self, x, iteration):\n        dynamic_chaos_map = np.array([0.4 + np.sin(0.1*iteration), 0.7 + np.cos(0.05*iteration), 0.9 - np.tanh(0.02*iteration), 0.1 + np.sin(0.03*iteration), 0.3 - np.cos(0.08*iteration)])\n        return np.mod((dynamic_chaos_map[0] * x * (1 - x) + dynamic_chaos_map[1] * np.sin(np.pi * x)) * (1 - x), 1.0)\n        \n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            inertia_weight = 0.5 + 0.3 * np.tanh(np.mean(self.best_fitness) - func(self.best_positions[np.argmin(self.best_fitness)]))\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "DynamicAdaptiveHybridPSOADE", "description": "Introducing dynamic adjustment of chaotic map parameters to adapt to the optimization process for improved exploration.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0247c6e-18a6-4ebc-b748-7845c168cd15", "metadata": {"aucs": [0.283706747600628, 0.2559427680248104, 0.26494346386173506, 0.2517936852747652, 0.20139169722611583, 0.26779979962847167, 0.24659009991044667, 0.24634857524585796, 0.2382739673148907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627349992015828, 0.07418646055954792, 0.04369728345602564, 0.062301834197948436, 0.05753907309164297, 0.06047649336295835, 0.05083644864031234, 0.037314801837200706, 0.06447934637509001, 0.04970260864600473, 0.03190894103840258, 0.04933267516195261, 0.050452203766243264, 0.032447077413220726, 0.03915901577160552, 0.027947503883591907, 0.041278889779323036, 0.035598551438404846, 0.11778700719838964, 0.07795393432763509, 0.09544829972637214, 0.08832262879419628, 0.08509052110351312, 0.12600303450856354, 0.1297133610381921, 0.0955637597060961, 0.0965571650298862, 0.12221880854791067, 0.14521560426582636, 0.0932182017469213, 0.1286418422053055, 0.13645756691556632, 0.12919119557233116, 0.11806449703605537, 0.07850348479455738, 0.09195710086953002, 0.228110281180245, 0.1839790834347541, 0.154165133178211, 0.18312284508867738, 0.1689781116256951, 0.15593502772528334, 0.15864432997377098, 0.15483876003464625, 0.20763522385091615, 0.0859340722523042, 0.08560090610589, 0.07567486087105679, 0.08137744402383562, 0.11126951841108512, 0.028993835359450548, 0.0863003505817711, 0.11243657331346091, 0.07654908622536682, 0.0807423310341856, 0.07503730177715584, 0.06648565079456326, 0.07833151993563736, 0.09149846323749733, 0.09476760245710814, 0.11343005615972779, 0.0613760927296253, 0.09635063338862948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05585393109965009, 0.041559296419372505, 0.1039567738347219, 0.07250576449390356, 0.04896936156670617, 0.05310722208051344, 0.1483424154804286, 0.0882195858825704, 0.06935428681488143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021893235296886804, 0.04266695875338189, 0.017126750636681565, 0.007867076727791078, 0.021468382811663522, 0.04934043635351115, 0.04343617482239348, 0.0240203360000949, 0.01985015339253604, 0.28312791932477843, 0.252858732165981, 0.26532921710531776, 0.20582883362979998, 0.24974346184287421, 0.2394430147385299, 0.24800956440199085, 0.2940241879839921, 0.29007206106574546, 0.043797900592487116, 0.047730536660838374, 0.02363663054330678, 0.05948031480805038, 0.07019345820208378, 0.0620248372737755, 0.07245412549959818, 0.053424904968468745, 0.057671819516812994, 0.17519172425084706, 0.1437452215315872, 0.1566866228479954, 0.1551591146751925, 0.16614501486196764, 0.15467648972017833, 0.1478250159901079, 0.15004453322743172, 0.1582618474940526, 0.16732943125954536, 0.2084670950153681, 0.1860868114218831, 0.22508328559665225, 0.1972023190279515, 0.19896418978636965, 0.14195837186096272, 0.21805501663418614, 0.13120651058263944, 0.12197302758078499, 0.13986812718118358, 0.11984119057162057, 0.17509154345428524, 0.15382818617184146, 0.14219759737804494, 0.12210160978336715, 0.17351025508833207, 0.12615721482004227, 0.1871116367585508, 0.19730957334760402, 0.19225352966951514, 0.1990187189203223, 0.19047308317902556, 0.19770207712280496, 0.18559248698879915, 0.1653813500216902, 0.18512920045734127, 0.15410733482784822, 0.16650850880858503, 0.15723117700815636, 0.1652518015353016, 0.15515945739074521, 0.16274423322789555, 0.1598944791466893, 0.15534255663328056, 0.15283529469122537, 0.17933649975980448, 0.1622895705915427, 0.22303513676448505, 0.24766999148332702, 0.17883268854430134, 0.40428994021918085, 0.25365301947005714, 0.2837053314540423, 0.4010141039018117, 0.3879006470659956, 0.31454421365535934, 0.22710363385510113, 0.20160752338749954, 0.1832570981612276, 0.23320344339795862, 0.3561443952177694, 0.23075032168253562, 0.16075212635064873, 0.17720736779853996, 0.18096159261022726, 0.182229724384517, 0.18096270251109137, 0.17621081303475916, 0.1730984699063689, 0.2050029046464864, 0.17249117419870907, 0.18925169996153535, 0.07140993581055011, 0.06283932821707838, 0.05220930390643608, 0.060299927170207934, 0.07755281833081795, 0.05981199593098718, 0.07482120556371297, 0.0574482029872625, 0.08062529609444613]}, "mutation_prompt": null}
{"id": "7d972e86-3fa1-4eca-9504-db51101c729b", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 67, "fitness": 0.12381128496158322, "feedback": "The algorithm EnhancedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "d0247c6e-18a6-4ebc-b748-7845c168cd15", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "cbb2f8bd-901e-45c8-86b9-673f9edab7d3", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "7711adca-f587-401f-9f08-cf2ad101b001", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "88976964-daff-4069-98dd-a7ddcc132349", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "50c62286-5ee1-4638-91fd-4acd96751908", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def adaptive_mutation_step(self):\n        self.mutation_step = 0.1 + 0.1 * np.tanh(self.population_diversity - self.diversity_threshold)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.adaptive_mutation_step()\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutated_position = self.particles[i] + self.mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Improving exploration and exploitation balance by introducing adaptive mutation step size based on particle diversity.", "configspace": "", "generation": 71, "fitness": 0.11365278970275118, "feedback": "The algorithm EnhancedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.31150959186065097, 0.2623362765088274, 0.2817187838150861, 0.16228776982952642, 0.13750556466240882, 0.3122677300105594, 0.2394848065431403, 0.225787628097874, 0.13354044110022023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04557914821934028, 0.04508577143178594, 0.029411622931398207, 0.06468521640051494, 0.06613133313731379, 0.051834343264140825, 0.05073567070274898, 0.04287279548838474, 0.058697624325680375, 0.03109121913413726, 0.044964021686744515, 0.03131941254176507, 0.05434828918405943, 0.027367277192454798, 0.020798788983262373, 0.043622522283275234, 0.01749243935137379, 0.045835967994367066, 0.0736963398403786, 0.060889066811215864, 0.07060121920675755, 0.06545367051532636, 0.06465772496303057, 0.07767344357509631, 0.0831904987373111, 0.07122170018017282, 0.07265627980528266, 0.0739938780649756, 0.05182059735064837, 0.08798493963893395, 0.14095653001032082, 0.07932968439932087, 0.10999714132698069, 0.08382557877130326, 0.058755375014176936, 0.04051901825035731, 0.18269406785107722, 0.1991141323498289, 0.106072465424083, 0.18180588361552685, 0.1289951066102587, 0.0379722042982088, 0.14302889127870655, 0.15265411682941465, 0.17412943555931892, 0.08215798093114357, 0.08960549470381507, 0.08446698531504604, 0.08997767267184786, 0.08632552300284257, 0.056584584947880656, 0.1027910781258895, 0.060529882548451264, 0.0766013288171935, 0.12016199674086259, 0.058095082349543414, 0.0969326041965638, 0.08148337759666358, 0.09543057471882876, 0.09950122077595824, 0.0849337546341743, 0.05080661403708908, 0.07941714165363978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08392079126320218, 0.08949311122915882, 0.12152375903807566, 0.0701680814380079, 0.08487014889648503, 0.03684791114151631, 0.0869665544449606, 0.03639325864782039, 0.09735463184496707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010797226076686428, 0.03884092423941454, 0.036458697421584474, 9.999999999998899e-05, 0.0009106589285940991, 9.999999999998899e-05, 0.022804746495010852, 9.999999999998899e-05, 0.02180031198818355, 0.34406332230949543, 0.2982921542895077, 0.27221024373316083, 0.22711066746704422, 0.21367407184679466, 0.19371590657983706, 0.27042928348033024, 0.2914740893049813, 0.2875446777190568, 0.014907659279025265, 0.0186706535382285, 0.002568240016789458, 0.03701477139376075, 0.043859893219963086, 0.06825257232812731, 0.06305484857167432, 0.051094784463729725, 0.061783336303060654, 0.1581140596513222, 0.15196334863800454, 0.16141457873840537, 0.16158850618877263, 0.18341685706506483, 0.144623287088263, 0.17036381870602635, 0.18160337889648248, 0.1547785039732109, 0.14633914275444515, 0.2041289545000241, 0.14859325332580486, 0.1932237330701565, 0.17696916405199303, 0.213248177764643, 0.14092961410864113, 0.2145493659809048, 0.1585890028160718, 0.08171848742386534, 0.12967139951344053, 0.10510720985374444, 0.15722764551399437, 0.1402191561506273, 0.11568698116279408, 0.07799484484780805, 0.13568999685080452, 0.0792647930089595, 0.17728489897015276, 0.1881051956825438, 0.18647201131244584, 0.17164993780877102, 0.1743042127946428, 0.19642821506580832, 0.17189835693961164, 0.18472468203687553, 0.17540828428440258, 0.15098859805433262, 0.15524780664485027, 0.15976159412887536, 0.15840881930794493, 0.15735833829828405, 0.158254816124492, 0.15960182950026958, 0.1576056505612392, 0.16703082832400273, 0.22299280397859633, 0.20215457346890509, 0.2861908021502262, 0.3210273816971272, 0.18838099594597812, 0.28653699259973064, 0.15619013736716936, 0.2763782234259001, 0.22029840640987686, 0.31253130067047985, 0.3288686684690312, 0.2809534220874905, 0.3105690538647541, 0.17422764398280566, 0.20677964322310372, 0.3306245959590879, 0.2413793827084747, 0.2238275294866544, 0.19534557958562915, 0.1891243807752515, 0.1753844324141033, 0.1860524440703043, 0.19055100162416938, 0.1845005232095126, 0.1849795627775518, 0.17501236629888228, 0.1768478180744112, 0.061321171322737955, 0.05623270931810054, 0.08910792605241236, 0.06274349178626981, 0.06796618843989222, 0.06813469875444311, 0.06478861587329265, 0.05512216196696196, 0.05933792862231235]}, "mutation_prompt": null}
{"id": "83d1b47e-1c9f-41be-b2bf-07c281ec18cf", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "a771fcae-f5df-46bf-96a0-ee26f5789dfa", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "eb263176-df92-429a-bbdd-de624491b282", "solution": "import numpy as np\n\nclass AdaptiveChaosDrivenPSOADE(EnhancedDynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def adaptive_chaos_mutation(self, particle):\n        chaos_coefficient = np.random.choice(self.chaos_map)\n        chaos_value = chaos_coefficient * (np.random.uniform(-1, 1, self.dim) + np.tanh(np.mean(particle) - np.median(particle)))\n        return chaos_value\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.adaptive_chaos_mutation(self.particles[i])\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value)\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)\n", "name": "AdaptiveChaosDrivenPSOADE", "description": "Improving the exploration capability by introducing a novel adaptive chaos-driven mutation mechanism.", "configspace": "", "generation": 74, "fitness": 0.12275672841390996, "feedback": "The algorithm AdaptiveChaosDrivenPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.2609354955435701, 0.25545768630945853, 0.2813629905265862, 0.27634664766496886, 0.20794574780541653, 0.2856928352416399, 0.2674388982815926, 0.24575989361227213, 0.23765355862523885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04996431090241715, 0.045678398869536396, 0.046235596758568365, 0.05079449052529783, 0.04476526972130579, 0.05392644369258215, 0.059931390951885044, 0.057092563860037804, 0.06070810149101802, 0.044559095446627506, 0.05148513520995479, 0.031049648024361498, 0.059045404562675374, 0.04432605146517821, 0.04588708920229889, 0.03770948064891744, 0.03441295487493157, 0.04926151778389354, 0.09004837260765175, 0.06833455823932111, 0.1032040142243612, 0.0837087690618431, 0.08296642205611804, 0.10473442776364517, 0.11694552045071538, 0.09740692943346352, 0.10082835234243681, 0.1295142627469299, 0.07419298948528763, 0.10997489407506578, 0.1433703590866917, 0.1133511564105284, 0.1115847991516059, 0.17648006908667635, 0.084307586899532, 0.12907367178106, 0.20267726722995982, 0.15637945213776294, 0.16054597182022767, 0.20978240828402395, 0.2057457484685653, 0.15986596688328247, 0.14901469516654997, 0.1416861656382271, 0.22199503248603714, 0.08937018063988067, 0.08130225106088673, 0.0729095750159151, 0.055291109928133686, 0.08643755186493274, 0.04435058658610691, 0.08838186818712279, 0.0779492927711406, 0.07582094347829149, 0.11746100385650893, 0.09126716728461504, 0.09623261535910155, 0.10869160491653873, 0.08859974988308439, 0.07895261825216515, 0.0832780510221659, 0.08292825783457725, 0.08274879625304243, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07713033611935793, 0.0588594655596979, 0.08462518907659544, 0.05756979734543077, 0.08599575761990708, 0.06914435156916188, 0.08294988205241793, 0.034138423439693866, 0.08193164951487597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011442503198729304, 0.03559198068392655, 0.033750805611766244, 0.010555114331960769, 0.016713952210719807, 0.02653817987864837, 0.035286012874757966, 0.019717751857902477, 0.02998938425592912, 0.2676112996646912, 0.2602213473713768, 0.2877874473003792, 0.2727287600098288, 0.2535339209606101, 0.22521469510216652, 0.26614438497537074, 0.2812883320494499, 0.2776798145953272, 0.040363757927042054, 0.046299512716916236, 0.045638983255709586, 0.07954673434369908, 0.06306580742051415, 0.07066065218859108, 0.06615137089295531, 0.07568778291693179, 0.06544878520359565, 0.18368701848112812, 0.16209425527091537, 0.1577497458638527, 0.16507914799707346, 0.1434632348409668, 0.13983672438029493, 0.1680471963957878, 0.15941122497231774, 0.1427395619467292, 0.15566285883117548, 0.21577850042376234, 0.1589821582877854, 0.21342656405981164, 0.20709361492781664, 0.21919687399308474, 0.15443323556048705, 0.22539928663816722, 0.1296155220038907, 0.1199967023588635, 0.14095647543146694, 0.1274872758216925, 0.1445219887102398, 0.16111006414590323, 0.16280881260106672, 0.11625111201496152, 0.17832420725714526, 0.0873675740723866, 0.18310344074488283, 0.17127836605286684, 0.21124753139508468, 0.17531165644104707, 0.18733403634688983, 0.1969562781630695, 0.17271376124530946, 0.17555738664631737, 0.1981285782804305, 0.15931127776254994, 0.17821880344430452, 0.16109624679478363, 0.16909256194418376, 0.18794682217587533, 0.15737431580640282, 0.16876824912399935, 0.1630141528384802, 0.15771117374800847, 0.2806419950272868, 0.209326742044056, 0.2908755576002694, 0.30639033966034035, 0.3114724548499208, 0.27811005766643215, 0.191468183052233, 0.2521736350754873, 0.29039333239699905, 0.28124323624812153, 0.23144127999526054, 0.2879596952992761, 0.26344476002491846, 0.24282068821895142, 0.2530244775147086, 0.25238941960347305, 0.2269111903921407, 0.2332922549218991, 0.18853676265962394, 0.1898981789510953, 0.18430290475191902, 0.20081298748969778, 0.20035506495601352, 0.1886030054990978, 0.1962061003758644, 0.17590846044642694, 0.17599092142574313, 0.06017666457553439, 0.07400098398124011, 0.05647761981392818, 0.06247320354762065, 0.06426688242950929, 0.08511749376736677, 0.07262148224567155, 0.06629764077094424, 0.060518392971570356]}, "mutation_prompt": null}
{"id": "1de1c7e6-a3ff-4c91-8d9f-3f099c1f1738", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "3369347e-fffe-426b-9b38-38742660fad3", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "254a6fec-62a9-44b1-988f-ca6a1acee786", "solution": "import numpy as np\n\nclass ImprovedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        self.dist_threshold = 0.1  # Distance threshold for dynamic search space adaptation\n\n    def dynamic_search_space_adaptation(self):\n        distances = np.linalg.norm(self.particles[:, np.newaxis] - self.particles, axis=2)\n        distances[distances == 0] = np.inf\n        min_distance = np.min(distances)\n        self.search_space_radius = min_distance if min_distance < self.dist_threshold else self.dist_threshold\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            self.dynamic_search_space_adaptation()\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -self.search_space_radius, self.search_space_radius)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -self.search_space_radius, self.search_space_radius)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "ImprovedDynamicAdaptiveHybridPSOADE", "description": "Improving exploration by introducing a dynamic search space adaptation mechanism based on particle distance.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedDynamicAdaptiveHybridPSOADE' object has no attribute 'adaptive_inertia_weight'\").", "error": "AttributeError(\"'ImprovedDynamicAdaptiveHybridPSOADE' object has no attribute 'adaptive_inertia_weight'\")", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {}, "mutation_prompt": null}
{"id": "ae973ad4-49ac-469b-a6db-915368c269c6", "solution": "# import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def chaos_de_hybrid(self, particle, best_particle, best_global_position, chaos_value):\n        return 1.5 * np.random.uniform(0, 1) * (best_particle - particle) + 1.5 * np.random.uniform(0, 1) * (best_global_position - particle) + chaos_value * np.random.uniform(-1, 1, self.dim)\n\n    def differential_evolution(self, particle, best_particle, mutation_rate):\n        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n        mutated_position = particle + mutation_step * mutation_direction\n        return np.clip(mutated_position, -5.0, 5.0)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + self.chaos_de_hybrid(self.particles[i], self.best_positions[i], best_global_position, chaos_value))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        self.particles[i] = self.differential_evolution(self.particles[i], self.best_positions[i], self.mutation_rate)\n                        self.best_fitness[i] = func(self.particles[i])", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel hybrid strategy utilizing chaos and differential evolution with adaptive control parameters.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'i' is not defined\").", "error": "NameError(\"name 'i' is not defined\")", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {}, "mutation_prompt": null}
{"id": "3750c88e-ffa3-4829-8b06-7b43f0997b5b", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "8f6ea635-0f25-4d40-946d-ead3acbdc4a4", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n        self.levy_alpha = 1.5  # Levy flight parameter\n\n    def levy_flight(self, size):\n        sigma = (np.math.gamma(1 + self.levy_alpha) * np.sin(np.pi * self.levy_alpha / 2) / (np.math.gamma((1 + self.levy_alpha) / 2) * self.levy_alpha * 2 ** ((self.levy_alpha - 1) / 2))) ** (1 / self.levy_alpha)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / np.abs(v) ** (1 / self.levy_alpha)\n        return step\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    levy_step = self.levy_flight(self.dim)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim) + levy_step)\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Improving the exploration capability by introducing Levy flight behavior to enhance global search.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedDynamicAdaptiveHybridPSOADE' object has no attribute 'adaptive_inertia_weight'\").", "error": "AttributeError(\"'EnhancedDynamicAdaptiveHybridPSOADE' object has no attribute 'adaptive_inertia_weight'\")", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {}, "mutation_prompt": null}
{"id": "2a793c70-a93a-4b8f-a25a-a7c9d083a887", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "4b0a7808-9485-4f79-9995-16c5946737ee", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "cb054475-21c6-4414-ac82-f0515cafc33b", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.1 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i])\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaotic map-based adaptive inertia weight strategy.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.27376174676834697, 0.25748953970182087, 0.29830419585524237, 0.2676256545145602, 0.2203344026594728, 0.23648956066449367, 0.29513275896821667, 0.25159552269252883, 0.2220937027681391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040178288540407836, 0.06296824684709679, 0.04815402891740128, 0.06379761924130378, 0.06370136473783927, 0.06801791751603181, 0.05914616139308204, 0.04358347863115597, 0.06392529841117489, 0.04673562191686764, 0.05431199191203029, 0.02908411141972078, 0.05444279781430783, 0.04527729221282517, 0.043219803671346146, 0.05352417875508164, 0.035383963282055064, 0.040001926430903945, 0.10184414153485355, 0.07181365243743365, 0.08788684278752934, 0.09234914257306648, 0.09334854846108631, 0.13180112463927252, 0.10460638082932705, 0.08799073452428097, 0.10737596587323606, 0.20131902770990917, 0.08674305191997989, 0.09680732886754395, 0.15563758531275285, 0.12904917572598318, 0.13626941075512444, 0.12347872744872479, 0.10510021635788747, 0.0988376273965732, 0.18873040199844504, 0.1689727993244181, 0.19023160720899657, 0.15353518322514714, 0.25000418861667717, 0.14712380664475144, 0.15504710842588665, 0.1721106014677496, 0.19864217800648343, 0.10719001423635566, 0.10043944196864285, 0.10264658729553411, 0.0783515158244883, 0.09489892751118856, 0.09367886528720304, 0.09493725131493791, 0.058020827854301404, 0.07636979530365529, 0.0907895605961978, 0.09950579892180467, 0.0904229938959965, 0.0957850610550327, 0.10870969153176158, 0.10453743318997732, 0.1265498298766724, 0.09871257595940919, 0.0769823443300729, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06007694507909367, 0.06804396212276864, 0.24185088118927245, 0.07085034552474156, 0.04919419435131278, 0.03128045637333876, 0.13756217514796754, 0.07733654696819137, 0.0260291713257369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021827240688081506, 0.0408606666557525, 0.0351625386163007, 0.007867357756439208, 0.023055793477971376, 0.012260745095361347, 0.016401894914530035, 0.017900066368242595, 0.04350511471011176, 0.3004900979586339, 0.27972783528622724, 0.28818544278712077, 0.2425410658391446, 0.26186443153016903, 0.25074985310316356, 0.2726425381750982, 0.2792404172297961, 0.31963895719400115, 0.035799202842209166, 0.041937418055074116, 0.01568195036184039, 0.05784110397446862, 0.049605452438083786, 0.07608221536535764, 0.07574254097311184, 0.0729844590696459, 0.06956690258085851, 0.17657027095269973, 0.14356775067735195, 0.15294741247640709, 0.17373076147150446, 0.1435904574288065, 0.15530554620863823, 0.1594285807864122, 0.15229608359325797, 0.14309615222001215, 0.16820916424628596, 0.20014650136348122, 0.17182608179117398, 0.2320213638066695, 0.2287722825073657, 0.2043915094690255, 0.15185153140754415, 0.21362208577062092, 0.13672165303152706, 0.1131151209818767, 0.13006217647947704, 0.12765725105977166, 0.16538957114219888, 0.1425049264480185, 0.14859071628178933, 0.10856899272142095, 0.16431463017556414, 0.08590591201987663, 0.18682084637717666, 0.18964682081972728, 0.18760139539517873, 0.1711740846269717, 0.19296993278037144, 0.1730723411043147, 0.1756548891588685, 0.18679120864922927, 0.1766291070080619, 0.1515040291912646, 0.16147717270424167, 0.16001063847674413, 0.17943645622903803, 0.1639968360066998, 0.1600356737712575, 0.16538086394690932, 0.17261399301253766, 0.15392921226291545, 0.20083447821650302, 0.30466364160415405, 0.1788533608942613, 0.2713586421288756, 0.1837567170127492, 0.3693953256085095, 0.3409194475297255, 0.26878611462590507, 0.16408535291897242, 0.34823596142821056, 0.26350033421101937, 0.31064152930879474, 0.26648284443268144, 0.19734310697411783, 0.21445807542292517, 0.23536399982764855, 0.2259073339822858, 0.1776532789167582, 0.1934222378448186, 0.18281151758272318, 0.19517756996114, 0.2040816350701291, 0.1920621609767149, 0.18040035407588295, 0.1788212726588836, 0.18047784090129448, 0.17127409755260248, 0.07279993253820594, 0.06337815753910603, 0.06669462241295665, 0.059709692523958635, 0.05137251484171179, 0.07719653265329818, 0.07031881840586174, 0.06220611383512309, 0.0682887138441598]}, "mutation_prompt": null}
{"id": "db9b3a45-a212-4e5a-8f73-ba2ba6924fd4", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_value = self.chaotic_map(np.mean(self.particles[i]), _)  # Utilize chaotic map for diversity\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_value * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the exploration and exploitation balance by incorporating a novel chaos-driven adaptive parameter control strategy.", "configspace": "", "generation": 84, "fitness": 0.12411257576092437, "feedback": "The algorithm EnhancedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "7d972e86-3fa1-4eca-9504-db51101c729b", "metadata": {"aucs": [0.3152877202280423, 0.30244639830973463, 0.2835773759162059, 0.26552581610845205, 0.24977099618532295, 0.26708561295374866, 0.26823601835120914, 0.2705924798587852, 0.2568558449773227, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046799866447495675, 0.06395068474173149, 0.045705841860192, 0.05263050010253212, 0.07425640788228849, 0.07478173299670565, 0.05677040599620109, 0.06045669427837419, 0.05665121260471806, 0.047557064003975524, 0.04786708985824861, 0.04817303300728348, 0.05411473670440414, 0.03760130007021112, 0.03646800462213107, 0.051177687051077725, 0.03753760892777902, 0.035270805608420996, 0.13657945817006745, 0.08626401934332228, 0.09047149628209661, 0.09462847198936619, 0.11911837150478533, 0.09477001407012975, 0.11448697753512738, 0.0926718135893494, 0.09504907674769181, 0.1375068886936035, 0.10414838897474599, 0.10049319601576445, 0.151163411805872, 0.12831083962953638, 0.14139963673074052, 0.12804838965662424, 0.11460301895525082, 0.09360451658751878, 0.199383065467842, 0.1644235101409398, 0.15459671141511766, 0.2178527567742371, 0.1843715505536857, 0.15772662989902309, 0.14574471716084614, 0.153811989102416, 0.19462931052970023, 0.0975289520945345, 0.08902069920435773, 0.09268871753051766, 0.05947414989180455, 0.07053917903362417, 0.04045016610564467, 0.10021096260993145, 0.08787158587543475, 0.08550125852538026, 0.11188423164650718, 0.09326072873999747, 0.09111011246203182, 0.09451416000765223, 0.08493946717701584, 0.09505280782687309, 0.11438091780308368, 0.11054426264656925, 0.0991633451194095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07679360422184323, 0.05644521434789518, 0.13551897490598697, 0.06135185183478187, 0.021839334810366928, 0.08719208289004399, 0.12248912379720056, 0.07873217264815324, 0.0748628327777553, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0317478022221237, 0.031259394302130206, 0.038147195154835445, 0.021697225708205536, 0.02166732733046961, 0.010688021267513448, 0.03492546500738003, 0.03509195022130496, 0.028709238604108567, 0.29571222620590776, 0.29056036831973164, 0.29205708754204374, 0.24782155857297117, 0.24968942819755002, 0.24456684014249586, 0.2706056322886319, 0.28658167465149076, 0.286079240034422, 0.03948668403712452, 0.041144047873125644, 0.027166840443858198, 0.08743061429102095, 0.05853229262552162, 0.08380056199178176, 0.07753960466715781, 0.05834271126115853, 0.0689681684330804, 0.14424125891821804, 0.15378096948011077, 0.15657600866802768, 0.15894301365584473, 0.1944188243111885, 0.14490878730396728, 0.14856279545237672, 0.1610255210628453, 0.17164300847012637, 0.1543112574059201, 0.21079762228309795, 0.16628320219537873, 0.21441342030263033, 0.2180767243506594, 0.21897373906800854, 0.16868893330371593, 0.2138698830649599, 0.14159600956467877, 0.10692679234457159, 0.14804310932584963, 0.1192520672280829, 0.16007556835353576, 0.1634198832323327, 0.16748522188034054, 0.09975806385556485, 0.14981200400478722, 0.11465702371440878, 0.18087780028477107, 0.19293693984955806, 0.18674903005135834, 0.1767368727675539, 0.18686718334362762, 0.17891355645917262, 0.18504098485669396, 0.21179212632546585, 0.1898035014350279, 0.1669849644564163, 0.16771053865085028, 0.16989167809534755, 0.1708869207128042, 0.17577738965460865, 0.1564351895746593, 0.16037660110256924, 0.1627816662262903, 0.163044163318113, 0.2038999343076292, 0.17901701933271197, 0.3163571693887335, 0.1822316580440655, 0.18335849774907031, 0.38307839338417693, 0.25674314956530075, 0.15134467500499138, 0.27976787485070664, 0.3261661215218523, 0.21852822665774263, 0.2844881604165631, 0.27418763721927575, 0.16189133527174382, 0.25923284020170345, 0.29187610683833487, 0.25021433091242784, 0.18045346417061248, 0.17565186238055341, 0.19249729727333476, 0.19001161596907823, 0.19121895237119213, 0.18002417492514866, 0.18504125731250531, 0.1988459373014292, 0.17238616890852532, 0.1942212587964809, 0.0763463090420815, 0.07198939448776909, 0.0602835603138141, 0.061287135469022314, 0.0681072782649208, 0.06671189994562032, 0.056933266212272016, 0.06420315457435577, 0.06648416109826227]}, "mutation_prompt": null}
{"id": "bad2faa4-bb15-42fb-b726-72c3bf1b6aed", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self):\n        chaos_params = np.random.uniform(0, 1, self.dim)  # Dynamic chaos parameters\n        return chaos_params\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation()  # Dynamic chaos-driven mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Improving population diversity by introducing a dynamic chaos-driven mutation strategy.", "configspace": "", "generation": 85, "fitness": 0.12593473857237253, "feedback": "The algorithm EnhancedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "db9b3a45-a212-4e5a-8f73-ba2ba6924fd4", "metadata": {"aucs": [0.2955451911285609, 0.26975570877933575, 0.2968555966466092, 0.30156610468508227, 0.24532197010559842, 0.27950660676208194, 0.28422536302934354, 0.2723238313976253, 0.24700070752839232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05354693787120801, 0.0697235623737168, 0.044435135079351484, 0.0787038709810911, 0.0711963197683323, 0.06594925092857429, 0.075546948501519, 0.05451904135894092, 0.06866823576523329, 0.058088716984816546, 0.042738759081630495, 0.06371395855035022, 0.04991025558200812, 0.048683119223307925, 0.042686488264861655, 0.04053807516418495, 0.04553858267622857, 0.034753517428664726, 0.10157558813705037, 0.0747471185677121, 0.07562785757035306, 0.08667556466632975, 0.08923304879871852, 0.12219440419688232, 0.11548771727229701, 0.10662922596888114, 0.09820119271607786, 0.12312290811637361, 0.0829825761197428, 0.14373558311978563, 0.15221295207899288, 0.13831445134309228, 0.15223202141460856, 0.16036869522831843, 0.09991066616924904, 0.11205264537084181, 0.21849601244257877, 0.17300042127306492, 0.15397406263454327, 0.19243815544396548, 0.16522311907517673, 0.17566052972168744, 0.14561641748689214, 0.1697464175539526, 0.21968659103276822, 0.1480285972520956, 0.09696522247970574, 0.08752103125389898, 0.0599781554232095, 0.1063475638867567, 0.06636946487491935, 0.10289458898388293, 0.10652472513722511, 0.09482031198582752, 0.09585022022621437, 0.1168658822459705, 0.09466658175458176, 0.09597901497285088, 0.06813087288656916, 0.0937394137109715, 0.09026008354694748, 0.09350849804506656, 0.09697085201378408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06851949453101747, 0.06794092854605027, 0.08000009676727693, 0.045142464387523784, 0.10223811958816276, 0.07709317479176458, 0.12485958845023726, 0.07782869740454457, 0.07514391760877592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009304552397076282, 0.048343207136801736, 0.05424836193179983, 0.021665470443681945, 0.02272599086690774, 0.0205807417719438, 0.039984073607029824, 0.02676650853158169, 0.02778731369295051, 0.30645137509778575, 0.3349490384410371, 0.2931358713627932, 0.27949268837025554, 0.2614028192118356, 0.22663592478973638, 0.25782275808066535, 0.2761700787432384, 0.2790554466773829, 0.03974586691588211, 0.03739386127037292, 0.02218566747917705, 0.05289339000916804, 0.05588640361259245, 0.05575040039207557, 0.06493560336225912, 0.06240607514493024, 0.07601698356298325, 0.16565938873809394, 0.14655391705708387, 0.16342040742549924, 0.15848969621611209, 0.1827307766532783, 0.1723725136134895, 0.15870243591679556, 0.15270510370419366, 0.16177061001826953, 0.171088585222389, 0.22905960117000967, 0.14765421660578137, 0.18781030570654955, 0.20637462344436253, 0.20610946498046656, 0.15713416059247598, 0.2176418095377448, 0.1449034231501639, 0.10599447148887864, 0.16167997106813914, 0.12644562554565708, 0.12744711382733875, 0.16385212865490162, 0.15534674630003575, 0.1252534203549711, 0.17204116085533172, 0.12201569910641596, 0.17027107144759357, 0.17086758509279276, 0.18642190523649482, 0.17574233284720153, 0.19004751842558587, 0.18105350719550106, 0.19791879140145208, 0.1821809304666283, 0.17841572203131095, 0.16945292437182524, 0.1678983496360852, 0.16126664364367338, 0.1681163025696757, 0.18643613667915604, 0.15669053059307136, 0.1760077789278257, 0.1672862981278651, 0.16108136624721336, 0.24311366720312944, 0.1743245206787316, 0.2021746986401628, 0.3672303499262751, 0.18518866832506264, 0.28809088959657936, 0.18537173008631636, 0.33414822675226563, 0.1678069157198845, 0.3578835559062884, 0.2715656764138259, 0.27091830052573607, 0.229712459232556, 0.17986319761798586, 0.20022099387450953, 0.2960586111302762, 0.22980109806598648, 0.34467451881687305, 0.20360842460795625, 0.18404494125567006, 0.17666056512157247, 0.19337019364455865, 0.18798520442106414, 0.18331531982833726, 0.18806946423666404, 0.18419314411119825, 0.17825534192469472, 0.06598480298065335, 0.07597690808434254, 0.06191915143212012, 0.07550367092694432, 0.06143735584560128, 0.07485225290862252, 0.0647464205098317, 0.0628372242138896, 0.07277016034455397]}, "mutation_prompt": null}
{"id": "3b074fcb-5da8-4ddd-9131-49459d3f6728", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self):\n        chaos_params = np.random.uniform(0, 1, self.dim)  # Dynamic chaos parameters\n        return chaos_params\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation()  # Dynamic chaos-driven mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Improving population diversity by introducing a dynamic chaos-driven mutation strategy.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "bad2faa4-bb15-42fb-b726-72c3bf1b6aed", "metadata": {"aucs": [0.2955451911285609, 0.26975570877933575, 0.2968555966466092, 0.30156610468508227, 0.24532197010559842, 0.27950660676208194, 0.28422536302934354, 0.2723238313976253, 0.24700070752839232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05354693787120801, 0.0697235623737168, 0.044435135079351484, 0.0787038709810911, 0.0711963197683323, 0.06594925092857429, 0.075546948501519, 0.05451904135894092, 0.06866823576523329, 0.058088716984816546, 0.042738759081630495, 0.06371395855035022, 0.04991025558200812, 0.048683119223307925, 0.042686488264861655, 0.04053807516418495, 0.04553858267622857, 0.034753517428664726, 0.10157558813705037, 0.0747471185677121, 0.07562785757035306, 0.08667556466632975, 0.08923304879871852, 0.12219440419688232, 0.11548771727229701, 0.10662922596888114, 0.09820119271607786, 0.12312290811637361, 0.0829825761197428, 0.14373558311978563, 0.15221295207899288, 0.13831445134309228, 0.15223202141460856, 0.16036869522831843, 0.09991066616924904, 0.11205264537084181, 0.21849601244257877, 0.17300042127306492, 0.15397406263454327, 0.19243815544396548, 0.16522311907517673, 0.17566052972168744, 0.14561641748689214, 0.1697464175539526, 0.21968659103276822, 0.1480285972520956, 0.09696522247970574, 0.08752103125389898, 0.0599781554232095, 0.1063475638867567, 0.06636946487491935, 0.10289458898388293, 0.10652472513722511, 0.09482031198582752, 0.09585022022621437, 0.1168658822459705, 0.09466658175458176, 0.09597901497285088, 0.06813087288656916, 0.0937394137109715, 0.09026008354694748, 0.09350849804506656, 0.09697085201378408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06851949453101747, 0.06794092854605027, 0.08000009676727693, 0.045142464387523784, 0.10223811958816276, 0.07709317479176458, 0.12485958845023726, 0.07782869740454457, 0.07514391760877592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009304552397076282, 0.048343207136801736, 0.05424836193179983, 0.021665470443681945, 0.02272599086690774, 0.0205807417719438, 0.039984073607029824, 0.02676650853158169, 0.02778731369295051, 0.30645137509778575, 0.3349490384410371, 0.2931358713627932, 0.27949268837025554, 0.2614028192118356, 0.22663592478973638, 0.25782275808066535, 0.2761700787432384, 0.2790554466773829, 0.03974586691588211, 0.03739386127037292, 0.02218566747917705, 0.05289339000916804, 0.05588640361259245, 0.05575040039207557, 0.06493560336225912, 0.06240607514493024, 0.07601698356298325, 0.16565938873809394, 0.14655391705708387, 0.16342040742549924, 0.15848969621611209, 0.1827307766532783, 0.1723725136134895, 0.15870243591679556, 0.15270510370419366, 0.16177061001826953, 0.171088585222389, 0.22905960117000967, 0.14765421660578137, 0.18781030570654955, 0.20637462344436253, 0.20610946498046656, 0.15713416059247598, 0.2176418095377448, 0.1449034231501639, 0.10599447148887864, 0.16167997106813914, 0.12644562554565708, 0.12744711382733875, 0.16385212865490162, 0.15534674630003575, 0.1252534203549711, 0.17204116085533172, 0.12201569910641596, 0.17027107144759357, 0.17086758509279276, 0.18642190523649482, 0.17574233284720153, 0.19004751842558587, 0.18105350719550106, 0.19791879140145208, 0.1821809304666283, 0.17841572203131095, 0.16945292437182524, 0.1678983496360852, 0.16126664364367338, 0.1681163025696757, 0.18643613667915604, 0.15669053059307136, 0.1760077789278257, 0.1672862981278651, 0.16108136624721336, 0.24311366720312944, 0.1743245206787316, 0.2021746986401628, 0.3672303499262751, 0.18518866832506264, 0.28809088959657936, 0.18537173008631636, 0.33414822675226563, 0.1678069157198845, 0.3578835559062884, 0.2715656764138259, 0.27091830052573607, 0.229712459232556, 0.17986319761798586, 0.20022099387450953, 0.2960586111302762, 0.22980109806598648, 0.34467451881687305, 0.20360842460795625, 0.18404494125567006, 0.17666056512157247, 0.19337019364455865, 0.18798520442106414, 0.18331531982833726, 0.18806946423666404, 0.18419314411119825, 0.17825534192469472, 0.06598480298065335, 0.07597690808434254, 0.06191915143212012, 0.07550367092694432, 0.06143735584560128, 0.07485225290862252, 0.0647464205098317, 0.0628372242138896, 0.07277016034455397]}, "mutation_prompt": null}
{"id": "331a815f-f096-46e9-a0d0-50346a028b1b", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self):\n        chaos_params = np.random.uniform(0, 1, self.dim)  # Dynamic chaos parameters\n        return chaos_params\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation()  # Dynamic chaos-driven mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Improving population diversity by introducing a dynamic chaos-driven mutation strategy.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "bad2faa4-bb15-42fb-b726-72c3bf1b6aed", "metadata": {"aucs": [0.2955451911285609, 0.26975570877933575, 0.2968555966466092, 0.30156610468508227, 0.24532197010559842, 0.27950660676208194, 0.28422536302934354, 0.2723238313976253, 0.24700070752839232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05354693787120801, 0.0697235623737168, 0.044435135079351484, 0.0787038709810911, 0.0711963197683323, 0.06594925092857429, 0.075546948501519, 0.05451904135894092, 0.06866823576523329, 0.058088716984816546, 0.042738759081630495, 0.06371395855035022, 0.04991025558200812, 0.048683119223307925, 0.042686488264861655, 0.04053807516418495, 0.04553858267622857, 0.034753517428664726, 0.10157558813705037, 0.0747471185677121, 0.07562785757035306, 0.08667556466632975, 0.08923304879871852, 0.12219440419688232, 0.11548771727229701, 0.10662922596888114, 0.09820119271607786, 0.12312290811637361, 0.0829825761197428, 0.14373558311978563, 0.15221295207899288, 0.13831445134309228, 0.15223202141460856, 0.16036869522831843, 0.09991066616924904, 0.11205264537084181, 0.21849601244257877, 0.17300042127306492, 0.15397406263454327, 0.19243815544396548, 0.16522311907517673, 0.17566052972168744, 0.14561641748689214, 0.1697464175539526, 0.21968659103276822, 0.1480285972520956, 0.09696522247970574, 0.08752103125389898, 0.0599781554232095, 0.1063475638867567, 0.06636946487491935, 0.10289458898388293, 0.10652472513722511, 0.09482031198582752, 0.09585022022621437, 0.1168658822459705, 0.09466658175458176, 0.09597901497285088, 0.06813087288656916, 0.0937394137109715, 0.09026008354694748, 0.09350849804506656, 0.09697085201378408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06851949453101747, 0.06794092854605027, 0.08000009676727693, 0.045142464387523784, 0.10223811958816276, 0.07709317479176458, 0.12485958845023726, 0.07782869740454457, 0.07514391760877592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009304552397076282, 0.048343207136801736, 0.05424836193179983, 0.021665470443681945, 0.02272599086690774, 0.0205807417719438, 0.039984073607029824, 0.02676650853158169, 0.02778731369295051, 0.30645137509778575, 0.3349490384410371, 0.2931358713627932, 0.27949268837025554, 0.2614028192118356, 0.22663592478973638, 0.25782275808066535, 0.2761700787432384, 0.2790554466773829, 0.03974586691588211, 0.03739386127037292, 0.02218566747917705, 0.05289339000916804, 0.05588640361259245, 0.05575040039207557, 0.06493560336225912, 0.06240607514493024, 0.07601698356298325, 0.16565938873809394, 0.14655391705708387, 0.16342040742549924, 0.15848969621611209, 0.1827307766532783, 0.1723725136134895, 0.15870243591679556, 0.15270510370419366, 0.16177061001826953, 0.171088585222389, 0.22905960117000967, 0.14765421660578137, 0.18781030570654955, 0.20637462344436253, 0.20610946498046656, 0.15713416059247598, 0.2176418095377448, 0.1449034231501639, 0.10599447148887864, 0.16167997106813914, 0.12644562554565708, 0.12744711382733875, 0.16385212865490162, 0.15534674630003575, 0.1252534203549711, 0.17204116085533172, 0.12201569910641596, 0.17027107144759357, 0.17086758509279276, 0.18642190523649482, 0.17574233284720153, 0.19004751842558587, 0.18105350719550106, 0.19791879140145208, 0.1821809304666283, 0.17841572203131095, 0.16945292437182524, 0.1678983496360852, 0.16126664364367338, 0.1681163025696757, 0.18643613667915604, 0.15669053059307136, 0.1760077789278257, 0.1672862981278651, 0.16108136624721336, 0.24311366720312944, 0.1743245206787316, 0.2021746986401628, 0.3672303499262751, 0.18518866832506264, 0.28809088959657936, 0.18537173008631636, 0.33414822675226563, 0.1678069157198845, 0.3578835559062884, 0.2715656764138259, 0.27091830052573607, 0.229712459232556, 0.17986319761798586, 0.20022099387450953, 0.2960586111302762, 0.22980109806598648, 0.34467451881687305, 0.20360842460795625, 0.18404494125567006, 0.17666056512157247, 0.19337019364455865, 0.18798520442106414, 0.18331531982833726, 0.18806946423666404, 0.18419314411119825, 0.17825534192469472, 0.06598480298065335, 0.07597690808434254, 0.06191915143212012, 0.07550367092694432, 0.06143735584560128, 0.07485225290862252, 0.0647464205098317, 0.0628372242138896, 0.07277016034455397]}, "mutation_prompt": null}
{"id": "347bd4ce-1654-426a-80fc-3837e2293669", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self):\n        chaos_params = np.random.uniform(0, 1, self.dim)  # Dynamic chaos parameters\n        return chaos_params\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation()  # Dynamic chaos-driven mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Improving population diversity by introducing a dynamic chaos-driven mutation strategy.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bad2faa4-bb15-42fb-b726-72c3bf1b6aed", "metadata": {"aucs": [0.2955451911285609, 0.26975570877933575, 0.2968555966466092, 0.30156610468508227, 0.24532197010559842, 0.27950660676208194, 0.28422536302934354, 0.2723238313976253, 0.24700070752839232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05354693787120801, 0.0697235623737168, 0.044435135079351484, 0.0787038709810911, 0.0711963197683323, 0.06594925092857429, 0.075546948501519, 0.05451904135894092, 0.06866823576523329, 0.058088716984816546, 0.042738759081630495, 0.06371395855035022, 0.04991025558200812, 0.048683119223307925, 0.042686488264861655, 0.04053807516418495, 0.04553858267622857, 0.034753517428664726, 0.10157558813705037, 0.0747471185677121, 0.07562785757035306, 0.08667556466632975, 0.08923304879871852, 0.12219440419688232, 0.11548771727229701, 0.10662922596888114, 0.09820119271607786, 0.12312290811637361, 0.0829825761197428, 0.14373558311978563, 0.15221295207899288, 0.13831445134309228, 0.15223202141460856, 0.16036869522831843, 0.09991066616924904, 0.11205264537084181, 0.21849601244257877, 0.17300042127306492, 0.15397406263454327, 0.19243815544396548, 0.16522311907517673, 0.17566052972168744, 0.14561641748689214, 0.1697464175539526, 0.21968659103276822, 0.1480285972520956, 0.09696522247970574, 0.08752103125389898, 0.0599781554232095, 0.1063475638867567, 0.06636946487491935, 0.10289458898388293, 0.10652472513722511, 0.09482031198582752, 0.09585022022621437, 0.1168658822459705, 0.09466658175458176, 0.09597901497285088, 0.06813087288656916, 0.0937394137109715, 0.09026008354694748, 0.09350849804506656, 0.09697085201378408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06851949453101747, 0.06794092854605027, 0.08000009676727693, 0.045142464387523784, 0.10223811958816276, 0.07709317479176458, 0.12485958845023726, 0.07782869740454457, 0.07514391760877592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009304552397076282, 0.048343207136801736, 0.05424836193179983, 0.021665470443681945, 0.02272599086690774, 0.0205807417719438, 0.039984073607029824, 0.02676650853158169, 0.02778731369295051, 0.30645137509778575, 0.3349490384410371, 0.2931358713627932, 0.27949268837025554, 0.2614028192118356, 0.22663592478973638, 0.25782275808066535, 0.2761700787432384, 0.2790554466773829, 0.03974586691588211, 0.03739386127037292, 0.02218566747917705, 0.05289339000916804, 0.05588640361259245, 0.05575040039207557, 0.06493560336225912, 0.06240607514493024, 0.07601698356298325, 0.16565938873809394, 0.14655391705708387, 0.16342040742549924, 0.15848969621611209, 0.1827307766532783, 0.1723725136134895, 0.15870243591679556, 0.15270510370419366, 0.16177061001826953, 0.171088585222389, 0.22905960117000967, 0.14765421660578137, 0.18781030570654955, 0.20637462344436253, 0.20610946498046656, 0.15713416059247598, 0.2176418095377448, 0.1449034231501639, 0.10599447148887864, 0.16167997106813914, 0.12644562554565708, 0.12744711382733875, 0.16385212865490162, 0.15534674630003575, 0.1252534203549711, 0.17204116085533172, 0.12201569910641596, 0.17027107144759357, 0.17086758509279276, 0.18642190523649482, 0.17574233284720153, 0.19004751842558587, 0.18105350719550106, 0.19791879140145208, 0.1821809304666283, 0.17841572203131095, 0.16945292437182524, 0.1678983496360852, 0.16126664364367338, 0.1681163025696757, 0.18643613667915604, 0.15669053059307136, 0.1760077789278257, 0.1672862981278651, 0.16108136624721336, 0.24311366720312944, 0.1743245206787316, 0.2021746986401628, 0.3672303499262751, 0.18518866832506264, 0.28809088959657936, 0.18537173008631636, 0.33414822675226563, 0.1678069157198845, 0.3578835559062884, 0.2715656764138259, 0.27091830052573607, 0.229712459232556, 0.17986319761798586, 0.20022099387450953, 0.2960586111302762, 0.22980109806598648, 0.34467451881687305, 0.20360842460795625, 0.18404494125567006, 0.17666056512157247, 0.19337019364455865, 0.18798520442106414, 0.18331531982833726, 0.18806946423666404, 0.18419314411119825, 0.17825534192469472, 0.06598480298065335, 0.07597690808434254, 0.06191915143212012, 0.07550367092694432, 0.06143735584560128, 0.07485225290862252, 0.0647464205098317, 0.0628372242138896, 0.07277016034455397]}, "mutation_prompt": null}
{"id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self, position):\n        chaos_params = np.sin(position)  # Enhanced dynamic chaotic mapping based on particle position updates\n        return chaos_params\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation(self.particles[i])  # Enhanced dynamic chaotic mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the mutation strategy by incorporating a dynamic chaotic mapping based on particle position updates.", "configspace": "", "generation": 89, "fitness": 0.12660336403642025, "feedback": "The algorithm EnhancedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "bad2faa4-bb15-42fb-b726-72c3bf1b6aed", "metadata": {"aucs": [0.32259698985994123, 0.2691469334889047, 0.3725161754151518, 0.25588593607172916, 0.23663282736484648, 0.26606038247977315, 0.29040801450900766, 0.2806213118218108, 0.23997567954392762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04618831168323645, 0.059802300947605525, 0.040355628026189305, 0.058779379616864746, 0.06080871925133324, 0.056898318471379605, 0.0683262257836994, 0.06365498297545147, 0.07319326731039488, 0.07294735482018955, 0.05744732667951735, 0.03977957160555812, 0.05449114628228113, 0.04402801805415324, 0.02646714671984951, 0.05458836993491056, 0.035161504945395605, 0.03619358703783837, 0.14256621819354676, 0.08422865142874103, 0.09610515961867927, 0.10249726460794939, 0.13183554777193418, 0.09840567055851956, 0.11021186954651019, 0.09424767905453357, 0.10854079683239437, 0.11518914337092834, 0.08554798645854811, 0.11874359486880581, 0.18422085663950016, 0.12741318415616332, 0.14221491307675516, 0.11779203424930529, 0.09965260839889067, 0.10026812671501795, 0.20171033848050712, 0.20467954276085498, 0.17728568475589113, 0.17138245853354672, 0.1693530292012323, 0.1469674328054683, 0.14580445565738354, 0.16382865257290746, 0.19675580607789822, 0.07502097394663465, 0.10341846695835388, 0.092046542099959, 0.08853225913168716, 0.08609819943075869, 0.05911935231381105, 0.09686484585528543, 0.07846768577252261, 0.10784081704937598, 0.10169500736425141, 0.10081694257957186, 0.06816241269145518, 0.10738073925756542, 0.08890961579567103, 0.10800670431764359, 0.10006201130942516, 0.08946273167172147, 0.09881084686996677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009135566960596364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07948680755558402, 0.08126911498021105, 0.11293692337593764, 0.07528854340929192, 0.028654835094838904, 0.07939582730445705, 0.14897700655680512, 0.1038850905114852, 0.07947559638417623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03050790613246246, 0.05531402371560712, 0.03457161617901239, 0.018865935526823474, 0.037846148947104474, 0.014907765655226113, 0.01968875337685405, 0.022354712440349034, 0.05887208801064403, 0.28163041718645243, 0.2988307147818545, 0.30193344350752205, 0.25528793114800263, 0.23368183943100218, 0.2619095581035662, 0.28418728097937507, 0.2714060619592664, 0.28919286836389435, 0.04104955065708016, 0.05005243740730059, 0.019816383222075684, 0.04999277447382977, 0.05725290711452946, 0.060743902290533724, 0.08523381098041738, 0.06628851264245694, 0.06912212796003003, 0.1538104486265911, 0.15816290831810187, 0.15447105306750486, 0.2116287279925162, 0.1396252972234684, 0.15219265002248228, 0.1598521906677728, 0.1246320092652331, 0.15930545572004506, 0.157597155004908, 0.2169957085188423, 0.16970327430283194, 0.19971207135528868, 0.1890083886514793, 0.21782888290006008, 0.1481722126965389, 0.2169982090267305, 0.133712867938517, 0.1372931621472666, 0.15907871067041268, 0.12570696272233617, 0.13938964539456133, 0.15109415396187287, 0.15025805336572562, 0.11185381801017646, 0.1707005267555649, 0.10641119586630898, 0.20352363855833233, 0.17058403912716236, 0.1868710324815337, 0.19257497442095606, 0.2240287726351795, 0.17837044104288857, 0.19263321508646702, 0.19266528236298686, 0.19090032462163486, 0.15688243723658868, 0.1672653070655189, 0.1819844359757924, 0.1716085434428687, 0.17161382988782747, 0.1752466137693509, 0.16761837716473105, 0.16853916525827195, 0.16771884831016215, 0.2796083376975549, 0.29512551680785204, 0.3334889227241269, 0.3038308688122905, 0.18574823854881628, 0.3200203254637505, 0.19166117402412441, 0.3282013306517142, 0.17135146684447555, 0.3807916448417398, 0.1886354923340584, 0.24887097058140317, 0.16798318783575328, 0.25988081487714787, 0.2772889410630882, 0.2692968641978005, 0.24809403954932796, 0.1746304223093026, 0.18637548642774815, 0.1973037454053459, 0.18330309512043175, 0.18114663212995985, 0.18268057106324564, 0.1903982660309993, 0.20314232955341194, 0.19171159451407604, 0.1804760771479892, 0.05864733234017838, 0.08198425063218928, 0.061194757227986174, 0.07514083716709974, 0.06483743313705037, 0.07834819828572548, 0.0650520599849862, 0.06609364394171569, 0.06361169837977831]}, "mutation_prompt": null}
{"id": "a361e94f-b33e-4a3e-9e30-a39bf2aeaaf5", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.dynamic_param = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Dynamic parameter array\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self, position):\n        chaos_params = np.sin(position) * np.tanh(np.linalg.norm(position))  # Enhanced dynamic chaotic mapping with fitness-based adaptation\n        return chaos_params", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Incorporating a dynamic parameter adaptation based on particle fitness for mutation strategy enhancement.", "configspace": "", "generation": 90, "fitness": 0.12159960323580118, "feedback": "The algorithm EnhancedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "metadata": {"aucs": [0.283706747600628, 0.2559427680248104, 0.26494346386173506, 0.2517936852747652, 0.20139169722611583, 0.26779979962847167, 0.24659009991044667, 0.24634857524585796, 0.2382739673148907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627349992015828, 0.07418646055954792, 0.04369728345602564, 0.062301834197948436, 0.05753907309164297, 0.06047649336295835, 0.05083644864031234, 0.037314801837200706, 0.06447934637509001, 0.04970260864600473, 0.03190894103840258, 0.04933267516195261, 0.050452203766243264, 0.032447077413220726, 0.03915901577160552, 0.027947503883591907, 0.041278889779323036, 0.035598551438404846, 0.11778700719838964, 0.07795393432763509, 0.09544829972637214, 0.08832262879419628, 0.08509052110351312, 0.12600303450856354, 0.1297133610381921, 0.0955637597060961, 0.0965571650298862, 0.12221880854791067, 0.14521560426582636, 0.0932182017469213, 0.1286418422053055, 0.13645756691556632, 0.12919119557233116, 0.11806449703605537, 0.07850348479455738, 0.09195710086953002, 0.228110281180245, 0.1839790834347541, 0.154165133178211, 0.18312284508867738, 0.1689781116256951, 0.15593502772528334, 0.15864432997377098, 0.15483876003464625, 0.20763522385091615, 0.0859340722523042, 0.08560090610589, 0.07567486087105679, 0.08137744402383562, 0.11126951841108512, 0.028993835359450548, 0.0863003505817711, 0.11243657331346091, 0.07654908622536682, 0.0807423310341856, 0.07503730177715584, 0.06648565079456326, 0.07833151993563736, 0.09149846323749733, 0.09476760245710814, 0.11343005615972779, 0.0613760927296253, 0.09635063338862948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05585393109965009, 0.041559296419372505, 0.1039567738347219, 0.07250576449390356, 0.04896936156670617, 0.05310722208051344, 0.1483424154804286, 0.0882195858825704, 0.06935428681488143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021893235296886804, 0.04266695875338189, 0.017126750636681565, 0.007867076727791078, 0.021468382811663522, 0.04934043635351115, 0.04343617482239348, 0.0240203360000949, 0.01985015339253604, 0.28312791932477843, 0.252858732165981, 0.26532921710531776, 0.20582883362979998, 0.24974346184287421, 0.2394430147385299, 0.24800956440199085, 0.2940241879839921, 0.29007206106574546, 0.043797900592487116, 0.047730536660838374, 0.02363663054330678, 0.05948031480805038, 0.07019345820208378, 0.0620248372737755, 0.07245412549959818, 0.053424904968468745, 0.057671819516812994, 0.17519172425084706, 0.1437452215315872, 0.1566866228479954, 0.1551591146751925, 0.16614501486196764, 0.15467648972017833, 0.1478250159901079, 0.15004453322743172, 0.1582618474940526, 0.16732943125954536, 0.2084670950153681, 0.1860868114218831, 0.22508328559665225, 0.1972023190279515, 0.19896418978636965, 0.14195837186096272, 0.21805501663418614, 0.13120651058263944, 0.12197302758078499, 0.13986812718118358, 0.11984119057162057, 0.17509154345428524, 0.15382818617184146, 0.14219759737804494, 0.12210160978336715, 0.17351025508833207, 0.12615721482004227, 0.1871116367585508, 0.19730957334760402, 0.19225352966951514, 0.1990187189203223, 0.19047308317902556, 0.19770207712280496, 0.18559248698879915, 0.1653813500216902, 0.18512920045734127, 0.15410733482784822, 0.16650850880858503, 0.15723117700815636, 0.1652518015353016, 0.15515945739074521, 0.16274423322789555, 0.1598944791466893, 0.15534255663328056, 0.15283529469122537, 0.17933649975980448, 0.1622895705915427, 0.22303513676448505, 0.24766999148332702, 0.17883268854430134, 0.40428994021918085, 0.25365301947005714, 0.2837053314540423, 0.4010141039018117, 0.3879006470659956, 0.31454421365535934, 0.22710363385510113, 0.20160752338749954, 0.1832570981612276, 0.23320344339795862, 0.3561443952177694, 0.23075032168253562, 0.16075212635064873, 0.17720736779853996, 0.18096159261022726, 0.182229724384517, 0.18096270251109137, 0.17621081303475916, 0.1730984699063689, 0.2050029046464864, 0.17249117419870907, 0.18925169996153535, 0.07140993581055011, 0.06283932821707838, 0.05220930390643608, 0.060299927170207934, 0.07755281833081795, 0.05981199593098718, 0.07482120556371297, 0.0574482029872625, 0.08062529609444613]}, "mutation_prompt": null}
{"id": "dc338062-7f4d-4db7-807f-3576054e7a27", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(EnhancedDynamicAdaptiveHybridPSOADE):\n    def dynamic_chaos_mutation(self, position):\n        chaos_params = np.sin(position) + np.mean(position)  # Enhanced dynamic chaotic mapping based on particle position updates and population diversity\n        return chaos_params", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Improving convergence by adding adaptive chaotic mapping based on population diversity.", "configspace": "", "generation": 91, "fitness": 0.12159960323580118, "feedback": "The algorithm EnhancedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "metadata": {"aucs": [0.283706747600628, 0.2559427680248104, 0.26494346386173506, 0.2517936852747652, 0.20139169722611583, 0.26779979962847167, 0.24659009991044667, 0.24634857524585796, 0.2382739673148907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627349992015828, 0.07418646055954792, 0.04369728345602564, 0.062301834197948436, 0.05753907309164297, 0.06047649336295835, 0.05083644864031234, 0.037314801837200706, 0.06447934637509001, 0.04970260864600473, 0.03190894103840258, 0.04933267516195261, 0.050452203766243264, 0.032447077413220726, 0.03915901577160552, 0.027947503883591907, 0.041278889779323036, 0.035598551438404846, 0.11778700719838964, 0.07795393432763509, 0.09544829972637214, 0.08832262879419628, 0.08509052110351312, 0.12600303450856354, 0.1297133610381921, 0.0955637597060961, 0.0965571650298862, 0.12221880854791067, 0.14521560426582636, 0.0932182017469213, 0.1286418422053055, 0.13645756691556632, 0.12919119557233116, 0.11806449703605537, 0.07850348479455738, 0.09195710086953002, 0.228110281180245, 0.1839790834347541, 0.154165133178211, 0.18312284508867738, 0.1689781116256951, 0.15593502772528334, 0.15864432997377098, 0.15483876003464625, 0.20763522385091615, 0.0859340722523042, 0.08560090610589, 0.07567486087105679, 0.08137744402383562, 0.11126951841108512, 0.028993835359450548, 0.0863003505817711, 0.11243657331346091, 0.07654908622536682, 0.0807423310341856, 0.07503730177715584, 0.06648565079456326, 0.07833151993563736, 0.09149846323749733, 0.09476760245710814, 0.11343005615972779, 0.0613760927296253, 0.09635063338862948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05585393109965009, 0.041559296419372505, 0.1039567738347219, 0.07250576449390356, 0.04896936156670617, 0.05310722208051344, 0.1483424154804286, 0.0882195858825704, 0.06935428681488143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021893235296886804, 0.04266695875338189, 0.017126750636681565, 0.007867076727791078, 0.021468382811663522, 0.04934043635351115, 0.04343617482239348, 0.0240203360000949, 0.01985015339253604, 0.28312791932477843, 0.252858732165981, 0.26532921710531776, 0.20582883362979998, 0.24974346184287421, 0.2394430147385299, 0.24800956440199085, 0.2940241879839921, 0.29007206106574546, 0.043797900592487116, 0.047730536660838374, 0.02363663054330678, 0.05948031480805038, 0.07019345820208378, 0.0620248372737755, 0.07245412549959818, 0.053424904968468745, 0.057671819516812994, 0.17519172425084706, 0.1437452215315872, 0.1566866228479954, 0.1551591146751925, 0.16614501486196764, 0.15467648972017833, 0.1478250159901079, 0.15004453322743172, 0.1582618474940526, 0.16732943125954536, 0.2084670950153681, 0.1860868114218831, 0.22508328559665225, 0.1972023190279515, 0.19896418978636965, 0.14195837186096272, 0.21805501663418614, 0.13120651058263944, 0.12197302758078499, 0.13986812718118358, 0.11984119057162057, 0.17509154345428524, 0.15382818617184146, 0.14219759737804494, 0.12210160978336715, 0.17351025508833207, 0.12615721482004227, 0.1871116367585508, 0.19730957334760402, 0.19225352966951514, 0.1990187189203223, 0.19047308317902556, 0.19770207712280496, 0.18559248698879915, 0.1653813500216902, 0.18512920045734127, 0.15410733482784822, 0.16650850880858503, 0.15723117700815636, 0.1652518015353016, 0.15515945739074521, 0.16274423322789555, 0.1598944791466893, 0.15534255663328056, 0.15283529469122537, 0.17933649975980448, 0.1622895705915427, 0.22303513676448505, 0.24766999148332702, 0.17883268854430134, 0.40428994021918085, 0.25365301947005714, 0.2837053314540423, 0.4010141039018117, 0.3879006470659956, 0.31454421365535934, 0.22710363385510113, 0.20160752338749954, 0.1832570981612276, 0.23320344339795862, 0.3561443952177694, 0.23075032168253562, 0.16075212635064873, 0.17720736779853996, 0.18096159261022726, 0.182229724384517, 0.18096270251109137, 0.17621081303475916, 0.1730984699063689, 0.2050029046464864, 0.17249117419870907, 0.18925169996153535, 0.07140993581055011, 0.06283932821707838, 0.05220930390643608, 0.060299927170207934, 0.07755281833081795, 0.05981199593098718, 0.07482120556371297, 0.0574482029872625, 0.08062529609444613]}, "mutation_prompt": null}
{"id": "14758bac-c7b5-422a-bab2-c6f5841e9fa3", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self, position):\n        chaos_params = np.sin(position)  # Enhanced dynamic chaotic mapping based on particle position updates\n        return chaos_params\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation(self.particles[i])  # Enhanced dynamic chaotic mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the mutation strategy by incorporating a dynamic chaotic mapping based on particle position updates.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "metadata": {"aucs": [0.32259698985994123, 0.2691469334889047, 0.3725161754151518, 0.25588593607172916, 0.23663282736484648, 0.26606038247977315, 0.29040801450900766, 0.2806213118218108, 0.23997567954392762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04618831168323645, 0.059802300947605525, 0.040355628026189305, 0.058779379616864746, 0.06080871925133324, 0.056898318471379605, 0.0683262257836994, 0.06365498297545147, 0.07319326731039488, 0.07294735482018955, 0.05744732667951735, 0.03977957160555812, 0.05449114628228113, 0.04402801805415324, 0.02646714671984951, 0.05458836993491056, 0.035161504945395605, 0.03619358703783837, 0.14256621819354676, 0.08422865142874103, 0.09610515961867927, 0.10249726460794939, 0.13183554777193418, 0.09840567055851956, 0.11021186954651019, 0.09424767905453357, 0.10854079683239437, 0.11518914337092834, 0.08554798645854811, 0.11874359486880581, 0.18422085663950016, 0.12741318415616332, 0.14221491307675516, 0.11779203424930529, 0.09965260839889067, 0.10026812671501795, 0.20171033848050712, 0.20467954276085498, 0.17728568475589113, 0.17138245853354672, 0.1693530292012323, 0.1469674328054683, 0.14580445565738354, 0.16382865257290746, 0.19675580607789822, 0.07502097394663465, 0.10341846695835388, 0.092046542099959, 0.08853225913168716, 0.08609819943075869, 0.05911935231381105, 0.09686484585528543, 0.07846768577252261, 0.10784081704937598, 0.10169500736425141, 0.10081694257957186, 0.06816241269145518, 0.10738073925756542, 0.08890961579567103, 0.10800670431764359, 0.10006201130942516, 0.08946273167172147, 0.09881084686996677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009135566960596364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07948680755558402, 0.08126911498021105, 0.11293692337593764, 0.07528854340929192, 0.028654835094838904, 0.07939582730445705, 0.14897700655680512, 0.1038850905114852, 0.07947559638417623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03050790613246246, 0.05531402371560712, 0.03457161617901239, 0.018865935526823474, 0.037846148947104474, 0.014907765655226113, 0.01968875337685405, 0.022354712440349034, 0.05887208801064403, 0.28163041718645243, 0.2988307147818545, 0.30193344350752205, 0.25528793114800263, 0.23368183943100218, 0.2619095581035662, 0.28418728097937507, 0.2714060619592664, 0.28919286836389435, 0.04104955065708016, 0.05005243740730059, 0.019816383222075684, 0.04999277447382977, 0.05725290711452946, 0.060743902290533724, 0.08523381098041738, 0.06628851264245694, 0.06912212796003003, 0.1538104486265911, 0.15816290831810187, 0.15447105306750486, 0.2116287279925162, 0.1396252972234684, 0.15219265002248228, 0.1598521906677728, 0.1246320092652331, 0.15930545572004506, 0.157597155004908, 0.2169957085188423, 0.16970327430283194, 0.19971207135528868, 0.1890083886514793, 0.21782888290006008, 0.1481722126965389, 0.2169982090267305, 0.133712867938517, 0.1372931621472666, 0.15907871067041268, 0.12570696272233617, 0.13938964539456133, 0.15109415396187287, 0.15025805336572562, 0.11185381801017646, 0.1707005267555649, 0.10641119586630898, 0.20352363855833233, 0.17058403912716236, 0.1868710324815337, 0.19257497442095606, 0.2240287726351795, 0.17837044104288857, 0.19263321508646702, 0.19266528236298686, 0.19090032462163486, 0.15688243723658868, 0.1672653070655189, 0.1819844359757924, 0.1716085434428687, 0.17161382988782747, 0.1752466137693509, 0.16761837716473105, 0.16853916525827195, 0.16771884831016215, 0.2796083376975549, 0.29512551680785204, 0.3334889227241269, 0.3038308688122905, 0.18574823854881628, 0.3200203254637505, 0.19166117402412441, 0.3282013306517142, 0.17135146684447555, 0.3807916448417398, 0.1886354923340584, 0.24887097058140317, 0.16798318783575328, 0.25988081487714787, 0.2772889410630882, 0.2692968641978005, 0.24809403954932796, 0.1746304223093026, 0.18637548642774815, 0.1973037454053459, 0.18330309512043175, 0.18114663212995985, 0.18268057106324564, 0.1903982660309993, 0.20314232955341194, 0.19171159451407604, 0.1804760771479892, 0.05864733234017838, 0.08198425063218928, 0.061194757227986174, 0.07514083716709974, 0.06483743313705037, 0.07834819828572548, 0.0650520599849862, 0.06609364394171569, 0.06361169837977831]}, "mutation_prompt": null}
{"id": "26cbf186-ff71-4a32-ac54-2c21ac94f64a", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self, position):\n        chaos_params = np.sin(position)  # Enhanced dynamic chaotic mapping based on particle position updates\n        return chaos_params\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation(self.particles[i])  # Enhanced dynamic chaotic mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the mutation strategy by incorporating a dynamic chaotic mapping based on particle position updates.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "metadata": {"aucs": [0.32259698985994123, 0.2691469334889047, 0.3725161754151518, 0.25588593607172916, 0.23663282736484648, 0.26606038247977315, 0.29040801450900766, 0.2806213118218108, 0.23997567954392762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04618831168323645, 0.059802300947605525, 0.040355628026189305, 0.058779379616864746, 0.06080871925133324, 0.056898318471379605, 0.0683262257836994, 0.06365498297545147, 0.07319326731039488, 0.07294735482018955, 0.05744732667951735, 0.03977957160555812, 0.05449114628228113, 0.04402801805415324, 0.02646714671984951, 0.05458836993491056, 0.035161504945395605, 0.03619358703783837, 0.14256621819354676, 0.08422865142874103, 0.09610515961867927, 0.10249726460794939, 0.13183554777193418, 0.09840567055851956, 0.11021186954651019, 0.09424767905453357, 0.10854079683239437, 0.11518914337092834, 0.08554798645854811, 0.11874359486880581, 0.18422085663950016, 0.12741318415616332, 0.14221491307675516, 0.11779203424930529, 0.09965260839889067, 0.10026812671501795, 0.20171033848050712, 0.20467954276085498, 0.17728568475589113, 0.17138245853354672, 0.1693530292012323, 0.1469674328054683, 0.14580445565738354, 0.16382865257290746, 0.19675580607789822, 0.07502097394663465, 0.10341846695835388, 0.092046542099959, 0.08853225913168716, 0.08609819943075869, 0.05911935231381105, 0.09686484585528543, 0.07846768577252261, 0.10784081704937598, 0.10169500736425141, 0.10081694257957186, 0.06816241269145518, 0.10738073925756542, 0.08890961579567103, 0.10800670431764359, 0.10006201130942516, 0.08946273167172147, 0.09881084686996677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009135566960596364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07948680755558402, 0.08126911498021105, 0.11293692337593764, 0.07528854340929192, 0.028654835094838904, 0.07939582730445705, 0.14897700655680512, 0.1038850905114852, 0.07947559638417623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03050790613246246, 0.05531402371560712, 0.03457161617901239, 0.018865935526823474, 0.037846148947104474, 0.014907765655226113, 0.01968875337685405, 0.022354712440349034, 0.05887208801064403, 0.28163041718645243, 0.2988307147818545, 0.30193344350752205, 0.25528793114800263, 0.23368183943100218, 0.2619095581035662, 0.28418728097937507, 0.2714060619592664, 0.28919286836389435, 0.04104955065708016, 0.05005243740730059, 0.019816383222075684, 0.04999277447382977, 0.05725290711452946, 0.060743902290533724, 0.08523381098041738, 0.06628851264245694, 0.06912212796003003, 0.1538104486265911, 0.15816290831810187, 0.15447105306750486, 0.2116287279925162, 0.1396252972234684, 0.15219265002248228, 0.1598521906677728, 0.1246320092652331, 0.15930545572004506, 0.157597155004908, 0.2169957085188423, 0.16970327430283194, 0.19971207135528868, 0.1890083886514793, 0.21782888290006008, 0.1481722126965389, 0.2169982090267305, 0.133712867938517, 0.1372931621472666, 0.15907871067041268, 0.12570696272233617, 0.13938964539456133, 0.15109415396187287, 0.15025805336572562, 0.11185381801017646, 0.1707005267555649, 0.10641119586630898, 0.20352363855833233, 0.17058403912716236, 0.1868710324815337, 0.19257497442095606, 0.2240287726351795, 0.17837044104288857, 0.19263321508646702, 0.19266528236298686, 0.19090032462163486, 0.15688243723658868, 0.1672653070655189, 0.1819844359757924, 0.1716085434428687, 0.17161382988782747, 0.1752466137693509, 0.16761837716473105, 0.16853916525827195, 0.16771884831016215, 0.2796083376975549, 0.29512551680785204, 0.3334889227241269, 0.3038308688122905, 0.18574823854881628, 0.3200203254637505, 0.19166117402412441, 0.3282013306517142, 0.17135146684447555, 0.3807916448417398, 0.1886354923340584, 0.24887097058140317, 0.16798318783575328, 0.25988081487714787, 0.2772889410630882, 0.2692968641978005, 0.24809403954932796, 0.1746304223093026, 0.18637548642774815, 0.1973037454053459, 0.18330309512043175, 0.18114663212995985, 0.18268057106324564, 0.1903982660309993, 0.20314232955341194, 0.19171159451407604, 0.1804760771479892, 0.05864733234017838, 0.08198425063218928, 0.061194757227986174, 0.07514083716709974, 0.06483743313705037, 0.07834819828572548, 0.0650520599849862, 0.06609364394171569, 0.06361169837977831]}, "mutation_prompt": null}
{"id": "c77c1a1b-0daf-4e0b-88ee-d094c5c57cf0", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self, position):\n        chaos_params = np.sin(position)  # Enhanced dynamic chaotic mapping based on particle position updates\n        return chaos_params\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation(self.particles[i])  # Enhanced dynamic chaotic mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the mutation strategy by incorporating a dynamic chaotic mapping based on particle position updates.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "metadata": {"aucs": [0.32259698985994123, 0.2691469334889047, 0.3725161754151518, 0.25588593607172916, 0.23663282736484648, 0.26606038247977315, 0.29040801450900766, 0.2806213118218108, 0.23997567954392762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04618831168323645, 0.059802300947605525, 0.040355628026189305, 0.058779379616864746, 0.06080871925133324, 0.056898318471379605, 0.0683262257836994, 0.06365498297545147, 0.07319326731039488, 0.07294735482018955, 0.05744732667951735, 0.03977957160555812, 0.05449114628228113, 0.04402801805415324, 0.02646714671984951, 0.05458836993491056, 0.035161504945395605, 0.03619358703783837, 0.14256621819354676, 0.08422865142874103, 0.09610515961867927, 0.10249726460794939, 0.13183554777193418, 0.09840567055851956, 0.11021186954651019, 0.09424767905453357, 0.10854079683239437, 0.11518914337092834, 0.08554798645854811, 0.11874359486880581, 0.18422085663950016, 0.12741318415616332, 0.14221491307675516, 0.11779203424930529, 0.09965260839889067, 0.10026812671501795, 0.20171033848050712, 0.20467954276085498, 0.17728568475589113, 0.17138245853354672, 0.1693530292012323, 0.1469674328054683, 0.14580445565738354, 0.16382865257290746, 0.19675580607789822, 0.07502097394663465, 0.10341846695835388, 0.092046542099959, 0.08853225913168716, 0.08609819943075869, 0.05911935231381105, 0.09686484585528543, 0.07846768577252261, 0.10784081704937598, 0.10169500736425141, 0.10081694257957186, 0.06816241269145518, 0.10738073925756542, 0.08890961579567103, 0.10800670431764359, 0.10006201130942516, 0.08946273167172147, 0.09881084686996677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009135566960596364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07948680755558402, 0.08126911498021105, 0.11293692337593764, 0.07528854340929192, 0.028654835094838904, 0.07939582730445705, 0.14897700655680512, 0.1038850905114852, 0.07947559638417623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03050790613246246, 0.05531402371560712, 0.03457161617901239, 0.018865935526823474, 0.037846148947104474, 0.014907765655226113, 0.01968875337685405, 0.022354712440349034, 0.05887208801064403, 0.28163041718645243, 0.2988307147818545, 0.30193344350752205, 0.25528793114800263, 0.23368183943100218, 0.2619095581035662, 0.28418728097937507, 0.2714060619592664, 0.28919286836389435, 0.04104955065708016, 0.05005243740730059, 0.019816383222075684, 0.04999277447382977, 0.05725290711452946, 0.060743902290533724, 0.08523381098041738, 0.06628851264245694, 0.06912212796003003, 0.1538104486265911, 0.15816290831810187, 0.15447105306750486, 0.2116287279925162, 0.1396252972234684, 0.15219265002248228, 0.1598521906677728, 0.1246320092652331, 0.15930545572004506, 0.157597155004908, 0.2169957085188423, 0.16970327430283194, 0.19971207135528868, 0.1890083886514793, 0.21782888290006008, 0.1481722126965389, 0.2169982090267305, 0.133712867938517, 0.1372931621472666, 0.15907871067041268, 0.12570696272233617, 0.13938964539456133, 0.15109415396187287, 0.15025805336572562, 0.11185381801017646, 0.1707005267555649, 0.10641119586630898, 0.20352363855833233, 0.17058403912716236, 0.1868710324815337, 0.19257497442095606, 0.2240287726351795, 0.17837044104288857, 0.19263321508646702, 0.19266528236298686, 0.19090032462163486, 0.15688243723658868, 0.1672653070655189, 0.1819844359757924, 0.1716085434428687, 0.17161382988782747, 0.1752466137693509, 0.16761837716473105, 0.16853916525827195, 0.16771884831016215, 0.2796083376975549, 0.29512551680785204, 0.3334889227241269, 0.3038308688122905, 0.18574823854881628, 0.3200203254637505, 0.19166117402412441, 0.3282013306517142, 0.17135146684447555, 0.3807916448417398, 0.1886354923340584, 0.24887097058140317, 0.16798318783575328, 0.25988081487714787, 0.2772889410630882, 0.2692968641978005, 0.24809403954932796, 0.1746304223093026, 0.18637548642774815, 0.1973037454053459, 0.18330309512043175, 0.18114663212995985, 0.18268057106324564, 0.1903982660309993, 0.20314232955341194, 0.19171159451407604, 0.1804760771479892, 0.05864733234017838, 0.08198425063218928, 0.061194757227986174, 0.07514083716709974, 0.06483743313705037, 0.07834819828572548, 0.0650520599849862, 0.06609364394171569, 0.06361169837977831]}, "mutation_prompt": null}
{"id": "93b7c3d1-6d4d-46a3-b46b-ba288d61d0f1", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def crowding_factor(self):\n        distances = np.linalg.norm(self.particles[:, np.newaxis] - self.particles, axis=2)\n        crowding = np.mean(np.partition(distances, 2, axis=1)[:, :2], axis=1)\n        return crowding\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            crowding = self.crowding_factor()\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation(self.particles[i])  # Enhanced dynamic chaotic mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim) + 0.1 * crowding[i] * np.random.uniform(-1, 1, self.dim)) # Improved diversity with crowding factor\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Improving the diversity maintenance by incorporating a novel crowding factor based on particle distances.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedDynamicAdaptiveHybridPSOADE' object has no attribute 'adaptive_inertia_weight'\").", "error": "AttributeError(\"'EnhancedDynamicAdaptiveHybridPSOADE' object has no attribute 'adaptive_inertia_weight'\")", "parent_id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "metadata": {}, "mutation_prompt": null}
{"id": "90725493-e092-4dfe-858e-6e20d67de215", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self, position):\n        chaos_params = np.sin(position)  # Enhanced dynamic chaotic mapping based on particle position updates\n        return chaos_params\n\n    def dynamic_mutation_strength(self, fitness):\n        return 0.1 + 0.1 * np.tanh(fitness) + 0.05 * np.sin(fitness)  # Dynamic mutation strength adaptation\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation(self.particles[i])  # Enhanced dynamic chaotic mutation\n                    mutation_strength = self.dynamic_mutation_strength(fitness)  # Dynamic mutation strength adaptation based on fitness\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = mutation_strength * np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Introducing a dynamic mutation strength adaptation based on individual particle fitness to enhance exploration-exploitation balance.", "configspace": "", "generation": 96, "fitness": 0.12041784421238172, "feedback": "The algorithm EnhancedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "metadata": {"aucs": [0.2902163521660772, 0.22920202633800424, 0.29832401258164154, 0.23924755075224124, 0.20549923769345135, 0.2736782658122262, 0.23779457063344067, 0.22923654687524675, 0.16634933335509527, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03690079545553038, 0.0648815924059909, 0.036575756437989604, 0.0642548454133477, 0.06080489388752286, 0.048593170444637734, 0.05683549518242814, 0.059546001572972296, 0.057372715708571165, 0.05913979251163071, 0.0641564228627236, 0.038008716956148825, 0.06477197838478022, 0.0531081499045617, 0.032014023762021115, 0.042170526305743805, 0.0367916695202124, 0.03587036962880741, 0.07529849130983379, 0.06994466285550915, 0.07899318795822396, 0.08632564098299467, 0.06890458540856303, 0.09014406282347487, 0.09391226699723143, 0.07314316959645217, 0.07063516324864871, 0.15096919447322976, 0.12804385487195535, 0.07894225335847227, 0.16939010358067486, 0.09907369987102321, 0.11105635845801831, 0.13351660443836866, 0.0663259084323039, 0.06727964378580453, 0.199239270421402, 0.1723873445880748, 0.15110309302898695, 0.15380085676512734, 0.11675283183224705, 0.0986647303454884, 0.14150528444703692, 0.14069477344461034, 0.18538305903483643, 0.09160692894152656, 0.10515698042913768, 0.0920573599222676, 0.04470932188869903, 0.09952711678760828, 0.04658399461990104, 0.11613447727240767, 0.11090750406532457, 0.1116948761352774, 0.11288376548519463, 0.11375695187428103, 0.07676380189482357, 0.10341898749231881, 0.08029303092631912, 0.1097753923585233, 0.12168590575331306, 0.11029441922741712, 0.11914547643867113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0674407798860579, 0.08116123682492349, 0.132174780945863, 0.05473507063312644, 0.042107497186405274, 0.06971263806400563, 0.107537922468117, 0.050825996279933894, 0.10114029787375933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01073340220398844, 0.04657630529779111, 0.04256536997353266, 0.0013919896296284984, 0.009929212444297453, 0.012291061970365225, 0.008220808133998947, 0.015935869952757975, 0.034480147869443645, 0.2827550877661974, 0.2896758929688418, 0.2615253023449694, 0.23878290658236745, 0.18483163770524103, 0.23559836743694862, 0.23892378443465612, 0.2730697632686563, 0.27679197239471465, 0.022891594167300133, 0.03942450222770333, 0.012447354736619176, 0.052526970972264775, 0.05121278476603164, 0.05602877068487144, 0.07280882667803856, 0.05999934254738204, 0.07123976919373509, 0.1981005834903271, 0.15317769769390288, 0.1954507911811254, 0.1645471434256378, 0.19785277765015596, 0.2057420680657469, 0.1911172975133878, 0.15761810903586793, 0.15748473362517257, 0.14532268153830497, 0.18827246486011784, 0.1788173955532677, 0.17829714559337118, 0.18084810420449227, 0.22616733049199678, 0.13132475595166637, 0.20862271708354296, 0.14101985171327014, 0.11140115733746991, 0.16089786075660906, 0.11222498445245599, 0.1444242372678567, 0.1469949822119293, 0.15770849795093222, 0.091029345292309, 0.17352777103269168, 0.0879877879834996, 0.20016198217954562, 0.20413025802251772, 0.19717376541051335, 0.18365012454156482, 0.18574380133673252, 0.19033504137488033, 0.18234475006926254, 0.16956263940147054, 0.19202526692352173, 0.15179337749202582, 0.1669891553780255, 0.1686530084530259, 0.1631992683107163, 0.1948702294840422, 0.15951763852938272, 0.16168788979189996, 0.16704205292213015, 0.155675425638384, 0.25422788173771704, 0.28386603159752766, 0.2939918366447043, 0.2973892253121878, 0.18653049042933512, 0.24391401876058105, 0.1610778977362075, 0.2293423256877951, 0.20396877094893473, 0.3308364588692687, 0.31035154198472426, 0.24461521022317512, 0.17167815543176768, 0.2353373486260636, 0.30472798531053014, 0.34973506243265273, 0.2841950116612012, 0.18952176453392422, 0.2014730857876651, 0.18980957578457525, 0.18563265068997636, 0.17481149657334683, 0.19560061843389942, 0.19864646092330618, 0.19333016076235754, 0.19040396667718795, 0.18606541946067234, 0.06514517028884004, 0.0807484180122845, 0.062271867776458434, 0.0698930246208258, 0.06628320975863466, 0.0683044683362527, 0.06436083776329016, 0.06239732066027792, 0.06786741248036854]}, "mutation_prompt": null}
{"id": "826c0372-a1fd-4b6f-b45a-1ae69555ed64", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self, position):\n        chaos_params = np.sin(position)  # Enhanced dynamic chaotic mapping based on particle position updates\n        return chaos_params\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation(self.particles[i])  # Enhanced dynamic chaotic mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the mutation strategy by incorporating a dynamic chaotic mapping based on particle position updates.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "metadata": {"aucs": [0.32259698985994123, 0.2691469334889047, 0.3725161754151518, 0.25588593607172916, 0.23663282736484648, 0.26606038247977315, 0.29040801450900766, 0.2806213118218108, 0.23997567954392762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04618831168323645, 0.059802300947605525, 0.040355628026189305, 0.058779379616864746, 0.06080871925133324, 0.056898318471379605, 0.0683262257836994, 0.06365498297545147, 0.07319326731039488, 0.07294735482018955, 0.05744732667951735, 0.03977957160555812, 0.05449114628228113, 0.04402801805415324, 0.02646714671984951, 0.05458836993491056, 0.035161504945395605, 0.03619358703783837, 0.14256621819354676, 0.08422865142874103, 0.09610515961867927, 0.10249726460794939, 0.13183554777193418, 0.09840567055851956, 0.11021186954651019, 0.09424767905453357, 0.10854079683239437, 0.11518914337092834, 0.08554798645854811, 0.11874359486880581, 0.18422085663950016, 0.12741318415616332, 0.14221491307675516, 0.11779203424930529, 0.09965260839889067, 0.10026812671501795, 0.20171033848050712, 0.20467954276085498, 0.17728568475589113, 0.17138245853354672, 0.1693530292012323, 0.1469674328054683, 0.14580445565738354, 0.16382865257290746, 0.19675580607789822, 0.07502097394663465, 0.10341846695835388, 0.092046542099959, 0.08853225913168716, 0.08609819943075869, 0.05911935231381105, 0.09686484585528543, 0.07846768577252261, 0.10784081704937598, 0.10169500736425141, 0.10081694257957186, 0.06816241269145518, 0.10738073925756542, 0.08890961579567103, 0.10800670431764359, 0.10006201130942516, 0.08946273167172147, 0.09881084686996677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009135566960596364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07948680755558402, 0.08126911498021105, 0.11293692337593764, 0.07528854340929192, 0.028654835094838904, 0.07939582730445705, 0.14897700655680512, 0.1038850905114852, 0.07947559638417623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03050790613246246, 0.05531402371560712, 0.03457161617901239, 0.018865935526823474, 0.037846148947104474, 0.014907765655226113, 0.01968875337685405, 0.022354712440349034, 0.05887208801064403, 0.28163041718645243, 0.2988307147818545, 0.30193344350752205, 0.25528793114800263, 0.23368183943100218, 0.2619095581035662, 0.28418728097937507, 0.2714060619592664, 0.28919286836389435, 0.04104955065708016, 0.05005243740730059, 0.019816383222075684, 0.04999277447382977, 0.05725290711452946, 0.060743902290533724, 0.08523381098041738, 0.06628851264245694, 0.06912212796003003, 0.1538104486265911, 0.15816290831810187, 0.15447105306750486, 0.2116287279925162, 0.1396252972234684, 0.15219265002248228, 0.1598521906677728, 0.1246320092652331, 0.15930545572004506, 0.157597155004908, 0.2169957085188423, 0.16970327430283194, 0.19971207135528868, 0.1890083886514793, 0.21782888290006008, 0.1481722126965389, 0.2169982090267305, 0.133712867938517, 0.1372931621472666, 0.15907871067041268, 0.12570696272233617, 0.13938964539456133, 0.15109415396187287, 0.15025805336572562, 0.11185381801017646, 0.1707005267555649, 0.10641119586630898, 0.20352363855833233, 0.17058403912716236, 0.1868710324815337, 0.19257497442095606, 0.2240287726351795, 0.17837044104288857, 0.19263321508646702, 0.19266528236298686, 0.19090032462163486, 0.15688243723658868, 0.1672653070655189, 0.1819844359757924, 0.1716085434428687, 0.17161382988782747, 0.1752466137693509, 0.16761837716473105, 0.16853916525827195, 0.16771884831016215, 0.2796083376975549, 0.29512551680785204, 0.3334889227241269, 0.3038308688122905, 0.18574823854881628, 0.3200203254637505, 0.19166117402412441, 0.3282013306517142, 0.17135146684447555, 0.3807916448417398, 0.1886354923340584, 0.24887097058140317, 0.16798318783575328, 0.25988081487714787, 0.2772889410630882, 0.2692968641978005, 0.24809403954932796, 0.1746304223093026, 0.18637548642774815, 0.1973037454053459, 0.18330309512043175, 0.18114663212995985, 0.18268057106324564, 0.1903982660309993, 0.20314232955341194, 0.19171159451407604, 0.1804760771479892, 0.05864733234017838, 0.08198425063218928, 0.061194757227986174, 0.07514083716709974, 0.06483743313705037, 0.07834819828572548, 0.0650520599849862, 0.06609364394171569, 0.06361169837977831]}, "mutation_prompt": null}
{"id": "230e9835-7d3e-4b36-8e63-30a2cb72a3a3", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self, position):\n        chaos_params = np.sin(position)  # Enhanced dynamic chaotic mapping based on particle position updates\n        return chaos_params\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation(self.particles[i])  # Enhanced dynamic chaotic mutation\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim))\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the mutation strategy by incorporating a dynamic chaotic mapping based on particle position updates.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "metadata": {"aucs": [0.32259698985994123, 0.2691469334889047, 0.3725161754151518, 0.25588593607172916, 0.23663282736484648, 0.26606038247977315, 0.29040801450900766, 0.2806213118218108, 0.23997567954392762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04618831168323645, 0.059802300947605525, 0.040355628026189305, 0.058779379616864746, 0.06080871925133324, 0.056898318471379605, 0.0683262257836994, 0.06365498297545147, 0.07319326731039488, 0.07294735482018955, 0.05744732667951735, 0.03977957160555812, 0.05449114628228113, 0.04402801805415324, 0.02646714671984951, 0.05458836993491056, 0.035161504945395605, 0.03619358703783837, 0.14256621819354676, 0.08422865142874103, 0.09610515961867927, 0.10249726460794939, 0.13183554777193418, 0.09840567055851956, 0.11021186954651019, 0.09424767905453357, 0.10854079683239437, 0.11518914337092834, 0.08554798645854811, 0.11874359486880581, 0.18422085663950016, 0.12741318415616332, 0.14221491307675516, 0.11779203424930529, 0.09965260839889067, 0.10026812671501795, 0.20171033848050712, 0.20467954276085498, 0.17728568475589113, 0.17138245853354672, 0.1693530292012323, 0.1469674328054683, 0.14580445565738354, 0.16382865257290746, 0.19675580607789822, 0.07502097394663465, 0.10341846695835388, 0.092046542099959, 0.08853225913168716, 0.08609819943075869, 0.05911935231381105, 0.09686484585528543, 0.07846768577252261, 0.10784081704937598, 0.10169500736425141, 0.10081694257957186, 0.06816241269145518, 0.10738073925756542, 0.08890961579567103, 0.10800670431764359, 0.10006201130942516, 0.08946273167172147, 0.09881084686996677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009135566960596364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07948680755558402, 0.08126911498021105, 0.11293692337593764, 0.07528854340929192, 0.028654835094838904, 0.07939582730445705, 0.14897700655680512, 0.1038850905114852, 0.07947559638417623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03050790613246246, 0.05531402371560712, 0.03457161617901239, 0.018865935526823474, 0.037846148947104474, 0.014907765655226113, 0.01968875337685405, 0.022354712440349034, 0.05887208801064403, 0.28163041718645243, 0.2988307147818545, 0.30193344350752205, 0.25528793114800263, 0.23368183943100218, 0.2619095581035662, 0.28418728097937507, 0.2714060619592664, 0.28919286836389435, 0.04104955065708016, 0.05005243740730059, 0.019816383222075684, 0.04999277447382977, 0.05725290711452946, 0.060743902290533724, 0.08523381098041738, 0.06628851264245694, 0.06912212796003003, 0.1538104486265911, 0.15816290831810187, 0.15447105306750486, 0.2116287279925162, 0.1396252972234684, 0.15219265002248228, 0.1598521906677728, 0.1246320092652331, 0.15930545572004506, 0.157597155004908, 0.2169957085188423, 0.16970327430283194, 0.19971207135528868, 0.1890083886514793, 0.21782888290006008, 0.1481722126965389, 0.2169982090267305, 0.133712867938517, 0.1372931621472666, 0.15907871067041268, 0.12570696272233617, 0.13938964539456133, 0.15109415396187287, 0.15025805336572562, 0.11185381801017646, 0.1707005267555649, 0.10641119586630898, 0.20352363855833233, 0.17058403912716236, 0.1868710324815337, 0.19257497442095606, 0.2240287726351795, 0.17837044104288857, 0.19263321508646702, 0.19266528236298686, 0.19090032462163486, 0.15688243723658868, 0.1672653070655189, 0.1819844359757924, 0.1716085434428687, 0.17161382988782747, 0.1752466137693509, 0.16761837716473105, 0.16853916525827195, 0.16771884831016215, 0.2796083376975549, 0.29512551680785204, 0.3334889227241269, 0.3038308688122905, 0.18574823854881628, 0.3200203254637505, 0.19166117402412441, 0.3282013306517142, 0.17135146684447555, 0.3807916448417398, 0.1886354923340584, 0.24887097058140317, 0.16798318783575328, 0.25988081487714787, 0.2772889410630882, 0.2692968641978005, 0.24809403954932796, 0.1746304223093026, 0.18637548642774815, 0.1973037454053459, 0.18330309512043175, 0.18114663212995985, 0.18268057106324564, 0.1903982660309993, 0.20314232955341194, 0.19171159451407604, 0.1804760771479892, 0.05864733234017838, 0.08198425063218928, 0.061194757227986174, 0.07514083716709974, 0.06483743313705037, 0.07834819828572548, 0.0650520599849862, 0.06609364394171569, 0.06361169837977831]}, "mutation_prompt": null}
{"id": "53b5eafa-4e95-4bb9-8a68-254c93b019e5", "solution": "class EnhancedDynamicAdaptiveHybridPSOADE(DynamicAdaptiveHybridPSOADE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_map = np.array([0.4, 0.7, 0.9, 0.1, 0.3])  # Chaotic map parameters\n\n    def adaptive_inertia_weight(self, fitness, global_best_fitness):\n        return 0.5 + 0.3 * np.tanh(fitness - global_best_fitness) + 0.1 * np.sin(fitness)  # Enhanced inertia weight calculation\n\n    def dynamic_chaos_mutation(self, position):\n        chaos_params = np.sin(position)  # Enhanced dynamic chaotic mapping based on particle position updates\n        return chaos_params\n\n    def crowding_distance(self, i):\n        distances = np.linalg.norm(self.particles - self.particles[i], axis=1)\n        sorted_indices = np.argsort(distances)\n        return np.mean(distances[sorted_indices[1:3]])  # Novel crowding distance calculation\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            population_diversity = np.mean(np.std(self.particles, axis=0))\n            self.mutation_rate = 0.15 + 0.1 * np.tanh(population_diversity - self.diversity_threshold)  # Adjusted mutation rate calculation\n            global_best_fitness = func(self.best_positions[np.argmin(self.best_fitness)])\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                scaling_factor = 0.8 + 0.2 * np.tanh(fitness - self.best_fitness[i]) + 0.1 * np.sin(fitness)  # Enhanced scaling factor\n                inertia_weight = self.adaptive_inertia_weight(fitness, global_best_fitness)\n                if fitness < self.best_fitness[i]:\n                    self.best_fitness[i] = fitness\n                    self.best_positions[i] = self.particles[i].copy()\n                best_global_index = np.argmin(self.best_fitness)\n                best_global_position = self.best_positions[best_global_index]\n                for i in range(self.population_size):\n                    r1, r2 = np.random.uniform(0, 1, 2)\n                    chaos_params = self.dynamic_chaos_mutation(self.particles[i])  # Enhanced dynamic chaotic mutation\n                    crowding_dist = self.crowding_distance(i)  # Calculate crowding distance\n                    self.velocities[i] = scaling_factor * (inertia_weight * self.velocities[i] + 1.5 * r1 * (self.best_positions[i] - self.particles[i]) + 1.5 * r2 * (best_global_position - self.particles[i]) + chaos_params * np.random.uniform(-1, 1, self.dim) + 0.1 * crowding_dist * np.random.uniform(-1, 1, self.dim))  # Introduce crowding distance in velocity update\n                    new_position = self.particles[i] + self.velocities[i]\n                    new_position = np.clip(new_position, -5.0, 5.0)\n                    if func(new_position) < self.best_fitness[i]:\n                        self.particles[i] = new_position\n                        self.best_fitness[i] = func(new_position)\n                    if np.random.uniform() < self.mutation_rate:\n                        mutation_direction = np.random.choice([-1, 1], size=self.dim)\n                        mutation_step = np.random.uniform(0, 0.5) + 0.2 * np.tanh(np.linalg.norm(self.velocities[i])) + 0.1 * np.tanh(func(self.particles[i]) - np.mean(self.best_fitness))\n                        mutated_position = self.particles[i] + mutation_step * mutation_direction\n                        mutated_position = np.clip(mutated_position, -5.0, 5.0)\n                        if func(mutated_position) < self.best_fitness[i]:\n                            self.particles[i] = mutated_position\n                            self.best_fitness[i] = func(mutated_position)", "name": "EnhancedDynamicAdaptiveHybridPSOADE", "description": "Enhancing the diversity maintenance by introducing a novel crowding distance calculation to promote exploration.", "configspace": "", "generation": 99, "fitness": 0.12646689114326518, "feedback": "The algorithm EnhancedDynamicAdaptiveHybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "fb9b4b2a-7fce-461c-81e3-e40fdd7e86d2", "metadata": {"aucs": [0.2848740181156071, 0.2879057717863096, 0.30623415899823403, 0.2556551405086608, 0.24216173278870334, 0.2802659264093219, 0.29294840074530115, 0.27786776482533104, 0.27221801297761117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0341910198095724, 0.07820032100053964, 0.058058088546334874, 0.056397104528337016, 0.055076934952777656, 0.061115862978067925, 0.06097506897753813, 0.055265867622320886, 0.07381107201850923, 0.04525798957137317, 0.04785750935003086, 0.03240133315652216, 0.07624622980582951, 0.04322893040166531, 0.04657722420948163, 0.04098857519050669, 0.025900640449330048, 0.05675021263555846, 0.10020856928476862, 0.08337549030224267, 0.0816447616069943, 0.11353954153992907, 0.09834258455031208, 0.12930716884342142, 0.10704519919432076, 0.09216067786391868, 0.11048283038280227, 0.13585888222661469, 0.12324365106755508, 0.11419341394010896, 0.1614730062069999, 0.1324809414388517, 0.12449051677954015, 0.15475369628681346, 0.10434776135413537, 0.10631167820836984, 0.22224038320826556, 0.1579083347179452, 0.13898547430374597, 0.17964667816207858, 0.1515139098813102, 0.15169920145392934, 0.14548955193999535, 0.19161640559170723, 0.20055694382500067, 0.07252140779170713, 0.11184004585705554, 0.1036295514866068, 0.07270137893034967, 0.10243670103268232, 0.07233482361489385, 0.1271485331591684, 0.09159388066515561, 0.09353838624551558, 0.09163891249255407, 0.08166662996764862, 0.08876363522629016, 0.09564615399711451, 0.09342605738486853, 0.1002185582658045, 0.08785997582420457, 0.09795345491720542, 0.1012375160655371, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006412356782995454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08149199706181731, 0.07527712866323999, 0.10582024208909513, 0.06880741810831437, 0.03684058672100532, 0.07235237356161595, 0.05713036794944215, 0.06975912608938073, 0.07096318906465204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00961875490777997, 0.03684849824163716, 0.025632523437512433, 0.009690767559858426, 0.01752840683738266, 0.01276290278306147, 0.03394234018912101, 0.03227622516846551, 0.02941411805516836, 0.28719818200350167, 0.28089005181893456, 0.30332516330229453, 0.30056378378457627, 0.24102701523653636, 0.2347128238461843, 0.27973562265878704, 0.28020782395225086, 0.2900209563264988, 0.04716492469596123, 0.0412809181440984, 0.03473228888423929, 0.07439474744713881, 0.048597519199918726, 0.06307289433129626, 0.0816018224701105, 0.08555544432913598, 0.07654814793346354, 0.1459369302121697, 0.16629074415262346, 0.16578771273423276, 0.17446211978791815, 0.1607740285192324, 0.16495371566675898, 0.18071634280847026, 0.17155548486995553, 0.17474889292800722, 0.1582321518881188, 0.21181876774645247, 0.16316392359788734, 0.17285516094594933, 0.2037591581878594, 0.21783810409094595, 0.1581823608719185, 0.21957547386188858, 0.1380243252991491, 0.1171613799393203, 0.16149847725112998, 0.12625459346758694, 0.13023833888300795, 0.1529446970959274, 0.11141038524104552, 0.1370440808568717, 0.1664253723678898, 0.09396492084423169, 0.1847062152218365, 0.17951979116359285, 0.18258399284565774, 0.20470520634707778, 0.17620384015347212, 0.18106142415815807, 0.16096772027734552, 0.1846257020410298, 0.1884755881760236, 0.16871950497228339, 0.17658172134467132, 0.163348960266808, 0.1665089279112375, 0.1798059171581171, 0.16208745210118047, 0.16548049620146854, 0.17023097693516598, 0.1605602862102451, 0.29945941734816883, 0.2659005791592297, 0.28628746782589976, 0.29421929078423514, 0.2852596951308696, 0.26718535383523223, 0.16446400864232658, 0.34533521658876065, 0.27535129166114125, 0.3379806233113255, 0.30163951825243973, 0.32823633034255817, 0.1870846626982683, 0.18503278928435896, 0.38275315385275965, 0.24776545073987222, 0.19521755775753513, 0.19841234813352637, 0.2053238164270773, 0.19915455006466687, 0.18839114181960814, 0.19211848286741107, 0.17437300910038123, 0.1796520009378635, 0.18532920836686562, 0.19093128276628346, 0.18740647313093284, 0.0702652057251445, 0.07749511216805327, 0.06537187245387777, 0.05853691269016836, 0.07749952688250994, 0.0720939987754804, 0.0656476430110906, 0.06201382078247375, 0.06833620404776797]}, "mutation_prompt": null}
