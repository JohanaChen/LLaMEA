{"id": "a0fd9bc6-e420-4500-9c0b-6cdd8d5d07b7", "solution": "import numpy as np\n\nclass AdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= 1.2\n            else:\n                step_size *= 0.8\n\n        return best_solution", "name": "AdaptiveRandomSearch", "description": "A novel metaheuristic algorithm named Adaptive Random Search (ARS) that dynamically adjusts the step size during the optimization process based on the search history.", "configspace": "", "generation": 0, "fitness": 0.06869451310031237, "feedback": "The algorithm AdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.08.", "error": "", "parent_id": null, "metadata": {"aucs": [0.49385077519677, 0.138028986942626, 0.12812946140221737, 0.32085509381298594, 0.2273437728193437, 0.09250081382552855, 0.15900339147308873, 0.2115738695982209, 0.1269517661714119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005058311260210613, 9.999999999998899e-05, 9.999999999998899e-05, 0.01188482370927435, 9.999999999998899e-05, 0.0029060693102521684, 0.011016667554812898, 9.999999999998899e-05, 0.01961613970708409, 0.016957627131268027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11902968735283126, 0.014716282503096423, 0.03874013150731337, 0.06526073105109664, 0.026744920005715045, 0.04655720584224676, 0.07364003470966896, 0.02695245624929543, 0.04678228875665513, 0.20990390646987955, 0.0008024535327613158, 9.999999999998899e-05, 0.06307076734124917, 0.03341955143326136, 0.005369663725276808, 9.999999999998899e-05, 0.01940055850777167, 9.999999999998899e-05, 0.054844194400876733, 0.037658929017963194, 0.011832012090068789, 0.2953164608876666, 0.1690266399951934, 9.999999999998899e-05, 0.05594749512654851, 9.999999999998899e-05, 9.999999999998899e-05, 0.16895534675793955, 0.07737336473006384, 9.999999999998899e-05, 0.07560009054358852, 0.15410496518602546, 9.999999999998899e-05, 0.22087074045864663, 0.14597595260170115, 0.0012085723202853726, 0.037540254820024876, 0.13562290757954576, 9.999999999998899e-05, 0.16438667185315858, 0.15391532045266354, 9.999999999998899e-05, 0.19396686385440032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057764807068481416, 0.0565381421365424, 0.18822826160610517, 0.06333152470807202, 9.999999999998899e-05, 9.999999999998899e-05, 0.1612732059863814, 0.02388952799884758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00988167087109959, 9.999999999998899e-05, 0.07190940343406871, 9.999999999998899e-05, 9.999999999998899e-05, 0.3135869840169925, 0.35114305412653835, 0.16264765596564157, 0.33194867753968393, 0.12562186547093956, 0.004339404148997028, 0.15156217606856914, 0.15008658473182934, 0.22982200284991927, 0.002134173985857024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012604200938757137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13110217300260907, 0.07239206200454407, 0.1272179948946821, 0.060538375130543276, 0.14908866833484646, 0.07261419778945422, 0.05377307470510495, 0.071272553646051, 0.09268929047011121, 0.12674048796499282, 0.09309589075135427, 0.1030922728892334, 0.12831289743455287, 0.07270795717642398, 0.09598255733625372, 0.12447414733198581, 0.07840144855329179, 0.0759925790435596, 0.05910533790950179, 0.04760961596327562, 0.023583794336142327, 0.07525525893452922, 9.999999999998899e-05, 0.07158565537650807, 0.06955444003583033, 0.010364067752851036, 0.010921434980560973, 0.15044770749356318, 0.05903255718861933, 0.09052148916516711, 0.14340407287837076, 0.06888236312629015, 0.0846711542525147, 0.13571334497261855, 0.06184464410123258, 0.07696579137838233, 0.1392325061641746, 0.1690052073168945, 9.999999999998899e-05, 0.16430930588479442, 0.16880352803838194, 9.999999999998899e-05, 0.14972560408308055, 9.999999999998899e-05, 9.999999999998899e-05, 0.16649323631158353, 0.12034447870730924, 0.0662812865942356, 0.167748327499613, 0.07022247824491912, 0.0567527309285768, 0.08274029229971624, 0.11234059411701014, 0.07788685982833776, 0.3837986070546765, 0.10480577481143172, 0.0834270490246477, 0.08135784748948904, 0.10886217644920548, 0.021074058338763857, 0.11369864487913639, 0.05933773013486465, 0.01877679782706798, 0.12335127353940456, 0.1487429561393082, 0.1275876111026788, 0.1473908604467229, 0.1427825811042479, 0.2226510859421389, 0.24245891796235997, 0.21188927149550085, 0.19795694669813502, 0.04271499743222196, 0.018254466065204533, 0.02530513765069753, 0.025962395233667168, 0.015382480511848762, 0.031519541944670215, 0.02493642996111134, 0.009980822820272794, 0.03734225805091951]}, "mutation_prompt": null}
{"id": "88b24964-e785-41e8-9635-96fd77a6d6ff", "solution": "import numpy as np\n\nclass AdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= 1.2\n            else:\n                step_size *= 0.8\n\n        return best_solution", "name": "AdaptiveRandomSearch", "description": "A novel metaheuristic algorithm named Adaptive Random Search (ARS) that dynamically adjusts the step size during the optimization process based on the search history.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0fd9bc6-e420-4500-9c0b-6cdd8d5d07b7", "metadata": {"aucs": [0.49385077519677, 0.138028986942626, 0.12812946140221737, 0.32085509381298594, 0.2273437728193437, 0.09250081382552855, 0.15900339147308873, 0.2115738695982209, 0.1269517661714119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005058311260210613, 9.999999999998899e-05, 9.999999999998899e-05, 0.01188482370927435, 9.999999999998899e-05, 0.0029060693102521684, 0.011016667554812898, 9.999999999998899e-05, 0.01961613970708409, 0.016957627131268027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11902968735283126, 0.014716282503096423, 0.03874013150731337, 0.06526073105109664, 0.026744920005715045, 0.04655720584224676, 0.07364003470966896, 0.02695245624929543, 0.04678228875665513, 0.20990390646987955, 0.0008024535327613158, 9.999999999998899e-05, 0.06307076734124917, 0.03341955143326136, 0.005369663725276808, 9.999999999998899e-05, 0.01940055850777167, 9.999999999998899e-05, 0.054844194400876733, 0.037658929017963194, 0.011832012090068789, 0.2953164608876666, 0.1690266399951934, 9.999999999998899e-05, 0.05594749512654851, 9.999999999998899e-05, 9.999999999998899e-05, 0.16895534675793955, 0.07737336473006384, 9.999999999998899e-05, 0.07560009054358852, 0.15410496518602546, 9.999999999998899e-05, 0.22087074045864663, 0.14597595260170115, 0.0012085723202853726, 0.037540254820024876, 0.13562290757954576, 9.999999999998899e-05, 0.16438667185315858, 0.15391532045266354, 9.999999999998899e-05, 0.19396686385440032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057764807068481416, 0.0565381421365424, 0.18822826160610517, 0.06333152470807202, 9.999999999998899e-05, 9.999999999998899e-05, 0.1612732059863814, 0.02388952799884758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00988167087109959, 9.999999999998899e-05, 0.07190940343406871, 9.999999999998899e-05, 9.999999999998899e-05, 0.3135869840169925, 0.35114305412653835, 0.16264765596564157, 0.33194867753968393, 0.12562186547093956, 0.004339404148997028, 0.15156217606856914, 0.15008658473182934, 0.22982200284991927, 0.002134173985857024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012604200938757137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13110217300260907, 0.07239206200454407, 0.1272179948946821, 0.060538375130543276, 0.14908866833484646, 0.07261419778945422, 0.05377307470510495, 0.071272553646051, 0.09268929047011121, 0.12674048796499282, 0.09309589075135427, 0.1030922728892334, 0.12831289743455287, 0.07270795717642398, 0.09598255733625372, 0.12447414733198581, 0.07840144855329179, 0.0759925790435596, 0.05910533790950179, 0.04760961596327562, 0.023583794336142327, 0.07525525893452922, 9.999999999998899e-05, 0.07158565537650807, 0.06955444003583033, 0.010364067752851036, 0.010921434980560973, 0.15044770749356318, 0.05903255718861933, 0.09052148916516711, 0.14340407287837076, 0.06888236312629015, 0.0846711542525147, 0.13571334497261855, 0.06184464410123258, 0.07696579137838233, 0.1392325061641746, 0.1690052073168945, 9.999999999998899e-05, 0.16430930588479442, 0.16880352803838194, 9.999999999998899e-05, 0.14972560408308055, 9.999999999998899e-05, 9.999999999998899e-05, 0.16649323631158353, 0.12034447870730924, 0.0662812865942356, 0.167748327499613, 0.07022247824491912, 0.0567527309285768, 0.08274029229971624, 0.11234059411701014, 0.07788685982833776, 0.3837986070546765, 0.10480577481143172, 0.0834270490246477, 0.08135784748948904, 0.10886217644920548, 0.021074058338763857, 0.11369864487913639, 0.05933773013486465, 0.01877679782706798, 0.12335127353940456, 0.1487429561393082, 0.1275876111026788, 0.1473908604467229, 0.1427825811042479, 0.2226510859421389, 0.24245891796235997, 0.21188927149550085, 0.19795694669813502, 0.04271499743222196, 0.018254466065204533, 0.02530513765069753, 0.025962395233667168, 0.015382480511848762, 0.031519541944670215, 0.02493642996111134, 0.009980822820272794, 0.03734225805091951]}, "mutation_prompt": null}
{"id": "bcef5ac1-9227-4d79-b188-2cf3b4671cca", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhanced Adaptive Random Search (EARS) algorithm with adaptive step size adjustment, parameter control, and local search for improved exploration-exploitation balance.", "configspace": "", "generation": 2, "fitness": 0.1629116539888111, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "a0fd9bc6-e420-4500-9c0b-6cdd8d5d07b7", "metadata": {"aucs": [0.5455871541497632, 0.7647844842256601, 0.8323782248135843, 0.5885974080971224, 0.5858868972618468, 0.7528307108171055, 0.9308269839039065, 0.6243036096588862, 0.7149619743370423, 0.008504057695202794, 9.999999999998899e-05, 9.999999999998899e-05, 0.000360087566490086, 0.01618199400382614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018168131390723152, 0.020120584478701686, 9.999999999998899e-05, 0.026288445657940085, 9.999999999998899e-05, 0.03278827255855199, 0.039210435642137775, 9.999999999998899e-05, 0.032898482351182756, 0.02274563520200501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08204364830611699, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226713862567591, 9.999999999998899e-05, 0.44720555373400483, 0.4051886599536818, 0.5401243548237729, 0.3399273152605854, 0.2821004538062982, 0.5522418285462434, 0.7520379594412117, 0.6504386386315217, 0.4235421915083586, 0.3613657268076652, 0.33763616837825494, 0.2746384311546032, 0.3681478665432425, 0.3707065871394677, 0.3098489649832151, 0.3641614744993833, 0.358966002302314, 0.3842328981878371, 0.0794157112990973, 0.04054310480410206, 0.012015577091799456, 0.09518571578832147, 0.15561672076845645, 9.999999999998899e-05, 0.05628542295319072, 0.027928365515496822, 9.999999999998899e-05, 0.24345604445937608, 0.1326461012404172, 0.18647176138049004, 0.15454358976039861, 0.1489695955249788, 0.1562995584304524, 0.181758876067322, 0.1920368869167659, 0.17876556258270393, 0.13212536899581084, 0.1313621096820372, 0.1328958734888661, 0.2102060773266391, 0.2731263503290853, 0.16295489775475325, 0.21415756284111154, 0.1530843956459661, 0.1287595922289152, 0.015079857472840907, 9.999999999998899e-05, 0.06888939422831686, 0.010985015318503932, 0.005637064540782055, 0.0006214578551156924, 0.0006927018387292705, 9.999999999998899e-05, 0.05339791923444881, 0.11161758661036525, 0.05217416316408485, 0.13884756219559946, 0.0629196942210627, 0.024240138008014944, 0.012201398942706554, 0.17286047754579337, 0.02023587172583885, 0.06553652697332579, 0.1455827985812984, 0.05064747794866964, 0.07280286671123393, 9.999999999998899e-05, 0.16690757230688924, 0.16706192181905877, 0.09074849800587159, 0.025609654692618333, 0.010109245757346397, 0.08380064673880572, 0.1597974418264928, 0.18534619594973656, 0.09418062375442549, 0.18748962715283968, 0.06813702870061478, 0.08455097108024989, 0.08927569592038309, 0.07960268366733636, 0.48832005679015167, 0.5202791899000592, 0.45384109224802327, 0.4643279839254253, 0.4600581409476162, 0.46693729472399825, 0.4337172682372309, 0.46911579752788457, 0.4915381023351105, 0.0005994186440416716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006759209177901182, 0.0121092811434933, 9.999999999998899e-05, 0.022033223406533242, 9.999999999998899e-05, 0.10589499947041658, 0.12714992317902274, 0.18198444685596282, 0.05957275540795348, 0.06524274887821613, 0.13157230463947323, 0.09814172997045256, 0.18798817395863376, 0.12817403720532805, 0.1149044317186324, 0.10029012943339444, 0.0963675758287994, 0.14680788002779677, 0.07612284581239614, 0.09747285375956649, 0.1446365940058757, 0.0765946341159277, 0.09639719175524664, 0.054565978969111306, 0.03092767989126477, 0.030174550166300662, 0.08545969445950852, 0.0045965170114486975, 0.07452347970292772, 0.07099455588944692, 0.011126379708975787, 0.02182365641391748, 0.13174168237614703, 0.1765846772900148, 0.14663438247413074, 0.16993244974643473, 0.16093914205543747, 0.13463148563601846, 0.18243829432218683, 0.12407116562618614, 0.10688510007934637, 0.16088334930330606, 0.1617696529028655, 0.1557289520331755, 0.16377556660431491, 0.16077761758564246, 0.17345758170858627, 0.15414718406234296, 0.16783859735163897, 0.1733648609205517, 0.1895465838945093, 0.13773122384490422, 0.07124240949666638, 0.17413823615313617, 0.06601003267240468, 0.06195485319564653, 0.10831074302828714, 0.11533834214937155, 0.1670691882816605, 0.5669517006177391, 0.112919367482893, 0.06560508282359045, 0.08291348315548186, 0.21268572217809956, 0.20868149258889357, 0.44617885450383454, 0.05930098516437754, 0.3555223612872831, 0.19635551253172934, 0.19936179997455072, 0.22250697215348425, 0.17789862446397142, 0.1967161437383138, 0.1738178406942612, 0.22139222718351914, 0.20148458573617123, 0.1753376816571619, 0.041573922044277234, 0.06997946159854274, 0.02646010296816481, 0.043212410705749105, 0.017955997877215468, 0.04046153467030056, 0.026135114733784937, 0.01206078575577485, 0.03441629144457292]}, "mutation_prompt": null}
{"id": "2f2636c9-e1ef-4b9a-862e-351a24b212c7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhanced Adaptive Random Search (EARS) algorithm with adaptive step size adjustment, parameter control, and local search for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bcef5ac1-9227-4d79-b188-2cf3b4671cca", "metadata": {"aucs": [0.5455871541497632, 0.7647844842256601, 0.8323782248135843, 0.5885974080971224, 0.5858868972618468, 0.7528307108171055, 0.9308269839039065, 0.6243036096588862, 0.7149619743370423, 0.008504057695202794, 9.999999999998899e-05, 9.999999999998899e-05, 0.000360087566490086, 0.01618199400382614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018168131390723152, 0.020120584478701686, 9.999999999998899e-05, 0.026288445657940085, 9.999999999998899e-05, 0.03278827255855199, 0.039210435642137775, 9.999999999998899e-05, 0.032898482351182756, 0.02274563520200501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08204364830611699, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226713862567591, 9.999999999998899e-05, 0.44720555373400483, 0.4051886599536818, 0.5401243548237729, 0.3399273152605854, 0.2821004538062982, 0.5522418285462434, 0.7520379594412117, 0.6504386386315217, 0.4235421915083586, 0.3613657268076652, 0.33763616837825494, 0.2746384311546032, 0.3681478665432425, 0.3707065871394677, 0.3098489649832151, 0.3641614744993833, 0.358966002302314, 0.3842328981878371, 0.0794157112990973, 0.04054310480410206, 0.012015577091799456, 0.09518571578832147, 0.15561672076845645, 9.999999999998899e-05, 0.05628542295319072, 0.027928365515496822, 9.999999999998899e-05, 0.24345604445937608, 0.1326461012404172, 0.18647176138049004, 0.15454358976039861, 0.1489695955249788, 0.1562995584304524, 0.181758876067322, 0.1920368869167659, 0.17876556258270393, 0.13212536899581084, 0.1313621096820372, 0.1328958734888661, 0.2102060773266391, 0.2731263503290853, 0.16295489775475325, 0.21415756284111154, 0.1530843956459661, 0.1287595922289152, 0.015079857472840907, 9.999999999998899e-05, 0.06888939422831686, 0.010985015318503932, 0.005637064540782055, 0.0006214578551156924, 0.0006927018387292705, 9.999999999998899e-05, 0.05339791923444881, 0.11161758661036525, 0.05217416316408485, 0.13884756219559946, 0.0629196942210627, 0.024240138008014944, 0.012201398942706554, 0.17286047754579337, 0.02023587172583885, 0.06553652697332579, 0.1455827985812984, 0.05064747794866964, 0.07280286671123393, 9.999999999998899e-05, 0.16690757230688924, 0.16706192181905877, 0.09074849800587159, 0.025609654692618333, 0.010109245757346397, 0.08380064673880572, 0.1597974418264928, 0.18534619594973656, 0.09418062375442549, 0.18748962715283968, 0.06813702870061478, 0.08455097108024989, 0.08927569592038309, 0.07960268366733636, 0.48832005679015167, 0.5202791899000592, 0.45384109224802327, 0.4643279839254253, 0.4600581409476162, 0.46693729472399825, 0.4337172682372309, 0.46911579752788457, 0.4915381023351105, 0.0005994186440416716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006759209177901182, 0.0121092811434933, 9.999999999998899e-05, 0.022033223406533242, 9.999999999998899e-05, 0.10589499947041658, 0.12714992317902274, 0.18198444685596282, 0.05957275540795348, 0.06524274887821613, 0.13157230463947323, 0.09814172997045256, 0.18798817395863376, 0.12817403720532805, 0.1149044317186324, 0.10029012943339444, 0.0963675758287994, 0.14680788002779677, 0.07612284581239614, 0.09747285375956649, 0.1446365940058757, 0.0765946341159277, 0.09639719175524664, 0.054565978969111306, 0.03092767989126477, 0.030174550166300662, 0.08545969445950852, 0.0045965170114486975, 0.07452347970292772, 0.07099455588944692, 0.011126379708975787, 0.02182365641391748, 0.13174168237614703, 0.1765846772900148, 0.14663438247413074, 0.16993244974643473, 0.16093914205543747, 0.13463148563601846, 0.18243829432218683, 0.12407116562618614, 0.10688510007934637, 0.16088334930330606, 0.1617696529028655, 0.1557289520331755, 0.16377556660431491, 0.16077761758564246, 0.17345758170858627, 0.15414718406234296, 0.16783859735163897, 0.1733648609205517, 0.1895465838945093, 0.13773122384490422, 0.07124240949666638, 0.17413823615313617, 0.06601003267240468, 0.06195485319564653, 0.10831074302828714, 0.11533834214937155, 0.1670691882816605, 0.5669517006177391, 0.112919367482893, 0.06560508282359045, 0.08291348315548186, 0.21268572217809956, 0.20868149258889357, 0.44617885450383454, 0.05930098516437754, 0.3555223612872831, 0.19635551253172934, 0.19936179997455072, 0.22250697215348425, 0.17789862446397142, 0.1967161437383138, 0.1738178406942612, 0.22139222718351914, 0.20148458573617123, 0.1753376816571619, 0.041573922044277234, 0.06997946159854274, 0.02646010296816481, 0.043212410705749105, 0.017955997877215468, 0.04046153467030056, 0.026135114733784937, 0.01206078575577485, 0.03441629144457292]}, "mutation_prompt": null}
{"id": "e4a03f1b-61b6-475d-b505-b0bebbd3a8e3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhanced Adaptive Random Search (EARS) algorithm with adaptive step size adjustment, parameter control, and local search for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bcef5ac1-9227-4d79-b188-2cf3b4671cca", "metadata": {"aucs": [0.5455871541497632, 0.7647844842256601, 0.8323782248135843, 0.5885974080971224, 0.5858868972618468, 0.7528307108171055, 0.9308269839039065, 0.6243036096588862, 0.7149619743370423, 0.008504057695202794, 9.999999999998899e-05, 9.999999999998899e-05, 0.000360087566490086, 0.01618199400382614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018168131390723152, 0.020120584478701686, 9.999999999998899e-05, 0.026288445657940085, 9.999999999998899e-05, 0.03278827255855199, 0.039210435642137775, 9.999999999998899e-05, 0.032898482351182756, 0.02274563520200501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08204364830611699, 9.999999999998899e-05, 9.999999999998899e-05, 0.07226713862567591, 9.999999999998899e-05, 0.44720555373400483, 0.4051886599536818, 0.5401243548237729, 0.3399273152605854, 0.2821004538062982, 0.5522418285462434, 0.7520379594412117, 0.6504386386315217, 0.4235421915083586, 0.3613657268076652, 0.33763616837825494, 0.2746384311546032, 0.3681478665432425, 0.3707065871394677, 0.3098489649832151, 0.3641614744993833, 0.358966002302314, 0.3842328981878371, 0.0794157112990973, 0.04054310480410206, 0.012015577091799456, 0.09518571578832147, 0.15561672076845645, 9.999999999998899e-05, 0.05628542295319072, 0.027928365515496822, 9.999999999998899e-05, 0.24345604445937608, 0.1326461012404172, 0.18647176138049004, 0.15454358976039861, 0.1489695955249788, 0.1562995584304524, 0.181758876067322, 0.1920368869167659, 0.17876556258270393, 0.13212536899581084, 0.1313621096820372, 0.1328958734888661, 0.2102060773266391, 0.2731263503290853, 0.16295489775475325, 0.21415756284111154, 0.1530843956459661, 0.1287595922289152, 0.015079857472840907, 9.999999999998899e-05, 0.06888939422831686, 0.010985015318503932, 0.005637064540782055, 0.0006214578551156924, 0.0006927018387292705, 9.999999999998899e-05, 0.05339791923444881, 0.11161758661036525, 0.05217416316408485, 0.13884756219559946, 0.0629196942210627, 0.024240138008014944, 0.012201398942706554, 0.17286047754579337, 0.02023587172583885, 0.06553652697332579, 0.1455827985812984, 0.05064747794866964, 0.07280286671123393, 9.999999999998899e-05, 0.16690757230688924, 0.16706192181905877, 0.09074849800587159, 0.025609654692618333, 0.010109245757346397, 0.08380064673880572, 0.1597974418264928, 0.18534619594973656, 0.09418062375442549, 0.18748962715283968, 0.06813702870061478, 0.08455097108024989, 0.08927569592038309, 0.07960268366733636, 0.48832005679015167, 0.5202791899000592, 0.45384109224802327, 0.4643279839254253, 0.4600581409476162, 0.46693729472399825, 0.4337172682372309, 0.46911579752788457, 0.4915381023351105, 0.0005994186440416716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006759209177901182, 0.0121092811434933, 9.999999999998899e-05, 0.022033223406533242, 9.999999999998899e-05, 0.10589499947041658, 0.12714992317902274, 0.18198444685596282, 0.05957275540795348, 0.06524274887821613, 0.13157230463947323, 0.09814172997045256, 0.18798817395863376, 0.12817403720532805, 0.1149044317186324, 0.10029012943339444, 0.0963675758287994, 0.14680788002779677, 0.07612284581239614, 0.09747285375956649, 0.1446365940058757, 0.0765946341159277, 0.09639719175524664, 0.054565978969111306, 0.03092767989126477, 0.030174550166300662, 0.08545969445950852, 0.0045965170114486975, 0.07452347970292772, 0.07099455588944692, 0.011126379708975787, 0.02182365641391748, 0.13174168237614703, 0.1765846772900148, 0.14663438247413074, 0.16993244974643473, 0.16093914205543747, 0.13463148563601846, 0.18243829432218683, 0.12407116562618614, 0.10688510007934637, 0.16088334930330606, 0.1617696529028655, 0.1557289520331755, 0.16377556660431491, 0.16077761758564246, 0.17345758170858627, 0.15414718406234296, 0.16783859735163897, 0.1733648609205517, 0.1895465838945093, 0.13773122384490422, 0.07124240949666638, 0.17413823615313617, 0.06601003267240468, 0.06195485319564653, 0.10831074302828714, 0.11533834214937155, 0.1670691882816605, 0.5669517006177391, 0.112919367482893, 0.06560508282359045, 0.08291348315548186, 0.21268572217809956, 0.20868149258889357, 0.44617885450383454, 0.05930098516437754, 0.3555223612872831, 0.19635551253172934, 0.19936179997455072, 0.22250697215348425, 0.17789862446397142, 0.1967161437383138, 0.1738178406942612, 0.22139222718351914, 0.20148458573617123, 0.1753376816571619, 0.041573922044277234, 0.06997946159854274, 0.02646010296816481, 0.043212410705749105, 0.017955997877215468, 0.04046153467030056, 0.026135114733784937, 0.01206078575577485, 0.03441629144457292]}, "mutation_prompt": null}
{"id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 5, "fitness": 0.16915361047862143, "feedback": "The algorithm ImprovedEnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "bcef5ac1-9227-4d79-b188-2cf3b4671cca", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "842c243a-83f9-4505-9b63-f5b3a57acd2d", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "e1ca65e4-f370-4f12-9931-47eacd35a7a2", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "008fa55c-fc04-4fe9-a3b8-c5bef09ff505", "solution": "import numpy as np\n\nclass EnhancedImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.gamma = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n            if np.random.rand() < self.gamma:\n                step_size *= np.random.uniform(0.5, 1.5)\n\n        return best_solution", "name": "EnhancedImprovedEnhancedAdaptiveRandomSearch", "description": "Enhancing exploration by introducing adaptive mutation rates based on solution improvement history.", "configspace": "", "generation": 8, "fitness": 0.15971298707519968, "feedback": "The algorithm EnhancedImprovedEnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.5063756659539721, 0.516091380483532, 0.4890892412113468, 0.4764687507421831, 0.5509422322726718, 0.48219513850849394, 0.5077407393532936, 0.6650162087062549, 0.5534705397860165, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05005058621425218, 9.999999999998899e-05, 9.999999999998899e-05, 0.02490146637890789, 9.999999999998899e-05, 9.999999999998899e-05, 0.007340649552780243, 9.999999999998899e-05, 9.999999999998899e-05, 0.029717681852773792, 0.007570284666785332, 0.012731033280683368, 0.0469709400951871, 0.02006354944212274, 0.022268136386775716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002793750375461257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7306769266841232, 0.5707208660651903, 0.8336717241647245, 0.6833253739391096, 0.6246326279710532, 0.638876840944697, 0.4948571026404941, 0.5313832454292096, 0.1920056764850524, 0.3521132236429586, 0.3537113405421003, 0.2861738240391646, 0.3460629463907653, 0.32125338584589946, 0.37014472564908873, 0.3397087164405961, 0.3341744139259665, 0.34437203659881344, 0.09900194303262855, 0.01444944600558351, 0.014928630087389871, 0.006702524285122302, 0.0007149015225275113, 9.999999999998899e-05, 0.03585809157103226, 9.999999999998899e-05, 0.03251050377037301, 0.2123293352680644, 0.1892788768862137, 0.19188641365368952, 0.18850950709502623, 0.1685755287836801, 0.1827678089565673, 0.19964672892867974, 0.15912943411368363, 0.1662992861067929, 0.19503004323756523, 0.1340272444369297, 0.17639576946439628, 0.18271858510266348, 0.18797841718044073, 0.13810757873098356, 0.1878400032110663, 0.17326198711084528, 0.17635157307541283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060066992099535144, 9.999999999998899e-05, 0.014778046561649716, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013739718702566739, 0.017876849420590202, 0.051849496875864154, 0.1269109440566648, 0.07588790388869204, 0.0005592182990874495, 0.011369393175373776, 0.1405388398309082, 0.024884211091695585, 0.04548126120431806, 0.1939464736912071, 0.0014851888473509378, 0.055669884023895944, 0.09922657630250309, 0.10421780746724474, 0.07259796796881401, 0.061759593718510586, 0.15812572911192624, 0.09033481082669281, 0.10876899998569711, 0.1480516398606735, 0.06310674166948049, 0.15969206118992096, 0.09912447894167731, 0.07737452887087382, 0.09617978847690634, 0.08393134968741633, 0.08498144563604493, 0.45420525293209224, 0.4452689229376422, 0.44819266649249434, 0.45475861752026536, 0.45781402552421824, 0.43133466782313923, 0.4508287277251568, 0.4464683797026531, 0.4648347737799553, 9.999999999998899e-05, 0.0006139937171772969, 9.999999999998899e-05, 9.999999999998899e-05, 0.029130940392102067, 0.023595157664651145, 0.019908168112282465, 9.999999999998899e-05, 0.06383590761675217, 0.13079511158662738, 0.18513619643675105, 0.1785298796276651, 0.23869582635785935, 0.12770165942987655, 0.15751889457616908, 0.12345035823535178, 0.08406220893026606, 0.09825539995277177, 0.11491470572590956, 0.11657809108402395, 0.1153010106421567, 0.16578819986637428, 0.10604580868310254, 0.11116093284195427, 0.13590796485956091, 0.12852934614944156, 0.07903360244100399, 0.059111486130078106, 0.057798983584223085, 0.056195148050452226, 0.07882107745996203, 0.04261198707861236, 0.07401159354141529, 0.07257832528094876, 0.052494780183999334, 0.014918418411239198, 0.17470404266185924, 0.10976655809497549, 0.12837813255624675, 0.25044689523260055, 0.09805502184770942, 0.08889049801647564, 0.20539159418235742, 0.1946846687025363, 0.1381602045964393, 0.14854938855783928, 0.17067042240047425, 0.16754169622130644, 0.1706223946148735, 0.17786952498544883, 0.1863302599731761, 0.17320786492182727, 0.18284991981894105, 0.15473952718460837, 0.15937706897914272, 0.0766878953229998, 0.15964234788255594, 0.17391700438453606, 0.202808298342245, 0.1012216061183302, 0.10820749614828273, 0.11529795056135095, 0.10395720381534479, 0.1542737620948459, 0.11200742136821407, 0.5991430358265898, 0.5935311515080167, 0.15538671229321843, 0.2129217057784183, 0.11279057004318405, 0.09519061928978967, 0.11332820786595876, 0.1869733059745965, 0.16913435776447228, 0.20841941228144145, 0.18108176155857414, 0.1816584607225692, 0.23476733282346507, 0.19891020516640023, 0.1812897877365729, 0.227830269128383, 0.03089637200420292, 0.01786227010060415, 0.03655271162618012, 0.040702054633540374, 0.01826424382076186, 0.04526382128871553, 0.04741079958338046, 0.023451888972874646, 0.03323495284396816]}, "mutation_prompt": null}
{"id": "84202109-7777-4cd1-a2b1-d55b23b7ba82", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "ff328cbd-9d2c-4484-b61f-1291e48dc248", "solution": "class EnhancedDynamicAdaptiveRandomSearch(ImprovedEnhancedAdaptiveRandomSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.gamma = 0.9\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                improvement_rate = (best_fitness - candidate_fitness) / best_fitness\n                step_size *= (1 + self.gamma * improvement_rate)\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedDynamicAdaptiveRandomSearch", "description": "Refining the step size adjustment strategy to incorporate a dynamic adaptation based on the fitness improvement rate of the candidate solutions.", "configspace": "", "generation": 10, "fitness": 0.15198962772051003, "feedback": "The algorithm EnhancedDynamicAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.49019185842969737, 0.5124762798497927, 0.5119516190571973, 0.48033506033908624, 0.4657685373414453, 0.4811239186356535, 0.44498401328728054, 0.48051236846142986, 0.4576984818171572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04566786032757719, 9.999999999998899e-05, 9.999999999998899e-05, 0.015138238621214661, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029276538696505483, 9.999999999998899e-05, 9.999999999998899e-05, 0.026642516552325857, 0.00769758539722587, 0.02483014560694241, 0.03517050999706939, 0.019841638706766807, 0.024780099301433656, 0.022860496389151885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005778789736645695, 9.999999999998899e-05, 0.7147579839305, 0.36311052627700713, 0.7969816666132935, 0.6630472963560732, 0.3125839048713238, 0.6007443655122136, 0.5346347823654468, 0.6175876764216974, 0.13278177343618536, 0.34221645280136503, 0.3233701729431161, 0.27786562846678775, 0.3347220256386323, 0.34964007494464344, 0.32641735276682915, 0.3507728523449859, 0.3077283198644716, 0.33854561238099146, 0.12468545334269787, 0.050116068707878214, 0.011661485767195168, 0.006702524285122302, 9.999999999998899e-05, 0.038196872955829186, 0.057991032082878924, 0.0008474526273541949, 0.04230349926669186, 0.1806422929699063, 0.12245405703935486, 0.2188296826736269, 0.1681732761243493, 0.12869307887582948, 0.17447332156873285, 0.18035280684093447, 0.17423967741227953, 0.19731065674335246, 0.1694934124554469, 0.1383626753593128, 0.15166909730561096, 0.19795684808895286, 0.210463066489197, 0.15119472395532607, 0.20013648401911233, 0.16348031984146272, 0.16897365450639723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05742486472800423, 9.999999999998899e-05, 0.0054006343148266245, 0.0007752549057752356, 9.999999999998899e-05, 9.999999999998899e-05, 0.023886919670591533, 0.04778367497914915, 0.20935820704970864, 0.05990295847563776, 0.0016443050395608116, 0.007635233822598231, 0.13823561958713182, 0.030609346106132196, 0.033762851248508974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003649935034616303, 9.999999999998899e-05, 0.0017444021335282223, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0820644925767694, 0.1398516602163692, 0.08470317385413872, 0.14091905233106938, 0.12189330706853374, 0.1266170543669063, 0.09068155082954543, 0.11420592843963862, 0.07923619949107819, 0.4429699546677309, 0.4523268941986124, 0.46305125049465334, 0.4612660966675146, 0.4424825347261655, 0.4228583239758914, 0.4459622262976143, 0.4195224024421743, 0.4695837663500485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013227115022856228, 0.019985219085277617, 0.03168262215990303, 0.0071220049262364915, 0.06834398546918674, 0.16285900462535263, 0.22850925816866363, 0.3202242351573026, 0.18804182898335553, 0.1325071163472541, 0.17702340563426966, 0.1320676437225744, 0.28411642192609965, 0.1314883801685004, 0.11296170622994073, 0.11596142694586109, 0.11735703291502797, 0.14325242866714982, 0.10599889254897532, 0.09700551403800184, 0.13937241339830453, 0.13389396766165595, 0.07921625112609365, 0.05637775336820128, 0.05630577343219667, 0.0665277562575548, 0.11781906978369683, 0.05034281715236577, 0.09897765220200905, 0.07189375160311517, 0.07295006922541947, 0.03972701246090582, 0.18733168016300905, 0.09724501851466505, 0.13450601234282, 0.1926831922650164, 0.09452619791015238, 0.0928861281467438, 0.1948298289011151, 0.0871224706416458, 0.10879115172915899, 0.15083039212893568, 0.16986260397486563, 0.16363518739042915, 0.15418897518987162, 0.17316682055439436, 0.18374636005619072, 0.15810278277192025, 0.16990303430227538, 0.17439681773361904, 0.15951435601295638, 0.07665632032667469, 0.1597605256430017, 0.1736655571026613, 0.20283753741255628, 0.10168322450409595, 0.10824660821938437, 0.11541583565731639, 0.10416921792415945, 0.15351541941518843, 0.11288449940328937, 0.49699763991291823, 0.6844988384727553, 0.15425203844497903, 0.2106537870936781, 0.11133975801926477, 0.09482260777307949, 0.11314308103166038, 0.20840999131042082, 0.18939956498680144, 0.17721515839094681, 0.1910437332029401, 0.17289422424064393, 0.17411024873413794, 0.18794239512411803, 0.17331629177816144, 0.17453425076814766, 0.03051273745771199, 0.040228678769987924, 0.03313841509018789, 0.030640646310450048, 0.025430534367225865, 0.01667457247680193, 0.05176506478101961, 0.020635584145015096, 0.04341763190330816]}, "mutation_prompt": null}
{"id": "61fb9a28-2967-4eee-a35d-6273a04b2351", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "47653f02-dea7-44dc-8da0-4ec1419f2c1f", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "6c0faf7a-4012-4171-bc9f-cfaa242cb6f0", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "8f2d0d8c-cbf8-473b-9a7f-89c2e2885a25", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "e20dea2f-4e9b-4632-bbc8-06be0b8daf58", "solution": "import numpy as np\n\nclass AdaptiveEnhancedRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "AdaptiveEnhancedRandomSearch", "description": "Improved Enhanced Adaptive Random Search with adaptive population size and dynamic step size adjustment for enhanced exploration.", "configspace": "", "generation": 15, "fitness": 0.16915361047862143, "feedback": "The algorithm AdaptiveEnhancedRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "07c5aed4-490d-4449-9418-ef24fdaf4924", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "e366d931-89e1-4d4d-ae86-f7d5d1d29458", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "7a210549-e1ce-4ca5-a254-57584e62684f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.gamma = 0.5  # New parameter for adaptive population size selection\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        num_solutions = 5  # Adaptive population size based on the current budget\n        initial_solutions = self.initialize_population(num_solutions, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhanced Adaptive Random Search algorithm with dynamic step size adjustment, diverse initial solutions for improved exploration, and adaptive population size selection.", "configspace": "", "generation": 18, "fitness": 0.16915361047862143, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "3ce5b5f9-85a7-4777-bb9b-d398cfc4d355", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "5d9e3ad9-4925-4cf6-aab2-8cd806f55331", "solution": "import numpy as np\n\nclass ImprovedEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        return [np.random.uniform(-5.0, 5.0, dim) for _ in range(num_solutions)]\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "ImprovedEnhancedAdaptiveRandomSearch", "description": "Improved Enhanced Adaptive Random Search (EARS) algorithm with dynamic step size adjustment and diverse initial solutions for enhanced exploration.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6644265400173028, 0.9692793404906528, 0.5275520897652625, 0.49540522255976516, 0.6607181744139982, 0.6711477313356755, 0.9414768634895155, 0.8902348730571764, 0.955276937452161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0718780912577004, 9.999999999998899e-05, 9.999999999998899e-05, 0.003950481046966936, 9.999999999998899e-05, 9.999999999998899e-05, 0.019173075215374813, 0.0004272675397536396, 9.999999999998899e-05, 0.04057993436467455, 0.00781621892933071, 0.016846273572481363, 0.03583247778512144, 0.020297610497572394, 0.019361697185400817, 0.05705021167221891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065644374115536586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7409564600717264, 0.3645941659740731, 0.7789218136587348, 0.5605298473298002, 0.2834017928625533, 0.6194069517376135, 0.6190824579683369, 0.6205679950253555, 0.13564091843737192, 0.33354894390542567, 0.32261346367079735, 0.25799214553703964, 0.3871330399698052, 0.36775325880591614, 0.3382020738302486, 0.32915652459885714, 0.3316051605197676, 0.31672028735415214, 0.13768020930614056, 0.08779607893117058, 0.02005907998743861, 0.006702524285122302, 9.999999999998899e-05, 0.03183477906477106, 0.07055084240472675, 0.1359187456780777, 0.030029619814064046, 0.17783185220249376, 0.1260109194985709, 0.2095432117126247, 0.14326047449033397, 0.15007936830992674, 0.12968419838040923, 0.18286270876096244, 0.13582966634889437, 0.1923298487228, 0.13287269959607984, 0.13105553826857885, 0.19001573217533219, 0.19049233684610578, 0.1281083431029303, 0.12924697170726007, 0.20818839277066492, 0.17495881546668912, 0.1308067441346098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009979158736374338, 9.999999999998899e-05, 0.00011092357162578725, 9.999999999998899e-05, 0.0022316729301264937, 9.999999999998899e-05, 0.022414946949250725, 0.05054826155424941, 0.16867706649402026, 0.05933416980710826, 0.0031372752140006455, 0.006183866363975166, 0.13966403363425506, 0.03224259394317108, 0.035334147598401255, 0.18733157251768784, 0.023666984732583995, 9.999999999998899e-05, 9.999999999998899e-05, 0.08518136463386039, 0.11352565466892717, 9.999999999998899e-05, 0.21658688769608725, 9.999999999998899e-05, 0.05875892201944588, 0.19193039315237825, 0.15543730448466941, 0.03786015229493733, 0.1372342064914257, 0.1798684358979652, 0.07814872533359363, 0.0875156608728701, 0.08978623832634891, 0.4453538709304946, 0.4600924930376862, 0.44924893093283724, 0.4660159093147991, 0.4342910252089065, 0.4776145599767031, 0.45413615012012576, 0.43885852319930496, 0.4935105264052968, 0.002141229636409503, 0.03093061009384379, 9.999999999998899e-05, 9.999999999998899e-05, 0.013302349865166763, 0.02616558824649784, 0.044945850166025036, 0.014868881758140162, 0.06961370251379884, 0.1540120986932808, 0.2084149455928075, 0.2290538263767511, 0.1854245989482618, 0.1330380867326716, 0.18149943879941977, 0.18813324617317517, 0.3158561948748926, 0.1321260629383152, 0.11926772271734065, 0.11613426022332474, 0.11744425528309, 0.14372111876010762, 0.11064093256616037, 0.09682483419896415, 0.1753480736140436, 0.13513263885304372, 0.07915074491477314, 0.056403345209979694, 0.0777775595461746, 0.07436517699276501, 0.12162264940059764, 0.09340658747537367, 0.09860569355301907, 0.07105517785281334, 0.07862074730520585, 0.03683309407667912, 0.2096400004510478, 0.21292651852320987, 0.12508551880860563, 0.2556554772444465, 0.1524710127560449, 0.101674190782987, 0.200422240804205, 0.10090550465213488, 0.12017786060901348, 0.16270053382699456, 0.18103013273398372, 0.15932483940355235, 0.15487056413760603, 0.17450115554700152, 0.16870982744695562, 0.16546067861044134, 0.18481208616024003, 0.16345869690823378, 0.16003535869248553, 0.07667016174789865, 0.15985586915347616, 0.17391200847703836, 0.20292570679192945, 0.1019545145033175, 0.10858150203087313, 0.11537731674237894, 0.15511266130953316, 0.15439865501260353, 0.11284025970657507, 0.5504626447618735, 0.6249331971161893, 0.1550415418318507, 0.21224363066464225, 0.1128496424876001, 0.09500625287455355, 0.11322902924733314, 0.17846800927839335, 0.19068246177160775, 0.17936891192639104, 0.1881685645595812, 0.17454164027630337, 0.21891251396164058, 0.17857217705974637, 0.17695333841173966, 0.1833288011525479, 0.04362198834946396, 0.02706971683752546, 0.038286096308673745, 0.04172389963913625, 0.03029373031672844, 0.016262039253343352, 0.02655441104682521, 0.026849933493871103, 0.04489835189742719]}, "mutation_prompt": null}
{"id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 21, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "b29dd805-1cf1-47c1-8888-19252cf378fc", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "e1716e52-77c9-445a-9f73-fd6405206449", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "98bae65a-c466-4bbc-b844-8047723494e2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                self.mutation_rate = min(0.1, self.mutation_rate * 1.1)  # Dynamic mutation rate update\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n                self.mutation_rate = max(0.01, self.mutation_rate * 0.9)  # Dynamic mutation rate update\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Incorporating a dynamic mutation rate based on the fitness improvement to enhance exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "373011d6-6717-456d-92a4-12a599b60d21", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.initial_mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.initial_mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n                mutation_rate = max(0.01, mutation_rate - 0.01)  # Dynamic mutation rate update\n            else:\n                step_size *= self.beta\n                mutation_rate = min(0.5, mutation_rate + 0.01)  # Dynamic mutation rate update\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Improving the solution by introducing a dynamic mutation rate based on the fitness improvement of solutions to balance exploration and exploitation.", "configspace": "", "generation": 24, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "0faef82b-2cf2-47d6-89fa-40f87774f8f0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "33befe7a-0c02-4f04-9c25-d3b829a38095", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "b0cb7620-5d83-4cff-9237-8589edda5c57", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "391e5533-be27-4fc3-993e-773767abcddc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "dd7adf20-5855-4492-a850-942eb081f4db", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.base_mutation_rate = 0.1\n\n    def local_search(self, center, func, mutation_rate):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.base_mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        mutation_rate = self.base_mutation_rate\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func, mutation_rate)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n                mutation_rate = min(0.5, mutation_rate * 1.01)  # Dynamic mutation rate adaptation\n            else:\n                step_size *= self.beta\n                mutation_rate = max(0.01, mutation_rate * 0.99)\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Incorporating a dynamic mutation rate that adapts based on the function landscape to balance exploration and exploitation.", "configspace": "", "generation": 29, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "0af5e6c0-8c60-4fbb-9825-79cbcb9a7114", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "d176aca2-0e55-46c5-98e6-5ad340a5ae86", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "2b199070-3a1a-4000-9c1f-62d87c6129fa", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "29001aaa-434c-403e-8705-150ec7aea987", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                improvement_ratio = (best_fitness - func(best_solution)) / best_fitness\n                step_size *= self.alpha if improvement_ratio > 0.1 else self.beta\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Introducing dynamic step size adaptation based on the current fitness improvement to balance exploration and exploitation.", "configspace": "", "generation": 33, "fitness": 0.14165567659856892, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.4641306725565115, 0.4763132804207252, 0.4703917763661929, 0.502400342113316, 0.46552302694263326, 0.45163563688259256, 0.4505125611366223, 0.4772013948847986, 0.5007853591284027, 9.999999999998899e-05, 0.0011971639139516377, 0.002420371030896984, 0.047530543573275796, 9.999999999998899e-05, 0.019178609621290366, 9.999999999998899e-05, 0.007250048346283844, 9.999999999998899e-05, 9.999999999998899e-05, 0.02348607570517125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045265769340843476, 9.999999999998899e-05, 0.0031051249017362004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03314721059725123, 9.999999999998899e-05, 0.13493113355197583, 0.11989951199537285, 0.20364360620970667, 0.12523645168367115, 0.11800659980909678, 0.38826467963976974, 0.6743894390751193, 0.5335794888118346, 0.5380041592819524, 0.30592031049812074, 0.26568662845803304, 0.2931977554166296, 0.35329796245252754, 0.34331951442776787, 0.34058653000366246, 0.3094830902820872, 0.33010595095768536, 0.343750978343462, 0.058375455156078115, 9.999999999998899e-05, 0.07094715336836144, 0.03337370684997054, 9.999999999998899e-05, 9.999999999998899e-05, 0.11269798991778246, 0.03690959653793291, 9.999999999998899e-05, 0.26913867017934523, 9.999999999998899e-05, 0.12828703967595723, 0.21739153194839245, 9.999999999998899e-05, 0.1767109490483928, 0.20111767443163908, 0.11912285136078293, 0.17511701730047935, 0.19876032852185666, 0.1734705583081122, 0.1680036273011588, 0.17503221824702464, 0.1677405910552039, 0.20274348528563602, 0.19859875453199816, 0.11873803649178205, 0.21746938357233625, 0.028705646901361237, 0.04506733509086058, 0.04270388908858025, 0.05529046208100574, 0.0009784985332899065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0968703761119486, 0.03779799956881802, 0.028771255352841973, 0.041615508446918636, 0.06907747126091113, 0.050964962361879196, 0.03698208435802375, 0.1321191323804607, 0.05972499635241679, 0.07180587928301052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012219922220152446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06833806870570858, 0.027442421336173584, 0.12651822127822976, 0.10623205191033269, 0.0919760505097591, 0.12018754495476258, 0.12583357879244172, 0.13387428687067293, 0.0850873035365084, 0.43411371632285367, 0.43289907921289217, 0.4598090649075631, 0.4293037061741256, 0.4297066980618066, 0.40984079888871483, 0.4316866528818162, 0.43672509293229855, 0.4311755166280562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018001204438089502, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04317038946565577, 0.08620354707505518, 0.09656761066374098, 0.16921733809505024, 0.09298062608499336, 0.12306245713998454, 0.09066287771414794, 0.06634371040231157, 0.1719473693830036, 0.10840730991377501, 0.1316976198711174, 0.14769278922538998, 0.12901764615848532, 0.15971231984214151, 0.12605023685245964, 0.15954273411350695, 0.13692570004440108, 0.12464399940788784, 0.12180194487235163, 0.0512418973758324, 0.08571180148717594, 0.08206311924048404, 0.11258861789097574, 0.06723712708715446, 0.08658355909455351, 0.06515930725964958, 0.06311071867728657, 0.07232058451586143, 0.1709370641909641, 0.08017330924464006, 0.1366719662094762, 0.16132351915797827, 0.15038343439378965, 0.10520240675616166, 0.1745361912566441, 0.1358262230875391, 0.17821429893441454, 0.18291054145879537, 0.2164201823778945, 0.17341718669747352, 0.16987711852021026, 0.20880508101342055, 0.17782171403676106, 0.1511020660860446, 0.18339389831325603, 0.15475516085647945, 0.18696999370226985, 0.09698392195571559, 0.11733671454941486, 0.1725421730015294, 0.16543223104493643, 0.12709408578501857, 0.1087748310967841, 0.1266874245260169, 0.7460926156460833, 0.6729591932466454, 0.11315956867010624, 0.20347720650771506, 0.16661866872460884, 0.16853546102368577, 0.11277178550892497, 0.0590429481805228, 0.2119561563054957, 0.16570586331382442, 0.20940391781537482, 0.20880213955960558, 0.22309874259491425, 0.17213133202642317, 0.177138485316371, 0.15721780116478368, 0.1915272247508487, 0.17297622650556443, 0.1806137305033093, 0.05645844498562269, 0.0368956580796439, 0.032251003782702514, 0.05444269845990024, 0.03907730112741359, 0.04860317809096726, 0.024156915705942472, 0.0047679078750448856, 0.03351343141671581]}, "mutation_prompt": null}
{"id": "9df1db51-d540-40cc-b4f6-ab05876cdbc4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "7eb4a316-1f17-4e0e-9709-fa076221bba4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "95b7d5ab-9a63-4850-b0c1-c86d64fbf340", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "ec7c6744-6e3f-4d6c-8d0a-036e39e0c5e0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "13621598-a961-41a5-aba4-1dc636373d37", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "a61bca2b-6734-467c-ab6e-08548fc23624", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "2e1b8271-0829-4cc8-95ca-defdd814d11e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "a3c562e8-b4ec-4708-876a-29b4d9aab13b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            mutation_rate = np.clip(0.1 / (1 + np.sqrt(func(best_solution))), 0.01, 0.2)\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n                self.mutation_rate = mutation_rate\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Applying a dynamic mutation rate based on the fitness of the solutions to balance exploration and exploitation in the search space.", "configspace": "", "generation": 41, "fitness": 0.16495795993534515, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6706990872138556, 0.8952119425285222, 0.6680907246319447, 0.7255944283530986, 0.8380392836234783, 0.9574796427749753, 0.8061944440839917, 0.9628844354930504, 0.8347294154779196, 9.999999999998899e-05, 0.0023893121951886753, 9.999999999998899e-05, 0.00042981636838301807, 9.999999999998899e-05, 0.013001104717799361, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007414035512620654, 0.023780606703280527, 0.007293918321321868, 9.999999999998899e-05, 0.03632701747267253, 9.999999999998899e-05, 0.08198967498080456, 9.999999999998899e-05, 0.0004669945248811924, 9.999999999998899e-05, 0.008149275794145927, 9.999999999998899e-05, 9.999999999998899e-05, 0.03549344915093955, 9.999999999998899e-05, 9.999999999998899e-05, 0.040502559935860716, 9.999999999998899e-05, 0.11778459233560856, 0.12022657238645684, 0.12200786599048075, 0.11356098581999263, 0.10229265746563454, 0.1489882857004241, 0.6585104014789538, 0.4586779024658385, 0.5219589772428664, 0.33519978290334707, 0.3434380267971603, 0.28769748001053386, 0.3414882130997384, 0.336974212123789, 0.32410815550464134, 0.3400377801427058, 0.2958707457720655, 0.3154290372832578, 0.08982622933817874, 9.999999999998899e-05, 0.07449448887652454, 0.23868935436089855, 0.029738282316784548, 9.999999999998899e-05, 0.19975211667512005, 0.06777195980911332, 9.999999999998899e-05, 0.18172522834033922, 0.1310152944687759, 0.1255803095131931, 0.34705662339163323, 9.999999999998899e-05, 0.1823554234638194, 0.23497489304362706, 0.12207616677347743, 0.17271491637653236, 0.20559843446267478, 0.16886069337710996, 0.1698344470194173, 0.1782089279324116, 0.15481649703359113, 0.20499196447999224, 0.2136803769347685, 0.1361640765893961, 0.3655505896728105, 0.0028569530503126384, 0.009223464765571232, 0.034858651408177344, 0.04281921827741031, 0.006493513423171504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.073798055833589, 0.037008662397685854, 0.021873343603229456, 0.039683810496608185, 0.06541999742459959, 0.037841986191399, 0.03701430174505371, 0.12683070842351718, 0.06010267851925544, 0.07103155399421868, 9.999999999998899e-05, 0.04787449830593249, 0.11092753039113434, 0.08703964195419045, 0.1045331790073124, 0.18884596819099464, 0.025132962029290717, 0.09186102125471007, 0.1073884368545438, 0.125017640141325, 0.030369613463033462, 0.15102854144590494, 0.14036985625603515, 0.18858773843905996, 0.11322485831470552, 0.1954601210268988, 0.1815405737943433, 0.08554826261936832, 0.44547075963038874, 0.4342988001359154, 0.45011966440034235, 0.4597551160293405, 0.4701530446724014, 0.4815543951287785, 0.43176645402086156, 0.4294046278601661, 0.43630998810413635, 9.999999999998899e-05, 0.026887237122371843, 9.999999999998899e-05, 0.007820437013351889, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05047907017419706, 0.07579517162343186, 0.10520381696553782, 0.3024449582429496, 0.08981212343244738, 0.0929670031950327, 0.1249175774157466, 0.06437374608042334, 0.18658838481481255, 0.13083408587332745, 0.1338692559928868, 0.13890020589457108, 0.13321563912209877, 0.15672723441670022, 0.12443364724882044, 0.1534982977618734, 0.13489139814879691, 0.12477739677667155, 0.118323818876927, 0.051819673679659006, 0.07653703985228766, 0.07523696980982897, 0.12150656188878606, 0.13285855817416636, 0.1873789093639895, 0.06528407035025752, 0.06480407304080904, 0.07198988883394719, 0.18604512072044888, 0.09662717023173883, 0.1302661428330424, 0.1670618693361321, 0.14571994446154946, 0.10454933963689328, 0.17850291193686352, 0.13222202205168543, 0.17985688130417565, 0.15826232600047296, 0.18752972317982308, 0.1749971431242544, 0.1667225177259397, 0.1871820056883241, 0.16645673579173503, 0.20456275906666765, 0.16742160766288583, 0.16202983302206952, 0.1893653038415105, 0.09764457861684628, 0.11740708410996925, 0.1732273963877382, 0.16656665482050304, 0.1269432925908004, 0.10881819423760841, 0.1267143876975264, 0.7009752292168553, 0.6493061269149019, 0.11310463317147246, 0.21211451818451665, 0.16926736299787737, 0.16992188599385338, 0.11349659200052697, 0.1698090992738449, 0.21462104197178267, 0.16644459906656106, 0.18602776814301092, 0.16496170958914613, 0.17672699644131462, 0.17596156115733408, 0.21358548910878772, 0.20417140311362514, 0.2263105647069975, 0.1779103006997551, 0.1765761793330788, 0.0528986922366208, 0.037651140344665546, 0.031221390487081613, 0.05138401509558732, 0.03982241158659894, 0.05486793301773574, 0.020765290196252728, 0.02618810792184123, 0.03539040710303887]}, "mutation_prompt": null}
{"id": "946445df-8d19-40cb-98ec-5246141438ca", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedAdaptiveRandomSearch(EnhancedAdaptiveRandomSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.dynamic_mutation_rate = 0.1\n\n    def dynamic_local_search(self, center, func, mutation_rate):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center, mutation_rate * self.alpha\n        else:\n            return center, mutation_rate * self.beta\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        mutation_rate = self.dynamic_mutation_rate\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution, mutation_rate = self.dynamic_local_search(candidate_solution, func, mutation_rate)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "DynamicMutationEnhancedAdaptiveRandomSearch", "description": "Improving the EnhancedAdaptiveRandomSearch algorithm by incorporating a dynamic mutation mechanism based on individual performance to adapt the search space exploration.", "configspace": "", "generation": 42, "fitness": 0.17137517106226136, "feedback": "The algorithm DynamicMutationEnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "78f7cc83-5a76-417a-9a59-266f65ae2864", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "efe04c15-8d8e-40b9-888d-40c7725136b0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "36c86cd9-630b-498f-9830-55eb6ad9ebce", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1  # Initial mutation rate\n        self.dynamic_mutation = True  # Enable dynamic mutation\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def adjust_mutation_rate(self, iteration):\n        return max(0.1, min(1.0, 1.0 - (iteration / self.budget)))\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for itr in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n            \n            if self.dynamic_mutation:\n                self.mutation_rate = self.adjust_mutation_rate(itr)\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Introducing a dynamic mutation rate to adaptively adjust exploration and exploitation during the search process.", "configspace": "", "generation": 45, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "729bc1ac-16f2-4161-aeb0-213b4f39d7bb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            \n            # Dynamic mutation rate adaptation\n            self.mutation_rate = max(0.01, self.mutation_rate * 0.999)  # Decreasing mutation rate over time\n            \n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Introducing a dynamic mutation rate to adaptively adjust exploration/exploitation balance during optimization to improve convergence.", "configspace": "", "generation": 46, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "2457960f-390c-41f2-9356-ab3007fea301", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "b81aada9-a4ee-4fc6-bbc0-ae0755b1be6d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "696995fd-c038-49d5-91d0-552eeff237d0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "793521cb-2aa6-4b84-ad5e-88e56563211f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.initial_mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.initial_mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n                if np.random.rand() < mutation_rate:\n                    mutation_rate = max(0, mutation_rate - 0.01)\n            else:\n                step_size *= self.beta\n                if np.random.rand() < mutation_rate:\n                    mutation_rate = min(0.3, mutation_rate + 0.01)\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Incorporating a dynamic mutation rate based on the function landscape to adapt the search behavior.", "configspace": "", "generation": 50, "fitness": 0.1597267894628591, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.628895182393054, 0.47194238612951545, 0.5510832452504081, 0.5191301961286804, 0.8548908329410717, 0.584414038599526, 0.7363333402199014, 0.5158090658156916, 0.9702592612365304, 0.004537109448856991, 9.999999999998899e-05, 0.00908511900605058, 0.034570225154057166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006372523541821606, 9.999999999998899e-05, 0.00781517234556739, 0.024965397145271018, 0.02340806982925192, 0.004150065440336581, 0.03085067269396735, 9.999999999998899e-05, 0.09829528980194335, 9.999999999998899e-05, 0.026619800551405226, 0.010346217138701985, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02268283892787326, 0.02123956623140133, 9.999999999998899e-05, 0.05525873883579224, 9.999999999998899e-05, 0.18703322840773062, 0.13258187286034717, 0.18187572822760723, 0.12919828186120108, 0.20944078498549312, 0.19576473250801718, 0.698528132043561, 0.7763864461711305, 0.6484522541423408, 0.35747852027185467, 0.34861983525687446, 0.3031690459096894, 0.33836784513049756, 0.34233235650135285, 0.4179750547008524, 0.3381638703715807, 0.3231855490751252, 0.31085697101615406, 0.10872300257580336, 9.999999999998899e-05, 0.09846842193865757, 9.999999999998899e-05, 9.999999999998899e-05, 0.004071315528529906, 0.1014319889720342, 0.005010483771984764, 9.999999999998899e-05, 0.1861471994420142, 0.14198206750459852, 0.12871908184560976, 0.18259725909481472, 9.999999999998899e-05, 0.13250417489667166, 0.2034272411761886, 0.12056785594839636, 0.18724789361143201, 0.1950686931614789, 0.16805800848345065, 0.17356169059692927, 0.20335442623886568, 0.1742238327405754, 0.18734092300940763, 0.18563794591573846, 0.162821537665785, 0.22963269677528475, 0.00019009676335191017, 0.03615980830916943, 0.0038131215932882823, 0.03523456192848373, 0.03254529880352497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011341078611890931, 0.031804006681960706, 0.032837956888306374, 0.03509613167957282, 0.05970027826182145, 0.06063118729829364, 0.022402267270761334, 0.14518169249558233, 0.05541227489193934, 0.06526537053798842, 0.16118100929375434, 9.999999999998899e-05, 0.17544850479955199, 0.10878426179517997, 9.999999999998899e-05, 0.005627360820007921, 0.11486241718276846, 0.07949626504562435, 0.1111092821235401, 0.09659661328592484, 0.07020733312605354, 0.11857359055192795, 0.3107412312016571, 0.05726486021218602, 0.08619228376720689, 0.20593090907187106, 0.11185848066904946, 0.09623756566986885, 0.477340094833237, 0.45034089443273895, 0.4502869353540655, 0.4515770690530363, 0.4622510875109117, 0.4443444973522577, 0.44531761927686875, 0.45865773079414507, 0.4410683559926787, 0.009867311210115082, 9.999999999998899e-05, 0.02080883499765329, 0.048524950221224716, 9.999999999998899e-05, 9.999999999998899e-05, 0.08794038517355618, 9.999999999998899e-05, 0.08332331547443195, 0.10655818747818302, 0.06992088647566475, 0.15872892178002163, 0.09129968522281584, 0.09768260611890978, 0.18178192565586238, 0.12770866677017678, 0.16020843018369102, 0.2017165586118459, 0.133040136300274, 0.13363024082434982, 0.13753799572440217, 0.1656738351190783, 0.1280924354855213, 0.1726600750104026, 0.1464400712730456, 0.12479236500587543, 0.12162399307507132, 0.053530926458444816, 0.07428743439390806, 0.06318620212096504, 0.11751284608440526, 0.06241325387566199, 0.08697929706788277, 0.07968958066229737, 0.0754323982327555, 0.08493000740579315, 0.20143299156577443, 0.11405911530695789, 0.1266160319413583, 0.1809484020653429, 0.150476579826741, 0.11684249534092195, 0.19085865484880948, 0.1417687178087963, 0.16465525649533796, 0.16381614222212793, 0.19221241381938703, 0.16793294263384817, 0.18206804789363484, 0.16934937363041824, 0.18400903770777954, 0.16076079689490885, 0.16485321269805642, 0.1691255010688818, 0.18954727185952125, 0.09781503141008252, 0.1170309253672287, 0.11505064466704717, 0.1662054325322313, 0.12735470135732285, 0.10889725921175686, 0.1272835718769566, 0.732245216758304, 0.5160782669437061, 0.11351538993783672, 0.21191764292364856, 0.16864234647428822, 0.17001300615330805, 0.21324533739953044, 0.059137852067274066, 0.21512680137011508, 0.16614523382206858, 0.192133483689786, 0.1907980324762536, 0.19882312189482587, 0.18313683784814816, 0.21085164646111032, 0.16660737954933225, 0.22384953252081796, 0.2217578509670297, 0.16744297471408376, 0.08804797002972431, 0.031474442751932674, 0.034216707559272974, 0.05066501581817051, 0.044847317307365464, 0.052531843964097935, 0.06412175138430498, 0.007213863556351008, 0.05343135571497282]}, "mutation_prompt": null}
{"id": "a5c31e6b-d43a-4c15-9add-97a266281f8d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "5f6443df-767b-4e7f-934f-6e5cb793352b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "0921d7ba-886f-40ea-ac6a-c253a6c0e31f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1 * np.exp(-np.sqrt(np.log(self.dim)))\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n\n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Improving search diversification by introducing a dynamic neighborhood for local search.", "configspace": "", "generation": 53, "fitness": 0.1564128974764155, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6031135491300575, 0.6075047939512032, 0.9423286256767447, 0.6227403920454433, 0.6166413129684362, 0.6813639613114579, 0.6358037328307575, 0.93993268065645, 0.6194383113301934, 0.0004950604316207308, 9.999999999998899e-05, 9.999999999998899e-05, 0.05960297675787929, 9.999999999998899e-05, 0.006272669411610643, 9.999999999998899e-05, 0.003521659746130168, 9.999999999998899e-05, 0.034637667873176015, 0.023857294721419064, 0.016953990095178062, 9.999999999998899e-05, 0.030200523838391558, 9.999999999998899e-05, 0.07045186502147749, 9.999999999998899e-05, 9.999999999998899e-05, 0.039773353173592096, 0.004804859000747119, 9.999999999998899e-05, 9.999999999998899e-05, 0.03654986703938978, 9.999999999998899e-05, 9.999999999998899e-05, 0.04369891072627474, 9.999999999998899e-05, 0.09041967548543217, 0.09395665999691116, 0.10302091502941602, 0.08501468337698448, 0.07453400047906977, 0.09735870980765138, 0.12511321704796685, 0.09457741993346902, 0.10825980341691355, 0.44296266525840056, 0.25208117038973943, 0.264831761641135, 0.5121598567030587, 0.40718395559523235, 0.42610173434936194, 0.4067396592241316, 0.27342612030365887, 0.3286838160309412, 0.057828739915948946, 9.999999999998899e-05, 0.07451748678476511, 0.22420300792536996, 0.012186221878393355, 9.999999999998899e-05, 0.09955670904282177, 0.07683087401625233, 9.999999999998899e-05, 0.22705321431846037, 0.12860856153059352, 0.15642196615369663, 0.3448852078209942, 9.999999999998899e-05, 0.1975449284295483, 0.21574841234538034, 0.12314071503502133, 0.19440722873549166, 0.23149228605209282, 0.1851373014289266, 0.19073779588757722, 0.21642511507506446, 0.1870917344430555, 0.23081069196877424, 0.21338964248431802, 0.1595836341035738, 0.3081375113136888, 9.999999999998899e-05, 0.038719830666107735, 0.036163912568041856, 0.0133290559301813, 0.009997828596137293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060555443484598404, 0.0290608698719107, 0.024009562792735584, 0.03973559953950412, 0.06868038804471255, 0.04255370281058368, 0.042861674070949984, 0.13441246059549938, 0.0530724050666338, 0.057891115169266816, 0.28405801025107436, 0.04415317890595927, 0.06217514929351542, 0.05392740067548896, 0.10219585500687922, 0.19740467244242643, 0.12287557575859431, 0.04035751899886253, 0.1343784906471066, 0.09966878684894087, 0.03473954869433615, 0.1367251758053728, 0.20406089766714308, 0.11717026554277599, 0.11333768965082147, 0.13320338398654696, 0.17456304634977238, 0.08540332119597893, 0.5332634123173609, 0.5019870393357698, 0.527783612627627, 0.5062606011799344, 0.4908038974761515, 0.5088005487524749, 0.5086360281053706, 0.47883247252949734, 0.5237542109554518, 9.999999999998899e-05, 0.0052203852576895304, 9.999999999998899e-05, 0.018954348753439487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058071337780901344, 0.09025925022668835, 0.08376259386409746, 0.11941717541949748, 0.09351439066552025, 0.08245734805313043, 0.10497542019576556, 0.059500054545215786, 0.13251889859489963, 0.1795538667012414, 0.13253842025032558, 0.16481922813963068, 0.13576992982492375, 0.14859932521434727, 0.1279870373740447, 0.18192698454534006, 0.134965374203741, 0.12477841092882702, 0.1222297159385145, 0.05186002011230362, 0.09094531640255576, 0.0600924502973752, 0.11453918419821052, 0.06571590509809644, 0.08573791548510212, 0.06482003254819879, 0.06389914714741984, 0.07226740364503004, 0.15200482544593308, 0.0899709207420567, 0.13394260650152046, 0.16925886272174118, 0.16778713908774678, 0.12014351591714278, 0.17477898517049084, 0.1562830880226166, 0.1717949982711936, 0.16920237488538747, 0.2055185492520365, 0.2103426557222028, 0.1782855534017348, 0.16899727931262498, 0.16152625517499053, 0.17150783398479674, 0.17765940236015654, 0.17230065202317912, 0.1895415178049341, 0.09776220884506981, 0.11743958464659443, 0.17344265192891595, 0.16663347822133312, 0.126931218151636, 0.10880750159336983, 0.1269875167392045, 0.8904669950757266, 0.10504197151876249, 0.11312099725901059, 0.21245223480007835, 0.16858056998355264, 0.17004908464529211, 0.11362374401273045, 0.1700454833173609, 0.2147979586226989, 0.16429683608845158, 0.19368909298243642, 0.17246223423378448, 0.16560411527151542, 0.21586311220507592, 0.22204034856498633, 0.22977003446786093, 0.21087243755662, 0.20134588918409246, 0.1586631348597377, 0.07363484279746713, 0.05162508561667878, 0.033747860079849534, 0.0635495550855365, 0.046226135609868435, 0.042189538021788375, 0.02961526763619482, 0.029190064022072915, 0.03585667534082382]}, "mutation_prompt": null}
{"id": "263e6095-8c5a-470b-bda3-8f360950e3ff", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "ca017e47-feb4-44cf-9e10-6179d7ec147f", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedAdaptiveRandomSearch(EnhancedAdaptiveRandomSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        mutation_rate = self.mutation_rate\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n                mutation_rate = max(0.01, mutation_rate * 0.9)  # Dynamic mutation rate adjustment\n            else:\n                step_size *= self.beta\n                mutation_rate = min(0.5, mutation_rate * 1.1)\n\n        return best_solution", "name": "DynamicMutationEnhancedAdaptiveRandomSearch", "description": "Enhancing the algorithm by dynamically adjusting the mutation rate based on the fitness improvement.", "configspace": "", "generation": 55, "fitness": 0.1564128974764155, "feedback": "The algorithm DynamicMutationEnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6031135491300575, 0.6075047939512032, 0.9423286256767447, 0.6227403920454433, 0.6166413129684362, 0.6813639613114579, 0.6358037328307575, 0.93993268065645, 0.6194383113301934, 0.0004950604316207308, 9.999999999998899e-05, 9.999999999998899e-05, 0.05960297675787929, 9.999999999998899e-05, 0.006272669411610643, 9.999999999998899e-05, 0.003521659746130168, 9.999999999998899e-05, 0.034637667873176015, 0.023857294721419064, 0.016953990095178062, 9.999999999998899e-05, 0.030200523838391558, 9.999999999998899e-05, 0.07045186502147749, 9.999999999998899e-05, 9.999999999998899e-05, 0.039773353173592096, 0.004804859000747119, 9.999999999998899e-05, 9.999999999998899e-05, 0.03654986703938978, 9.999999999998899e-05, 9.999999999998899e-05, 0.04369891072627474, 9.999999999998899e-05, 0.09041967548543217, 0.09395665999691116, 0.10302091502941602, 0.08501468337698448, 0.07453400047906977, 0.09735870980765138, 0.12511321704796685, 0.09457741993346902, 0.10825980341691355, 0.44296266525840056, 0.25208117038973943, 0.264831761641135, 0.5121598567030587, 0.40718395559523235, 0.42610173434936194, 0.4067396592241316, 0.27342612030365887, 0.3286838160309412, 0.057828739915948946, 9.999999999998899e-05, 0.07451748678476511, 0.22420300792536996, 0.012186221878393355, 9.999999999998899e-05, 0.09955670904282177, 0.07683087401625233, 9.999999999998899e-05, 0.22705321431846037, 0.12860856153059352, 0.15642196615369663, 0.3448852078209942, 9.999999999998899e-05, 0.1975449284295483, 0.21574841234538034, 0.12314071503502133, 0.19440722873549166, 0.23149228605209282, 0.1851373014289266, 0.19073779588757722, 0.21642511507506446, 0.1870917344430555, 0.23081069196877424, 0.21338964248431802, 0.1595836341035738, 0.3081375113136888, 9.999999999998899e-05, 0.038719830666107735, 0.036163912568041856, 0.0133290559301813, 0.009997828596137293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060555443484598404, 0.0290608698719107, 0.024009562792735584, 0.03973559953950412, 0.06868038804471255, 0.04255370281058368, 0.042861674070949984, 0.13441246059549938, 0.0530724050666338, 0.057891115169266816, 0.28405801025107436, 0.04415317890595927, 0.06217514929351542, 0.05392740067548896, 0.10219585500687922, 0.19740467244242643, 0.12287557575859431, 0.04035751899886253, 0.1343784906471066, 0.09966878684894087, 0.03473954869433615, 0.1367251758053728, 0.20406089766714308, 0.11717026554277599, 0.11333768965082147, 0.13320338398654696, 0.17456304634977238, 0.08540332119597893, 0.5332634123173609, 0.5019870393357698, 0.527783612627627, 0.5062606011799344, 0.4908038974761515, 0.5088005487524749, 0.5086360281053706, 0.47883247252949734, 0.5237542109554518, 9.999999999998899e-05, 0.0052203852576895304, 9.999999999998899e-05, 0.018954348753439487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058071337780901344, 0.09025925022668835, 0.08376259386409746, 0.11941717541949748, 0.09351439066552025, 0.08245734805313043, 0.10497542019576556, 0.059500054545215786, 0.13251889859489963, 0.1795538667012414, 0.13253842025032558, 0.16481922813963068, 0.13576992982492375, 0.14859932521434727, 0.1279870373740447, 0.18192698454534006, 0.134965374203741, 0.12477841092882702, 0.1222297159385145, 0.05186002011230362, 0.09094531640255576, 0.0600924502973752, 0.11453918419821052, 0.06571590509809644, 0.08573791548510212, 0.06482003254819879, 0.06389914714741984, 0.07226740364503004, 0.15200482544593308, 0.0899709207420567, 0.13394260650152046, 0.16925886272174118, 0.16778713908774678, 0.12014351591714278, 0.17477898517049084, 0.1562830880226166, 0.1717949982711936, 0.16920237488538747, 0.2055185492520365, 0.2103426557222028, 0.1782855534017348, 0.16899727931262498, 0.16152625517499053, 0.17150783398479674, 0.17765940236015654, 0.17230065202317912, 0.1895415178049341, 0.09776220884506981, 0.11743958464659443, 0.17344265192891595, 0.16663347822133312, 0.126931218151636, 0.10880750159336983, 0.1269875167392045, 0.8904669950757266, 0.10504197151876249, 0.11312099725901059, 0.21245223480007835, 0.16858056998355264, 0.17004908464529211, 0.11362374401273045, 0.1700454833173609, 0.2147979586226989, 0.16429683608845158, 0.19368909298243642, 0.17246223423378448, 0.16560411527151542, 0.21586311220507592, 0.22204034856498633, 0.22977003446786093, 0.21087243755662, 0.20134588918409246, 0.1586631348597377, 0.07363484279746713, 0.05162508561667878, 0.033747860079849534, 0.0635495550855365, 0.046226135609868435, 0.042189538021788375, 0.02961526763619482, 0.029190064022072915, 0.03585667534082382]}, "mutation_prompt": null}
{"id": "fa1d42a9-61de-460b-bef4-268acdfeb482", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "237e2792-11c2-46a6-9fbd-9ad373b928b6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "cbc3f9b9-b1c9-464b-8da3-b38e063cf9ef", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "18fdc7c8-dc00-4e4f-ad03-24eb1005f6d0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "23498a9f-5cdb-4a4a-b0c5-1244eef0e9c0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "caa807b8-e127-481c-b831-3bb672b774df", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1  # Initial mutation rate\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def adaptive_mutation(self, current_fitness, prev_fitness):\n        if current_fitness < prev_fitness:\n            self.mutation_rate = min(0.5, self.mutation_rate * 1.2)  # Increase mutation rate if fitness improves\n        else:\n            self.mutation_rate = max(0.01, self.mutation_rate * 0.9)  # Decrease mutation rate if fitness does not improve\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            self.adaptive_mutation(candidate_fitness, best_fitness)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Introducing a dynamic mutation rate based on fitness improvement to adaptively adjust exploration-exploitation trade-off.", "configspace": "", "generation": 61, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "a97827bd-365d-434a-94eb-f4acbe89ccc9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "340e7093-a172-4edb-9690-6ea1c46c53ea", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "80943295-268f-47be-a62c-0409a91b00b7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "1f06178f-e4ff-4bd9-a691-e191d2ec0b60", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "f541c14a-b4ff-4f4c-9486-5e5268494b0b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "9e8c4bca-5c78-4756-8cf3-7d17c1075635", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedAdaptiveRandomSearch(EnhancedAdaptiveRandomSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n                fitness_improvement_rate = (best_fitness - candidate_fitness) / best_fitness\n                self.mutation_rate = max(0.1, min(0.5, self.mutation_rate + 0.1 * fitness_improvement_rate))\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "DynamicMutationEnhancedAdaptiveRandomSearch", "description": "Introducing a dynamic mutation rate based on the fitness improvement rate to adapt the search behavior during optimization.", "configspace": "", "generation": 67, "fitness": 0.17137517106226136, "feedback": "The algorithm DynamicMutationEnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "1ec09dab-22d7-4c26-837a-c2cdd3d961e0", "solution": "class EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n        self.min_mutation_rate = 0.01\n        self.max_mutation_rate = 0.5\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n                self.mutation_rate = min(self.mutation_rate * 1.1, self.max_mutation_rate)\n            else:\n                step_size *= self.beta\n                self.mutation_rate = max(self.mutation_rate * 0.9, self.min_mutation_rate)\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Improving convergence by dynamically adjusting the mutation rate based on the search progress.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedAdaptiveRandomSearch' object has no attribute 'initialize_population'\").", "error": "AttributeError(\"'EnhancedAdaptiveRandomSearch' object has no attribute 'initialize_population'\")", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {}, "mutation_prompt": null}
{"id": "6cd8cb22-22f0-468d-b58d-660bf2e8c633", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "4ded86f9-f2ce-44c7-809c-b7153ce4cd78", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "6397550e-6d7c-4977-802c-366dda99d486", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        \n        # Incorporating chaotic map for enhanced exploration\n        chaotic_map_values = chaotic_map(dim)\n        initial_population = [s + chaotic_map_values[i] for i, s in enumerate(initial_population)]\n\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution\n\ndef chaotic_map(dim):\n    chaotic_values = []\n    x = 0.1\n    for _ in range(dim):\n        x = 4 * x * (1 - x)\n        chaotic_values.append(x)\n    return chaotic_values", "name": "EnhancedAdaptiveRandomSearch", "description": "Improving population initialization diversity by incorporating a chaotic map for enhanced exploration.", "configspace": "", "generation": 71, "fitness": 0.1620363988641137, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6103372667467739, 0.610329536924858, 0.8978504406631739, 0.5575200437317152, 0.58229808597662, 0.5429967535526806, 0.5390627391495948, 0.9695187641284162, 0.9609273307451656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08727647938607552, 0.0005529451962582588, 9.999999999998899e-05, 9.999999999998899e-05, 0.0197014734597748, 9.999999999998899e-05, 0.004467628520519296, 0.012918760850833655, 0.021950901884110086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054031989460554875, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022685576638630245, 0.010401452195731187, 0.0009813761767963891, 9.999999999998899e-05, 0.03462219629487151, 0.00024270499779688315, 0.02602277547076992, 0.02963481375960897, 9.999999999998899e-05, 0.2763376466053996, 0.15692696879497703, 0.3008899506420696, 0.12672088806980286, 0.1264588454440263, 0.3462543184784108, 0.7111543919931512, 0.5663585338849975, 0.8901955687584475, 0.3558577816774674, 0.35727022594152835, 0.30656295161947833, 0.39237708969367147, 0.37239573265189274, 0.3147646557714988, 0.32267301708916674, 0.35154456542482815, 0.3158251734749734, 0.06594272117842215, 9.999999999998899e-05, 0.0565697028106068, 0.11720786462544874, 0.09483040864420256, 9.999999999998899e-05, 0.16493051465673148, 0.10619194531903553, 9.999999999998899e-05, 0.1816758743892064, 0.11846134772850325, 0.18230083743347292, 0.2836422568193492, 9.999999999998899e-05, 0.1905182888712844, 0.18270443508298573, 0.11816141624119025, 0.1323426810693541, 0.21549308918673826, 0.1990228503612762, 0.16595084500362045, 0.18259746593378323, 0.1702229432302671, 0.22208604276223143, 0.16336053042703702, 0.13072599539997032, 0.1367625981126508, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924666467916124, 0.011095183606624204, 0.010222630608712868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025860360525586934, 0.022652480927468743, 0.02595642057277814, 0.03967008664227856, 0.128133962217724, 0.060286588084646264, 0.043343581576387624, 0.13206218205603149, 0.0824264830453314, 0.09111476931960782, 0.07126991259435289, 0.08016432775958948, 0.03175427337800063, 0.08817595323649052, 0.11930895226980176, 0.1990401466473931, 0.13774264032178019, 0.07813655407679654, 0.09841442563843061, 0.07747569210520855, 0.015842424705596603, 0.13458495405793747, 0.07993454740241779, 0.1347198803606381, 0.08320819710232208, 0.12399044619361355, 0.1432658260961982, 0.14340437967008546, 0.46466734256731035, 0.494823951717008, 0.43684457335769133, 0.46732566054055114, 0.43794939237001773, 0.4686668838122712, 0.4381109280070655, 0.4257065963716624, 0.4536383903332749, 9.999999999998899e-05, 9.999999999998899e-05, 0.045293900672955356, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003880196301458083, 0.09220519051294707, 0.23065185114601083, 0.18966014482638172, 0.10515701953082113, 0.12271204732506868, 0.12313601416484066, 0.1793242147634908, 0.14058343638372628, 0.11136612736729234, 0.1258962313225478, 0.11362767218365499, 0.16332566236197377, 0.1412728529965359, 0.1162908984482447, 0.15545622644981472, 0.11838273003149558, 0.11986878613757834, 0.14643908517310478, 0.04462895208312945, 0.053449267673994494, 0.1057639851442278, 0.07624239302988867, 0.0537466791457506, 0.09363920965908001, 0.06471564721027045, 0.07082181170067237, 0.08029586890623974, 0.1339856370752499, 0.07280331326497036, 0.15078824223561604, 0.15302512205791807, 0.1188846852291141, 0.12760594621555044, 0.13778346634712257, 0.15095008744400618, 0.14855799581382034, 0.16109197303384792, 0.1870447169184607, 0.1747189691325668, 0.17527629559720204, 0.1995749177085363, 0.18319678113404958, 0.1814038674613887, 0.2035873372809508, 0.1787527997737639, 0.12333594417455263, 0.07001536251811413, 0.18956412947510914, 0.17394701834578408, 0.16645848759516302, 0.12749897269864263, 0.17310787537927552, 0.1270896900705064, 0.7357029836502833, 0.07346552497709602, 0.11274886878480228, 0.598958701284696, 0.17005202230554228, 0.1692416218104128, 0.06519483796621595, 0.17038138523403668, 0.07373438278836275, 0.1685986140755742, 0.19859597106263305, 0.16954934940206345, 0.17864927146543685, 0.19383943938902182, 0.20205472992068652, 0.21558997454311735, 0.18441155308271795, 0.2541463587390761, 0.19422622247214671, 0.04410181391944934, 0.041072241869975934, 0.033922766517403447, 0.0795014843176376, 0.021090345191733806, 0.04627778063722143, 0.05173113419625375, 0.010456199568788738, 0.036914168998832375]}, "mutation_prompt": null}
{"id": "501215a7-88d4-4cf2-8411-0c12fab601bb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "b8d93982-e070-4636-8658-b088e9055893", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "18e9f441-afe2-4122-9cea-de8dcf9b5274", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "4b553256-33d0-4817-a7ca-ee80c2ce10d1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "32241473-2b75-4cbd-b0c7-089aa72e3a8d", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationARS(EnhancedAdaptiveRandomSearch):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            mutation_rate = self.mutation_rate * (1 - (_ / self.budget))  # Dynamic mutation rate based on progress\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n                self.mutation_rate = mutation_rate  # Update mutation rate dynamically\n\n        return best_solution", "name": "EnhancedDynamicMutationARS", "description": "Utilizing a dynamic mutation rate based on the fitness improvement of solutions to adjust exploration-exploitation balance.", "configspace": "", "generation": 76, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedDynamicMutationARS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "1aa845af-0554-4edc-a335-e74e2c6108ee", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "971ac1e3-f759-47e7-a2cb-b516dfec40e5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "43c2d490-bcfb-45ba-8bd1-ba0e48346eb6", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedARS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.initial_mutation_rate = 0.1\n        self.mutation_rate = self.initial_mutation_rate\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n\n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def adjust_mutation_rate(self, current_fitness, prev_fitness):\n        if current_fitness < prev_fitness:\n            self.mutation_rate = min(0.5, self.mutation_rate * 1.2)\n        else:\n            self.mutation_rate = max(0.01, self.mutation_rate * 0.8)\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            self.adjust_mutation_rate(candidate_fitness, best_fitness)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "DynamicMutationEnhancedARS", "description": "Improving the EnhancedAdaptiveRandomSearch algorithm by dynamically adjusting the mutation rate based on the convergence behavior to balance exploration and exploitation.", "configspace": "", "generation": 79, "fitness": 0.17137517106226136, "feedback": "The algorithm DynamicMutationEnhancedARS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "4994f4e0-3e02-4053-9291-3a7ee72d273d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "1128a180-eb8f-416c-b250-6e3d66e3313d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "1903e914-1e33-4a36-a841-2516085bb928", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "28ef01af-6623-4401-94ec-227ef6800b68", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "3dc64575-1c40-4086-afa0-d4dcfe5a1818", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "eef471be-2761-4160-ae14-fe26545a5e46", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "9aa9e36b-c7c3-40fa-b975-2c9889984533", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def adapt_mutation_rate(self, iteration):\n        self.mutation_rate = max(0.01, 0.5 * np.exp(-iteration / self.budget))\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for i in range(self.budget):\n            self.adapt_mutation_rate(i)\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Introducing dynamic adaptation of mutation rate to improve exploration-exploitation balance.", "configspace": "", "generation": 86, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "4cbb8b57-041b-4432-86e4-296ba2560245", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "ea7b756b-e342-4297-8595-1386f899e70b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.base_mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.base_mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def dynamic_mutation_rate(self, iteration):\n        return max(0.05, min(0.5, 0.1 + 0.4 * np.exp(-0.01 * iteration)))\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for i in range(self.budget):\n            self.mutation_rate = self.dynamic_mutation_rate(i)\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Introducing a dynamic mutation rate based on the function landscape to balance exploration and exploitation.", "configspace": "", "generation": 88, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "cb9874ca-7b6d-4f1a-8a63-c7f147898339", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "540b0d17-b470-4eea-8d0d-c64753ed19fd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "9e39cf3d-9aa6-497c-a036-a2d79f7ae004", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "718eee2b-a6dc-440c-b0fa-fb5391a2db00", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def adaptive_mutation(self, improvement):\n        if improvement < 0:\n            self.mutation_rate *= 1.1\n        else:\n            self.mutation_rate *= 0.9\n        self.mutation_rate = np.clip(self.mutation_rate, 0.05, 0.3)\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            self.adaptive_mutation(best_fitness - candidate_fitness)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Introducing a dynamic mutation rate that adapts based on the fitness improvement of solutions to enhance exploration-exploitation balance.", "configspace": "", "generation": 92, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "6d2618c9-c5a1-490d-90c4-3cc4419f9e3c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "1b01c85b-19e4-4f3c-bd52-483f1c426ece", "solution": "import numpy as np\n\nclass DynamicMutationEnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.initial_mutation_rate = 0.1\n        self.min_mutation_rate = 0.01\n        self.max_mutation_rate = 0.2\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.initial_mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        self.initial_mutation_rate = max(self.min_mutation_rate, min(self.max_mutation_rate, self.initial_mutation_rate + 0.01*(best_fitness-func(initial_solutions[0]))))\n\n        return best_solution", "name": "DynamicMutationEnhancedAdaptiveRandomSearch", "description": "Implement a dynamic mutation rate that adapts based on the performance of the solutions to enhance exploration and exploitation balance.", "configspace": "", "generation": 94, "fitness": 0.17137517106226136, "feedback": "The algorithm DynamicMutationEnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "84ae8aca-d26e-41fa-aabb-5a1e558a3051", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearchRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.initial_mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.initial_mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n                if np.random.rand() < 0.1:  # 1% chance to update the mutation rate\n                    mutation_rate = max(0.01, mutation_rate - 0.01)\n            else:\n                step_size *= self.beta\n                if np.random.rand() < 0.1:  # 1% chance to update the mutation rate\n                    mutation_rate = min(0.2, mutation_rate + 0.01)\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearchRefined", "description": "Incorporating a dynamic mutation rate based on the function landscape to adapt the search strategy.", "configspace": "", "generation": 95, "fitness": 0.1597267894628591, "feedback": "The algorithm EnhancedAdaptiveRandomSearchRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.628895182393054, 0.47194238612951545, 0.5510832452504081, 0.5191301961286804, 0.8548908329410717, 0.584414038599526, 0.7363333402199014, 0.5158090658156916, 0.9702592612365304, 0.004537109448856991, 9.999999999998899e-05, 0.00908511900605058, 0.034570225154057166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006372523541821606, 9.999999999998899e-05, 0.00781517234556739, 0.024965397145271018, 0.02340806982925192, 0.004150065440336581, 0.03085067269396735, 9.999999999998899e-05, 0.09829528980194335, 9.999999999998899e-05, 0.026619800551405226, 0.010346217138701985, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02268283892787326, 0.02123956623140133, 9.999999999998899e-05, 0.05525873883579224, 9.999999999998899e-05, 0.18703322840773062, 0.13258187286034717, 0.18187572822760723, 0.12919828186120108, 0.20944078498549312, 0.19576473250801718, 0.698528132043561, 0.7763864461711305, 0.6484522541423408, 0.35747852027185467, 0.34861983525687446, 0.3031690459096894, 0.33836784513049756, 0.34233235650135285, 0.4179750547008524, 0.3381638703715807, 0.3231855490751252, 0.31085697101615406, 0.10872300257580336, 9.999999999998899e-05, 0.09846842193865757, 9.999999999998899e-05, 9.999999999998899e-05, 0.004071315528529906, 0.1014319889720342, 0.005010483771984764, 9.999999999998899e-05, 0.1861471994420142, 0.14198206750459852, 0.12871908184560976, 0.18259725909481472, 9.999999999998899e-05, 0.13250417489667166, 0.2034272411761886, 0.12056785594839636, 0.18724789361143201, 0.1950686931614789, 0.16805800848345065, 0.17356169059692927, 0.20335442623886568, 0.1742238327405754, 0.18734092300940763, 0.18563794591573846, 0.162821537665785, 0.22963269677528475, 0.00019009676335191017, 0.03615980830916943, 0.0038131215932882823, 0.03523456192848373, 0.03254529880352497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011341078611890931, 0.031804006681960706, 0.032837956888306374, 0.03509613167957282, 0.05970027826182145, 0.06063118729829364, 0.022402267270761334, 0.14518169249558233, 0.05541227489193934, 0.06526537053798842, 0.16118100929375434, 9.999999999998899e-05, 0.17544850479955199, 0.10878426179517997, 9.999999999998899e-05, 0.005627360820007921, 0.11486241718276846, 0.07949626504562435, 0.1111092821235401, 0.09659661328592484, 0.07020733312605354, 0.11857359055192795, 0.3107412312016571, 0.05726486021218602, 0.08619228376720689, 0.20593090907187106, 0.11185848066904946, 0.09623756566986885, 0.477340094833237, 0.45034089443273895, 0.4502869353540655, 0.4515770690530363, 0.4622510875109117, 0.4443444973522577, 0.44531761927686875, 0.45865773079414507, 0.4410683559926787, 0.009867311210115082, 9.999999999998899e-05, 0.02080883499765329, 0.048524950221224716, 9.999999999998899e-05, 9.999999999998899e-05, 0.08794038517355618, 9.999999999998899e-05, 0.08332331547443195, 0.10655818747818302, 0.06992088647566475, 0.15872892178002163, 0.09129968522281584, 0.09768260611890978, 0.18178192565586238, 0.12770866677017678, 0.16020843018369102, 0.2017165586118459, 0.133040136300274, 0.13363024082434982, 0.13753799572440217, 0.1656738351190783, 0.1280924354855213, 0.1726600750104026, 0.1464400712730456, 0.12479236500587543, 0.12162399307507132, 0.053530926458444816, 0.07428743439390806, 0.06318620212096504, 0.11751284608440526, 0.06241325387566199, 0.08697929706788277, 0.07968958066229737, 0.0754323982327555, 0.08493000740579315, 0.20143299156577443, 0.11405911530695789, 0.1266160319413583, 0.1809484020653429, 0.150476579826741, 0.11684249534092195, 0.19085865484880948, 0.1417687178087963, 0.16465525649533796, 0.16381614222212793, 0.19221241381938703, 0.16793294263384817, 0.18206804789363484, 0.16934937363041824, 0.18400903770777954, 0.16076079689490885, 0.16485321269805642, 0.1691255010688818, 0.18954727185952125, 0.09781503141008252, 0.1170309253672287, 0.11505064466704717, 0.1662054325322313, 0.12735470135732285, 0.10889725921175686, 0.1272835718769566, 0.732245216758304, 0.5160782669437061, 0.11351538993783672, 0.21191764292364856, 0.16864234647428822, 0.17001300615330805, 0.21324533739953044, 0.059137852067274066, 0.21512680137011508, 0.16614523382206858, 0.192133483689786, 0.1907980324762536, 0.19882312189482587, 0.18313683784814816, 0.21085164646111032, 0.16660737954933225, 0.22384953252081796, 0.2217578509670297, 0.16744297471408376, 0.08804797002972431, 0.031474442751932674, 0.034216707559272974, 0.05066501581817051, 0.044847317307365464, 0.052531843964097935, 0.06412175138430498, 0.007213863556351008, 0.05343135571497282]}, "mutation_prompt": null}
{"id": "bdb9b958-94c7-4bfe-977a-3a8046093022", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "bcb0ef4d-b566-4d6b-9b8e-27d2658da21b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Enhancing the diversity of initial solutions by incorporating a mutation mechanism to explore a wider search space.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "a1e5f639-da4c-4756-b891-cabf81b5cf59", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearchImproved", "description": "Enhancing the diversity of initial solutions and incorporating a dynamic step size adjustment mechanism based on fitness improvement for efficient exploration and exploitation.", "configspace": "", "generation": 98, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
{"id": "22b789e6-90a9-43fb-80f7-938c6941e15b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveRandomSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = 1.2\n        self.beta = 0.8\n        self.mutation_rate = 0.1\n        self.min_mutation_rate = 0.05\n        self.max_mutation_rate = 0.2\n\n    def local_search(self, center, func):\n        neighborhood = 0.1\n        new_center = center.copy()\n        for i in range(self.dim):\n            new_center[i] += np.random.uniform(-neighborhood, neighborhood)\n            new_center[i] = np.clip(new_center[i], -5.0, 5.0)\n        \n        if func(new_center) < func(center):\n            return new_center\n        else:\n            return center\n\n    def initialize_population(self, num_solutions, dim):\n        initial_population = []\n        for _ in range(num_solutions):\n            candidate = np.random.uniform(-5.0, 5.0, dim)\n            for i in range(dim):\n                if np.random.rand() < self.mutation_rate:\n                    candidate[i] = np.random.uniform(-5.0, 5.0)\n            initial_population.append(candidate)\n        return initial_population\n\n    def __call__(self, func):\n        initial_solutions = self.initialize_population(5, self.dim)\n        best_solution = min(initial_solutions, key=lambda x: func(x))\n        best_fitness = func(best_solution)\n        step_size = 1.0\n\n        for _ in range(self.budget):\n            candidate_solution = best_solution + step_size * np.random.uniform(-1, 1, self.dim)\n            candidate_solution = np.clip(candidate_solution, -5.0, 5.0)\n            candidate_solution = self.local_search(candidate_solution, func)\n            candidate_fitness = func(candidate_solution)\n\n            if candidate_fitness < best_fitness:\n                best_solution = candidate_solution\n                best_fitness = candidate_fitness\n                self.mutation_rate = max(self.min_mutation_rate, min(self.max_mutation_rate, self.mutation_rate * (1 + (best_fitness - candidate_fitness) / best_fitness)))\n                step_size *= self.alpha\n            else:\n                step_size *= self.beta\n\n        return best_solution", "name": "EnhancedAdaptiveRandomSearch", "description": "Incorporating a dynamic mutation mechanism based on fitness evaluation to adaptively adjust the exploration of the search space.", "configspace": "", "generation": 99, "fitness": 0.17137517106226136, "feedback": "The algorithm EnhancedAdaptiveRandomSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "ea0440ab-368b-4ce3-87ed-347bd0ff0f6e", "metadata": {"aucs": [0.6758229281237549, 0.9213184652056875, 0.6745637612032738, 0.731889503604866, 0.8501541180050161, 0.9679402266861, 0.8144494802682736, 0.9720774600446775, 0.8426806545279797, 0.0005835480642166768, 0.005604651623750567, 9.999999999998899e-05, 0.0024699503733299766, 9.999999999998899e-05, 0.03129275765518835, 9.999999999998899e-05, 0.007695373285525053, 9.999999999998899e-05, 0.0008143763609929078, 0.023809225315626237, 0.00731407750056734, 9.999999999998899e-05, 0.036398577375546304, 9.999999999998899e-05, 0.08249004083975797, 9.999999999998899e-05, 0.0004903505193615265, 9.999999999998899e-05, 0.00817900037299546, 9.999999999998899e-05, 9.999999999998899e-05, 0.035777828357890784, 9.999999999998899e-05, 9.999999999998899e-05, 0.041303993999771915, 9.999999999998899e-05, 0.19476952272284354, 0.13999749622137625, 0.17812452927856504, 0.12924610581426133, 0.11961091335425078, 0.36166596544188956, 0.7438096700020231, 0.5939343283852357, 0.6413939256243569, 0.34662358776694435, 0.36737014218311703, 0.3113922850441654, 0.3499900772581426, 0.34460315532443075, 0.3410056993273799, 0.3509970336084378, 0.31368119573230235, 0.3321921547045593, 0.0898685906593848, 9.999999999998899e-05, 0.07451748678476511, 0.2396125212424478, 0.029881211183458656, 9.999999999998899e-05, 0.2000268189070925, 0.0678507451851541, 9.999999999998899e-05, 0.19304589945053963, 0.13221005846311507, 0.1275055651269018, 0.3490366156113338, 9.999999999998899e-05, 0.19211797384661367, 0.23934007507691457, 0.12266407665820211, 0.18421073645677633, 0.21047826729603625, 0.177608874614134, 0.17530229728320124, 0.18635698307686366, 0.15803648932341152, 0.21226847675684235, 0.21915533345904137, 0.15436772680060717, 0.3704458663918454, 0.00663121082968976, 0.02185481515836951, 0.045292275046425634, 0.046055044953409396, 0.01234929692435327, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07964941978497009, 0.039069605981565614, 0.024149837171604127, 0.041377723507705966, 0.06694320413723487, 0.03956385775891791, 0.03761976979816262, 0.13043582845814383, 0.063291046225317, 0.07292516368748225, 9.999999999998899e-05, 0.048395494760728464, 0.11194905855449577, 0.08776660250071577, 0.10595112314200728, 0.19325611254016462, 0.025660399406119305, 0.09394541883655749, 0.10866537597196035, 0.12921450913973076, 0.03072715529081782, 0.15307477410243342, 0.14466441638889627, 0.19255453283646562, 0.1143804843491465, 0.19708460251651783, 0.1869668211483697, 0.08626982192175603, 0.4471313816698733, 0.4427449288868107, 0.4546438432002726, 0.4668092009033261, 0.47450811777868307, 0.48701582803482657, 0.44090009030287935, 0.4354698443343267, 0.44335040608522525, 9.999999999998899e-05, 0.027051218976194447, 9.999999999998899e-05, 0.007906690345546252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05060983514824513, 0.075828882127711, 0.10875978914224649, 0.30707461468972563, 0.09035482713970922, 0.09612470538551465, 0.12611317357940277, 0.06519016094112318, 0.18706069080669618, 0.1309493073970105, 0.13396393078748314, 0.13895194061634497, 0.13331132168380277, 0.1576957163364192, 0.12446063430654941, 0.15365383134835642, 0.1366473238801822, 0.1247898873255997, 0.11834977067627028, 0.051845770708949024, 0.07656287666000261, 0.07528274341634411, 0.12157973589282645, 0.13307363328146982, 0.18887651367533043, 0.06539429511372419, 0.06501598626321503, 0.0723396386107954, 0.18622726459134364, 0.09738936391376096, 0.1316501043211018, 0.16774757171382493, 0.14655361977253634, 0.10457347584346477, 0.18104603510880013, 0.13450473133246543, 0.1809210232288172, 0.15903174472037296, 0.1890332323982823, 0.1759299144899925, 0.1669966608479041, 0.18765012854461216, 0.16817264750017935, 0.20522068786167325, 0.16789259138388568, 0.16368144886864067, 0.18963575078763484, 0.09779138085568062, 0.11748337634185813, 0.1735203983715915, 0.16678240644569653, 0.1271826611884912, 0.10888636679912356, 0.12699766775595922, 0.7206742352367387, 0.6839385072668969, 0.11330139462892874, 0.2130607285206495, 0.16967735807802642, 0.17016994273930397, 0.11359496981781847, 0.1700717482090418, 0.21496655225238204, 0.16755831509736874, 0.18622558868172545, 0.16948080957681322, 0.18080747531543495, 0.17716259111178245, 0.21503070445510097, 0.20437291266450064, 0.2265792952756681, 0.1812219303776864, 0.18427562044189194, 0.052962092408468386, 0.03781214035876168, 0.03197148990949883, 0.05160664465952325, 0.040636456697283, 0.054965274357114846, 0.02133295687600567, 0.026326346018500035, 0.03548589637548283]}, "mutation_prompt": null}
