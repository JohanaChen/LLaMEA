import numpy as np
from scipy.optimize import minimize
import random

class MetaHeuristic:
    """
    A metaheuristic algorithm for solving black box optimization problems.
    
    The algorithm uses a combination of local search and gradient-based optimization to find the optimal solution.
    
    Attributes:
    budget (int): The maximum number of function evaluations allowed.
    dim (int): The dimensionality of the search space.
    func (function): The black box function to optimize.
    search_space (list): The range of the search space.
    bounds (list): The bounds of the search space.
    adaptive_perturbation (bool): Whether to use adaptive perturbation strategy.
    """

    def __init__(self, budget, dim, adaptive_perturbation=True):
        """
        Initializes the MetaHeuristic algorithm.
        
        Args:
        budget (int): The maximum number of function evaluations allowed.
        dim (int): The dimensionality of the search space.
        adaptive_perturbation (bool): Whether to use adaptive perturbation strategy. Defaults to True.
        """
        self.budget = budget
        self.dim = dim
        self.func = None
        self.search_space = None
        self.bounds = None
        self.adaptive_perturbation = adaptive_perturbation

    def __call__(self, func):
        """
        Optimizes the black box function using MetaHeuristic.
        
        Args:
        func (function): The black box function to optimize.
        
        Returns:
        tuple: A tuple containing the optimal solution and its cost.
        """
        if self.func is None:
            raise ValueError("The black box function must be initialized before calling this method.")
        
        # Initialize the search space
        self.search_space = [self.bounds] * self.dim
        self.bounds = [(-5.0, 5.0)] * self.dim
        
        # Initialize the optimal solution and its cost
        opt_solution = None
        opt_cost = float('inf')
        
        # Perform local search
        for _ in range(self.budget):
            # Generate a new solution by perturbing the current solution
            if self.adaptive_perturbation:
                # Use adaptive perturbation strategy
                new_solution = self.perturb(self.search_space, self.bounds)
            else:
                # Use fixed perturbation strategy
                new_solution = self.perturb(self.search_space, self.bounds)
            
            # Evaluate the new solution using the black box function
            new_cost = self.func(new_solution)
            
            # Update the optimal solution and its cost if necessary
            if new_cost < opt_cost:
                opt_solution = new_solution
                opt_cost = new_cost
        
        # Return the optimal solution and its cost
        return opt_solution, opt_cost

    def perturb(self, search_space, bounds):
        """
        Generates a new solution by perturbing the current solution.
        
        Args:
        search_space (list): The current search space.
        bounds (list): The current bounds of the search space.
        
        Returns:
        list: A new solution generated by perturbing the current solution.
        """
        # Generate a new solution by randomly perturbing the current solution
        new_solution = [bounds[0] + np.random.uniform(-1, 1) * (bounds[1] - bounds[0]) for _ in range(self.dim)]
        
        # Ensure the new solution is within the bounds
        new_solution = [max(bounds[i], min(new_solution[i], bounds[i])) for i in range(self.dim)]
        
        return new_solution

# Description: Black Box Optimization using MetaHeuristic Algorithm with Adaptive Perturbation Strategy
# Code: 
# ```python
# import numpy as np
# import random
# import time

class AdaptiveMetaHeuristic(MetaHeuristic):
    """
    A metaheuristic algorithm for solving black box optimization problems with adaptive perturbation strategy.
    """

    def __init__(self, budget, dim, adaptive_perturbation=True):
        """
        Initializes the AdaptiveMetaHeuristic algorithm.
        
        Args:
        budget (int): The maximum number of function evaluations allowed.
        dim (int): The dimensionality of the search space.
        adaptive_perturbation (bool): Whether to use adaptive perturbation strategy. Defaults to True.
        """
        super().__init__(budget, dim, adaptive_perturbation)

    def __call__(self, func):
        """
        Optimizes the black box function using AdaptiveMetaHeuristic.
        
        Args:
        func (function): The black box function to optimize.
        
        Returns:
        tuple: A tuple containing the optimal solution and its cost.
        """
        # Initialize the search space
        self.search_space = [self.bounds] * self.dim
        self.bounds = [(-5.0, 5.0)] * self.dim
        
        # Initialize the optimal solution and its cost
        opt_solution = None
        opt_cost = float('inf')
        
        # Perform local search
        for _ in range(self.budget):
            # Generate a new solution by perturbing the current solution
            new_solution = self.perturb(self.search_space, self.bounds)
            
            # Evaluate the new solution using the black box function
            new_cost = self.func(new_solution)
            
            # Update the optimal solution and its cost if necessary
            if new_cost < opt_cost:
                opt_solution = new_solution
                opt_cost = new_cost
        
        # Return the optimal solution and its cost
        return opt_solution, opt_cost

# Description: Black Box Optimization using MetaHeuristic Algorithm
# Code: 
# ```python
# import numpy as np
# from scipy.optimize import minimize
# import random

# def bbof(func, bounds, dim):
#     # Generate a random initial solution
#     initial_solution = [random.uniform(bounds[i] for i in range(dim)) for _ in range(dim)]
#     # Evaluate the initial solution using the black box function
#     initial_cost = func(initial_solution)
#     # Return the initial solution and its cost
#     return initial_solution, initial_cost

# def bbof_metaheuristic(func, bounds, dim, adaptive_perturbation=True):
#     # Initialize the MetaHeuristic algorithm
#     metaheuristic = MetaHeuristic(budget, dim, adaptive_perturbation)
#     # Optimize the black box function using MetaHeuristic
#     solution, cost = metaheuristic(func)
#     # Return the optimal solution and its cost
#     return solution, cost

# def bbof_metaheuristic AdaptiveMetaHeuristic(budget, dim, adaptive_perturbation=True):
#     # Initialize the AdaptiveMetaHeuristic algorithm
#     metaheuristic = AdaptiveMetaHeuristic(budget, dim, adaptive_perturbation)
#     # Optimize the black box function using AdaptiveMetaHeuristic
#     solution, cost = metaheuristic(bbof)
#     # Return the optimal solution and its cost
#     return solution, cost

# # Test the bbof_metaheuristic algorithm
# bbof_metaheuristic = bbof_metaheuristic(100, 10, 5, adaptive_perturbation=True)
# solution, cost = bbof_metaheuristic(bbof)
# print(f"Optimal solution: {solution}")
# print(f"Optimal cost: {cost}")