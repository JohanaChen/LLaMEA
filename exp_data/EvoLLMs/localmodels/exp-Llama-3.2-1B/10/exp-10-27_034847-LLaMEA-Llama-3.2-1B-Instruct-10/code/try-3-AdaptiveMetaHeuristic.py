import numpy as np
from scipy.optimize import minimize
import copy

class AdaptiveMetaHeuristic:
    """
    An adaptive metaheuristic algorithm for solving black box optimization problems.
    
    The algorithm uses a combination of local search and gradient-based optimization to find the optimal solution.
    
    Attributes:
    budget (int): The maximum number of function evaluations allowed.
    dim (int): The dimensionality of the search space.
    func (function): The black box function to optimize.
    search_space (list): The range of the search space.
    bounds (list): The bounds of the search space.
    population_size (int): The population size of the algorithm.
    learning_rate (float): The learning rate of the algorithm.
    exploration_rate (float): The exploration rate of the algorithm.
    best_solution (tuple): The best solution found so far.
    best_cost (float): The best cost found so far.
    """
    def __init__(self, budget, dim, population_size, learning_rate, exploration_rate):
        """
        Initializes the AdaptiveMetaHeuristic algorithm.
        
        Args:
        budget (int): The maximum number of function evaluations allowed.
        dim (int): The dimensionality of the search space.
        population_size (int): The population size of the algorithm.
        learning_rate (float): The learning rate of the algorithm.
        exploration_rate (float): The exploration rate of the algorithm.
        """
        self.budget = budget
        self.dim = dim
        self.population_size = population_size
        self.learning_rate = learning_rate
        self.exploration_rate = exploration_rate
        self.func = None
        self.search_space = None
        self.bounds = None
        self.population = None
        self.best_solution = None
        self.best_cost = float('inf')

    def __call__(self, func):
        """
        Optimizes the black box function using AdaptiveMetaHeuristic.
        
        Args:
        func (function): The black box function to optimize.
        
        Returns:
        tuple: A tuple containing the optimal solution and its cost.
        """
        if self.func is None:
            raise ValueError("The black box function must be initialized before calling this method.")
        
        # Initialize the search space
        self.search_space = [self.bounds] * self.dim
        self.bounds = [(-5.0, 5.0)] * self.dim
        
        # Initialize the optimal solution and its cost
        opt_solution = None
        opt_cost = float('inf')
        
        # Perform local search
        for _ in range(self.budget):
            # Generate a new solution by perturbing the current solution
            new_solution = self.perturb(self.search_space, self.bounds)
            
            # Evaluate the new solution using the black box function
            new_cost = self.func(new_solution)
            
            # Update the optimal solution and its cost if necessary
            if new_cost < opt_cost:
                opt_solution = new_solution
                opt_cost = new_cost
        
        # Return the optimal solution and its cost
        return opt_solution, opt_cost

    def perturb(self, search_space, bounds):
        """
        Generates a new solution by perturbing the current solution.
        
        Args:
        search_space (list): The current search space.
        bounds (list): The current bounds of the search space.
        
        Returns:
        list: A new solution generated by perturbing the current solution.
        """
        # Generate a new solution by randomly perturbing the current solution
        new_solution = [self.bounds[0] + np.random.uniform(-1, 1) * (self.bounds[1] - self.bounds[0]) for _ in range(self.dim)]
        
        # Ensure the new solution is within the bounds
        new_solution = [max(bounds[i], min(new_solution[i], bounds[i])) for i in range(self.dim)]
        
        return new_solution

    def update(self, func, population_size, learning_rate, exploration_rate):
        """
        Updates the algorithm with a new population.
        
        Args:
        func (function): The black box function to optimize.
        population_size (int): The population size of the algorithm.
        learning_rate (float): The learning rate of the algorithm.
        exploration_rate (float): The exploration rate of the algorithm.
        """
        # Initialize the population
        self.population = [copy.deepcopy(self) for _ in range(population_size)]
        
        # Evaluate the population
        for individual in self.population:
            individual.evaluate_fitness(func)
        
        # Select the best individual
        self.best_solution = min(self.population, key=lambda individual: individual.best_cost)
        self.best_cost = self.best_solution.best_cost
        
        # Update the search space and bounds
        self.search_space = [self.bounds] * self.dim
        self.bounds = [(-5.0, 5.0)] * self.dim
        
        # Update the population size
        population_size = self.population_size
        
        # Update the learning rate and exploration rate
        self.learning_rate *= exploration_rate
        self.exploration_rate *= exploration_rate
        
        # Update the best solution
        self.best_solution = None
        
        # Update the best cost
        self.best_cost = float('inf')

# Description: Adaptive MetaHeuristic Optimization Algorithm
# Code: 