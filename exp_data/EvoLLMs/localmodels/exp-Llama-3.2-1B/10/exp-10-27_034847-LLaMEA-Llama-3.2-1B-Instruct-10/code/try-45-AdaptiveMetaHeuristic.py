import numpy as np
import random

class AdaptiveMetaHeuristic:
    """
    An adaptive metaheuristic algorithm for solving black box optimization problems.
    
    The algorithm uses a combination of local search, genetic algorithm, and gradient-based optimization to find the optimal solution.
    
    Attributes:
    budget (int): The maximum number of function evaluations allowed.
    dim (int): The dimensionality of the search space.
    func (function): The black box function to optimize.
    search_space (list): The range of the search space.
    bounds (list): The bounds of the search space.
    population (list): The population of the genetic algorithm.
    fitness (list): The fitness of the population.
    """

    def __init__(self, budget, dim):
        """
        Initializes the AdaptiveMetaHeuristic algorithm.
        
        Args:
        budget (int): The maximum number of function evaluations allowed.
        dim (int): The dimensionality of the search space.
        """
        self.budget = budget
        self.dim = dim
        self.func = None
        self.search_space = None
        self.bounds = None
        self.population = []
        self.fitness = []

    def __call__(self, func):
        """
        Optimizes the black box function using AdaptiveMetaHeuristic.
        
        Args:
        func (function): The black box function to optimize.
        
        Returns:
        tuple: A tuple containing the optimal solution and its cost.
        """
        if self.func is None:
            raise ValueError("The black box function must be initialized before calling this method.")
        
        # Initialize the search space
        self.search_space = [self.bounds] * self.dim
        self.bounds = [(-5.0, 5.0)] * self.dim
        
        # Initialize the population of the genetic algorithm
        self.population = []
        
        # Initialize the optimal solution and its cost
        opt_solution = None
        opt_cost = float('inf')
        
        # Perform local search
        for _ in range(self.budget):
            # Generate a new solution by perturbing the current solution
            new_solution = self.perturb(self.search_space, self.bounds)
            
            # Evaluate the new solution using the black box function
            new_cost = self.func(new_solution)
            
            # Update the optimal solution and its cost if necessary
            if new_cost < opt_cost:
                opt_solution = new_solution
                opt_cost = new_cost
            
            # Add the new solution to the population
            self.population.append(new_solution)
        
        # Add the optimal solution to the population
        self.population.append(opt_solution)
        
        # Evaluate the fitness of the population
        self.fitness = [self.func(individual) for individual in self.population]
        
        # Return the optimal solution and its cost
        return opt_solution, opt_cost

    def perturb(self, search_space, bounds):
        """
        Generates a new solution by perturbing the current solution.
        
        Args:
        search_space (list): The current search space.
        bounds (list): The current bounds of the search space.
        
        Returns:
        list: A new solution generated by perturbing the current solution.
        """
        # Generate a new solution by randomly perturbing the current solution
        new_solution = [self.bounds[0] + np.random.uniform(-1, 1) * (self.bounds[1] - self.bounds[0]) for _ in range(self.dim)]
        
        # Ensure the new solution is within the bounds
        new_solution = [max(bounds[i], min(new_solution[i], bounds[i])) for i in range(self.dim)]
        
        return new_solution

    def genetic_algorithm(self):
        """
        Runs a genetic algorithm to optimize the black box function.
        
        Returns:
        tuple: A tuple containing the optimal solution and its cost.
        """
        # Initialize the population of the genetic algorithm
        self.population = []
        
        # Initialize the fitness of the population
        self.fitness = []
        
        # Perform multiple generations of the genetic algorithm
        for _ in range(100):
            # Evaluate the fitness of the population
            self.fitness = [self.func(individual) for individual in self.population]
            
            # Select the fittest individuals
            self.population = sorted(self.population, key=self.fitness, reverse=True)[:self.budget]
            
            # Create a new population by perturbing the selected individuals
            self.population = [self.perturb(self.search_space, self.bounds) for _ in range(self.budget)]
        
        # Return the optimal solution and its cost
        return self.population[0], self.fitness[0]

# Description: Black Box Optimization using AdaptiveMetaHeuristic Algorithm
# Code: 