{"id": "63950203-acf5-4fd4-9275-6d1d445703fa", "solution": "import numpy as np\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "name": "Hyperband", "description": "", "configspace": "", "generation": 0, "fitness": 0.05156494836021395, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": null, "metadata": {"aucs": [0.11860917256239101, 0.12014318361367837, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.054782746657569104, 0.053221356437489376, 0.04855619561912483, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.028981774059425147, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.12096781838999726, 0.013640910311869758, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.0007381158042131242, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017619, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184061, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.046897177062183215, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "ac439f09-d927-4d4a-a892-f7e7421cc84f", "solution": "import numpy as np\nimport random\nimport math\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n    def __str__(self):\n        return f\"Hyperband: (Score: {self.score:.6f}, Explored: {self.explored:.2f})\"\n\n    def update_explore_rate(self, new_rate):\n        if new_rate > self.explore_rate:\n            self.explore_rate = new_rate\n\nclass HyperbandHyperband(Hyperband):\n    def __init__(self, budget, dim, alpha, beta):\n        super().__init__(budget, dim)\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        # Refine the strategy using the new alpha and beta values\n        self.update_explore_rate(self.alpha * self.beta)\n\n# One-line description: HyperbandHyperband is a novel metaheuristic that combines hyperband search with adaptive exploration rates to efficiently explore the search space of black box functions.", "name": "Hyperband", "description": "Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'Hyperband' object has no attribute 'score'\").", "error": "AttributeError(\"'Hyperband' object has no attribute 'score'\")", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {}, "mutation_prompt": null}
{"id": "0e4ce5de-154e-45b2-ba06-6d9fe3f076bf", "solution": "import numpy as np\nimport random\nfrom scipy.optimize import minimize_scalar\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.func_evaluations = []\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n    def update(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        self.func_evaluations.append(func)\n\n    def __str__(self):\n        return f\"Hyperband: {self.__class__.__name__} (Score: {self.score:.4f})\"\n\n    def score(self):\n        return self.best_func_val\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\n\n# Hyperband Algorithm with Refinement Strategy\nclass HyperbandRefined(Hyperband):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.refine_rate = 0.05\n\n    def refine(self):\n        # Evaluate the best function up to the refine_rate\n        self.update(self.best_func)\n        # Refine the search space by evaluating the best function at the refine_rate intervals\n        intervals = np.linspace(-5.0, 5.0, 10)\n        for i in range(10):\n            self.update(self.best_func)\n            # Evaluate the best function at the refine_rate intervals\n            intervals[i] = self.best_func_val + i * (5.0 - (-5.0)) / 10.0\n        # Refine the search space\n        self.explore_rate = self.refine_rate\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.func_evaluations = []\n\n    def __call__(self, func):\n        refined_func = super().__call__(func)\n        refined_func_evals = []\n        for i in range(10):\n            refined_func_evals.append(redefined_func(np.random.uniform(-5.0, 5.0, self.dim)))\n        refined_func.update(redefined_func_evals)\n        return refined_func\n\n# Example usage:\nfunc = lambda x: x**2\nhyperband = Hyperband(100, 2)\nprint(hyperband.score())\n\nhyperband_refined = HyperbandRefined(100, 2)\nprint(hyperband_refined.score())\n\nhyperband_refined_refined = HyperbandRefined(100, 2)\nprint(hyperband_refined_refined.score())\n", "name": "Hyperband", "description": "Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('unsupported format string passed to method.__format__').", "error": "TypeError('unsupported format string passed to method.__format__')", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {}, "mutation_prompt": null}
{"id": "a5440595-c0c3-4d44-b2da-45ddb446c97a", "solution": "import numpy as np\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "name": "Hyperband", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367837, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.054782746657569104, 0.053221356437489376, 0.04855619561912483, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.028981774059425147, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.12096781838999726, 0.013640910311869758, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.0007381158042131242, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017619, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184061, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.046897177062183215, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "a557c082-323a-45ed-aef2-5a13d55a2222", "solution": "import numpy as np\nfrom scipy.optimize import minimize_scalar\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.func_evals_min = []\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n    def _explore(self, func, func_evals, func_evals_min):\n        if len(func_evals) > self.budget:\n            func_evals = func_evals[:self.budget]\n            func_evals_min = func_evals_min[:self.budget]\n        else:\n            func_evals = np.concatenate((func_evals, func_evals_min))\n            func_evals_min = np.concatenate((func_evals, func_evals_min))\n        return func_evals, func_evals_min\n\n    def _minimize(self, func_evals):\n        return minimize_scalar(func_evals, bounds=(-5.0, 5.0), method='bounded')\n\n    def optimize(self, func):\n        while self.explore_count < self.budget:\n            func_evals, func_evals_min = self._explore(func, self.func_evals, self.func_evals_min)\n            func_evals_min = self._minimize(func_evals_min)\n            self.func_evals = np.concatenate((self.func_evals, func_evals_min))\n            self.func_evals_min = np.concatenate((self.func_evals_min, func_evals_min))\n            if len(self.func_evals) > self.budget:\n                func_evals = self.func_evals[:self.budget]\n                func_evals_min = self.func_evals_min[:self.budget]\n                self.func_evals = np.concatenate((self.func_evals, func_evals_min))\n                self.func_evals_min = np.concatenate((self.func_evals_min, func_evals_min))\n            self.explore_count += 1\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "name": "Hyperband", "description": "Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 4, "fitness": 0.05156494836021395, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367837, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.054782746657569104, 0.053221356437489376, 0.04855619561912483, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.028981774059425147, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.12096781838999726, 0.013640910311869758, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.0007381158042131242, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017619, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184061, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.046897177062183215, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "db1e2d02-6589-48ed-b29a-75c346a807dc", "solution": "import numpy as np\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.search_space = np.linspace(-5.0, 5.0, dim)\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.choice(self.search_space, size=self.dim))\n            self.func_evals.append(func_eval)\n            if np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n    def __str__(self):\n        return f\"Hyperband({self.dim})\"\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\n\nclass HyperbandWithAOCB(Hyperband):\n    def __init__(self, budget, dim, aocb_func):\n        super().__init__(budget, dim)\n        self.aocb_func = aocb_func\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = self.aocb_func(func)\n            self.func_evals.append(func_eval)\n            if np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n# One-line description: HyperbandWithAOCB is a novel metaheuristic that uses hyperband search and area over the convergence curve (AOCC) function to efficiently explore the search space of black box functions.\n\nclass AOCB:\n    def __init__(self, func, budget, dim):\n        self.func = func\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.search_space = np.linspace(-5.0, 5.0, dim)\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = np.random.uniform(self.search_space)\n            self.func_evals.append(func_eval)\n            if np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n# One-line description: AOCB is a novel metaheuristic that uses area over the convergence curve (AOCC) function to efficiently explore the search space of black box functions.\n\n# Example usage:\n# ```python\n# AOCB func = lambda x: np.sin(x)\n# HyperbandWithAOCB budget=1000, dim=10\n# best_func = HyperbandWithAOCB(budget, dim, AOCB(func, budget, dim))\n# print(best_func)", "name": "Hyperband", "description": "Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'float' and 'NoneType'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'float' and 'NoneType'\")", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {}, "mutation_prompt": null}
{"id": "50e64f50-6349-42af-8bec-bf8583ce4e79", "solution": "import numpy as np\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "name": "Hyperband", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367837, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.054782746657569104, 0.053221356437489376, 0.04855619561912483, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.028981774059425147, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.12096781838999726, 0.013640910311869758, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.0007381158042131242, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017619, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184061, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.046897177062183215, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "e69a7946-6228-4837-af38-71cb3700c481", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  \n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n    def update(self, func, budget, dim):\n        while self.explore_count < budget:\n            if self.explore_count > 100:  \n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\n# ```python\ndef area_over_convergence_curve(func, budget, dim):\n    best_func = None\n    best_func_val = None\n    best_area = 0\n    best_budget = 0\n    best_dim = 0\n    for _ in range(budget):\n        func = Hyperband(budget, dim).__call__(func)\n        area = np.mean([np.abs(func(x) - np.mean(func)) for x in np.random.uniform(-5.0, 5.0, dim)])\n        if area > best_area:\n            best_area = area\n            best_func = func\n            best_func_val = np.mean(func)\n            best_budget = budget\n            best_dim = dim\n    return best_area\n\n# Test the function\nfunc = lambda x: np.sin(x)\nbest_area = area_over_convergence_curve(func, 1000, 5)\nprint(f\"Best Area: {best_area}\")\nprint(f\"Best Area Over Convergence Curve: {best_area / 1000}\")", "name": "Hyperband", "description": "Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()').", "error": "ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()')", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {}, "mutation_prompt": null}
{"id": "debb7386-7673-42ab-aa0a-59ea861ebccc", "solution": "import numpy as np\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "name": "Hyperband", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367837, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.054782746657569104, 0.053221356437489376, 0.04855619561912483, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.028981774059425147, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.12096781838999726, 0.013640910311869758, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.0007381158042131242, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017619, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184061, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.046897177062183215, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "bbf5cf42-15f9-46ed-99f7-d926bf887a83", "solution": "import numpy as np\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "name": "Hyperband", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367837, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.054782746657569104, 0.053221356437489376, 0.04855619561912483, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.028981774059425147, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.12096781838999726, 0.013640910311869758, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.0007381158042131242, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017619, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184061, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.046897177062183215, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "407471a7-4740-4c22-b653-65c3103f2ce4", "solution": "import numpy as np\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "name": "Hyperband", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367837, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.054782746657569104, 0.053221356437489376, 0.04855619561912483, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.028981774059425147, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.12096781838999726, 0.013640910311869758, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.0007381158042131242, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017619, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184061, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.046897177062183215, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "solution": "import numpy as np\nimport random\nimport math\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 11, "fitness": 0.05541250832591436, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "63950203-acf5-4fd4-9275-6d1d445703fa", "metadata": {"aucs": [0.11860917256239101, 0.1317978948144517, 0.0971442813906448, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09998674794518048, 0.07716710322430687, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.018210427032520404, 0.018813459769204233, 0.01054446805214826, 0.010045475309632068, 0.006570620486303191, 0.028711934597124622, 0.01592962727930991, 0.010575797721399605, 0.0, 0.009221155249710677, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.05581723709984732, 0.053221356437489376, 0.06258466016180642, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317917, 0.028981774059425147, 0.03388866375556843, 0.03700598756977125, 0.03914083941533808, 0.0, 0.0, 0.01657700280651897, 0.08910436217966655, 0.10018685869141841, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322754993, 0.16300323295929098, 0.11290837971452783, 0.15331195505797646, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099887, 0.017002545702838656, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.015780415108252566, 0.01750168379108641, 0.01512920799085482, 0.02185026629168696, 0.02666833626569931, 0.08484849337017641, 0.10784738729815802, 0.11833361437129442, 0.13757644454574725, 0.1350323393253441, 0.10789794917811213, 0.08904503220895243, 0.10406384972733818, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832555, 0.05976163112617183, 0.058748323411779935, 0.08389423256589923, 0.08983978001916515, 0.06624274507053907, 0.09784532092633325, 0.08364015581209883, 0.09968109929816094, 0.06756783766562713, 0.11934558904189418, 0.13314855849895268, 0.13336421106438578, 0.11542560921130718, 0.10358742063029891, 0.12454087766032351, 0.12237199858757541, 0.12656822978680515, 0.12930373404285733, 0.0, 0.06954348349943151, 0.0, 0.0, 0.12671825863833852, 0.11335416818742283, 0.0, 0.0170550237236039, 0.16199517241667472, 0.10621516635738704, 0.10437449637000407, 0.10152388188400507, 0.09351712941326829, 0.1207035396655618, 0.06986593107999362, 0.10692837481480566, 0.11174864742922108, 0.06926818844989102, 0.1103137036995071, 0.10829912054017621, 0.10936822380811095, 0.08050084289570181, 0.05602347940084906, 0.07939520915676224, 0.16083056721927202, 0.060451950082071604, 0.04842414825381225, 0.13877620072807328, 0.18401359588811717, 0.1480388243708598, 0.15188682364718975, 0.12813296664601492, 0.13985688431065968, 0.14961211855402412, 0.1530006844295041, 0.14680476350940785, 0.03377525332389941, 0.024716210845035724, 0.03431752545184319, 0.02691798931623457, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "5f278daf-bece-4579-bb72-61f0240d62c8", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.aocc_avg = 0.0\n        self.aocc_std = 0.0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n        self.aocc_avg = np.mean(self.func_evals)\n        self.aocc_std = np.std(self.func_evals)\n        return self.best_func\n\n# One-line description: Hyperband is a metaheuristic that adapts its search strategy based on the average Area over the Convergence Curve (AOCC) score.\n# Code: ", "name": "Hyperband", "description": "Hyperband is a metaheuristic that adapts its search strategy based on the average Area over the Convergence Curve (AOCC) score.", "configspace": "", "generation": 12, "fitness": 0.05514437326670309, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239101, 0.1317978948144517, 0.0971442813906448, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09998674794518048, 0.07716710322430687, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.018210427032520293, 0.022526451590774155, 0.01054446805214826, 0.010045475309631957, 0.006570620486303191, 0.028711934597124622, 0.01592962727930991, 0.010575797721399605, 0.0, 0.009221155249710677, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.047595983096589745, 0.058716332515958536, 0.058141240247040926, 0.055817237099847095, 0.053221356437489376, 0.06258466016180664, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317917, 0.028981774059425147, 0.03388866375556865, 0.038361948813882774, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.08910436217966633, 0.10018685869141841, 0.0821548355402063, 0.05973037536276371, 0.06661749824786889, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322755004, 0.1630032329592912, 0.1196731705626638, 0.15331195505797646, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099887, 0.017002545702838656, 0.023061441357176804, 0.021886321886607996, 0.03257212990950742, 0.015780415108252566, 0.01750168379108641, 0.01512920799085482, 0.02185026629168718, 0.0266683362656992, 0.08484849337017641, 0.10784738729815779, 0.1183336143712942, 0.13757644454574725, 0.1350323393253441, 0.10789794917811235, 0.08904503220895255, 0.10406384972733829, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617161, 0.058748323411779935, 0.08389423256589923, 0.08983978001916515, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.06756783766562713, 0.11934558904189418, 0.13314855849895268, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.12454087766032351, 0.12237199858757519, 0.12656822978680504, 0.12930373404285733, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.11335416818742305, 0.0, 0.01705502372360368, 0.1619951724166745, 0.10621516635738681, 0.10437449637000429, 0.10152388188400507, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480588, 0.11174864742922086, 0.06926818844989102, 0.11031370369950688, 0.10829912054017621, 0.10936822380811095, 0.08050084289570181, 0.05602347940084906, 0.07939520915676224, 0.16083056721927202, 0.06045195008207138, 0.046897177062183215, 0.13877620072807328, 0.18401359588811717, 0.1480388243708598, 0.15188682364718975, 0.12813296664601515, 0.13985688431065957, 0.14961211855402434, 0.1530006844295041, 0.14680476350940774, 0.03377525332389941, 0.024716210845035502, 0.03431752545184319, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "fa5faa2d-cb19-41db-94b0-149908da0988", "solution": "import numpy as np\nimport random\nimport math\n\nclass EvolutionaryHyperband(Hyperband):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n        return self.best_func\n\n# One-line description: EvolutionaryHyperband uses a combination of evolutionary algorithms and hyperband search to efficiently explore the search space of black box functions.\n# Code: ", "name": "EvolutionaryHyperband", "description": "Hyperband uses a combination of hyperband search and evolutionary algorithms to efficiently explore the search space of black box functions.", "configspace": "", "generation": 13, "fitness": 0.05466327989681982, "feedback": "The algorithm EvolutionaryHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239101, 0.13179789481445148, 0.09714428139064457, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09998674794518048, 0.07716710322430687, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.018210427032520404, 0.022526451590774155, 0.010544468052148481, 0.010045475309631957, 0.006570620486303191, 0.028711934597124622, 0.01592962727930991, 0.010575797721399605, 0.0, 0.009221155249710455, 0.011307823610296697, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.047595983096589745, 0.058716332515958536, 0.05814124024704104, 0.05581723709984732, 0.053221356437489376, 0.06258466016180642, 0.06387700170275934, 0.057709755334132806, 0.05340007253595491, 0.06265423285317917, 0.028981774059425147, 0.03388866375556843, 0.038361948813882774, 0.0391408394153383, 0.0, 0.0, 0.016577002806518748, 0.08910436217966655, 0.10018685869141841, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322754993, 0.1630032329592912, 0.1196731705626638, 0.15331195505797646, 0.12407727635937793, 0.16104568613219816, 0.12639624065450605, 0.13466926787099887, 0.017002545702838656, 0.023061441357176915, 0.021886321886607996, 0.0325721299095072, 0.015780415108252455, 0.01750168379108641, 0.01512920799085482, 0.02185026629168718, 0.02666833626569931, 0.08484849337017641, 0.0860023147635115, 0.11833361437129442, 0.13757644454574725, 0.1350323393253441, 0.10789794917811235, 0.08904503220895243, 0.10406384972733818, 0.08214815400281406, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557915, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832555, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.08983978001916515, 0.06624274507053907, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.06756783766562713, 0.11934558904189418, 0.13314855849895268, 0.13336421106438578, 0.1154256092113074, 0.10358742063029891, 0.12454087766032351, 0.12237199858757541, 0.12656822978680504, 0.12930373404285733, 0.0, 0.0, 0.0, 0.0, 0.12671825863833852, 0.11335416818742305, 0.0, 0.01705502372360368, 0.1619951724166745, 0.10621516635738704, 0.10437449637000407, 0.10152388188400507, 0.09351712941326829, 0.1207035396655618, 0.06986593107999362, 0.10692837481480588, 0.11174864742922108, 0.0692681884498908, 0.1103137036995071, 0.10829912054017621, 0.10936822380811084, 0.08050084289570181, 0.05602347940084906, 0.07939520915676224, 0.0736724244050796, 0.06045195008207138, 0.04842414825381225, 0.13877620072807328, 0.18401359588811705, 0.1480388243708598, 0.15188682364718975, 0.12813296664601492, 0.13985688431065968, 0.14961211855402434, 0.1530006844295041, 0.14680476350940785, 0.03377525332389941, 0.024716210845035724, 0.03431752545184319, 0.02691798931623457, 0.03415436066354671, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "ef00206b-2844-4559-a991-7ca5cd16680f", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.tolerance = 1e-6\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  \n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.explore_rate:\n                self.explore_count -= 1\n                if random.random() < self.reduction_factor:\n                    self.explore_count += 1\n            if np.abs(func_eval - self.best_func_val) < self.tolerance:\n                break\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "", "configspace": "", "generation": 14, "fitness": 0.01574805447403709, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.03.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.07004820631194908, 0.03307244247110286, 0.059680722466995184, 0.008313623462203767, 0.004248457386029969, 0.025191216022295126, 0.03212835352014154, 0.04622302106343523, 0.029756618681247127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004529016055027535, 0.001623544930051346, 0.0, 0.0, 0.013935605478366808, 0.0012003755651393, 0.0, 0.01494056462278781, 0.0017756910060219289, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.0, 0.0, 0.03232362276045475, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008518338443295526, 0.0, 0.12383033797696896, 0.06701850967150258, 0.0, 0.0, 0.09452415868638986, 0.04255978571051544, 0.015873222110063034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006189359083089818, 0.03859639884744681, 0.05459392587769685, 0.0037520439208048595, 0.007152562049591471, 0.04260258319574772, 0.008828119269616352, 0.025779377491665922, 0.0, 0.09116171693589636, 0.0699308042572706, 0.05534564673213027, 0.10264986706467094, 0.04177859725990696, 0.06565932771018945, 0.11411347464502575, 0.06601984023597363, 0.049724615847158926, 0.02032238524666008, 0.0, 0.0, 0.04455513106718245, 0.0, 0.02833945090219059, 0.05639263182623655, 0.00519625581887484, 0.0, 0.09154377975027184, 0.01468460282358719, 0.06795011122388206, 0.09121143776311724, 0.017136811098156235, 0.04230204210483279, 0.12237199858757541, 0.024075681933431903, 0.07544914227304711, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027918465338306664, 0.01198580139661476, 0.014912950064974395, 0.04506913840170912, 0.012967245648141223, 0.016667973896089427, 0.03382267488617985, 0.05652137775177002, 0.020548299014595428, 0.013355742419508543, 0.03957798628310871, 0.007974131442622823, 0.010932072046310526, 0.009660401758026405, 0.012800890258628406, 0.011910539142261367, 0.01139618306130763, 0.015870266677145417, 0.05787468216440317, 0.12008703439342805, 0.08099594871756399, 0.10726544462840137, 0.0695305003678981, 0.12456358843521431, 0.05182654953792576, 0.04768902553973842, 0.07268714549090105, 0.0, 0.0, 0.009878077650213868, 0.0, 0.0, 0.0, 0.003688085859674395, 0.0, 0.0046608687793441295]}, "mutation_prompt": null}
{"id": "aaff053d-d244-451a-bb3b-3b99632d0455", "solution": "import numpy as np\nimport random\nimport math\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.score = 0.0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.explore_rate:\n                self.explore_count -= 1\n        return self.best_func\n\n# One-line description: Hyperband is a metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "Hyperband is a metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 15, "fitness": 0.05209384872098852, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239123, 0.12014318361367837, 0.0916041897440597, 0.13103955980024662, 0.10741076274618722, 0.11033114211644335, 0.09998674794518048, 0.0754446916850493, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724208, 0.018813459769204233, 0.01054446805214826, 0.006493004426635696, 0.006570620486303191, 0.028711934597124844, 0.015929627279309688, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.045084250649534585, 0.058716332515958314, 0.05814124024704104, 0.055817237099847095, 0.053221356437489376, 0.04855619561912461, 0.06387700170275912, 0.057709755334132806, 0.05340007253595491, 0.06265423285317939, 0.02898177405942537, 0.018797761135708746, 0.037005987569771026, 0.03914083941533808, 0.0, 0.0, 0.016577002806518748, 0.0, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14274195326859462, 0.15748132322755004, 0.1630032329592912, 0.1129083797145276, 0.15331195505797646, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099887, 0.013640910311869647, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.015780415108252455, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017641, 0.08600231476351128, 0.11833361437129442, 0.13757644454574725, 0.1350323393253442, 0.10789794917811213, 0.08799080449358876, 0.08090029113184061, 0.07978027219983652, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.161772375915878, 0.12187060846021103, 0.17369512487615557, 0.11535598085832555, 0.05976163112617183, 0.058748323411779935, 0.08389423256589923, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816094, 0.06756783766562713, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.1154256092113074, 0.10239522617085317, 0.11538196709938187, 0.12237199858757519, 0.10333361788222772, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833852, 0.0, 0.0, 0.0, 0.16199517241667472, 0.10621516635738704, 0.08958410382055226, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825287, 0.0692681884498908, 0.1103137036995071, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.07367242440507948, 0.05336871162932222, 0.04689717706218344, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065968, 0.14961211855402434, 0.15300068442950432, 0.14680476350940785, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "e4f96f84-dd86-45a2-ab13-4aefaa224ad1", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.sample_count = 0\n        self.sample_size = 10\n        self.search_space = [-5.0, 5.0]\n        self.sample_size_factor = 0.5\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(self.search_space[0], self.search_space[1], self.dim))\n            self.func_evals.append(func_eval)\n            if self.sample_count < self.sample_size:\n                if random.random() < self.sample_count / self.sample_size_factor:\n                    self.sample_count += 1\n                    self.sample_size *= self.sample_size_factor\n            if self.sample_count >= self.sample_size:\n                self.sample_count = 0\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.explore_rate:\n                self.explore_count -= 1\n        return self.best_func\n\n# One-line description: AdaptiveHyperband is a metaheuristic algorithm that combines adaptive sampling with hyperband search to efficiently explore the search space of black box functions.\n# Code: ", "name": "AdaptiveHyperband", "description": "Hyperband is a metaheuristic algorithm that combines hyperband search with adaptive sampling to efficiently explore the search space of black box functions.", "configspace": "", "generation": 16, "fitness": 0.05217828673545874, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239123, 0.12014318361367826, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.018210427032520404, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.015929627279309688, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958314, 0.058141240247040926, 0.055817237099847095, 0.053221356437489376, 0.04855619561912461, 0.06387700170275912, 0.05770975533413292, 0.05340007253595491, 0.06265423285317939, 0.02898177405942537, 0.018797761135708746, 0.037005987569771026, 0.03914083941533808, 0.0, 0.0, 0.01657700280651897, 0.0, 0.10018685869141841, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14274195326859462, 0.15748132322755004, 0.1630032329592912, 0.1129083797145276, 0.15331195505797646, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099887, 0.013640910311869758, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.015780415108252455, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017619, 0.08600231476351128, 0.11833361437129442, 0.13757644454574725, 0.1350323393253442, 0.10789794917811213, 0.08799080449358876, 0.08090029113184061, 0.07978027219983652, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832555, 0.05976163112617161, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.1154256092113074, 0.10239522617085317, 0.10887980745480186, 0.12237199858757541, 0.10192819487496041, 0.12610897469223925, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738704, 0.08958410382055226, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999362, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816151, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.04689717706218344, 0.13471522306136396, 0.18401359588811717, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065968, 0.14961211855402412, 0.15300068442950432, 0.14680476350940785, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354671, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962604]}, "mutation_prompt": null}
{"id": "e31b1d1c-9a7e-43c9-90fb-b11069d02144", "solution": "import numpy as np\nimport random\nimport math\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.adaptive_count = 0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.explore_rate:\n                self.adaptive_count += 1\n                if self.adaptive_count > 10:\n                    break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n        return self.best_func\n\n# One-line description: AdaptiveHyperband uses a combination of hyperband search and adaptive sampling to efficiently explore the search space of black box functions.\n# Code: ", "name": "AdaptiveHyperband", "description": "Hyperband uses a combination of hyperband search and adaptive sampling to efficiently explore the search space of black box functions.", "configspace": "", "generation": 17, "fitness": 0.052519387428003404, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239101, 0.1317978948144517, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.0754446916850493, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867312842, 0.018210427032520404, 0.018813459769204233, 0.010544468052148481, 0.006493004426635696, 0.006570620486303191, 0.028711934597124622, 0.01592962727930991, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.05581723709984732, 0.053221356437489376, 0.04855619561912461, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317917, 0.028981774059425147, 0.0, 0.03700598756977125, 0.03914083941533808, 0.0, 0.0, 0.01657700280651897, 0.0, 0.10018685869141841, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.026181922062049168, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14274195326859462, 0.15748132322755004, 0.1630032329592912, 0.1196731705626638, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099875, 0.017002545702838656, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.015780415108252455, 0.01750168379108641, 0.0, 0.02185026629168696, 0.02666833626569931, 0.08484849337017641, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.10406384972733829, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.11685663037404359, 0.1617723759158778, 0.12019368026040644, 0.17369512487615557, 0.11535598085832555, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.05686290050998832, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162249, 0.13336421106438578, 0.1154256092113074, 0.10358742063029891, 0.12454087766032351, 0.12237199858757519, 0.12656822978680515, 0.12610897469223925, 0.0, 0.0, 0.0, 0.0, 0.12671825863833852, 0.11335416818742305, 0.0, 0.0, 0.16199517241667472, 0.10621516635738681, 0.08958410382055226, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480588, 0.10502535409825287, 0.0692681884498908, 0.11031370369950688, 0.10258192672273381, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.1608305672192719, 0.053368711629321997, 0.04689717706218344, 0.13471522306136396, 0.1282849674499068, 0.1480388243708598, 0.14543725022082632, 0.12813296664601515, 0.13985688431065957, 0.14961211855402434, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623457, 0.03415436066354671, 0.03872045048850137, 0.01612999899170031, 0.03793735337628057, 0.01754558650804139]}, "mutation_prompt": null}
{"id": "e4796232-264e-4034-ba97-ae53c94fc334", "solution": "import numpy as np\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.explore_rate * self.reduction_factor:\n                self.explore_count -= 1\n        return self.best_func\n\n    def __str__(self):\n        return f\"Hyperband: Hyperband is a metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\"\n\n# One-line description: Hyperband is a metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "Hyperband is a metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 18, "fitness": 0.051698021271255806, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367826, 0.0916041897440597, 0.13103955980024673, 0.10741076274618722, 0.11033114211644335, 0.09975734614470277, 0.0754446916850493, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724208, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124844, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.045084250649534585, 0.058716332515958314, 0.058141240247040926, 0.054782746657569104, 0.053221356437489376, 0.04855619561912461, 0.06387700170275934, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.02898177405942537, 0.018797761135708635, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322754993, 0.16300323295929098, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450628, 0.13466926787099887, 0.013640910311869758, 0.023061441357176804, 0.021886321886607996, 0.0325721299095072, 0.015780415108252455, 0.01750168379108641, 0.005832772591550017, 0.02185026629168696, 0.02666833626569931, 0.08484849337017641, 0.0860023147635115, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184061, 0.07978027219983652, 0.11976349214214665, 0.12235416835123036, 0.1613093788136244, 0.1379205218140116, 0.13620502999557904, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053907, 0.09784532092633325, 0.08364015581209883, 0.09968109929816094, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438556, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757541, 0.10192819487496041, 0.12610897469223925, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.16199517241667472, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.0935171294132684, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825287, 0.06926818844989102, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676201, 0.0736724244050796, 0.053368711629321997, 0.04689717706218344, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601515, 0.13985688431065957, 0.14961211855402434, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354671, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "69501134-e885-4824-b548-3ce12ad1ac1f", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.explore_rate * self.reduction_factor:\n                self.explore_count -= 1\n        return self.best_func\n\n    def __str__(self):\n        return f\"Hyperband: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\"\n\n# Description: Hyperband is a metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "Hyperband is a metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 19, "fitness": 0.051639377942372826, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367826, 0.0916041897440597, 0.13103955980024673, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.0754446916850493, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124844, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.045084250649534585, 0.058716332515958314, 0.058141240247040926, 0.055817237099847095, 0.053221356437489487, 0.04855619561912461, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.02898177405942537, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.016577002806518748, 0.0, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654646, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450628, 0.12096781838999726, 0.013640910311869758, 0.023061441357176804, 0.021886321886608107, 0.0325721299095072, 0.015780415108252455, 0.01750168379108641, 0.005832772591550017, 0.02185026629168696, 0.02666833626569931, 0.08484849337017641, 0.08600231476351128, 0.11833361437129442, 0.13757644454574725, 0.1350323393253442, 0.10789794917811213, 0.08799080449358876, 0.08090029113184061, 0.07978027219983652, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053907, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.06756783766562713, 0.11934558904189418, 0.10482363617162227, 0.13336421106438556, 0.1154256092113074, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833852, 0.0, 0.0, 0.0, 0.16199517241667472, 0.10621516635738681, 0.08958410382055226, 0.10152388188400496, 0.0935171294132684, 0.1207035396655618, 0.06986593107999339, 0.10692837481480588, 0.10502535409825287, 0.06926818844989102, 0.1103137036995071, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816151, 0.07939520915676224, 0.0736724244050796, 0.05336871162932222, 0.04689717706218344, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601515, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623457, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962604]}, "mutation_prompt": null}
{"id": "828111b1-0dd9-4dd1-8111-1cd4d146f487", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.explore_rate * self.reduction_factor:\n                self.explore_count -= 1\n        return self.best_func\n\n# One-line description: Hyperband uses hyperband search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "Hyperband uses hyperband search to efficiently explore the search space of black box functions, reducing the number of function evaluations required to achieve a good solution.", "configspace": "", "generation": 20, "fitness": 0.05193255275820808, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239123, 0.12014318361367837, 0.0916041897440597, 0.13103955980024673, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.0754446916850493, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.045084250649534585, 0.058716332515958314, 0.05814124024704104, 0.054782746657569104, 0.053221356437489376, 0.04855619561912461, 0.06387700170275934, 0.057709755334132806, 0.05340007253595491, 0.06265423285317939, 0.02898177405942537, 0.018797761135708746, 0.03700598756977125, 0.03914083941533808, 0.0, 0.0, 0.016577002806518748, 0.0, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322754993, 0.16300323295929098, 0.11290837971452783, 0.15331195505797646, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099887, 0.013640910311869758, 0.023061441357176804, 0.021886321886607996, 0.0325721299095072, 0.015780415108252455, 0.01750168379108641, 0.005832772591550017, 0.02185026629168696, 0.02666833626569931, 0.08484849337017641, 0.08600231476351128, 0.11833361437129442, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184083, 0.07978027219983652, 0.11976349214214665, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816094, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.1154256092113074, 0.10239522617085328, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223925, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055226, 0.10152388188400496, 0.0935171294132684, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.1103137036995071, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816151, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.046897177062183215, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601515, 0.13985688431065968, 0.14961211855402412, 0.15300068442950432, 0.14680476350940785, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623457, 0.03415436066354671, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "81777317-8e14-4c83-8a7d-04b2644ac007", "solution": "import numpy as np\nimport random\nimport math\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n                self.explore_rate *= 0.9  # refine strategy\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "", "configspace": "", "generation": 21, "fitness": 0.05514314719875595, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239123, 0.1317978948144517, 0.0971442813906448, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09998674794518048, 0.07716710322430698, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867312842, 0.018210427032520404, 0.018813459769204233, 0.01054446805214826, 0.010045475309631957, 0.00657062048630308, 0.028711934597124622, 0.01592962727930991, 0.010575797721399605, 0.0, 0.009221155249710677, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.047595983096589745, 0.058716332515958536, 0.058141240247040926, 0.055817237099847095, 0.053221356437489376, 0.04855619561912461, 0.06387700170275934, 0.05770975533413292, 0.05340007253595469, 0.06265423285317917, 0.028981774059425147, 0.03388866375556865, 0.038361948813882774, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.08910436217966655, 0.10018685869141841, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14274195326859462, 0.15748132322755004, 0.1630032329592912, 0.1196731705626638, 0.15331195505797646, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099887, 0.017002545702838656, 0.023061441357176804, 0.021886321886607996, 0.03257212990950742, 0.015780415108252455, 0.01750168379108641, 0.01512920799085482, 0.02185026629168696, 0.02666833626569931, 0.08484849337017641, 0.0860023147635115, 0.11833361437129442, 0.13757644454574725, 0.1350323393253441, 0.10789794917811235, 0.08904503220895243, 0.10406384972733818, 0.08214815400281406, 0.11976349214214665, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589923, 0.08983978001916526, 0.06624274507053907, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.06756783766562713, 0.11934558904189418, 0.13314855849895268, 0.13336421106438578, 0.1154256092113074, 0.10239522617085317, 0.12454087766032351, 0.12237199858757541, 0.12656822978680504, 0.12930373404285733, 0.0, 0.06954348349943151, 0.0, 0.0, 0.12671825863833874, 0.11335416818742305, 0.0, 0.01705502372360368, 0.16199517241667472, 0.10621516635738681, 0.10437449637000407, 0.10152388188400507, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.11174864742922086, 0.0692681884498908, 0.1103137036995071, 0.10829912054017621, 0.06922728298844594, 0.08050084289570181, 0.06357475314042116, 0.07939520915676224, 0.1608305672192719, 0.060451950082071604, 0.04689717706218344, 0.13877620072807328, 0.18401359588811717, 0.1480388243708598, 0.15188682364718953, 0.12813296664601492, 0.13985688431065957, 0.14961211855402434, 0.1530006844295041, 0.14680476350940774, 0.03377525332389941, 0.024716210845035502, 0.03431752545184319, 0.02691798931623457, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "9d88f531-b46c-483a-9d29-253f682ab4e5", "solution": "import numpy as np\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.explore_rate:\n                self.explore_count -= 1\n        return self.best_func\n\n    def optimize(self, func, budget):\n        # Use hyperband search with reduced explore rate\n        self.explore_rate = 0.01\n        self.budget_count = 0\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        while self.explore_count < budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < 0.7:\n                self.explore_count -= 1\n        return self.best_func\n\n# One-line description: Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "Hyperband is a novel metaheuristic that uses hyperband search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 22, "fitness": 0.05214917964429809, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367826, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644313, 0.09975734614470277, 0.0754446916850493, 0.1093118289565822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724208, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296364, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958314, 0.05814124024704104, 0.055817237099847095, 0.053221356437489487, 0.04855619561912461, 0.06387700170275912, 0.05770975533413292, 0.05340007253595469, 0.06265423285317917, 0.028981774059425147, 0.018797761135708635, 0.03700598756977125, 0.03914083941533808, 0.0, 0.0, 0.016577002806518748, 0.0, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322755004, 0.1630032329592912, 0.1129083797145276, 0.15331195505797646, 0.12407727635937771, 0.16104568613219816, 0.12639624065450628, 0.13466926787099887, 0.013640910311869758, 0.023061441357176804, 0.021886321886608107, 0.0325721299095072, 0.015780415108252455, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.0266683362656992, 0.08484849337017619, 0.0860023147635115, 0.11833361437129442, 0.13757644454574725, 0.1350323393253442, 0.10789794917811213, 0.08799080449358876, 0.08090029113184061, 0.07978027219983652, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.1617723759158778, 0.12187060846021103, 0.17369512487615557, 0.11535598085832555, 0.05976163112617161, 0.058748323411779935, 0.08389423256589923, 0.06277006213208702, 0.06624274507053907, 0.09784532092633325, 0.08364015581209894, 0.09968109929816094, 0.06756783766562713, 0.11934558904189418, 0.13314855849895246, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480197, 0.12237199858757541, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833852, 0.0, 0.0, 0.0, 0.16199517241667472, 0.10621516635738704, 0.08958410382055226, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999362, 0.10692837481480566, 0.10502535409825287, 0.06926818844989102, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.04689717706218344, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065968, 0.14961211855402412, 0.15300068442950432, 0.14680476350940785, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623457, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628079, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 23, "fitness": 0.055480322319639536, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "2c1d8691-bdd4-4c68-a99e-008bbfd69805", "metadata": {"aucs": [0.11860917256239101, 0.13179789481445148, 0.0971442813906448, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09998674794518048, 0.07716710322430698, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.018210427032520404, 0.022526451590774155, 0.010544468052148481, 0.010045475309632068, 0.006570620486303191, 0.028711934597124622, 0.01592962727930991, 0.010575797721399605, 0.0, 0.009221155249710677, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.047595983096589634, 0.058716332515958314, 0.058141240247040926, 0.055817237099847095, 0.053221356437489376, 0.04855619561912461, 0.06387700170275912, 0.059452526463292465, 0.05340007253595469, 0.06265423285317917, 0.028981774059425147, 0.03388866375556865, 0.038361948813882774, 0.0391408394153383, 0.0, 0.0, 0.016577002806518748, 0.08910436217966655, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322755004, 0.1630032329592912, 0.1196731705626638, 0.15331195505797646, 0.12407727635937771, 0.17482592028893396, 0.12639624065450605, 0.13466926787099887, 0.017002545702838656, 0.023061441357176804, 0.021886321886607996, 0.0325721299095072, 0.015780415108252566, 0.01750168379108641, 0.01512920799085482, 0.02185026629168696, 0.02666833626569931, 0.08484849337017641, 0.10784738729815779, 0.1183336143712942, 0.13757644454574747, 0.1350323393253441, 0.10789794917811235, 0.08904503220895243, 0.10406384972733829, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617161, 0.058748323411779935, 0.08389423256589912, 0.08983978001916515, 0.06624274507053907, 0.09784532092633325, 0.08364015581209894, 0.09968109929816105, 0.06756783766562713, 0.11934558904189418, 0.13314855849895246, 0.13336421106438578, 0.1154256092113074, 0.10239522617085317, 0.12454087766032351, 0.12237199858757541, 0.12656822978680515, 0.12930373404285733, 0.0, 0.06954348349943151, 0.0, 0.0, 0.12671825863833874, 0.11335416818742305, 0.0, 0.01705502372360368, 0.1619951724166745, 0.10621516635738704, 0.10437449637000429, 0.10152388188400507, 0.0935171294132684, 0.1207035396655618, 0.06986593107999362, 0.10692837481480566, 0.11174864742922108, 0.06926818844989102, 0.1103137036995071, 0.10829912054017621, 0.10936822380811084, 0.08050084289570181, 0.05602347940084906, 0.07939520915676224, 0.16083056721927202, 0.06045195008207138, 0.04842414825381225, 0.1387762007280735, 0.18401359588811717, 0.1480388243708598, 0.15188682364718975, 0.12813296664601515, 0.13985688431065957, 0.14961211855402412, 0.1530006844295041, 0.14680476350940785, 0.03377525332389941, 0.024716210845035502, 0.03431752545184319, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "33858a67-1035-4999-9410-cdd8c8012b17", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.adaptive_reduction_factor = 0.7\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.adaptive_reduction_factor:\n                self.adaptive_reduction_factor = self.reduction_factor\n                self.reduction_factor *= 0.7\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband uses adaptive reduction factor and local search to efficiently explore the search space of black box functions.\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband with Adaptive Reduction Factor and Local Search", "configspace": "", "generation": 24, "fitness": 0.05156494836021395, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367837, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.054782746657569104, 0.053221356437489376, 0.04855619561912483, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.028981774059425147, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.12096781838999726, 0.013640910311869758, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.0007381158042131242, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017619, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184061, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.046897177062183215, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "c574de15-55f5-4ce4-b031-0cf0844736a7", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.iterations = 0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  \n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.\n# Code: \n# ```python\n# def __call__(self, func):\n#     best_func = None\n#     best_func_val = None\n#     for _ in range(self.budget):\n#         func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n#         if self.best_func is None or np.abs(func_eval - best_func_val) > np.abs(func_eval - best_func):\n#             best_func = func_eval\n#             best_func_val = func_eval\n#     return best_func", "name": "Hyperband", "description": "Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 25, "fitness": 0.055211150264898014, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "metadata": {"aucs": [0.11860917256239101, 0.13179789481445148, 0.0971442813906448, 0.13103955980024662, 0.107410762746187, 0.11033114211644313, 0.09998674794518048, 0.07716710322430687, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867312842, 0.018210427032520404, 0.022526451590774155, 0.010544468052148481, 0.010045475309632068, 0.006570620486303191, 0.028711934597124844, 0.01592962727930991, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.047595983096589745, 0.058716332515958536, 0.05814124024704104, 0.055817237099847095, 0.053221356437489376, 0.04855619561912461, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317917, 0.02898177405942537, 0.03388866375556865, 0.038361948813882774, 0.03914083941533808, 0.0, 0.0, 0.01657700280651897, 0.08910436217966655, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786933, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322754993, 0.1630032329592912, 0.1196731705626638, 0.15331195505797623, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099887, 0.017002545702838656, 0.023061441357176915, 0.021886321886607996, 0.0325721299095072, 0.015780415108252455, 0.01750168379108652, 0.01512920799085482, 0.02185026629168718, 0.02666833626569931, 0.08484849337017641, 0.0860023147635115, 0.1183336143712942, 0.13757644454574725, 0.1350323393253441, 0.10789794917811213, 0.08904503220895255, 0.10406384972733829, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617161, 0.058748323411779935, 0.08389423256589923, 0.08983978001916515, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.06756783766562713, 0.11934558904189418, 0.13314855849895268, 0.13336421106438578, 0.11542560921130718, 0.10239522617085328, 0.12454087766032351, 0.12237199858757541, 0.12656822978680515, 0.12930373404285733, 0.0, 0.06954348349943151, 0.0, 0.0, 0.12671825863833852, 0.11335416818742305, 0.0, 0.01705502372360368, 0.1619951724166745, 0.10621516635738681, 0.10437449637000407, 0.10152388188400507, 0.0935171294132684, 0.1207035396655618, 0.06986593107999362, 0.10692837481480588, 0.11174864742922086, 0.0692681884498908, 0.1103137036995071, 0.10829912054017621, 0.10936822380811084, 0.08050084289570181, 0.044471548646930925, 0.07939520915676224, 0.1608305672192719, 0.060451950082071604, 0.04842414825381225, 0.13877620072807328, 0.18401359588811717, 0.1480388243708598, 0.15188682364718975, 0.12813296664601515, 0.13985688431065968, 0.14961211855402434, 0.1530006844295041, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03431752545184319, 0.02691798931623468, 0.03415436066354682, 0.03872045048850159, 0.03098072302811561, 0.03793735337628057, 0.024795384376962604]}, "mutation_prompt": null}
{"id": "ee4614e7-bb95-4b18-a388-57f7336aeb7e", "solution": "import numpy as np\nimport random\nfrom scipy.optimize import differential_evolution\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = differential_evolution(lambda x: -x, [[-5.0, 5.0], [-5.0, 5.0]])\n            else:\n                func_eval = differential_evolution(lambda x: x, [[-5.0, 5.0], [-5.0, 5.0]])\n            self.func_evals.append(func_eval.fun)\n            if self.best_func is None or np.abs(func_eval.fun - self.best_func_val) > np.abs(func_eval.fun - self.best_func):\n                self.best_func = func_eval.fun\n                self.best_func_val = func_eval.fun\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.\n# Code: \n# ```python\n# Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.\n# ```", "name": "Hyperband", "description": "Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: RuntimeError('func(x, *args) must return a scalar value').", "error": "RuntimeError('func(x, *args) must return a scalar value')", "parent_id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "metadata": {}, "mutation_prompt": null}
{"id": "f894f3dd-be2e-4fff-8eaf-f6f94b36cd02", "solution": "import numpy as np\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n    def update(self, func, budget):\n        while self.explore_count < budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func", "name": "Hyperband", "description": "Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 27, "fitness": 0.05541852391923294, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "metadata": {"aucs": [0.11860917256239101, 0.1317978948144517, 0.0971442813906448, 0.13103955980024662, 0.107410762746187, 0.11033114211644313, 0.09998674794518048, 0.07716710322430698, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.018210427032520404, 0.022526451590774377, 0.01054446805214826, 0.010045475309632068, 0.006570620486303191, 0.028711934597124622, 0.01592962727930991, 0.010575797721399605, 0.0, 0.009221155249710677, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.047595983096589745, 0.058716332515958536, 0.058141240247040926, 0.055817237099847095, 0.053221356437489376, 0.06258466016180642, 0.06387700170275934, 0.05945252646329224, 0.05340007253595491, 0.06265423285317917, 0.028981774059425147, 0.018797761135708746, 0.038361948813882774, 0.0391408394153383, 0.0, 0.0, 0.016577002806518748, 0.08910436217966655, 0.1001868586914183, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322755004, 0.16300323295929098, 0.1196731705626638, 0.15331195505797646, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099887, 0.017002545702838545, 0.023061441357176804, 0.021886321886607996, 0.0325721299095072, 0.017274632854340055, 0.01750168379108641, 0.01512920799085482, 0.02185026629168696, 0.0266683362656992, 0.08484849337017641, 0.10784738729815779, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811213, 0.08904503220895243, 0.10406384972733818, 0.07978027219983652, 0.11976349214214665, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557915, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589923, 0.08983978001916526, 0.06624274507053929, 0.09784532092633325, 0.08364015581209894, 0.09968109929816094, 0.06756783766562713, 0.11934558904189418, 0.13314855849895268, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.12454087766032351, 0.12237199858757541, 0.12656822978680504, 0.12930373404285733, 0.0, 0.06954348349943151, 0.0, 0.0, 0.12671825863833852, 0.11335416818742305, 0.0, 0.0170550237236039, 0.1619951724166745, 0.10621516635738704, 0.10437449637000407, 0.10152388188400507, 0.09351712941326829, 0.1207035396655618, 0.06986593107999362, 0.10692837481480588, 0.11174864742922086, 0.06926818844989102, 0.11031370369950688, 0.10829912054017621, 0.10936822380811084, 0.08050084289570181, 0.056023479400849285, 0.07939520915676224, 0.16083056721927202, 0.060451950082071604, 0.04842414825381225, 0.1387762007280735, 0.18401359588811717, 0.1480388243708598, 0.15188682364718975, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.1530006844295041, 0.14680476350940785, 0.03377525332389941, 0.024716210845035724, 0.03431752545184319, 0.02691798931623457, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962604]}, "mutation_prompt": null}
{"id": "336fa154-34fa-4401-b1e6-6bc8a7370ba5", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "metadata": {"aucs": [0.11860917256239101, 0.13179789481445148, 0.0971442813906448, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09998674794518048, 0.07716710322430698, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.018210427032520404, 0.022526451590774155, 0.010544468052148481, 0.010045475309632068, 0.006570620486303191, 0.028711934597124622, 0.01592962727930991, 0.010575797721399605, 0.0, 0.009221155249710677, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.047595983096589634, 0.058716332515958314, 0.058141240247040926, 0.055817237099847095, 0.053221356437489376, 0.04855619561912461, 0.06387700170275912, 0.059452526463292465, 0.05340007253595469, 0.06265423285317917, 0.028981774059425147, 0.03388866375556865, 0.038361948813882774, 0.0391408394153383, 0.0, 0.0, 0.016577002806518748, 0.08910436217966655, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322755004, 0.1630032329592912, 0.1196731705626638, 0.15331195505797646, 0.12407727635937771, 0.17482592028893396, 0.12639624065450605, 0.13466926787099887, 0.017002545702838656, 0.023061441357176804, 0.021886321886607996, 0.0325721299095072, 0.015780415108252566, 0.01750168379108641, 0.01512920799085482, 0.02185026629168696, 0.02666833626569931, 0.08484849337017641, 0.10784738729815779, 0.1183336143712942, 0.13757644454574747, 0.1350323393253441, 0.10789794917811235, 0.08904503220895243, 0.10406384972733829, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617161, 0.058748323411779935, 0.08389423256589912, 0.08983978001916515, 0.06624274507053907, 0.09784532092633325, 0.08364015581209894, 0.09968109929816105, 0.06756783766562713, 0.11934558904189418, 0.13314855849895246, 0.13336421106438578, 0.1154256092113074, 0.10239522617085317, 0.12454087766032351, 0.12237199858757541, 0.12656822978680515, 0.12930373404285733, 0.0, 0.06954348349943151, 0.0, 0.0, 0.12671825863833874, 0.11335416818742305, 0.0, 0.01705502372360368, 0.1619951724166745, 0.10621516635738704, 0.10437449637000429, 0.10152388188400507, 0.0935171294132684, 0.1207035396655618, 0.06986593107999362, 0.10692837481480566, 0.11174864742922108, 0.06926818844989102, 0.1103137036995071, 0.10829912054017621, 0.10936822380811084, 0.08050084289570181, 0.05602347940084906, 0.07939520915676224, 0.16083056721927202, 0.06045195008207138, 0.04842414825381225, 0.1387762007280735, 0.18401359588811717, 0.1480388243708598, 0.15188682364718975, 0.12813296664601515, 0.13985688431065957, 0.14961211855402412, 0.1530006844295041, 0.14680476350940785, 0.03377525332389941, 0.024716210845035502, 0.03431752545184319, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "5f5edf69-574a-4e11-8ec0-c8f83e0a2f5a", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.reduction_factor_count = 0\n        self.local_search_count = 0\n        self.score = 0.0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            self.reduction_factor_count += 1\n            if self.reduction_factor_count > 10:\n                self.reduction_factor -= 0.1\n                self.reduction_factor_count = 0\n            if random.random() < self.explore_rate:\n                self.local_search_count += 1\n                if self.local_search_count > 10:\n                    self.local_search = not self.local_search\n                    self.local_search_count = 0\n        return self.best_func\n\n# One-line description: Adaptive Hyperband uses adaptive reduction factor and local search to efficiently explore the search space of black box functions.", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband using Adaptive Reduction Factor and Local Search", "configspace": "", "generation": 29, "fitness": 0.0520191077900071, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "metadata": {"aucs": [0.11860917256239123, 0.12014318361367837, 0.0916041897440597, 0.13103955980024673, 0.107410762746187, 0.11033114211644335, 0.09998674794518048, 0.0754446916850493, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724208, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958314, 0.05814124024704104, 0.055817237099847095, 0.053221356437489376, 0.04855619561912483, 0.06387700170275934, 0.057709755334132806, 0.05340007253595491, 0.06265423285317939, 0.02898177405942537, 0.018797761135708635, 0.03700598756977125, 0.03914083941533808, 0.0, 0.0, 0.01657700280651897, 0.0, 0.10018685869141841, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654646, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.15331195505797657, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099875, 0.013640910311869647, 0.023061441357176804, 0.021886321886608107, 0.0325721299095072, 0.015780415108252455, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017641, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811213, 0.08799080449358876, 0.08090029113184061, 0.07978027219983652, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557915, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832555, 0.05976163112617161, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816094, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438556, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999362, 0.10692837481480588, 0.10502535409825287, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.07367242440507948, 0.053368711629321997, 0.04689717706218344, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623457, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "aef00e67-2305-4f55-b385-089ea6ea1268", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.convergence_rate = 0.01\n        self.convergence_count = 0\n        self.best_func_count = 0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.convergence_rate:\n                self.convergence_count += 1\n                if self.convergence_count > self.best_func_count * 2:\n                    self.best_func_count = 0\n                    self.convergence_count = 0\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            self.convergence_rate *= 0.9\n        return self.best_func\n\n# One-line description: AdaptiveHyperband uses an adaptive exploration strategy with a combination of hyperband search and local search to efficiently explore the search space of black box functions.\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm", "configspace": "", "generation": 30, "fitness": 0.05156494836021395, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "metadata": {"aucs": [0.11860917256239101, 0.12014318361367837, 0.0916041897440597, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.07544469168504953, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635474, 0.006570620486303191, 0.028711934597124622, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.054782746657569104, 0.053221356437489376, 0.04855619561912483, 0.06387700170275912, 0.057709755334132806, 0.05340007253595469, 0.06265423285317939, 0.028981774059425147, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.01657700280651897, 0.0, 0.1001868586914183, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322755004, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.12096781838999726, 0.013640910311869758, 0.023061441357176915, 0.021886321886608107, 0.0325721299095072, 0.0007381158042131242, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017619, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358876, 0.08090029113184061, 0.0797802721998363, 0.11976349214214677, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.0675678376656269, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055249, 0.10152388188400496, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.11031370369950688, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.046897177062183215, 0.13471522306136396, 0.16077757872901843, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065957, 0.14961211855402412, 0.15300068442950432, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03129662407793532, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "3f90c96c-fe90-4c2d-9992-429752b2fd22", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.current_dim = 10\n        self.current_budget = budget\n        self.max_evals = 100\n\n    def __call__(self, func):\n        while self.explore_count < self.current_budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.current_dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.current_dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.current_budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            if self.explore_count >= self.max_evals:\n                break\n        return self.best_func\n\n# One-line description: Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 31, "fitness": 0.0, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "3599ae92-4ea9-486d-a0b6-161eecc520f9", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.AOCC = 0.0\n        self.AOCC_std = 0.0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            if np.abs(func_eval - self.best_func_val) > 3 * np.abs(func_eval - self.best_func):\n                self.best_func = None\n                self.best_func_val = None\n            if np.abs(func_eval - self.best_func_val) > 2 * np.abs(func_eval - self.best_func):\n                self.AOCC = np.mean(np.abs(func_eval - self.best_func_val))\n                self.AOCC_std = np.std(np.abs(func_eval - self.best_func_val))\n        return self.best_func\n\n# One-line description: AdaptiveHyperband uses an adaptive strategy to balance between exploration and exploitation in the search space of black box functions.\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm", "configspace": "", "generation": 32, "fitness": 0.05481722916188202, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "metadata": {"aucs": [0.11860917256239123, 0.1317978948144517, 0.0971442813906448, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09998674794518025, 0.07716710322430687, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867313064, 0.018210427032520404, 0.018813459769204233, 0.010544468052148481, 0.010045475309632068, 0.006570620486303191, 0.028711934597124622, 0.01592962727930991, 0.010575797721399605, 0.0, 0.009221155249710677, 0.011307823610296475, 0.019501673109847295, 0.0003952856329982879, 0.0, 0.014664865741570998, 0.0, 0.0, 0.045084250649534474, 0.058716332515958536, 0.058141240247040926, 0.05581723709984732, 0.08023495246196222, 0.04855619561912461, 0.06387700170275934, 0.057709755334132806, 0.05340007253595469, 0.06265423285317917, 0.028981774059425147, 0.03388866375556865, 0.038361948813882774, 0.0391408394153383, 0.0, 0.0, 0.016577002806518748, 0.08910436217966655, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786933, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322754993, 0.16300323295929098, 0.11290837971452783, 0.15331195505797646, 0.12407727635937771, 0.17482592028893396, 0.12639624065450605, 0.13466926787099887, 0.017002545702838656, 0.023061441357176915, 0.021886321886607996, 0.0325721299095072, 0.015780415108252566, 0.01750168379108641, 0.01512920799085482, 0.02185026629168718, 0.02666833626569931, 0.08484849337017641, 0.10784738729815802, 0.11833361437129442, 0.13757644454574725, 0.1350323393253441, 0.10789794917811213, 0.08904503220895243, 0.10406384972733829, 0.0797802721998363, 0.11976349214214665, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.1617723759158778, 0.12187060846021125, 0.17369512487615557, 0.11535598085832555, 0.05976163112617161, 0.058748323411779935, 0.08389423256589912, 0.08983978001916515, 0.06624274507053907, 0.09784532092633325, 0.08364015581209883, 0.09968109929816105, 0.06756783766562713, 0.11934558904189418, 0.13314855849895268, 0.13336421106438556, 0.11542560921130718, 0.10358742063029891, 0.12454087766032351, 0.12237199858757541, 0.12656822978680504, 0.12930373404285733, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.11335416818742305, 0.0, 0.0170550237236039, 0.16199517241667472, 0.10621516635738681, 0.10437449637000407, 0.10152388188400507, 0.09351712941326829, 0.1207035396655618, 0.06986593107999339, 0.10692837481480566, 0.11174864742922108, 0.06926818844989102, 0.1103137036995071, 0.10829912054017621, 0.10936822380811084, 0.08050084289570181, 0.056023479400849285, 0.07939520915676224, 0.07367242440507948, 0.06045195008207138, 0.04842414825381225, 0.13877620072807328, 0.18401359588811717, 0.1480388243708598, 0.15188682364718953, 0.12813296664601515, 0.13985688431065957, 0.14961211855402412, 0.1530006844295041, 0.14680476350940774, 0.03377525332389941, 0.024716210845035724, 0.03431752545184319, 0.02691798931623457, 0.03415436066354671, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "4ca165c6-5ba1-4b12-a964-c81bb496e709", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  # limit exploration to prevent infinite loop\n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "", "configspace": "", "generation": 33, "fitness": 0.05568954316571132, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "7f4021fe-0531-4e94-901c-bbbcd3054de1", "metadata": {"aucs": [0.11860917256239123, 0.1317978948144517, 0.09714428139064457, 0.13103955980024662, 0.107410762746187, 0.11033114211644313, 0.09998674794518048, 0.07716710322430687, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867312842, 0.018210427032520404, 0.018813459769204233, 0.010544468052148481, 0.010045475309631957, 0.006570620486303191, 0.028711934597124844, 0.01592962727930991, 0.010575797721399605, 0.0, 0.009221155249710677, 0.011307823610296475, 0.019501673109847295, 0.0003952856329982879, 0.0, 0.014664865741570998, 0.0, 0.0, 0.047595983096589745, 0.058716332515958536, 0.058141240247040926, 0.05581723709984732, 0.08023495246196222, 0.04855619561912461, 0.06387700170275934, 0.05770975533413292, 0.05340007253595469, 0.06265423285317917, 0.02898177405942537, 0.03388866375556843, 0.038361948813882774, 0.03914083941533808, 0.0, 0.0, 0.01657700280651897, 0.08910436217966655, 0.1001868586914183, 0.0821548355402063, 0.08841437842248179, 0.06661749824786911, 0.07275849405212176, 0.08123739143306064, 0.04927146655654646, 0.05921649636366422, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14274195326859462, 0.15748132322755004, 0.1630032329592912, 0.1196731705626638, 0.15331195505797646, 0.12407727635937771, 0.17482592028893396, 0.12639624065450605, 0.13466926787099887, 0.017002545702838656, 0.023061441357176804, 0.021886321886607996, 0.0325721299095072, 0.015780415108252455, 0.01750168379108652, 0.01512920799085482, 0.02185026629168696, 0.0266683362656992, 0.08484849337017641, 0.10784738729815779, 0.11833361437129442, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08904503220895243, 0.10406384972733829, 0.08214815400281406, 0.11976349214214665, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832555, 0.05976163112617161, 0.058748323411779935, 0.08389423256589923, 0.08983978001916515, 0.06624274507053929, 0.09784532092633325, 0.08364015581209883, 0.09968109929816094, 0.06756783766562713, 0.11934558904189418, 0.13314855849895268, 0.13336421106438578, 0.1154256092113074, 0.10358742063029891, 0.12454087766032351, 0.12237199858757541, 0.12656822978680504, 0.12930373404285733, 0.0, 0.06954348349943151, 0.0, 0.0, 0.12671825863833852, 0.11335416818742305, 0.0, 0.01705502372360368, 0.1619951724166745, 0.10621516635738704, 0.10437449637000407, 0.10152388188400507, 0.09351712941326829, 0.1207035396655618, 0.06986593107999362, 0.10692837481480566, 0.11174864742922108, 0.0692681884498908, 0.1103137036995071, 0.10829912054017621, 0.10936822380811084, 0.08050084289570181, 0.05602347940084906, 0.07939520915676224, 0.1608305672192719, 0.053368711629321997, 0.04689717706218344, 0.13877620072807328, 0.18401359588811717, 0.1480388243708598, 0.15188682364718953, 0.12813296664601515, 0.13985688431065957, 0.14961211855402412, 0.1530006844295041, 0.14680476350940785, 0.03377525332389941, 0.024716210845035724, 0.03431752545184319, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962493]}, "mutation_prompt": null}
{"id": "f9257acc-a894-4c8d-8807-c7fb7eacd793", "solution": "import numpy as np\nimport random\n\nclass Hyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.reduction_count = 0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_count > 100:  \n                break\n            if self.local_search:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            if self.reduction_count < 5:\n                self.reduction_count += 1\n            if random.random() < self.reduction_factor:\n                self.reduction_count -= 1\n            if random.random() < self.explore_rate:\n                self.reduction_count += 1\n        return self.best_func\n\n# One-line description: Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.\n# Code: ", "name": "Hyperband", "description": "Hyperband uses a combination of hyperband search and local search to efficiently explore the search space of black box functions.", "configspace": "", "generation": 34, "fitness": 0.055584782252450476, "feedback": "The algorithm Hyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "4ca165c6-5ba1-4b12-a964-c81bb496e709", "metadata": {"aucs": [0.11860917256239101, 0.1317978948144517, 0.0971442813906448, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09998674794518048, 0.07716710322430687, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867312842, 0.018210427032520404, 0.022526451590774155, 0.010544468052148481, 0.010045475309632068, 0.006570620486303191, 0.028711934597124844, 0.01592962727930991, 0.010575797721399605, 0.0, 0.009221155249710677, 0.011307823610296475, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.047595983096589745, 0.058716332515958536, 0.05814124024704104, 0.05581723709984732, 0.08023495246196222, 0.06258466016180664, 0.06387700170275912, 0.059452526463292465, 0.05340007253595469, 0.06265423285317917, 0.028981774059425147, 0.03388866375556865, 0.038361948813882774, 0.03914083941533808, 0.0, 0.0, 0.016577002806518748, 0.08910436217966633, 0.1001868586914183, 0.0821548355402063, 0.05973037536276371, 0.06661749824786933, 0.07275849405212176, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259231, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1427419532685944, 0.15748132322754993, 0.16300323295929098, 0.1196731705626638, 0.15331195505797646, 0.12407727635937771, 0.16104568613219816, 0.12639624065450605, 0.13466926787099887, 0.017002545702838656, 0.023061441357176804, 0.021886321886607996, 0.03257212990950742, 0.015780415108252566, 0.01750168379108652, 0.01512920799085482, 0.02185026629168696, 0.02666833626569931, 0.08484849337017641, 0.08600231476351128, 0.1183336143712942, 0.13757644454574725, 0.1350323393253441, 0.10789794917811213, 0.08904503220895243, 0.10406384972733818, 0.0797802721998363, 0.11976349214214665, 0.12235416835123036, 0.16130937881362462, 0.1379205218140116, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.08983978001916515, 0.06624274507053907, 0.09784532092633325, 0.08364015581209894, 0.09968109929816105, 0.06756783766562713, 0.11934558904189418, 0.13314855849895268, 0.13336421106438556, 0.11542560921130718, 0.10358742063029891, 0.12454087766032351, 0.12237199858757519, 0.12656822978680515, 0.12930373404285744, 0.0, 0.06954348349943151, 0.0, 0.0, 0.12671825863833852, 0.11335416818742305, 0.0, 0.01705502372360368, 0.16199517241667472, 0.10621516635738681, 0.10437449637000407, 0.10152388188400507, 0.09351712941326829, 0.1207035396655618, 0.06986593107999362, 0.10692837481480588, 0.11174864742922108, 0.06926818844989102, 0.11031370369950688, 0.10829912054017621, 0.10936822380811084, 0.08050084289570181, 0.056023479400849285, 0.07939520915676201, 0.16083056721927202, 0.06045195008207138, 0.06437854540575627, 0.13877620072807328, 0.18401359588811717, 0.1480388243708598, 0.15188682364718953, 0.12813296664601492, 0.13985688431065968, 0.14961211855402434, 0.1530006844295041, 0.14680476350940774, 0.03377525332389941, 0.024716210845035502, 0.03431752545184319, 0.02691798931623468, 0.03415436066354682, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962604]}, "mutation_prompt": null}
{"id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 35, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "4ca165c6-5ba1-4b12-a964-c81bb496e709", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "206612c1-5085-429a-9d6c-8302e197fe33", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperbandAOACS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: \n# ```python\n# Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# ```\n# ```python\ndef adaptive_hyperbandAOACS(budget, dim):\n    adapt_hyperband = AdaptiveHyperbandAOACS(budget, dim)\n    return adapt_hyperband(adaptive_hyperbandAOACS)\n\n# Test the function\nbudget = 100\ndim = 5\nbest_func, best_func_val = adaptive_hyperbandAOACS(budget, dim)\nprint(f\"Best function: {best_func}, Best function value: {best_func_val}\")", "name": "AdaptiveHyperbandAOACS", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy (AOACS)", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"adaptive_hyperbandAOACS() missing 1 required positional argument: 'dim'\").", "error": "TypeError(\"adaptive_hyperbandAOACS() missing 1 required positional argument: 'dim'\")", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {}, "mutation_prompt": null}
{"id": "73409fce-0dad-43e2-9ecd-cf3912db550e", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.explore_strategy_count = 0\n        self.explore_strategy_change_count = 0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_strategy_count / self.budget_count < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive_explore':\n                if self.explore_strategy_count / self.budget_count < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive_explore_uniform':\n                if self.explore_strategy_count / self.budget_count < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive_explore', 'adaptive_explore_uniform'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            self.explore_strategy_count += 1\n            if self.explore_strategy_change_count < 10:\n                self.explore_strategy_change_count += 1\n                if random.random() < 0.5:\n                    self.explore_strategy = 'adaptive_explore_uniform'\n                    self.explore_strategy_change_count = 0\n                else:\n                    self.explore_strategy = 'adaptive_explore'\n            else:\n                self.explore_strategy = 'uniform'\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 37, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "e14290ac-9464-4541-9543-dfcd63575413", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'gaussian':\n                func_eval = func(np.random.normal(0, 1, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'gaussian'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 38, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "3c7b03ab-1866-4483-be7d-012b7f059805", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.current_strategy = 'uniform'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive_exploitation':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'adaptive_exploitation'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.current_strategy = 'random'\n            else:\n                self.current_strategy = 'uniform'\n        return self.best_func\n\n    def adapt(self):\n        if self.explore_strategy == 'adaptive_exploitation':\n            if self.explore_count / self.budget < 0.7:\n                self.explore_rate = 0.05\n            else:\n                self.explore_rate = 0.15\n        return self.explore_rate", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 39, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "5fc50f16-78cf-4ee1-94e1-a72bed23dada", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.current_strategy = 'uniform'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.current_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.current_strategy == 'adaptive':\n                if self.current_strategy == 'uniform':\n                    if self.explore_count / self.budget < 0.3:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                    else:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.current_strategy = 'uniform'\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            self.current_strategy = self.current_strategy.lower()\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: \n# ```python\n# AdaptiveHyperband: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 40, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "892d2bd7-f369-423a-bb52-67eb0cb5d4ff", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3 * self.reduction_factor:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor * self.explore_rate:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 41, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "0eee4231-d179-4c6b-993f-f364019e0f73", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 42, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "8b5bf866-fb1b-4366-b571-2bb5bbf4f686", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive_local':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'adaptive_local'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 43, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "0e5a25fb-b537-4075-b160-56baf4bb52df", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate * self.explore_strategy:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"can't multiply sequence by non-int of type 'float'\").", "error": "TypeError(\"can't multiply sequence by non-int of type 'float'\")", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {}, "mutation_prompt": null}
{"id": "4854a7df-c822-41b3-a075-e3e8b0af5568", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 45, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "2f63d575-4d53-43ea-9059-9ad696b9c7b6", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 46, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "85a5ad5d-e0e8-404f-a51a-bd048957e7df", "solution": "# Description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: \nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, budget):\n        while self.explore_count < budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"AdaptiveHyperband.__call__() missing 1 required positional argument: 'budget'\").", "error": "TypeError(\"AdaptiveHyperband.__call__() missing 1 required positional argument: 'budget'\")", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {}, "mutation_prompt": null}
{"id": "44a6d92f-a621-4061-a023-8cbe7470c92d", "solution": "import numpy as np\nimport random\nfrom scipy.optimize import minimize\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 48, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "0f094705-b4ce-4731-876d-cb68075e45a1", "solution": "# Description: Adaptive Hyperband Algorithm with Adaptive Strategy\n# Code: \nimport numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.strategy = 'uniform'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.strategy == 'adaptive2':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                if self.explore_count / self.budget < 0.2:\n                    self.strategy = 'adaptive'\n            else:\n                raise ValueError(\"Invalid strategy. Choose from 'uniform', 'adaptive', or 'adaptive2'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Strategy", "configspace": "", "generation": 49, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "530c5949-3f8f-43c5-b372-c41890394cad", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                if self.local_search:\n                    self.local_search_strategy = 'random'\n                else:\n                    self.local_search_strategy = 'uniform'\n            self.explore_strategy = self.explore_strategy.lower()\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 50, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "9979df78-850b-409e-a0b6-85533bff884b", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3 * self.reduction_factor:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 51, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "07781caf-8d98-45c9-b706-be0bf80fefab", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive_explore':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                if self.explore_rate < 0.5:\n                    self.explore_count -= 1\n                    self.explore_rate = 0.5\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'adaptive_explore'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 52, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "15927b41-eebe-4ac4-9320-2528cc652e79", "solution": "import numpy as np\nfrom scipy.optimize import minimize\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 53, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "fef74848-ac3b-457f-9d02-206de7dd3a31", "solution": "# Description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: \nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.current_strategy = 'uniform'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.current_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.current_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            self.current_strategy = 'adaptive'\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 54, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "0b34f5ad-a913-45fa-9f91-3b03cd4b9892", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'bayesian':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'bayesian'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 55, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "7e14a7b1-c62e-4b20-84fe-f09ca36bb5ff", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                if self.explore_strategy == 'uniform':\n                    self.local_search = random.random() < self.explore_rate\n                else:\n                    self.local_search_strategy = random.random() < self.explore_rate\n            else:\n                self.local_search = True\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 56, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "9e61c1c8-0d1b-474f-8dff-8cbc9abb4c1b", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy (AOCC)", "configspace": "", "generation": 57, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "174a572c-6bb8-45b4-b668-1cbccfb00dfd", "solution": "import numpy as np\nimport random\nfrom scipy.optimize import minimize\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy for Black Box Optimization", "configspace": "", "generation": 58, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "0dcdda91-b6ff-424d-ad46-0f4127aed390", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3 * self.budget:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate * self.budget:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: \n# ```python\ndef adaptive_hyperband(budget, dim, func, num_evals=100):\n    adapt_hy = AdaptiveHyperband(budget, dim)\n    best_func = None\n    best_func_val = None\n    for _ in range(num_evals):\n        adapt_hy(func)\n        if best_func is None or np.abs(adapt_hy.func_evals[-1] - best_func_val) > np.abs(adapt_hy.func_evals[-1] - best_func):\n            best_func = adapt_hy.func_evals[-1]\n            best_func_val = adapt_hy.func_evals[-1]\n    return best_func", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 59, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "d953af38-eb5c-47bc-8994-266776689116", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3 * self.budget:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate * self.explore_count:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 60, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "aa756072-d161-4381-baf4-3000e9f9e9a4", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 61, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "8004043b-f62c-44d7-9862-e96540ee05a6", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                if self.local_search:\n                    self.local_search_strategy = 'random'\n                else:\n                    self.local_search_strategy = 'uniform'\n            self.explore_count = max(0, self.explore_count)\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 62, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "41d79d4b-2233-46de-9bb9-cb647ae7be44", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'exponential':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'exponential'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 63, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "60f58d58-ebaf-4cc5-9dcd-d658cbc44c69", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 64, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "8374710f-bfd8-44a8-8151-e3abe13eedcb", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive_adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                if self.explore_count / self.budget < 0.6:\n                    self.explore_rate = 0.2\n                    self.local_search = True\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive' or 'adaptive_adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Strategy", "configspace": "", "generation": 65, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "4229cf75-dad5-494c-b1ea-2d8f46f73a44", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate * self.explore_strategy:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy for Black Box Optimization", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"can't multiply sequence by non-int of type 'float'\").", "error": "TypeError(\"can't multiply sequence by non-int of type 'float'\")", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {}, "mutation_prompt": null}
{"id": "29e69a73-d2ef-4557-a824-b4a5348bcaac", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            if self.explore_count < 0.7 * self.budget:\n                self.local_search = False\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 67, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "671315fc-d22f-4113-8ddf-251d79eb2891", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                if self.local_search:\n                    self.local_search_strategy = 'random'\n                else:\n                    self.local_search_strategy = 'uniform'\n            self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 68, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "d788baaa-fddb-49e1-950e-d4942ae9925e", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.tolerance = 0.01\n        self.explore_threshold = 0.05\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                if self.explore_count < self.explore_threshold:\n                    self.local_search = True\n                else:\n                    self.local_search = False\n            else:\n                if self.explore_count > self.explore_threshold:\n                    self.local_search = False\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.tolerance:\n                self.explore_count -= 1\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 69, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "49bd4535-3ede-4ca4-8c72-c2f5d88dea65", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.explore_strategy_update_count = 0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_strategy_update_count < 10:\n                    if self.explore_strategy == 'uniform':\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                    elif self.explore_strategy == 'adaptive':\n                        if self.explore_strategy_update_count / self.budget < 0.3:\n                            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                        else:\n                            func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                    self.explore_strategy_update_count += 1\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            self.explore_strategy_update_count += 1\n            if self.explore_strategy_update_count > 20:\n                self.explore_strategy = 'adaptive'\n\n            if self.explore_strategy == 'adaptive':\n                if self.explore_strategy_update_count / self.budget > 0.3:\n                    self.explore_strategy = 'uniform'\n            return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 70, "fitness": 0.01574805447403709, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.03.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.07004820631194908, 0.03307244247110286, 0.059680722466995184, 0.008313623462203767, 0.004248457386029969, 0.025191216022295126, 0.03212835352014154, 0.04622302106343523, 0.029756618681247127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004529016055027535, 0.001623544930051346, 0.0, 0.0, 0.013935605478366808, 0.0012003755651393, 0.0, 0.01494056462278781, 0.0017756910060219289, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.0, 0.0, 0.03232362276045475, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008518338443295526, 0.0, 0.12383033797696896, 0.06701850967150258, 0.0, 0.0, 0.09452415868638986, 0.04255978571051544, 0.015873222110063034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006189359083089818, 0.03859639884744681, 0.05459392587769685, 0.0037520439208048595, 0.007152562049591471, 0.04260258319574772, 0.008828119269616352, 0.025779377491665922, 0.0, 0.09116171693589636, 0.0699308042572706, 0.05534564673213027, 0.10264986706467094, 0.04177859725990696, 0.06565932771018945, 0.11411347464502575, 0.06601984023597363, 0.049724615847158926, 0.02032238524666008, 0.0, 0.0, 0.04455513106718245, 0.0, 0.02833945090219059, 0.05639263182623655, 0.00519625581887484, 0.0, 0.09154377975027184, 0.01468460282358719, 0.06795011122388206, 0.09121143776311724, 0.017136811098156235, 0.04230204210483279, 0.12237199858757541, 0.024075681933431903, 0.07544914227304711, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027918465338306664, 0.01198580139661476, 0.014912950064974395, 0.04506913840170912, 0.012967245648141223, 0.016667973896089427, 0.03382267488617985, 0.05652137775177002, 0.020548299014595428, 0.013355742419508543, 0.03957798628310871, 0.007974131442622823, 0.010932072046310526, 0.009660401758026405, 0.012800890258628406, 0.011910539142261367, 0.01139618306130763, 0.015870266677145417, 0.05787468216440317, 0.12008703439342805, 0.08099594871756399, 0.10726544462840137, 0.0695305003678981, 0.12456358843521431, 0.05182654953792576, 0.04768902553973842, 0.07268714549090105, 0.0, 0.0, 0.009878077650213868, 0.0, 0.0, 0.0, 0.003688085859674395, 0.0, 0.0046608687793441295]}, "mutation_prompt": null}
{"id": "ccb72ced-f20c-4369-9bee-eb67bbc4ac49", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.exploration_strategy = 'adaptive'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.exploration_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.exploration_strategy == 'adaptive':\n                if self.exploration_strategy == 'uniform':\n                    if self.explore_count / self.budget < 0.3:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                    else:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                elif self.exploration_strategy == 'adaptive':\n                    if self.explore_count / self.budget < 0.2:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                    else:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 71, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "beffc167-ed51-4fb5-97f4-af5dfac5aeab", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                if self.explore_strategy == 'uniform':\n                    self.local_search = True\n                else:\n                    self.local_search = False\n            else:\n                self.local_search_strategy = 'random'\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 72, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "f31dc783-d44c-428b-aa86-c322d82d19da", "solution": "# Description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: \nimport numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.exploration_strategy = 'adaptive'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.exploration_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.exploration_strategy == 'adaptive':\n                if self.exploration_strategy == 'uniform':\n                    if self.explore_count / self.budget < 0.3:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                    else:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    if self.explore_count / self.budget < 0.3:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                    else:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                if self.local_search:\n                    self.local_search_strategy = 'random'\n                else:\n                    self.local_search_strategy = 'uniform'\n            self.exploration_strategy = 'adaptive'\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 73, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "3ab62129-70c7-4f87-8cd4-12a10a20fa60", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.explore_strategy_coefficient = 0.7\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3 * self.explore_strategy_coefficient:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 74, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "b3ee7fad-9b94-4635-898b-881c97935953", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search_strategy = 'random'\n        self.local_search_count = 0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate and self.local_search:\n                self.local_search_count += 1\n                if self.local_search_count / self.budget_count > 0.3:\n                    self.local_search = not self.local_search\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Local Search Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Local Search Strategy", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'AdaptiveHyperband' object has no attribute 'explore_strategy'\").", "error": "AttributeError(\"'AdaptiveHyperband' object has no attribute 'explore_strategy'\")", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {}, "mutation_prompt": null}
{"id": "9eb600f8-163a-48d2-9a90-e3fdbed60c13", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code:", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 76, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "9f41cd46-d1fc-4baa-86c4-9b1cbbb50956", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.max_iter = 100\n        self.crit = 0.1\n        self.iteration_count = 0\n\n    def __call__(self, func):\n        while self.explore_count < self.budget and self.iteration_count < self.max_iter:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3 * self.crit:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            self.iteration_count += 1\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy (AOACS)", "configspace": "", "generation": 77, "fitness": 0.05153316380563857, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.11860917256239123, 0.12014318361367826, 0.09160418974405948, 0.13103955980024662, 0.107410762746187, 0.11033114211644335, 0.09975734614470277, 0.0754446916850493, 0.10931182895658242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010735973867312842, 0.015070848613724097, 0.018813459769204233, 0.010544468052148481, 0.006493004426635696, 0.006570620486303191, 0.028711934597124844, 0.007693168839173259, 0.010575797721399605, 0.0, 0.0, 0.011307823610296475, 0.019501673109847295, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.045084250649534585, 0.058716332515958536, 0.05814124024704104, 0.05478274665756888, 0.053221356437489376, 0.04855619561912461, 0.06387700170275912, 0.05770975533413292, 0.05340007253595469, 0.06265423285317939, 0.028981774059425147, 0.018797761135708746, 0.03700598756977125, 0.0391408394153383, 0.0, 0.0, 0.016577002806518748, 0.0, 0.10018685869141841, 0.0821548355402063, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.08123739143306086, 0.04927146655654635, 0.05921649636366433, 0.10008778643259253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004414844016280783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12530995864276007, 0.15748132322754993, 0.1630032329592912, 0.11290837971452783, 0.10265315387628593, 0.12407727635937793, 0.16104568613219816, 0.12639624065450628, 0.12096781838999726, 0.013640910311869647, 0.023061441357176804, 0.021886321886607996, 0.0325721299095072, 0.0007381158042133462, 0.01750168379108641, 0.005832772591550017, 0.02185026629168718, 0.02666833626569931, 0.08484849337017641, 0.08600231476351128, 0.11833361437129442, 0.13757644454574725, 0.1350323393253442, 0.10789794917811235, 0.08799080449358865, 0.08090029113184061, 0.07978027219983652, 0.11976349214214665, 0.12235416835123036, 0.16130937881362462, 0.13792052181401182, 0.13620502999557904, 0.161772375915878, 0.12187060846021125, 0.17369512487615557, 0.11535598085832532, 0.05976163112617183, 0.058748323411779935, 0.08389423256589912, 0.06277006213208702, 0.06624274507053907, 0.09784532092633325, 0.08364015581209883, 0.09968109929816094, 0.06756783766562713, 0.11934558904189418, 0.10482363617162227, 0.13336421106438578, 0.11542560921130718, 0.10239522617085317, 0.10887980745480186, 0.12237199858757519, 0.10192819487496041, 0.12610897469223925, 0.0, 0.0, 0.0, 0.0, 0.12671825863833874, 0.0, 0.0, 0.0, 0.1619951724166745, 0.10621516635738681, 0.08958410382055226, 0.10152388188400496, 0.0935171294132684, 0.1207035396655618, 0.06986593107999362, 0.10692837481480588, 0.10502535409825287, 0.06926818844989102, 0.1103137036995071, 0.10829912054017621, 0.06922728298844572, 0.08050084289570181, 0.03728632333816162, 0.07939520915676224, 0.0736724244050796, 0.053368711629321997, 0.04689717706218344, 0.13471522306136374, 0.16077757872901854, 0.1480388243708598, 0.14543725022082632, 0.12813296664601492, 0.13985688431065968, 0.14961211855402434, 0.15300068442950432, 0.14680476350940774, 0.02690978953561829, 0.024716210845035724, 0.03129662407793532, 0.02691798931623457, 0.03415436066354671, 0.03872045048850137, 0.03098072302811561, 0.03793735337628057, 0.024795384376962604]}, "mutation_prompt": null}
{"id": "c3d4541c-cbc1-4edd-8191-5651270028c1", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            if self.explore_count / self.budget < 0.6:\n                self.explore_strategy = 'adaptive'\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 78, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "d731390b-4dd4-42a8-adb9-325aa3e132ca", "solution": "import numpy as np\nfrom scipy.optimize import differential_evolution\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 79, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "8179804e-6013-4239-b29a-909f8aa26538", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            if self.explore_count > 0.7 * self.budget_count:\n                break\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 80, "fitness": 0.02088105861880313, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.03.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.07004820631194908, 0.03307244247110286, 0.059680722466995184, 0.008313623462203767, 0.004248457386029969, 0.025191216022295126, 0.03212835352014154, 0.07422043020494906, 0.029756618681247127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014664865741570776, 0.0, 0.0, 0.004529016055027535, 0.001623544930051346, 0.0, 0.0, 0.04678013722708951, 0.037332462972904934, 0.0, 0.01494056462278781, 0.05340007253595469, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.0, 0.0, 0.1001868586914183, 0.0, 0.0, 0.004462664352364976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02363530066906916, 0.10693789276682164, 0.12383033797696896, 0.06701850967150258, 0.0, 0.0, 0.09452415868638986, 0.08474685940847848, 0.12096781838999726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01750168379108652, 0.0, 0.0, 0.026668336265699533, 0.006189359083089818, 0.03859639884744681, 0.05459392587769685, 0.0037520439208048595, 0.007152562049591471, 0.04260258319574772, 0.008828119269616352, 0.025779377491665922, 0.0, 0.09116171693589625, 0.0699308042572706, 0.05534564673213027, 0.10264986706467094, 0.08290739212077247, 0.10242428921379632, 0.11411347464502575, 0.06601984023597363, 0.049724615847158926, 0.02032238524666008, 0.03391154036143873, 0.0, 0.04455513106718245, 0.0, 0.028339450902190366, 0.05639263182623655, 0.00519625581887484, 0.0, 0.09154377975027184, 0.06577577691506542, 0.06795011122388206, 0.09121143776311724, 0.017136811098156235, 0.04230204210483279, 0.12237199858757519, 0.024075681933431903, 0.07544914227304711, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11335416818742305, 0.0, 0.0, 0.0, 0.027918465338306664, 0.01198580139661476, 0.014912950064974395, 0.04506913840170912, 0.012967245648141223, 0.06652066617622099, 0.03382267488617985, 0.05652137775177002, 0.0692681884498908, 0.013355742419508543, 0.03957798628310871, 0.01630315145370509, 0.010932072046310526, 0.009660401758026405, 0.012800890258628406, 0.01642972030755685, 0.04009445607431428, 0.015870266677145417, 0.10087028022501032, 0.12008703439342805, 0.0904520843242661, 0.11590646924167103, 0.0695305003678981, 0.12456358843521431, 0.10047330010600874, 0.04768902553973842, 0.07268714549090105, 0.0, 0.012105424203345483, 0.03129662407793532, 0.0, 0.0, 0.0, 0.003688085859674395, 0.0, 0.0046608687793441295]}, "mutation_prompt": null}
{"id": "c6c23b23-931d-46a6-9056-9ba7d6b65f18", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3 * self.reduction_factor:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor * self.explore_rate:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 81, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "d17babf4-0e60-4883-a402-a396687d2d0d", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                if self.local_search:\n                    self.local_search_strategy = 'random'\n                else:\n                    self.local_search_strategy = 'uniform'\n            else:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 82, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "520134c6-9229-44dc-8258-d691f391b00e", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.budget_reduction_factor = 0.5\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget < 0.3:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.budget_reduction_factor:\n                self.budget_count = int(self.budget / 2)\n                self.explore_count = 0\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 83, "fitness": 0.02247603526161536, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.02 with standard deviation 0.03.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.07172115044991989, 0.06423415049946268, 0.059680722466995184, 0.008313623462203767, 0.05257887047805776, 0.025191216022295126, 0.03212835352014154, 0.05058928098587567, 0.06701824832800662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.024142944706973868, 0.03357090568988674, 0.006890368735566477, 0.03899241521606378, 0.04678013722708951, 0.0017796127779647897, 0.008181281935984441, 0.048891644393723954, 0.025752273873738907, 0.0, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.0, 0.0, 0.03232362276045475, 0.0, 0.0, 0.004462664352364976, 0.0, 0.0, 0.026181922062048946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008518338443295526, 0.070304338086845, 0.14829537673711235, 0.06701850967150258, 0.0, 0.0, 0.09975148756348085, 0.08474685940847848, 0.015873222110063034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006189359083089818, 0.0672636612780867, 0.054593925877696736, 0.09846289938816166, 0.06572254448697334, 0.04260258319574772, 0.05488481188470995, 0.025779377491665922, 0.04745046955260368, 0.09116171693589636, 0.0961601813401296, 0.05534564673213049, 0.10264986706467083, 0.059526912355035155, 0.06784689140952793, 0.11411347464502575, 0.06835725914638902, 0.06184978382811601, 0.0203223852466603, 0.012371068991965717, 0.034551307077592686, 0.04455513106718245, 0.015390172400233548, 0.028339450902190366, 0.05639263182623655, 0.00519625581887484, 0.005985681479316551, 0.09154377975027184, 0.03232240620911597, 0.06795011122388206, 0.09121143776311746, 0.05652467791720406, 0.058381801204911654, 0.12237199858757541, 0.04831892369221691, 0.08893517487915614, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027918465338306442, 0.03264768531808038, 0.05616689752555071, 0.06709542404813529, 0.1207035396655618, 0.01716967788638535, 0.03382267488617985, 0.05652137775177002, 0.053579659675793256, 0.03590455183669672, 0.03957798628310849, 0.01630315145370509, 0.01850796326103321, 0.02150250198996473, 0.0454156150021221, 0.01642972030755685, 0.015736471619919423, 0.02297079570432181, 0.10087028022501032, 0.12008703439342805, 0.08099594871756399, 0.10726544462840115, 0.08005211408412816, 0.12456358843521431, 0.09945213886469706, 0.059594385272387584, 0.07892583006950715, 0.0, 0.0020608381811066945, 0.009878077650213868, 0.0, 0.0, 0.0, 0.003688085859674395, 0.0, 0.0046608687793441295]}, "mutation_prompt": null}
{"id": "f593064c-ae31-4bcf-835a-80a5e9cd61c3", "solution": "# Description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: \nimport numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.exploration_strategy = 'adaptive'\n\n    def __call__(self, func):\n        while self.explore_count < self.budget:\n            if self.explore_strategy == 'uniform':\n                func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n            elif self.explore_strategy == 'adaptive':\n                if self.exploration_strategy == 'uniform':\n                    if self.explore_count / self.budget < 0.3:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                    else:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                elif self.explore_strategy == 'adaptive':\n                    if self.explore_count / self.budget < 0.3:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                    else:\n                        func_eval = func(np.random.uniform(-5.0, 5.0, self.dim))\n                else:\n                    raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            self.func_evals.append(func_eval)\n            if self.best_func is None or np.abs(func_eval - self.best_func_val) > np.abs(func_eval - self.best_func):\n                self.best_func = func_eval\n                self.best_func_val = func_eval\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            self.exploration_strategy = 'adaptive' if random.random() < 0.5 else 'uniform'\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 84, "fitness": 0.08937279101965571, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.17085769623167035, 0.1757058572422331, 0.1701751320910425, 0.1683716632450949, 0.1881013672319184, 0.17426170213113146, 0.1784694736969712, 0.16100006566462466, 0.1899857084926022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04195911479537573, 0.04627732670735474, 0.03609339973410208, 0.039263002744447606, 0.03722454209209103, 0.03652712426101501, 0.05274953025632367, 0.06693164849365096, 0.058617653226251454, 0.02512910593741058, 0.030833169862037213, 0.04805221149658023, 0.02586901339693759, 0.04917346516997456, 0.05693306888762362, 0.03686802895708474, 0.03982775777885561, 0.02966697317322453, 0.08737955766576055, 0.06983595507602514, 0.09078411146570564, 0.08246132951238938, 0.0802349524619258, 0.08630331084647691, 0.0821340072626302, 0.08611870315690229, 0.079241623665812, 0.06433677945632443, 0.07501729808944801, 0.10162914158319636, 0.05341114444215311, 0.062182699577216005, 0.05180788010752291, 0.0946343951840023, 0.056942559827169115, 0.09272639163419083, 0.12544958612882184, 0.19300605579054186, 0.1481003904801601, 0.103664687180538, 0.08772668079558066, 0.12480694366992506, 0.11605065853216434, 0.13676435749214944, 0.11349879727004497, 0.0, 0.0, 0.003589843560722117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01977487719394433, 0.0, 0.06948074990292841, 0.0, 0.0070605920813100465, 0.035265713396076204, 0.01176151293688088, 0.017895102717115474, 0.006469054452603484, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05284523076815861, 0.06849570231049107, 0.04481153941677474, 0.06932699274480414, 0.026633680312444286, 0.05567699785807623, 0.05286441791372276, 0.03380962881892102, 0.06412568818060249, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006655834956705631, 0.0, 0.2207431102150904, 0.1928998494835953, 0.1777494088995516, 0.20550081066235903, 0.1891534617481765, 0.2071688857017936, 0.19777302179147682, 0.17834044298653684, 0.1890672837405214, 0.046710280070146104, 0.03605997306737885, 0.04392419975831763, 0.0398727692739016, 0.03837658795133825, 0.04591458261617232, 0.07317286236703291, 0.04389838095200427, 0.052203849495218724, 0.13700789616286657, 0.12088979944641609, 0.12593514009870255, 0.14097723485346492, 0.14106624614563112, 0.12430825300162507, 0.1495465404698083, 0.1485314416582756, 0.12853878740239744, 0.1657281935293322, 0.15942374724537223, 0.16806593475709486, 0.16771075010412384, 0.18206934740960878, 0.1768830644059457, 0.16236417331830433, 0.1736951248762023, 0.1493567505312391, 0.1061197304717596, 0.10373277099135358, 0.11100621013997791, 0.10970108334251527, 0.13602072322431735, 0.11668187107386296, 0.1046513695314657, 0.12365515439684494, 0.122831460541721, 0.13853986407314534, 0.16225150773198949, 0.14390072410319776, 0.1600750990357208, 0.14085905912423313, 0.16227753221384444, 0.1485223123856103, 0.17347097271569423, 0.1826961469027648, 0.14186537397938992, 0.14569530412472342, 0.1399804111195031, 0.14093097664788545, 0.1437056456900755, 0.15273793827062765, 0.1368935558615625, 0.14155542796149545, 0.16199517241662065, 0.18395133680648057, 0.16671176256254616, 0.16648853434314947, 0.15707335359696806, 0.1508850857713594, 0.1411119810928685, 0.16131177397138674, 0.16332012875937107, 0.1568359743904172, 0.15664458417214044, 0.15798060615334508, 0.16042518751502322, 0.15024678949443515, 0.14862312685001056, 0.16037099298146917, 0.16847697531552663, 0.17330096212278445, 0.20280739914826895, 0.16832215580554477, 0.18401359588811395, 0.17512960003686495, 0.1867546166181936, 0.21349686750706987, 0.18374351203917716, 0.1758629229541555, 0.18860831151327906, 0.20560965108507312, 0.05825056337599721, 0.05071641977512076, 0.06575831506326901, 0.051768407223207746, 0.05925430555275124, 0.053260757215821686, 0.07523314582021234, 0.05482230068064453, 0.04665131189997118]}, "mutation_prompt": null}
{"id": "f3f39486-3aa8-4559-a09d-80134408d745", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 85, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "7ca91672-53d9-4571-a2c9-ece48deb41e5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "fe2d5255-57ea-4d19-a5af-e97e212f66b1", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.explore_strategy_count = 0\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_strategy_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_strategy_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_strategy_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            self.explore_strategy_count = min(10, self.explore_strategy_count)\n            if self.explore_strategy_count > 5:\n                self.explore_strategy_count = 5\n            if self.explore_strategy == 'adaptive':\n                self.explore_strategy = 'uniform'\n            else:\n                self.explore_strategy = 'adaptive'\n\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_strategy_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 86, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c6b7b3bc-71fe-4ac3-a33a-42659f363130", "solution": "import numpy as np\nimport random\nfrom scipy.optimize import minimize\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 87, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "641bede8-88a1-4e9b-8117-6089b3bd04f9", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.exploration_strategy = 'adaptive'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.exploration_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.exploration_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.exploration_strategy == 'adaptive_exponential':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'adaptive_exponential'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            self.exploration_strategy = 'adaptive_exponential' if self.explore_count / self.budget_count < 0.7 else 'uniform'\n\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "An exception occurred: ZeroDivisionError('division by zero').", "error": "ZeroDivisionError('division by zero')", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {}, "mutation_prompt": null}
{"id": "23db5b20-a915-4b23-9d95-cf262dd059ea", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive_exploitation':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive' or 'adaptive_exploitation'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy (AOCC)", "configspace": "", "generation": 89, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "28f69dfe-179a-4677-8ade-579fcf0c52bc", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptiveadaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                    if self.explore_count / self.budget_count < 0.2:\n                        self.explore_strategy = 'uniform'\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'adaptiveadaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 90, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0a6d245b-1512-482f-bb74-574854c546fc", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c68ca464-9e2f-4e72-be5b-20a5e7f9d524", "solution": "import numpy as np\nimport random\nimport math\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                if self.local_search:\n                    self.local_search_strategy = 'random'\n                else:\n                    self.local_search_strategy = 'uniform'\n            if self.local_search:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 92, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9ea70737-06c0-4621-af91-d28a717acd4c", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptiveadaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                if random.random() < 0.5:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'adaptiveadaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 93, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "69c68a6a-b2ca-47ae-b61a-76c036d1b2af", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive_exploration':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'adaptive_exploration'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 94, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "fa2acfc0-8e92-470d-9a46-646c19c62179", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 95, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "9b29cb7d-976d-49c5-b573-778702c8e8d3", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n        self.learning_rate = 0.1\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.learning_rate:\n                self.learning_rate *= 0.9\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if self.explore_count < self.budget_count / 2:\n                self.explore_count = self.budget_count / 2\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Learning Rate Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Learning Rate Strategy", "configspace": "", "generation": 96, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f8a7f6e8-13c7-4252-8026-859bc382a1b9", "solution": "# Description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: \nimport numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        # Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive_explore':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform', 'adaptive', or 'adaptive_explore'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 97, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3204ec85-cb12-409c-919e-eb82ac415ea4", "solution": "import numpy as np\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        for _ in range(max_iter):\n            if self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'adaptive':\n                if self.explore_count / self.budget_count < 0.3:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n                else:\n                    func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "Adaptive Hyperband Algorithm with Adaptive Exploration Strategy", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "a49a4f18-4bd4-46dc-9961-6298da2bb8e7", "solution": "import numpy as np\nimport random\n\nclass AdaptiveHyperband:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.explore_rate = 0.1\n        self.explore_count = 0\n        self.best_func = None\n        self.best_func_val = None\n        self.func_evals = []\n        self.budget_count = 0\n        self.reduction_factor = 0.3\n        self.local_search = True\n        self.deterministic = False\n        self.explore_strategy = 'uniform'\n        self.local_search_strategy = 'random'\n\n    def __call__(self, func, max_evals=1000, max_iter=100):\n        # Refine exploration strategy based on convergence rate\n        if self.budget_count / max_evals < 0.3:\n            self.explore_strategy = 'adaptive'\n            self.explore_rate = 0.5\n        else:\n            self.explore_strategy = 'uniform'\n\n        for _ in range(max_iter):\n            if self.explore_strategy == 'adaptive':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            elif self.explore_strategy == 'uniform':\n                func_evals = [func(np.random.uniform(-5.0, 5.0, self.dim)) for _ in range(max_evals)]\n            else:\n                raise ValueError(\"Invalid exploration strategy. Choose from 'uniform' or 'adaptive'.\")\n\n            if self.best_func is None or np.abs(func_evals[-1] - self.best_func_val) > np.abs(func_evals[-1] - self.best_func):\n                self.best_func = func_evals[-1]\n                self.best_func_val = func_evals[-1]\n            self.explore_count += 1\n            self.budget_count += 1\n            if self.budget_count > self.budget / 2:\n                break\n            if random.random() < self.reduction_factor:\n                self.explore_count -= 1\n            if random.random() < self.explore_rate:\n                self.local_search = not self.local_search\n        return self.best_func\n\n# One-line description: Adaptive Hyperband Algorithm with Adaptive Exploration Strategy\n# Code: ", "name": "AdaptiveHyperband", "description": "", "configspace": "", "generation": 99, "fitness": 0.09144843562834944, "feedback": "The algorithm AdaptiveHyperband got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f3f39486-3aa8-4559-a09d-80134408d745", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13752783092736576, 0.1273795545501043, 0.1372168098523947, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956931754, 0.1605601443813055, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
