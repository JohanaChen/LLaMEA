{"id": "fb3edaa2-c230-4508-8085-129a201f2b42", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.8   # DE scaling factor\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "A hybrid algorithm combining Particle Swarm Optimization and Differential Evolution to balance exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.17750220278203768, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.43455610524187493, 0.4701674378712052, 0.4114202558757195, 0.5499210106751444, 0.18759737173514535, 0.4328213203786292, 0.423467712231105, 0.40323492098504143, 0.4968530954271959, 0.18941947141478732, 0.2001288174745155, 0.15280793572789275, 0.025633154569465688, 9.999999999998899e-05, 0.09117434484818188, 0.04306149153736438, 0.11137659594055782, 0.03955391338605241, 0.09890046451688517, 0.09745192519695534, 0.08035826293999304, 0.09928290788210437, 0.06812819841061646, 0.0954605215728157, 0.10004897088323728, 0.11275181400348266, 0.08673142437166947, 0.06304273059631249, 0.03860509387964117, 0.05763851086105243, 0.08299460065054531, 0.03856047494182091, 0.03726571965162728, 0.029295747768765756, 0.06165970780912722, 0.0743301695524835, 0.9742961361868769, 0.9858814998369896, 0.9702548034425833, 0.9856051317179041, 0.9419194542878933, 0.9657371134243414, 0.9788235652643151, 0.985135868814693, 0.9911968684562456, 0.09686412360945029, 0.10674185916774714, 0.09942940067230899, 0.09928592700041994, 0.0760348153126551, 0.09539677439883798, 0.05025810992546009, 0.0845446748410108, 0.08683294004635866, 0.19636395707617726, 0.3005453931957781, 0.16444226410616725, 0.20179938675801057, 0.1693579803761992, 0.15334200973871226, 0.18131196571899344, 0.17343522142576495, 0.21117023246983357, 0.1326306619349953, 0.13694062684679553, 0.10377180681084441, 0.10457353995602914, 0.11294414807047637, 0.10816985661522505, 0.1250577422096698, 0.15665989413705683, 0.17733319134237824, 0.11538339170739276, 0.10325222901674702, 0.0451920843669541, 0.11414802311588501, 0.10041788127836193, 0.10773074722794607, 0.11451108635855967, 0.052993533243376856, 0.1135281347173086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01335526174304158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049791891342978345, 0.00815939547206801, 0.06327291859783313, 0.053307489866320834, 0.06216477841888046, 0.03891249404895658, 0.017599897611576654, 0.02714599149735919, 0.047617856598305974, 9.999999999998899e-05, 9.999999999998899e-05, 0.1297288945873314, 0.035142476485070406, 0.05678209719377769, 0.02013596512430127, 0.038509602298294476, 0.009485988119812605, 0.04373426831126215, 0.09053486870551364, 0.04086021590505151, 0.10242948902829707, 0.16169582897010515, 0.13935558738369913, 0.1340089788345067, 0.04193491986425446, 9.999999999998899e-05, 0.1256291213605042, 0.3506419529923428, 0.4082659131964079, 0.3261667299358464, 0.41973721618533677, 0.2953706127449027, 0.20763082825537005, 0.4096939051625863, 0.43131412869229, 0.4117770875674651, 0.11675898185388978, 0.08505495529405094, 0.07437929936435539, 0.07025507237223771, 0.1028267297135721, 0.06265313067969347, 0.06198451073637534, 0.06004000462486836, 0.06527259454747869, 0.14033462203845337, 0.14835321271768298, 0.12308916060625485, 0.13384281399295428, 0.12684835923103943, 0.13338780046642462, 0.18108275398945695, 0.1279782420371144, 0.12703155885110773, 0.22902764732029923, 0.26076171014805694, 0.22379992014889705, 0.27946609878303963, 0.21386553889350868, 0.20082990160859326, 0.3084071205322567, 0.23508874352947007, 0.27325006340020574, 0.1607222274612493, 0.16097301607432346, 0.15727061532130449, 0.1296735318967539, 0.15997829522750084, 0.15112391843320871, 0.18749372975107115, 0.19976316776373593, 0.15350472241841784, 0.15780120720126145, 0.1514300752738874, 0.15732687784662847, 0.15246846558642668, 0.14601000145149023, 0.16603502223485234, 0.17091550057652294, 0.1526621223151784, 0.16451097062996067, 0.18015245134950642, 0.1966188921473747, 0.17225650239517432, 0.19036862590935033, 0.181509867926818, 0.17686379499599902, 0.17327455422455929, 0.18046759879700713, 0.1823730468340795, 0.16457792104130986, 0.15140240943947192, 0.19451147558039406, 0.30948799915122627, 0.17648114128435632, 0.20000115575288324, 0.1413059726632404, 0.1731050311971285, 0.2055634012440256, 0.26637067604058207, 0.16858729650241855, 0.1544506157993788, 0.16766338700249495, 0.20286875262347515, 0.1357479635816855, 0.19487349326636771, 0.20521086516706122, 0.19672018846529693, 0.17546307286168228, 0.1959010103319776, 0.176575552552652, 0.17252506112724098, 0.19835380772921685, 0.17447284960217802, 0.16716873842204694, 0.17134816799985841, 0.16841231878495944, 0.04389691701585596, 0.05058339982813176, 0.05510972119884949, 0.05018658701794354, 0.06967828457086944, 0.05845546463073803, 0.05728762358621531, 0.06344785887599991, 0.0534173603175504]}, "mutation_prompt": null}
{"id": "497c1e93-8620-4392-9e69-bcf46a51d5c9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor to improve exploration capabilities.", "configspace": "", "generation": 1, "fitness": 0.18084402781751527, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "fb3edaa2-c230-4508-8085-129a201f2b42", "metadata": {"aucs": [0.45160258145832766, 0.48654186942662725, 0.549451191362686, 0.6251403465713558, 0.5897542771891557, 0.5013924680918125, 0.17413451527511425, 0.523704982486909, 0.5909305601172264, 0.1336383968767807, 0.0015530200955208295, 0.10387711256954657, 0.08719851437352699, 0.16545537032053836, 0.03273625461604446, 0.0037461539359330276, 0.18664458718707422, 0.0919653998270249, 0.10846754069266973, 0.0930528903823864, 0.08808867301475132, 0.08455863877917147, 0.09748918648499116, 0.08919384581851586, 0.08723967105613883, 0.08005851436344369, 0.07315154019010639, 0.06764372853661149, 0.07041802883855786, 0.11298353319721555, 0.057804009150804414, 0.07560239825684945, 0.06050038586211337, 0.04449724710939684, 0.040427612300926175, 0.08642360825050566, 0.9743400653627529, 0.9858122591911017, 0.9606041636204797, 0.9855380766224558, 0.9014212147023091, 0.9594429718704813, 0.9815862359052884, 0.9852181400260522, 0.9912025896468687, 0.09686412360945029, 0.09205659458670834, 0.07924885002048176, 0.09137133903887806, 0.09421960680634833, 0.11742497366679894, 0.08186772363250472, 0.08383561496483105, 0.25115964878880637, 0.22105829486028494, 0.162200244213642, 0.1681849502408802, 0.2015110445814714, 0.16949511538144202, 0.15466696671739533, 0.21000179744580316, 0.11485467096544, 0.14067403928311617, 0.15373449406843265, 0.11553538663573637, 0.22408362955419037, 0.11033693949944134, 0.07793972073933109, 0.1349012428601405, 0.09579161723874696, 0.09104456473926092, 0.13844810104562189, 0.11686423925048961, 0.047429249133194906, 0.1238964312424723, 0.11719185581936797, 0.1531133877033657, 0.10479065298777057, 0.08445967688389955, 0.08623277878406588, 0.08061487491453767, 9.999999999998899e-05, 0.001523266785509847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006719500433017278, 9.999999999998899e-05, 0.04866417855537353, 0.04777117050100732, 0.02677411343198477, 0.02168779786983288, 0.030279323877447473, 0.0519974841565074, 0.035561000910316554, 0.04182614145296648, 0.05322500631447569, 0.025781256517302564, 9.999999999998899e-05, 0.013156504996395202, 0.04893171155299747, 9.999999999998899e-05, 0.059423226315363564, 0.03229659225358961, 0.0658840519993017, 0.06449092654414867, 0.10021688111860128, 0.08525982701346368, 0.009684444631075317, 0.12231525029459767, 0.16035184800834545, 0.11292196576961411, 0.043308252233530076, 0.04091714575874417, 0.0649131975418693, 0.34424390750954303, 0.38174247108173565, 0.3326607797483253, 0.2081480883533885, 0.4115583523223749, 0.2075801040210472, 0.412345157336228, 0.4138066201459337, 0.350665762664337, 0.06817295860919148, 0.06636878870547136, 0.0634962554493812, 0.08994276886625918, 0.06877640288687814, 0.07798967057333395, 0.07481989752398588, 0.08411029383179158, 0.06548725339665906, 0.14757994315061518, 0.15392780959072538, 0.12491864816495835, 0.13303884011603273, 0.1697443855602423, 0.13500658261351617, 0.18949854456113613, 0.11733896030875546, 0.14454727675701795, 0.23863647713130998, 0.23526051701626116, 0.2907964772913991, 0.19486495129300807, 0.21935444463662135, 0.2271184303068653, 0.2842962436792168, 0.28624337543963563, 0.2615366413455783, 0.14146181351002485, 0.13405310161430806, 0.19390352942962708, 0.1506439528284178, 0.14191612915905194, 0.1669527562266625, 0.21354086346461432, 0.18038244214694454, 0.131510662537903, 0.1622629712510163, 0.14213083581551633, 0.17649861146676926, 0.1550616844768008, 0.1559104784289138, 0.15850544395557353, 0.16427188481873467, 0.16708350609361566, 0.1693522819395774, 0.1871074539219747, 0.18790708674515522, 0.22417537160311163, 0.19151089079112937, 0.1723817812572046, 0.17075767782345297, 0.17703708051981326, 0.19933744265127973, 0.1823300803833806, 0.1952248839823778, 0.1500576696872875, 0.19426362597241864, 0.14745520716999105, 0.17191704938316066, 0.15419769798147498, 0.14185637608825197, 0.16783043424565858, 0.6806639917404359, 0.23084670229476867, 0.18656608898037352, 0.15791286713412556, 0.17708290544615468, 0.1582245643444623, 0.10624135596118722, 0.2048846538875042, 0.20088659472468706, 0.16113960798797833, 0.1776720358784858, 0.18438291149837882, 0.18569734448712605, 0.17096199534760326, 0.18047562406361972, 0.1800201591030387, 0.1748306289625221, 0.1922189243413972, 0.1769074564251305, 0.05418784749460426, 0.0741937510821663, 0.04771647634616727, 0.0653948325088195, 0.04667443675102534, 0.05402768969578642, 0.06689602215252488, 0.06633189527472427, 0.05673492355265808]}, "mutation_prompt": null}
{"id": "48e726e0-0bdd-4659-a772-0ff60835c88b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor to improve exploration capabilities.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "497c1e93-8620-4392-9e69-bcf46a51d5c9", "metadata": {"aucs": [0.45160258145832766, 0.48654186942662725, 0.549451191362686, 0.6251403465713558, 0.5897542771891557, 0.5013924680918125, 0.17413451527511425, 0.523704982486909, 0.5909305601172264, 0.1336383968767807, 0.0015530200955208295, 0.10387711256954657, 0.08719851437352699, 0.16545537032053836, 0.03273625461604446, 0.0037461539359330276, 0.18664458718707422, 0.0919653998270249, 0.10846754069266973, 0.0930528903823864, 0.08808867301475132, 0.08455863877917147, 0.09748918648499116, 0.08919384581851586, 0.08723967105613883, 0.08005851436344369, 0.07315154019010639, 0.06764372853661149, 0.07041802883855786, 0.11298353319721555, 0.057804009150804414, 0.07560239825684945, 0.06050038586211337, 0.04449724710939684, 0.040427612300926175, 0.08642360825050566, 0.9743400653627529, 0.9858122591911017, 0.9606041636204797, 0.9855380766224558, 0.9014212147023091, 0.9594429718704813, 0.9815862359052884, 0.9852181400260522, 0.9912025896468687, 0.09686412360945029, 0.09205659458670834, 0.07924885002048176, 0.09137133903887806, 0.09421960680634833, 0.11742497366679894, 0.08186772363250472, 0.08383561496483105, 0.25115964878880637, 0.22105829486028494, 0.162200244213642, 0.1681849502408802, 0.2015110445814714, 0.16949511538144202, 0.15466696671739533, 0.21000179744580316, 0.11485467096544, 0.14067403928311617, 0.15373449406843265, 0.11553538663573637, 0.22408362955419037, 0.11033693949944134, 0.07793972073933109, 0.1349012428601405, 0.09579161723874696, 0.09104456473926092, 0.13844810104562189, 0.11686423925048961, 0.047429249133194906, 0.1238964312424723, 0.11719185581936797, 0.1531133877033657, 0.10479065298777057, 0.08445967688389955, 0.08623277878406588, 0.08061487491453767, 9.999999999998899e-05, 0.001523266785509847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006719500433017278, 9.999999999998899e-05, 0.04866417855537353, 0.04777117050100732, 0.02677411343198477, 0.02168779786983288, 0.030279323877447473, 0.0519974841565074, 0.035561000910316554, 0.04182614145296648, 0.05322500631447569, 0.025781256517302564, 9.999999999998899e-05, 0.013156504996395202, 0.04893171155299747, 9.999999999998899e-05, 0.059423226315363564, 0.03229659225358961, 0.0658840519993017, 0.06449092654414867, 0.10021688111860128, 0.08525982701346368, 0.009684444631075317, 0.12231525029459767, 0.16035184800834545, 0.11292196576961411, 0.043308252233530076, 0.04091714575874417, 0.0649131975418693, 0.34424390750954303, 0.38174247108173565, 0.3326607797483253, 0.2081480883533885, 0.4115583523223749, 0.2075801040210472, 0.412345157336228, 0.4138066201459337, 0.350665762664337, 0.06817295860919148, 0.06636878870547136, 0.0634962554493812, 0.08994276886625918, 0.06877640288687814, 0.07798967057333395, 0.07481989752398588, 0.08411029383179158, 0.06548725339665906, 0.14757994315061518, 0.15392780959072538, 0.12491864816495835, 0.13303884011603273, 0.1697443855602423, 0.13500658261351617, 0.18949854456113613, 0.11733896030875546, 0.14454727675701795, 0.23863647713130998, 0.23526051701626116, 0.2907964772913991, 0.19486495129300807, 0.21935444463662135, 0.2271184303068653, 0.2842962436792168, 0.28624337543963563, 0.2615366413455783, 0.14146181351002485, 0.13405310161430806, 0.19390352942962708, 0.1506439528284178, 0.14191612915905194, 0.1669527562266625, 0.21354086346461432, 0.18038244214694454, 0.131510662537903, 0.1622629712510163, 0.14213083581551633, 0.17649861146676926, 0.1550616844768008, 0.1559104784289138, 0.15850544395557353, 0.16427188481873467, 0.16708350609361566, 0.1693522819395774, 0.1871074539219747, 0.18790708674515522, 0.22417537160311163, 0.19151089079112937, 0.1723817812572046, 0.17075767782345297, 0.17703708051981326, 0.19933744265127973, 0.1823300803833806, 0.1952248839823778, 0.1500576696872875, 0.19426362597241864, 0.14745520716999105, 0.17191704938316066, 0.15419769798147498, 0.14185637608825197, 0.16783043424565858, 0.6806639917404359, 0.23084670229476867, 0.18656608898037352, 0.15791286713412556, 0.17708290544615468, 0.1582245643444623, 0.10624135596118722, 0.2048846538875042, 0.20088659472468706, 0.16113960798797833, 0.1776720358784858, 0.18438291149837882, 0.18569734448712605, 0.17096199534760326, 0.18047562406361972, 0.1800201591030387, 0.1748306289625221, 0.1922189243413972, 0.1769074564251305, 0.05418784749460426, 0.0741937510821663, 0.04771647634616727, 0.0653948325088195, 0.04667443675102534, 0.05402768969578642, 0.06689602215252488, 0.06633189527472427, 0.05673492355265808]}, "mutation_prompt": null}
{"id": "2c6581ba-8423-4a9e-a1c2-b6cc156bc76b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        generation = 0  # Track the generation count\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                adaptive_F = self.F * (1 - generation/self.budget)  # Adaptive scaling factor\n                mutant = np.clip(a + adaptive_F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n            generation += self.population_size  # Increment generation count\n        \n        return self.global_best", "name": "HybridPSODE", "description": "Incorporate adaptive scaling for DE based on the generation count to balance exploration and exploitation.", "configspace": "", "generation": 3, "fitness": 0.17875608055415448, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "497c1e93-8620-4392-9e69-bcf46a51d5c9", "metadata": {"aucs": [0.42043541343437085, 0.5281537520210791, 0.554653931166764, 0.475420953782258, 0.49117391925981924, 0.5374474691879759, 0.17423201036337754, 0.49381080174587877, 0.4415621724432438, 0.17646461713176087, 0.056639839118820645, 0.027277726767740984, 0.1473269756380048, 0.1414618170155958, 0.029045734925655764, 0.07438750686285533, 0.01162646243528509, 0.03672360462862945, 0.10883155567101732, 0.09431261256242529, 0.12129311597838277, 0.0696116107854301, 0.0802171624554383, 0.09982861138395327, 0.11853054470022784, 0.07413469868997014, 0.08480964392330481, 0.05149976625647146, 0.06332558826006118, 0.026801758676866072, 0.060294029259152504, 0.07239999858881163, 0.09702072993713173, 0.04053998840808215, 0.06614141713547428, 0.037416074007976974, 0.974338370647338, 0.9858122591911017, 0.9605479630364833, 0.9855380766224558, 0.9006228710590554, 0.9594286720449858, 0.9815862359052884, 0.985216904523561, 0.9912025896468687, 0.11690725087672893, 0.07154078416816478, 0.12589622029901348, 0.12085534503895612, 0.1003989060842796, 0.09936447337656151, 0.07995409294496225, 0.08613039538419276, 0.13498828525788886, 0.21557904698276698, 0.15344843000333053, 0.2527085465129497, 0.21527881302001328, 0.22095919005238018, 0.19334313599000663, 0.1951163118442223, 0.11390449516729872, 0.16815319451745714, 0.12220081111066194, 0.11082772620588799, 0.08415698745089817, 0.09396557886625001, 0.06583735758912734, 0.14465538448648962, 0.10664916340495945, 0.079171136631485, 0.15443240918148426, 0.12602074990504608, 0.01595303268758219, 0.11613990777475303, 0.1303652288678191, 0.12213046211687584, 0.10510688289989212, 0.12202600127056251, 0.10801853093796199, 0.12608924214271788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060822617057638806, 0.014994514557383654, 0.03939890861487616, 0.0448638977043504, 0.011275668304855713, 0.05219471915942908, 0.026576584326377994, 0.04484267781580131, 0.03654780405155211, 0.01965779605127227, 9.999999999998899e-05, 0.05214532196643651, 0.04486806970757207, 0.02498418509127842, 0.04366598558848689, 0.02506323978231062, 0.004791429462093988, 0.05509211361120381, 0.08279316288345073, 0.016122731173556892, 9.999999999998899e-05, 0.059139807064262695, 0.11780591910858695, 0.10504244263210727, 0.04708183255789822, 0.05895863975596516, 0.06441237658528987, 0.3242957034847276, 0.37241169902533366, 0.3467119949034574, 0.20810916491497733, 0.44513272840681295, 0.20670582673266613, 0.408109948173894, 0.3740145468816325, 0.35191748512322796, 0.07254662253329447, 0.10894761315850243, 0.04930726449416267, 0.06574417684043588, 0.08216895407300995, 0.06913576404865562, 0.08752454662903386, 0.1058671673900522, 0.10354191387579015, 0.17208382705936198, 0.14498966368413546, 0.13898642015082918, 0.13303884011603273, 0.13830795373754068, 0.13621311236558264, 0.1634072044554843, 0.14236028311508164, 0.15421269707715257, 0.2663102768703598, 0.23626562948872665, 0.2421268918156616, 0.27919891616590764, 0.23029204468682474, 0.20449611167662585, 0.24039826560132838, 0.2820536659769961, 0.3128032708940731, 0.1709159301507327, 0.16582299446762594, 0.15462080950588986, 0.1543631025422315, 0.16179790449717368, 0.14944845301759035, 0.20310556677665204, 0.19858320272327568, 0.12262943378755153, 0.17869487458154365, 0.14862365469928773, 0.16113550158336332, 0.18350770350076595, 0.15482351578089093, 0.1494471694817766, 0.1697665032451141, 0.16774839841450917, 0.17447452939476193, 0.17950632434987723, 0.17504848029547793, 0.17687800571925416, 0.16976631673929954, 0.18047026961869017, 0.17914079741185474, 0.17343531544374569, 0.1692296939860809, 0.17912012635032692, 0.18405595194211943, 0.1501216789662433, 0.1947192295228507, 0.17790509769122276, 0.175706482046864, 0.1575651860491737, 0.14185457841082627, 0.32261325312778044, 0.7199424374004011, 0.2552564481227514, 0.2017343905950174, 0.15295931438534172, 0.15144991127692886, 0.1558835490507694, 0.1041604143592385, 0.1861364255168354, 0.1900631657419265, 0.1843642946788724, 0.17686378824131566, 0.17299228817046441, 0.17601898095671298, 0.20124498391983836, 0.19017861144255355, 0.17206219183844385, 0.17835116374938575, 0.18077030188915888, 0.17470228029846513, 0.05781344574768699, 0.09286780406918949, 0.054529103927101086, 0.06090041295579762, 0.06081549027368527, 0.060719119745662464, 0.052563248036222476, 0.04738510272573271, 0.08053698617997396]}, "mutation_prompt": null}
{"id": "aeb189e5-d107-4e50-b807-f919f84355b4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                self.F = np.random.uniform(0.8, 1.0)  # Adjusted line: DE scaling factor with randomness\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance the exploration by introducing randomness in the DE scaling factor within a range.", "configspace": "", "generation": 4, "fitness": 0.1780293255073488, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "497c1e93-8620-4392-9e69-bcf46a51d5c9", "metadata": {"aucs": [0.3925449002891982, 0.45243894918581196, 0.49067197088192416, 0.6508219475474345, 0.4510571797431072, 0.5597705414992781, 0.5302677258572993, 0.5889331052247334, 0.5473348395340911, 0.04367444692823297, 0.029086044151836354, 0.03048009792556461, 0.0993285664546103, 0.03541411298226482, 0.15094298447398558, 0.15885863494883434, 0.03230474908776704, 0.1712038168051111, 0.060041421373857706, 0.0767950844703964, 0.07216240746441671, 0.10252849900458327, 0.0577627394222916, 0.0984869561399746, 0.0784740099904595, 0.06074714997720254, 0.06477396388163048, 0.03721336688138721, 0.025255078758888105, 0.09249046536542538, 0.034682872133659504, 0.09180318345262573, 0.03682257828434887, 0.030874414495020597, 0.029575705975919075, 0.0936164986404392, 0.0994972770184066, 0.9875361850601158, 0.9859696463474142, 0.9923419361202049, 0.9694543447694317, 0.9741151686053651, 0.9790343088033836, 0.9845650820862704, 0.9872520710711954, 0.09857898116856412, 0.07657901257044686, 0.08892830081347947, 0.09883554528195071, 0.0753605890121597, 0.09986386518537327, 0.07616912874405912, 0.10483959791260422, 0.10589384857179207, 0.20119444870070624, 0.1659030370235547, 0.16624825972130242, 0.2629499864060736, 0.2743286465542094, 0.19486912431220393, 0.24615509341862585, 0.18790241837497768, 0.22545305215886313, 0.11799603709286988, 0.1328940045808178, 0.05669511878935696, 0.04571795582169491, 0.06811898812040695, 0.10416137811425974, 0.1348109305948184, 0.13316903868730023, 0.11994895662427951, 0.1242389542143677, 0.13439905630944526, 0.142548161264899, 0.10510177576342516, 0.16369438015599258, 0.16319988808046404, 0.08938714647398993, 0.06291672186426278, 0.09459031687185304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0190929631972796, 0.0172752612651913, 0.03550637884970198, 0.07457041930784203, 9.999999999998899e-05, 0.06816243847274905, 0.032199326687324725, 0.03561715735044724, 0.031332104620498624, 0.028645367982629844, 0.03492712665254927, 0.020588475930639616, 0.03651532273462621, 0.04412084920825199, 0.03164344933813268, 0.020866952996927424, 0.03214397559200166, 0.02964408364938409, 0.02868221483743183, 0.05368691474324461, 0.09239527110310297, 0.06381916499745444, 0.06498868536645519, 0.09867804108832112, 0.050332991241930025, 0.046355692345806165, 0.06353444058644331, 0.4077019146739672, 0.36608384005358674, 0.34762508377598667, 0.39568437562258674, 0.3979906611456193, 0.3998089387259314, 0.37412418299006345, 0.40577623339109503, 0.30350428437573096, 0.07003176999858207, 0.06598435596079033, 0.06915535810818696, 0.07489354331782538, 0.09054270841804846, 0.08767633068016145, 0.07140565458781678, 0.06591368987853308, 0.06754913726757461, 0.13210142641506628, 0.1359849376354283, 0.16208930585586168, 0.13845334701274625, 0.17549284745620586, 0.14402684740498428, 0.14912475358815158, 0.12209029333127297, 0.13153497306457118, 0.25253694785308645, 0.23047533659647357, 0.2845852047792964, 0.18485338978531796, 0.17293224957044384, 0.19171851068970813, 0.22108403399463994, 0.26178390128765994, 0.2249076561247606, 0.13060581483505906, 0.1541757374502375, 0.13892590593155907, 0.10803892496862644, 0.16615771998546258, 0.17895257484711546, 0.1780763943182928, 0.21281466652925907, 0.21769117968013973, 0.15575738653859061, 0.1623672025872378, 0.16232359236630345, 0.1622418908568536, 0.17534055967247497, 0.16789572547882325, 0.17259002413336655, 0.15273362773527466, 0.15645464760979388, 0.15989073661455855, 0.16378189347241567, 0.1863189893125976, 0.19851673677917325, 0.1862307767908754, 0.17891844460141415, 0.18010707855967956, 0.18929917286127396, 0.19383335481224817, 0.17905297023391264, 0.1661691097501452, 0.14780852280708945, 0.16673722364624577, 0.16694416171468618, 0.16741437710932316, 0.6571346432687148, 0.17228983524655472, 0.16396648135473169, 0.23186100170986113, 0.20312845984052097, 0.26561048776863594, 0.20211234939545653, 0.2023778009048256, 0.21243134088564652, 0.19955518049958743, 0.2007193334266637, 0.18374726979552558, 0.1760218251982022, 0.19168454930565448, 0.18796945116735375, 0.17385651336073793, 0.18346206969748236, 0.18186790653965357, 0.19237771988328345, 0.168271044224501, 0.18685294567226618, 0.06587182046924978, 0.04565144401926813, 0.06880932143279384, 0.05036507711911675, 0.07246178437765194, 0.05883443714926018, 0.06011149238302327, 0.06057829158282124, 0.05398343728320654]}, "mutation_prompt": null}
{"id": "917fc7f1-2025-4c79-8170-2d46146c8760", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor to improve exploration capabilities.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "497c1e93-8620-4392-9e69-bcf46a51d5c9", "metadata": {"aucs": [0.45160258145832766, 0.48654186942662725, 0.549451191362686, 0.6251403465713558, 0.5897542771891557, 0.5013924680918125, 0.17413451527511425, 0.523704982486909, 0.5909305601172264, 0.1336383968767807, 0.0015530200955208295, 0.10387711256954657, 0.08719851437352699, 0.16545537032053836, 0.03273625461604446, 0.0037461539359330276, 0.18664458718707422, 0.0919653998270249, 0.10846754069266973, 0.0930528903823864, 0.08808867301475132, 0.08455863877917147, 0.09748918648499116, 0.08919384581851586, 0.08723967105613883, 0.08005851436344369, 0.07315154019010639, 0.06764372853661149, 0.07041802883855786, 0.11298353319721555, 0.057804009150804414, 0.07560239825684945, 0.06050038586211337, 0.04449724710939684, 0.040427612300926175, 0.08642360825050566, 0.9743400653627529, 0.9858122591911017, 0.9606041636204797, 0.9855380766224558, 0.9014212147023091, 0.9594429718704813, 0.9815862359052884, 0.9852181400260522, 0.9912025896468687, 0.09686412360945029, 0.09205659458670834, 0.07924885002048176, 0.09137133903887806, 0.09421960680634833, 0.11742497366679894, 0.08186772363250472, 0.08383561496483105, 0.25115964878880637, 0.22105829486028494, 0.162200244213642, 0.1681849502408802, 0.2015110445814714, 0.16949511538144202, 0.15466696671739533, 0.21000179744580316, 0.11485467096544, 0.14067403928311617, 0.15373449406843265, 0.11553538663573637, 0.22408362955419037, 0.11033693949944134, 0.07793972073933109, 0.1349012428601405, 0.09579161723874696, 0.09104456473926092, 0.13844810104562189, 0.11686423925048961, 0.047429249133194906, 0.1238964312424723, 0.11719185581936797, 0.1531133877033657, 0.10479065298777057, 0.08445967688389955, 0.08623277878406588, 0.08061487491453767, 9.999999999998899e-05, 0.001523266785509847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006719500433017278, 9.999999999998899e-05, 0.04866417855537353, 0.04777117050100732, 0.02677411343198477, 0.02168779786983288, 0.030279323877447473, 0.0519974841565074, 0.035561000910316554, 0.04182614145296648, 0.05322500631447569, 0.025781256517302564, 9.999999999998899e-05, 0.013156504996395202, 0.04893171155299747, 9.999999999998899e-05, 0.059423226315363564, 0.03229659225358961, 0.0658840519993017, 0.06449092654414867, 0.10021688111860128, 0.08525982701346368, 0.009684444631075317, 0.12231525029459767, 0.16035184800834545, 0.11292196576961411, 0.043308252233530076, 0.04091714575874417, 0.0649131975418693, 0.34424390750954303, 0.38174247108173565, 0.3326607797483253, 0.2081480883533885, 0.4115583523223749, 0.2075801040210472, 0.412345157336228, 0.4138066201459337, 0.350665762664337, 0.06817295860919148, 0.06636878870547136, 0.0634962554493812, 0.08994276886625918, 0.06877640288687814, 0.07798967057333395, 0.07481989752398588, 0.08411029383179158, 0.06548725339665906, 0.14757994315061518, 0.15392780959072538, 0.12491864816495835, 0.13303884011603273, 0.1697443855602423, 0.13500658261351617, 0.18949854456113613, 0.11733896030875546, 0.14454727675701795, 0.23863647713130998, 0.23526051701626116, 0.2907964772913991, 0.19486495129300807, 0.21935444463662135, 0.2271184303068653, 0.2842962436792168, 0.28624337543963563, 0.2615366413455783, 0.14146181351002485, 0.13405310161430806, 0.19390352942962708, 0.1506439528284178, 0.14191612915905194, 0.1669527562266625, 0.21354086346461432, 0.18038244214694454, 0.131510662537903, 0.1622629712510163, 0.14213083581551633, 0.17649861146676926, 0.1550616844768008, 0.1559104784289138, 0.15850544395557353, 0.16427188481873467, 0.16708350609361566, 0.1693522819395774, 0.1871074539219747, 0.18790708674515522, 0.22417537160311163, 0.19151089079112937, 0.1723817812572046, 0.17075767782345297, 0.17703708051981326, 0.19933744265127973, 0.1823300803833806, 0.1952248839823778, 0.1500576696872875, 0.19426362597241864, 0.14745520716999105, 0.17191704938316066, 0.15419769798147498, 0.14185637608825197, 0.16783043424565858, 0.6806639917404359, 0.23084670229476867, 0.18656608898037352, 0.15791286713412556, 0.17708290544615468, 0.1582245643444623, 0.10624135596118722, 0.2048846538875042, 0.20088659472468706, 0.16113960798797833, 0.1776720358784858, 0.18438291149837882, 0.18569734448712605, 0.17096199534760326, 0.18047562406361972, 0.1800201591030387, 0.1748306289625221, 0.1922189243413972, 0.1769074564251305, 0.05418784749460426, 0.0741937510821663, 0.04771647634616727, 0.0653948325088195, 0.04667443675102534, 0.05402768969578642, 0.06689602215252488, 0.06633189527472427, 0.05673492355265808]}, "mutation_prompt": null}
{"id": "88e4fdc6-de2a-4e09-92bb-34dfd67f1b3a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.7  # cognitive component (increased for better exploration)\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Slightly increase the cognitive component (c1) to enhance personal exploration in the particle swarm optimization step.", "configspace": "", "generation": 6, "fitness": 0.17321325583665936, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "497c1e93-8620-4392-9e69-bcf46a51d5c9", "metadata": {"aucs": [0.40090701858678124, 0.43468931101627906, 0.399836943596415, 0.5730063586068339, 0.4794385469092517, 0.4979511908701295, 0.17412352250503427, 0.4427761997257811, 0.3979584117369428, 0.20186183361911114, 0.15728843375592383, 9.999999999998899e-05, 0.12911090609721343, 0.24361801918479087, 0.04656498901775463, 0.03380237804269892, 0.035084704076781215, 0.1952003429569188, 0.07601453042294548, 0.07153659951401858, 0.080015596751848, 0.06338528232246188, 0.07918360366730726, 0.07174253473692116, 0.08732923712596419, 0.0904305531913997, 0.07361126845610944, 0.0706452414555917, 0.017334285964306417, 0.06987275224227507, 0.05238447451114059, 0.06933995236934243, 0.08226388836173104, 0.046556155901430474, 0.029490744669069313, 0.05933151046676155, 0.9743396924108682, 0.9858122591911017, 0.9606164313842028, 0.9855380766224558, 0.9017596251532709, 0.9605289150857916, 0.9816392727284444, 0.9852181400260522, 0.9912025896468687, 0.09686412360945029, 0.08297970654732689, 0.10093484487439308, 0.10270797119412545, 0.11685116736287615, 0.13302795513049936, 0.051258084668391324, 0.10460450813510147, 0.12607654814641067, 0.1682919184945233, 0.22116486732659668, 0.21151937330341808, 0.18446468653365533, 0.22960565229728358, 0.14894604104023834, 0.18027547525041976, 0.14598956168151722, 0.1545084820046363, 0.13488689183583735, 0.12831169552274946, 0.10043800395834623, 0.10077437679774226, 0.12691724425740414, 0.11870196298669344, 0.05324305401649476, 0.09093441083447795, 0.1235756000374677, 0.10704144544024308, 0.020991433027299, 0.036922042563847346, 0.1301345038986046, 0.08113173524791195, 0.14061620595899427, 0.12335717075386565, 0.0289892013920775, 0.09379807141714058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017290290048964874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04299990772242268, 0.04169884321178852, 0.0363943770248768, 0.04584220871761113, 0.007909306739897537, 0.05797998953762584, 0.04521660547298123, 0.01661521528245835, 0.07076037032267046, 0.009778064584672008, 9.999999999998899e-05, 0.0036495084996729377, 0.04993465140004316, 0.04149603026240478, 0.03275013864751275, 9.999999999998899e-05, 0.048918609628805676, 0.050678989431310995, 0.06576714053494759, 0.03808167154088937, 0.03379666190601893, 0.10341172581358826, 0.11126395605753225, 0.09642798239782713, 0.05033028566926456, 0.04665170264821483, 0.059721413169599, 0.3189185402304996, 0.40787231811949154, 0.41476031453405326, 0.4068008446349569, 0.3472850343887174, 0.20735905983195824, 0.4348747304403945, 0.36154418019612355, 0.34321441684119314, 0.08676278752016897, 0.06453256317914002, 0.05980224331613537, 0.10191910454725495, 0.05602489795216803, 0.07013975517866544, 0.09071026421554162, 0.07259967911911902, 0.0640102505735074, 0.13661094163275578, 0.14244116017029151, 0.1349401434970876, 0.13331333769115006, 0.12520385031053005, 0.15687603782858983, 0.14187818427006604, 0.1700449723554357, 0.16991226186123276, 0.22052523774466126, 0.21436818324145923, 0.21329531170001403, 0.1545598169415261, 0.2011887801236235, 0.2567770450012391, 0.2194994497192566, 0.2323050347679918, 0.22715520983810678, 0.12716509064422932, 0.1598586019535071, 0.16665959786177154, 0.13207932416298795, 0.1663721837698835, 0.15826033626903313, 0.1994503929222926, 0.18543452005167294, 0.2535682960547515, 0.19386315000677257, 0.1820930513350133, 0.1534935773449002, 0.15797765078797366, 0.1619172455598371, 0.15937496094965264, 0.17418171975089702, 0.15410695579576872, 0.1696871165752356, 0.15727708308819277, 0.179626126282047, 0.18619629993375275, 0.18369881231274166, 0.17525249309672541, 0.18713022517740552, 0.18660278157874544, 0.16105072729949133, 0.19422747253352568, 0.24365918293821454, 0.1480533928320823, 0.19121670959700943, 0.15626542111787334, 0.15802420137721196, 0.11668125364940585, 0.14090793813953928, 0.15794897341782144, 0.17071023115800854, 0.3169985145991645, 0.1948175722564548, 0.14111771524269212, 0.1586749468342218, 0.18734101433982442, 0.15121210762441517, 0.16853593072234785, 0.20094234304024272, 0.1813852400978534, 0.19503243463031406, 0.18250190593071947, 0.18167160420785144, 0.18141558347975073, 0.17170952616980906, 0.17968051586736034, 0.16265313726934016, 0.18693584527659568, 0.1720145940838127, 0.05432704848828285, 0.056303493806280525, 0.0548903773375643, 0.05286181588907879, 0.052288183472882555, 0.06666013612498023, 0.049598289924702166, 0.05924516041634054, 0.055505194239480304]}, "mutation_prompt": null}
{"id": "030712f4-dbe7-4e9a-9c0a-31c433bcc0b3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor to improve exploration capabilities.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "497c1e93-8620-4392-9e69-bcf46a51d5c9", "metadata": {"aucs": [0.45160258145832766, 0.48654186942662725, 0.549451191362686, 0.6251403465713558, 0.5897542771891557, 0.5013924680918125, 0.17413451527511425, 0.523704982486909, 0.5909305601172264, 0.1336383968767807, 0.0015530200955208295, 0.10387711256954657, 0.08719851437352699, 0.16545537032053836, 0.03273625461604446, 0.0037461539359330276, 0.18664458718707422, 0.0919653998270249, 0.10846754069266973, 0.0930528903823864, 0.08808867301475132, 0.08455863877917147, 0.09748918648499116, 0.08919384581851586, 0.08723967105613883, 0.08005851436344369, 0.07315154019010639, 0.06764372853661149, 0.07041802883855786, 0.11298353319721555, 0.057804009150804414, 0.07560239825684945, 0.06050038586211337, 0.04449724710939684, 0.040427612300926175, 0.08642360825050566, 0.9743400653627529, 0.9858122591911017, 0.9606041636204797, 0.9855380766224558, 0.9014212147023091, 0.9594429718704813, 0.9815862359052884, 0.9852181400260522, 0.9912025896468687, 0.09686412360945029, 0.09205659458670834, 0.07924885002048176, 0.09137133903887806, 0.09421960680634833, 0.11742497366679894, 0.08186772363250472, 0.08383561496483105, 0.25115964878880637, 0.22105829486028494, 0.162200244213642, 0.1681849502408802, 0.2015110445814714, 0.16949511538144202, 0.15466696671739533, 0.21000179744580316, 0.11485467096544, 0.14067403928311617, 0.15373449406843265, 0.11553538663573637, 0.22408362955419037, 0.11033693949944134, 0.07793972073933109, 0.1349012428601405, 0.09579161723874696, 0.09104456473926092, 0.13844810104562189, 0.11686423925048961, 0.047429249133194906, 0.1238964312424723, 0.11719185581936797, 0.1531133877033657, 0.10479065298777057, 0.08445967688389955, 0.08623277878406588, 0.08061487491453767, 9.999999999998899e-05, 0.001523266785509847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006719500433017278, 9.999999999998899e-05, 0.04866417855537353, 0.04777117050100732, 0.02677411343198477, 0.02168779786983288, 0.030279323877447473, 0.0519974841565074, 0.035561000910316554, 0.04182614145296648, 0.05322500631447569, 0.025781256517302564, 9.999999999998899e-05, 0.013156504996395202, 0.04893171155299747, 9.999999999998899e-05, 0.059423226315363564, 0.03229659225358961, 0.0658840519993017, 0.06449092654414867, 0.10021688111860128, 0.08525982701346368, 0.009684444631075317, 0.12231525029459767, 0.16035184800834545, 0.11292196576961411, 0.043308252233530076, 0.04091714575874417, 0.0649131975418693, 0.34424390750954303, 0.38174247108173565, 0.3326607797483253, 0.2081480883533885, 0.4115583523223749, 0.2075801040210472, 0.412345157336228, 0.4138066201459337, 0.350665762664337, 0.06817295860919148, 0.06636878870547136, 0.0634962554493812, 0.08994276886625918, 0.06877640288687814, 0.07798967057333395, 0.07481989752398588, 0.08411029383179158, 0.06548725339665906, 0.14757994315061518, 0.15392780959072538, 0.12491864816495835, 0.13303884011603273, 0.1697443855602423, 0.13500658261351617, 0.18949854456113613, 0.11733896030875546, 0.14454727675701795, 0.23863647713130998, 0.23526051701626116, 0.2907964772913991, 0.19486495129300807, 0.21935444463662135, 0.2271184303068653, 0.2842962436792168, 0.28624337543963563, 0.2615366413455783, 0.14146181351002485, 0.13405310161430806, 0.19390352942962708, 0.1506439528284178, 0.14191612915905194, 0.1669527562266625, 0.21354086346461432, 0.18038244214694454, 0.131510662537903, 0.1622629712510163, 0.14213083581551633, 0.17649861146676926, 0.1550616844768008, 0.1559104784289138, 0.15850544395557353, 0.16427188481873467, 0.16708350609361566, 0.1693522819395774, 0.1871074539219747, 0.18790708674515522, 0.22417537160311163, 0.19151089079112937, 0.1723817812572046, 0.17075767782345297, 0.17703708051981326, 0.19933744265127973, 0.1823300803833806, 0.1952248839823778, 0.1500576696872875, 0.19426362597241864, 0.14745520716999105, 0.17191704938316066, 0.15419769798147498, 0.14185637608825197, 0.16783043424565858, 0.6806639917404359, 0.23084670229476867, 0.18656608898037352, 0.15791286713412556, 0.17708290544615468, 0.1582245643444623, 0.10624135596118722, 0.2048846538875042, 0.20088659472468706, 0.16113960798797833, 0.1776720358784858, 0.18438291149837882, 0.18569734448712605, 0.17096199534760326, 0.18047562406361972, 0.1800201591030387, 0.1748306289625221, 0.1922189243413972, 0.1769074564251305, 0.05418784749460426, 0.0741937510821663, 0.04771647634616727, 0.0653948325088195, 0.04667443675102534, 0.05402768969578642, 0.06689602215252488, 0.06633189527472427, 0.05673492355265808]}, "mutation_prompt": null}
{"id": "b3b0c868-f591-4fcf-a147-66e221d2a7be", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                adaptive_F = self.F * (1 - self.func_evals / self.budget)\n                mutant = np.clip(a + adaptive_F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduce adaptive DE scaling factor to enhance exploration-exploitation balance.", "configspace": "", "generation": 8, "fitness": 0.17872409224677555, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "497c1e93-8620-4392-9e69-bcf46a51d5c9", "metadata": {"aucs": [0.3704076435403616, 0.5083055177803678, 0.473417556892883, 0.464664494937595, 0.4679757179773376, 0.45724980265020154, 0.17392656968353404, 0.4692443548381401, 0.5004686266521946, 0.07960783289833795, 0.03173655869383152, 0.12402071122599612, 0.0516908166542247, 0.21005017698043393, 0.21152987288319292, 0.04585617533522057, 0.09122745142283106, 0.12887943067410546, 0.09702559323076998, 0.08257395891249675, 0.08660944156287442, 0.11043334161243579, 0.06658909800342205, 0.054879046798990916, 0.08036635176635298, 0.07455331432507628, 0.09551949794375647, 0.060235591473379424, 0.03766275312861456, 0.08072048684699495, 0.05579979136679469, 0.04628565523577277, 0.06168856843250525, 0.04059232649971256, 0.05257951773175573, 0.03630981198217165, 0.9743323437514583, 0.9858149849815756, 0.9604462596754798, 0.9855403370879663, 0.8933995060005715, 0.9594020832427261, 0.9815841782134002, 0.9852113885019405, 0.9912030958337689, 0.12401344198695219, 0.0911645664994265, 0.09372818706871189, 0.09044536275819903, 0.08846736982346792, 0.11330126893544223, 0.07947776960798114, 0.08975481924013706, 0.12304381297566758, 0.1668918360649515, 0.16296330836131234, 0.16537160658437844, 0.2048374300854452, 0.26932230026275394, 0.15696581213979843, 0.19378676665263606, 0.24532005024227788, 0.19877809023055548, 0.13207395823851453, 0.14760085476879137, 0.09266711214852308, 0.05630919249119504, 0.04178129941202513, 0.14859601028727443, 0.04594416506148713, 0.1202513048864694, 0.13286145397968507, 0.1132142854203324, 0.09910876781183109, 0.08765838254504577, 0.1260057218600501, 0.0970370105887971, 0.10273402721268954, 0.12168801347729874, 0.10216026974959314, 0.10270864389158163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020406162952151363, 0.021939190585168244, 0.069223042529176, 0.08263325734207572, 0.023199754037132925, 0.049563591921892636, 0.03317953947733954, 0.058435379108352614, 0.0504217321559971, 0.0179096149376613, 9.999999999998899e-05, 0.07013774217880941, 0.02876933862507236, 9.999999999998899e-05, 0.13945467845909276, 0.02938123209333443, 0.01757336621768424, 0.06389341693706596, 0.1745367363627942, 0.07530335602462179, 0.07987328101714009, 0.10242906698432996, 0.10482958079020277, 0.09227176694552142, 0.06965835656584318, 0.04524503622728393, 0.0571287488464397, 0.2998847569772637, 0.34443357397915275, 0.3758478416135722, 0.20548336032998216, 0.40191225162257915, 0.2071605308227248, 0.40988410943355646, 0.31975211126780323, 0.49223652303765586, 0.06259179394872172, 0.07591302232777974, 0.10076190970030152, 0.0724807251090398, 0.09198432521157685, 0.08038104969712256, 0.1009552032001011, 0.07912279453865756, 0.07972313593085423, 0.15340071101604025, 0.15814821450979122, 0.13490918252182327, 0.13188933046764995, 0.12937654253497932, 0.16040009662068244, 0.13798248619122222, 0.12014153629740687, 0.1404966439061034, 0.22503606573125168, 0.20487465147837858, 0.26086435113946904, 0.18158770035532568, 0.23553260374604124, 0.2953509679795199, 0.23756602010784766, 0.23443827221702607, 0.2463089187574381, 0.1784631061787284, 0.1778557501345338, 0.15863405968932198, 0.124276494309426, 0.17475773045051413, 0.14393650912247358, 0.16761695694960776, 0.2231094819056466, 0.12797219125130255, 0.15813697070467547, 0.13380849144442475, 0.14863913027296471, 0.1672203462190549, 0.15619484546097684, 0.148365604701592, 0.16139312644237358, 0.152461121897848, 0.14683062756597232, 0.1743878064620985, 0.18605439598701579, 0.16868406106509848, 0.17257768641775184, 0.17375037273488325, 0.17343228589329462, 0.1790125152119455, 0.16638386753202017, 0.1811024922243809, 0.20431289532755303, 0.44399448243260176, 0.18904521625729376, 0.1804789829252046, 0.1733467686546306, 0.1640907699374553, 0.316266580917941, 0.16757203942924803, 0.2760589787858606, 0.29903388249665563, 0.2007426383077212, 0.1621061090832009, 0.1888983044819269, 0.18774232635683197, 0.17941756063299452, 0.1945485919455463, 0.2054540683492131, 0.1714078463823273, 0.16703182470828215, 0.18343793732011604, 0.17688333178330518, 0.18541476537906243, 0.20614901032836053, 0.17578036854292534, 0.17599061744176103, 0.1759083311281363, 0.17532232658645353, 0.06509702700641795, 0.063601299044032, 0.06395820072190872, 0.056145460290620175, 0.05491536037781386, 0.06168179757435033, 0.06273700408610561, 0.057572577685984117, 0.07423842150028814]}, "mutation_prompt": null}
{"id": "b60b9788-08aa-4ffb-bf38-6024515c01c4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + (0.5 * self.func_evals / self.budget)  # Adaptive scaling factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduced adaptive scaling factor F to enhance exploration and exploitation balance.", "configspace": "", "generation": 9, "fitness": 0.18042883280162822, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "497c1e93-8620-4392-9e69-bcf46a51d5c9", "metadata": {"aucs": [0.40250836138590673, 0.533174357100451, 0.5100288426055832, 0.18808501469110583, 0.46849886480209424, 0.23275005940265114, 0.17406740313043834, 0.48994149213459703, 0.40848839274407567, 0.13309738013345707, 0.16917234294946015, 0.22976035616346913, 0.15083932035296999, 0.21656155666935428, 0.2501000590112131, 0.09190288129470336, 0.20059653404361721, 0.20299649892198168, 0.07444420779954852, 0.07545699191629684, 0.06435170688732361, 0.11720053991548107, 0.061037544621263984, 0.07188019494043074, 0.09646841790264282, 0.0947701716594378, 0.08369738638338298, 0.08537655710366909, 0.02722737907137507, 0.039427162254285775, 0.08881278424217798, 0.08028625733046613, 0.07875211253244885, 0.06558281018057566, 0.030526788834332907, 0.08564974041118056, 0.9583519946558438, 0.9878800341739236, 0.9731550275539208, 0.985725058445701, 0.9384294724611606, 0.9432670737018267, 0.9763003113720431, 0.9810606000588179, 0.9911968684562456, 0.09686412360945029, 0.08823592641035616, 0.08476508264186378, 0.09097468888199767, 0.09066867707496296, 0.12338089538262753, 0.08104167822470476, 0.06568627525468396, 0.09258375686571851, 0.2537557889185271, 0.21561269203788025, 0.16678574354636078, 0.2932832020449502, 0.22666994415774167, 0.23088177949984146, 0.17637680125819188, 0.3560746636032337, 0.19246982308518568, 0.15352308342925058, 0.1555522648778369, 0.1181501022123237, 0.11096238511770917, 0.1143600027458398, 0.08810746136353642, 0.10956428116111949, 0.10273056954024506, 0.1658567739103337, 0.08890890334426982, 0.09116816027529207, 0.10989289465300445, 0.13105825518512249, 0.10515516460050367, 0.0843816553246044, 0.1394477415045009, 0.1745169159795138, 0.1045777033119355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03375087671008259, 0.04017460117411098, 0.03492492086880539, 0.001714124341418155, 0.0015897475658457338, 0.04130861658008256, 0.056193919799635283, 0.035781785184233694, 0.040525432014919205, 0.1113334202883185, 0.0007605544785769247, 0.0821006289222842, 0.050782553757586, 0.05268137485398294, 0.061961372486675326, 0.03801165796740025, 0.008277766777109341, 0.0389925849189634, 0.06494776099381083, 0.0614408839049303, 0.05236008887504884, 0.0724688604256899, 0.05894495839778413, 0.08891110698269344, 0.0948593399428217, 0.06264581925895196, 0.03882399209733833, 0.404726888731613, 0.37902710626043334, 0.3000901275148661, 0.392486872576852, 0.36277128197655306, 0.34074465916214736, 0.4436168487944908, 0.36896834710177495, 0.3217310691582729, 0.08057485967411593, 0.07592481528884942, 0.05613182477554324, 0.06714149528657798, 0.0315529122793472, 0.0841784147904362, 0.07516302576059175, 0.07185066791803907, 0.06501702895044159, 0.13923804959017339, 0.14800796182199516, 0.13359206472457041, 0.17636162369222785, 0.16027026278194334, 0.1172670846425321, 0.1479791135009475, 0.18708175571742047, 0.15509924883950588, 0.2029986081053008, 0.21451510927511508, 0.23443170145255954, 0.16364642737669888, 0.18289771174371872, 0.2516736287281528, 0.2543235234035801, 0.20429328765956112, 0.30238523852831367, 0.20451579681419185, 0.17262363152628424, 0.2200254926010663, 0.10419802404754608, 0.13196633946403313, 0.12148839979779225, 0.2140217356835864, 0.18023582050694964, 0.16489732150444392, 0.15998561609092665, 0.15207840664433914, 0.15904226696135992, 0.1544423035511414, 0.1527598054050382, 0.15477566521503472, 0.17414681851850744, 0.16754140486840863, 0.19026653825329587, 0.16904874378997337, 0.18009901047616605, 0.18533738576470649, 0.18422057021006477, 0.15945880901474174, 0.17358452650647416, 0.18525925288254863, 0.1576042831015637, 0.18556464636666625, 0.19547041936622578, 0.1458323876794786, 0.16341825419811773, 0.14002287198585273, 0.3746437619549039, 0.15973133597120848, 0.14103258577755173, 0.1651593144419894, 0.16131646348895157, 0.36691840205554793, 0.1799268789209344, 0.15386939241404818, 0.1683286912915124, 0.19079730411869666, 0.16073950684908178, 0.1882632419629191, 0.2104859632822893, 0.20552665186237096, 0.16893070101123797, 0.17515616096891795, 0.18239589691252145, 0.17644739399436582, 0.1799082448722067, 0.1671225385750511, 0.18609845957130466, 0.20404985737892534, 0.17873409639226479, 0.05817336465413303, 0.04737055886532049, 0.054566108961860094, 0.0598150468662767, 0.0594970698921079, 0.057026223605449955, 0.06708440193879484, 0.05195359680921552, 0.05978595010069532]}, "mutation_prompt": null}
{"id": "1b0dc632-72cb-4d1d-93b1-de5e12cb0055", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduced a dynamic adjustment for DE crossover rate to enhance diversity and convergence speed.", "configspace": "", "generation": 10, "fitness": 0.18251980877421572, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "497c1e93-8620-4392-9e69-bcf46a51d5c9", "metadata": {"aucs": [0.571349802037463, 0.4381352146229073, 0.5120890081099287, 0.5414216100986435, 0.556072684359323, 0.5609655984894903, 0.1740762170106096, 0.5134675506428159, 0.5130096488172303, 0.18983557710337806, 0.057950034859717725, 0.18215379442881208, 0.07268127335762165, 9.999999999998899e-05, 0.0859970862280115, 0.11693156953129602, 0.041412400385195225, 0.16612902751836667, 0.10038434202562607, 0.07204743093095545, 0.07525488915565404, 0.06945202204981493, 0.08334433550619702, 0.08299487771553682, 0.08038472351076309, 0.11832314807227307, 0.07892127624308198, 0.022460535336735088, 0.08713942009938636, 0.054933708190978536, 0.14537700764232153, 0.06397409015061517, 0.060232818127891385, 0.0598025328350823, 0.05786466860602901, 0.07230825058218815, 0.9743400653627529, 0.9858122591911017, 0.958974534903685, 0.9855380766224558, 0.9028298725175289, 0.9594429718704813, 0.9815862359052884, 0.9852181400260522, 0.9912025896468687, 0.09686412360945029, 0.14198088342514292, 0.07528629352514038, 0.0991239724487305, 0.102992302174297, 0.11209210490979726, 0.0758446728539025, 0.08988864789559159, 0.16418562580694163, 0.15464627971842315, 0.1719349497771665, 0.16946949712147708, 0.1872482174927933, 0.1948091931267827, 0.17987388283073036, 0.21944316224082572, 0.11481506559128996, 0.31003860907490144, 0.22219440213930886, 0.11112959266856537, 0.12388416595679752, 0.07471829429820176, 0.06508836179051469, 0.11508990772398775, 0.0927204237091882, 0.07942496397481913, 0.12975155346445122, 0.16098098411046868, 0.10000954728234535, 0.14127668629616563, 0.1424543871126005, 0.1422866487482104, 0.10426903970441614, 0.17196690059812048, 0.02519661253564287, 0.09755880248829907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0041414647066827515, 0.03197261892791359, 0.01144205937186471, 0.034539564745987406, 0.02414723703317756, 0.031080539968785903, 0.03895082644096837, 0.01606605277067852, 0.05875763565301417, 0.043265399459225584, 0.013441436681685848, 0.021921807896654877, 0.17039360879104992, 0.05288928346707622, 0.04728163597093682, 0.03570361827484447, 0.03439450226123186, 0.027403371318871717, 0.04582379865954156, 0.10136937182919115, 0.04772954695606202, 0.033067145302296375, 0.004983922121045925, 0.06537940645177132, 0.08477190717276184, 0.04901936022795783, 0.0746309718206043, 0.06596425845032095, 0.366332110846356, 0.4044270573060843, 0.32550901060147563, 0.41463777348278397, 0.4347333431762419, 0.2076652303437858, 0.3828760728137325, 0.43822717020481616, 0.42128816393155966, 0.0678867637580921, 0.06392346936999005, 0.07221433035844815, 0.07965033668759025, 0.071213308745533, 0.05377340600699665, 0.07961530122578553, 0.11151717499833835, 0.07347952546376657, 0.14224486717108265, 0.1706484405522789, 0.1316020545321931, 0.17152598526692198, 0.14060989378008693, 0.1242275420949236, 0.14623691219019597, 0.1824005515493815, 0.1338567654318118, 0.19639495031529042, 0.24724457600311622, 0.2509203482024345, 0.18584903103047357, 0.2715388818402189, 0.23325459717218977, 0.24654940160796546, 0.20824813037552992, 0.2596885556194889, 0.15326712881437865, 0.12597541710652627, 0.17373928463759936, 0.1609698779495844, 0.1598666738726946, 0.1715537494267776, 0.21282318050690452, 0.22365090933307807, 0.14775367057850786, 0.1880047334014887, 0.16035610218485707, 0.16683464047819052, 0.1607494416345755, 0.15911815227575676, 0.16218041875798406, 0.15068512717260452, 0.161064011581886, 0.16789719410995896, 0.1778871158950326, 0.16319487410353228, 0.17582783652448875, 0.19006518715106935, 0.1624741477588515, 0.1833563998750627, 0.18517025282883204, 0.16910416186579846, 0.16761212019359573, 0.1680152568731319, 0.1511920117317348, 0.18782750418445615, 0.1556394911716421, 0.18937792298972522, 0.14388386439451373, 0.14192406342051767, 0.1278196619135853, 0.5818588626589477, 0.23084670229476867, 0.20281437785647127, 0.22383062157705047, 0.22999287288235415, 0.20472600700166177, 0.1791553318959841, 0.18949244445676672, 0.20433879809942623, 0.14735401372219914, 0.19465020116427945, 0.1796900201335465, 0.1759838693400093, 0.17874264733901313, 0.18029519841564257, 0.2056154639652107, 0.1853502662266885, 0.20037102372990157, 0.18574997849811048, 0.05005602555609934, 0.05372722661616858, 0.051167708091167885, 0.08395006087467083, 0.06007613197806949, 0.054618408256417394, 0.06350399818839947, 0.06276141941311741, 0.0688923628567234]}, "mutation_prompt": null}
{"id": "3464dc5b-a458-4bc5-a0e1-4ffddb7c1a2c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (initial value, will be adjusted)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Dynamic DE scaling factor adjustment\n                self.F = 0.9 - (0.4 * (self.func_evals / self.budget))\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced adaptability by introducing a dynamic adjustment for the DE scaling factor to better balance exploration and exploitation throughout the optimization process.", "configspace": "", "generation": 11, "fitness": 0.18236590415736795, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "1b0dc632-72cb-4d1d-93b1-de5e12cb0055", "metadata": {"aucs": [0.5099637044517531, 0.5118483742981795, 0.5078073096626643, 0.5561865491084147, 0.5301179599424505, 0.5082614204771116, 0.17415319255086192, 0.5625958901363115, 0.5674355389994952, 0.07878419145374771, 0.04753832795922297, 0.12283777393592232, 0.02491344009527985, 0.17299308079084696, 0.10599976214330387, 0.04119156482446651, 0.013098835733622805, 0.10911452083139284, 0.09612899200248903, 0.07357702073015338, 0.07731227723280643, 0.060009658247278996, 0.11813089640445973, 0.08445460262981819, 0.07494032617472746, 0.06432371406128912, 0.10245728472714744, 0.05274006174100154, 0.06802943027606811, 0.08938626418368367, 0.0657392220335492, 0.11323029320369771, 0.06933778329014417, 0.03927762471739149, 0.0718865426729699, 0.07395573205798123, 0.9743365404672688, 0.9858134681152265, 0.9589422507890383, 0.9855390793359753, 0.9005477141336723, 0.959422227235153, 0.981585319279576, 0.9852151119367705, 0.9912028140120693, 0.09686412360945029, 0.10348388146937448, 0.10384399100748654, 0.10732459844226161, 0.09735560750685268, 0.07764676470303677, 0.07836121345686242, 0.08177336370679344, 0.18649232523866355, 0.1898409204651974, 0.19597540160655036, 0.16377254374001837, 0.1882874085981585, 0.17127585069126416, 0.15064131668676817, 0.17759298959326553, 0.36865587577357084, 0.167090451209857, 0.11602722653324782, 0.11159208840036894, 0.1221644688690654, 0.09385100459873297, 0.07958901255512296, 0.11434035179200741, 0.09094653886584514, 0.08701077846657246, 0.14130038140194334, 0.151846710993508, 0.10186626321924053, 0.0811318964868788, 0.18627234425747496, 0.12375606561816965, 0.11767123958137549, 0.11127984019955095, 0.0717252676632073, 0.1279935511693342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06850938009337393, 0.02403991096151803, 0.03149202180879496, 0.07205279618283023, 0.009802630500278076, 0.051403705989189974, 0.03166790965538824, 0.05821205756133718, 0.035628943725374174, 0.02951380925037228, 9.999999999998899e-05, 0.12612180712554288, 0.054266049107547176, 0.0345262375653429, 0.031015722457309325, 0.030202049135266695, 0.018361633579393133, 0.03080614595052833, 0.13106726218946152, 0.14255756463230496, 0.02825740758549733, 0.11461567272040807, 0.09133378943818315, 0.06396038368312007, 0.04926735878790989, 0.04165970281028586, 0.06396026831560808, 0.3502996117686822, 0.31154403109569506, 0.36654458137535595, 0.20843307068869288, 0.4102025223796282, 0.20649399964710557, 0.4094182884738068, 0.3698486312645155, 0.39795338772483824, 0.07391510499104115, 0.06757459333671845, 0.07657480635010527, 0.0790430438662787, 0.0670911017146042, 0.06041327831518284, 0.07225188007756478, 0.08723571839712563, 0.07668590865344138, 0.13727579260020917, 0.14920350390642634, 0.14033890022140405, 0.13468248943786076, 0.12804087475995163, 0.11462121649934853, 0.1250559885342173, 0.1748769163730669, 0.12568941205854112, 0.23471857936368612, 0.21739369798765695, 0.21900570403347952, 0.16415427992012555, 0.24461069995821028, 0.23981953424398894, 0.2734534795972057, 0.279378968756802, 0.2884459053413062, 0.19160679170979877, 0.18301128613552164, 0.15901949137980298, 0.15590835530478564, 0.17604146995201986, 0.1566166845618624, 0.2230019870374541, 0.19485745319784953, 0.15968179784209457, 0.17734616918010837, 0.13699317559913593, 0.1421531197783641, 0.1589078903637452, 0.14911096337818586, 0.15569757870430423, 0.15106831718239733, 0.17401371847873792, 0.18329612501510995, 0.18153682386962577, 0.16969873058784946, 0.19020011467670783, 0.17813768484895864, 0.15141608824591024, 0.1881878539664058, 0.16448751619930957, 0.19112346529728486, 0.20068541630534886, 0.19366561941818994, 0.2649412459379159, 0.19499968856506333, 0.40902193982220936, 0.18972106495914942, 0.16191053718023796, 0.16944261418212303, 0.17372277669927394, 0.5753036302226242, 0.23312122877631514, 0.18947127688767273, 0.1496557744109137, 0.1792865869855732, 0.20539333320640962, 0.14921929449805627, 0.19764609612127682, 0.20769156927454746, 0.18477412779508917, 0.17804867038097982, 0.17543143345074785, 0.17355193016045656, 0.17531263286554788, 0.16819257056902692, 0.17546007201757707, 0.17539011165806095, 0.1956402392554315, 0.19152727283238502, 0.05651077809931171, 0.07103100977928256, 0.0549471744783494, 0.06841331704707954, 0.05820363137331375, 0.054830039013003096, 0.0712340133093956, 0.05803060661962567, 0.06988624955101985]}, "mutation_prompt": null}
{"id": "571872e7-11ff-491d-b078-271758f20a70", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.9   # inertia weight (adjusted for better exploration and exploitation balance)\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted PSO inertia weight to improve exploration and exploitation balance.", "configspace": "", "generation": 12, "fitness": 0.12493983105788148, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "1b0dc632-72cb-4d1d-93b1-de5e12cb0055", "metadata": {"aucs": [0.22203637972569767, 0.19271461157094671, 0.20777204462412624, 0.24088303423477786, 0.17811770803123217, 0.2242993960688343, 0.16963024744409771, 0.16659014470116895, 0.16134029994486632, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048189596127745093, 0.04025718599156736, 0.034103233355895046, 0.043178603964154405, 0.048935162237623064, 0.045244671931682245, 0.0386022704036868, 0.06576632996891618, 0.043837630137209094, 0.042332725230584956, 0.012807348628783632, 0.04085959866924316, 0.020644588094213545, 0.010206833820139427, 0.018344971330662485, 0.056836482355075546, 0.014826332617899562, 0.018012511646564033, 0.973238193165941, 0.9869760495809514, 0.9521039967289779, 0.9869191683143382, 0.9552752944453113, 0.9541369041042979, 0.980071046347346, 0.9864155299830716, 0.9922153268722228, 0.1025203431117252, 0.07957307254504464, 0.04515007204427479, 0.06532191285126032, 0.02846705762175894, 0.07557571570779242, 0.04596683727728357, 0.06801515247135825, 0.08165012749686651, 0.12384878287542611, 0.12010139024764643, 0.11664801215597709, 0.1547872222355252, 0.11570811607613796, 0.10937624408049318, 0.09810016332658411, 0.13037478406607295, 0.12904922080451053, 0.07295442412573061, 0.006115944570697307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00782654302379937, 0.009170140311237307, 9.999999999998899e-05, 9.999999999998899e-05, 0.031050099622732197, 0.01472766649395163, 0.00969714925590015, 0.10248700462488558, 0.013664846095811867, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034827077288646646, 0.012952729744440283, 0.027925558068385592, 0.04014501748357291, 0.003696046407646647, 0.03730726711335841, 0.010674898717532577, 0.022441227173898404, 0.018355412649125324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004330413840046843, 9.999999999998899e-05, 0.03507529361928796, 9.999999999998899e-05, 0.010006116057296843, 0.020196426508266585, 0.03921162568174097, 9.999999999998899e-05, 0.012705242146518692, 0.21797986095164645, 0.22188748983795858, 0.19580324569238605, 0.26495760150929226, 0.18301262435824794, 0.1926053131668537, 0.23689026001209657, 0.1762171256328211, 0.18527824733122278, 0.07466408241532208, 0.06635334470115362, 0.055200882961722764, 0.07435376509298641, 0.04356397350703667, 0.041473084707499996, 0.039742343048357776, 0.044404796111364164, 0.03694286898270349, 0.13168332346860534, 0.1422777775209173, 0.14512904933469561, 0.14577387388101093, 0.13312400678274638, 0.13888357426947784, 0.13443835130953352, 0.13117169029199371, 0.15005859389085396, 0.14777082651741347, 0.16042948699517767, 0.14612074315823376, 0.2281497296802122, 0.15389536578207264, 0.13835649857114152, 0.16449010744346382, 0.17771867490749993, 0.17068530935631243, 0.10496274048181953, 0.09712572482169157, 0.15386719015837858, 0.0993403073436373, 0.12126507518546625, 0.11847532960459739, 0.10599355852015724, 0.1301970698291518, 0.11039944500778454, 0.16194657164683435, 0.17660062956255662, 0.131649201245861, 0.12793297468564757, 0.12369146084728455, 0.1372448262488558, 0.13667915319090984, 0.14424237971386833, 0.1245410690892591, 0.11848067762011982, 0.1407285768597285, 0.14791894861787347, 0.1600158395275828, 0.12558067054348798, 0.12372453851960963, 0.15896927353345525, 0.13803299870236263, 0.14352616139476482, 0.17171469869590927, 0.15153688970170476, 0.13248014913127348, 0.15431600024541658, 0.1698502294566019, 0.1551076993660463, 0.15222301956610795, 0.15336070584448713, 0.16410498446229882, 0.23060876258742868, 0.1663654669704896, 0.13890315884419246, 0.10083375213986767, 0.13153897110641644, 0.11123990357413693, 0.18897411866897795, 0.18904454886004585, 0.19044482261337148, 0.17122799382042198, 0.17900784127542413, 0.1783137355816825, 0.18214055992474687, 0.17156520632287808, 0.17821189655087377, 0.18090699044396596, 0.1890948945965788, 0.17045358377342268, 0.05236961866715262, 0.03795480265033968, 0.050204772429666256, 0.061685220942941155, 0.04901888965390122, 0.046032474035894166, 0.03651080190859013, 0.041327035830974634, 0.04220654500933452]}, "mutation_prompt": null}
{"id": "1c7cbdce-387f-43b6-99fb-9d2d3736eb14", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.9 - (0.4 * (self.func_evals / self.budget))  # Dynamic DE scaling factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced exploration by adjusting DE scaling factor dynamically based on evaluations.", "configspace": "", "generation": 13, "fitness": 0.18236590415736795, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "1b0dc632-72cb-4d1d-93b1-de5e12cb0055", "metadata": {"aucs": [0.5099637044517531, 0.5118483742981795, 0.5078073096626643, 0.5561865491084147, 0.5301179599424505, 0.5082614204771116, 0.17415319255086192, 0.5625958901363115, 0.5674355389994952, 0.07878419145374771, 0.04753832795922297, 0.12283777393592232, 0.02491344009527985, 0.17299308079084696, 0.10599976214330387, 0.04119156482446651, 0.013098835733622805, 0.10911452083139284, 0.09612899200248903, 0.07357702073015338, 0.07731227723280643, 0.060009658247278996, 0.11813089640445973, 0.08445460262981819, 0.07494032617472746, 0.06432371406128912, 0.10245728472714744, 0.05274006174100154, 0.06802943027606811, 0.08938626418368367, 0.0657392220335492, 0.11323029320369771, 0.06933778329014417, 0.03927762471739149, 0.0718865426729699, 0.07395573205798123, 0.9743365404672688, 0.9858134681152265, 0.9589422507890383, 0.9855390793359753, 0.9005477141336723, 0.959422227235153, 0.981585319279576, 0.9852151119367705, 0.9912028140120693, 0.09686412360945029, 0.10348388146937448, 0.10384399100748654, 0.10732459844226161, 0.09735560750685268, 0.07764676470303677, 0.07836121345686242, 0.08177336370679344, 0.18649232523866355, 0.1898409204651974, 0.19597540160655036, 0.16377254374001837, 0.1882874085981585, 0.17127585069126416, 0.15064131668676817, 0.17759298959326553, 0.36865587577357084, 0.167090451209857, 0.11602722653324782, 0.11159208840036894, 0.1221644688690654, 0.09385100459873297, 0.07958901255512296, 0.11434035179200741, 0.09094653886584514, 0.08701077846657246, 0.14130038140194334, 0.151846710993508, 0.10186626321924053, 0.0811318964868788, 0.18627234425747496, 0.12375606561816965, 0.11767123958137549, 0.11127984019955095, 0.0717252676632073, 0.1279935511693342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06850938009337393, 0.02403991096151803, 0.03149202180879496, 0.07205279618283023, 0.009802630500278076, 0.051403705989189974, 0.03166790965538824, 0.05821205756133718, 0.035628943725374174, 0.02951380925037228, 9.999999999998899e-05, 0.12612180712554288, 0.054266049107547176, 0.0345262375653429, 0.031015722457309325, 0.030202049135266695, 0.018361633579393133, 0.03080614595052833, 0.13106726218946152, 0.14255756463230496, 0.02825740758549733, 0.11461567272040807, 0.09133378943818315, 0.06396038368312007, 0.04926735878790989, 0.04165970281028586, 0.06396026831560808, 0.3502996117686822, 0.31154403109569506, 0.36654458137535595, 0.20843307068869288, 0.4102025223796282, 0.20649399964710557, 0.4094182884738068, 0.3698486312645155, 0.39795338772483824, 0.07391510499104115, 0.06757459333671845, 0.07657480635010527, 0.0790430438662787, 0.0670911017146042, 0.06041327831518284, 0.07225188007756478, 0.08723571839712563, 0.07668590865344138, 0.13727579260020917, 0.14920350390642634, 0.14033890022140405, 0.13468248943786076, 0.12804087475995163, 0.11462121649934853, 0.1250559885342173, 0.1748769163730669, 0.12568941205854112, 0.23471857936368612, 0.21739369798765695, 0.21900570403347952, 0.16415427992012555, 0.24461069995821028, 0.23981953424398894, 0.2734534795972057, 0.279378968756802, 0.2884459053413062, 0.19160679170979877, 0.18301128613552164, 0.15901949137980298, 0.15590835530478564, 0.17604146995201986, 0.1566166845618624, 0.2230019870374541, 0.19485745319784953, 0.15968179784209457, 0.17734616918010837, 0.13699317559913593, 0.1421531197783641, 0.1589078903637452, 0.14911096337818586, 0.15569757870430423, 0.15106831718239733, 0.17401371847873792, 0.18329612501510995, 0.18153682386962577, 0.16969873058784946, 0.19020011467670783, 0.17813768484895864, 0.15141608824591024, 0.1881878539664058, 0.16448751619930957, 0.19112346529728486, 0.20068541630534886, 0.19366561941818994, 0.2649412459379159, 0.19499968856506333, 0.40902193982220936, 0.18972106495914942, 0.16191053718023796, 0.16944261418212303, 0.17372277669927394, 0.5753036302226242, 0.23312122877631514, 0.18947127688767273, 0.1496557744109137, 0.1792865869855732, 0.20539333320640962, 0.14921929449805627, 0.19764609612127682, 0.20769156927454746, 0.18477412779508917, 0.17804867038097982, 0.17543143345074785, 0.17355193016045656, 0.17531263286554788, 0.16819257056902692, 0.17546007201757707, 0.17539011165806095, 0.1956402392554315, 0.19152727283238502, 0.05651077809931171, 0.07103100977928256, 0.0549471744783494, 0.06841331704707954, 0.05820363137331375, 0.054830039013003096, 0.0712340133093956, 0.05803060661962567, 0.06988624955101985]}, "mutation_prompt": null}
{"id": "a88fd62b-6858-4f32-957e-4737d19c90ec", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.w = 0.9 - 0.5 * (self.func_evals / self.budget)  # Dynamic inertia weight\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduced dynamic inertia weight adjustment in PSO for better balance between exploration and exploitation.", "configspace": "", "generation": 14, "fitness": 0.16953269919506375, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "1b0dc632-72cb-4d1d-93b1-de5e12cb0055", "metadata": {"aucs": [0.48329979015705715, 0.4370706854881603, 0.48607181997288584, 0.4777021478659146, 0.4231380807612135, 0.4986140053395821, 0.17169361040332665, 0.437871891117633, 0.49980292240810154, 0.03832351277198309, 0.2421986757380794, 0.16669318537430555, 0.11308365941364629, 0.16249265394868706, 0.21223884691468975, 0.02385651097166719, 0.12681962987869577, 0.02953069092931304, 0.07260864449004789, 0.08101050447796099, 0.08111001968491005, 0.08415475914366544, 0.09371203654979976, 0.05302159336120971, 0.0777978304862752, 0.09345160375781558, 0.06572784415008193, 0.05509549070435027, 0.06222272333330203, 0.06827876331544303, 0.05066294323208853, 0.0635817524775193, 0.03560196383447378, 0.06621623377305519, 0.04901125806496931, 0.0393435361009975, 0.973256351597229, 0.9869711135523515, 0.9522940391346395, 0.9869166041420983, 0.9551826570086616, 0.9541564581486287, 0.9800669652071594, 0.9864120161381636, 0.99221516990561, 0.11130672477125902, 0.10602744081572524, 0.055322225592915664, 0.09503118005376765, 0.06492216992910904, 0.10154317630018106, 0.10405914781329662, 0.0861560307973156, 0.10233449842770392, 0.23986521341988487, 0.18439569966604552, 0.12243471818086071, 0.17771302668946387, 0.16124938371930164, 0.17815020873412268, 0.20427872731221874, 0.13297267944780944, 0.13942948928345378, 0.10513623193938526, 0.05662349070327277, 0.10996097690714812, 0.09877222224139426, 0.12276684923537229, 0.07561663325569357, 9.999999999998899e-05, 0.10875167032386668, 0.11727545199730849, 0.03966261764242318, 0.009785241211166085, 0.039106998222371514, 0.1433117627196372, 0.1050299420074361, 0.1447885930303241, 0.0803604491805352, 0.10119307027368596, 0.08559279711633427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013971209812557728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007812655613533837, 9.999999999998899e-05, 0.034373707917152, 0.05069159221718944, 0.025066016935989865, 0.025372778373915605, 0.0006867040293978555, 0.051130837931985806, 0.055116681674478585, 0.005207095241801296, 0.032574346608492344, 0.013071975190566576, 9.999999999998899e-05, 0.013453420268026428, 0.03734939302620699, 0.03667446171933875, 0.03969587559601462, 0.03057565921993155, 9.999999999998899e-05, 0.03872914305309716, 0.0195860074764469, 0.031189317073331724, 0.06810323973929822, 0.003374350684841043, 0.02227219093386934, 0.043455210285460955, 0.03736422471689016, 0.029678354755071634, 0.032061403505280195, 0.37910066981286594, 0.31835019776441054, 0.3450126388522031, 0.3282937606825669, 0.32938475987583005, 0.3902063093082021, 0.3540241761030841, 0.3230853510544993, 0.3075068494809432, 0.07732856366372598, 0.08090501848863185, 0.06817510832446005, 0.05355647567758848, 0.060152636874082566, 0.05703153663650262, 0.07447540505226358, 0.06745737471445101, 0.055994644149328976, 0.13544182968367235, 0.14330912557108133, 0.13425563965050002, 0.1588971484776175, 0.1907767256267442, 0.16861103537975175, 0.14355627546502892, 0.1575849318150223, 0.17037756181500574, 0.25659130813540987, 0.1834101915711237, 0.2464155921386315, 0.22353131550437688, 0.22039679217554353, 0.18296137794983702, 0.21561212090947945, 0.2353810233253757, 0.21747651853807604, 0.1282336380381094, 0.14007238557597756, 0.1454238166884606, 0.15337003056360377, 0.15068564709550647, 0.13830771897980898, 0.18980189753323562, 0.18347219327286957, 0.15678211731203717, 0.15667089934032974, 0.14814879489665878, 0.16720466785117083, 0.19140437231903495, 0.14367768880184562, 0.15508223811629906, 0.16784329956226918, 0.16253647792633963, 0.14641209169116265, 0.1580523200260151, 0.17222285756934452, 0.17803856693443432, 0.18617804527403814, 0.14783765996067577, 0.17783674708476116, 0.16721720446984145, 0.1714334786243018, 0.1665848351533914, 0.41987949703125016, 0.1469135250368825, 0.1790937777167395, 0.14799554652244173, 0.1755921649638783, 0.251036052172964, 0.1374304548265909, 0.1589648084624874, 0.17535612141518708, 0.2587799096897878, 0.1664695543723438, 0.14523722957459906, 0.13908696265885412, 0.17281175371134327, 0.1286867489145319, 0.18101966592151653, 0.20201502846188413, 0.1873911438631085, 0.169018161969683, 0.17588159669721404, 0.1844937733029356, 0.18511235278396365, 0.1706294535856132, 0.18717673806191437, 0.17940856878814826, 0.18404310604716534, 0.2015746887445511, 0.05274165766075878, 0.06037793379283962, 0.06372322953179099, 0.06609026439645127, 0.059079950804177495, 0.052838062673726593, 0.06132727921749703, 0.048887325889965694, 0.05745435593675097]}, "mutation_prompt": null}
{"id": "399147e5-2d11-4177-b530-0510023d43f6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduced a dynamic adjustment for DE crossover rate to enhance diversity and convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b0dc632-72cb-4d1d-93b1-de5e12cb0055", "metadata": {"aucs": [0.571349802037463, 0.4381352146229073, 0.5120890081099287, 0.5414216100986435, 0.556072684359323, 0.5609655984894903, 0.1740762170106096, 0.5134675506428159, 0.5130096488172303, 0.18983557710337806, 0.057950034859717725, 0.18215379442881208, 0.07268127335762165, 9.999999999998899e-05, 0.0859970862280115, 0.11693156953129602, 0.041412400385195225, 0.16612902751836667, 0.10038434202562607, 0.07204743093095545, 0.07525488915565404, 0.06945202204981493, 0.08334433550619702, 0.08299487771553682, 0.08038472351076309, 0.11832314807227307, 0.07892127624308198, 0.022460535336735088, 0.08713942009938636, 0.054933708190978536, 0.14537700764232153, 0.06397409015061517, 0.060232818127891385, 0.0598025328350823, 0.05786466860602901, 0.07230825058218815, 0.9743400653627529, 0.9858122591911017, 0.958974534903685, 0.9855380766224558, 0.9028298725175289, 0.9594429718704813, 0.9815862359052884, 0.9852181400260522, 0.9912025896468687, 0.09686412360945029, 0.14198088342514292, 0.07528629352514038, 0.0991239724487305, 0.102992302174297, 0.11209210490979726, 0.0758446728539025, 0.08988864789559159, 0.16418562580694163, 0.15464627971842315, 0.1719349497771665, 0.16946949712147708, 0.1872482174927933, 0.1948091931267827, 0.17987388283073036, 0.21944316224082572, 0.11481506559128996, 0.31003860907490144, 0.22219440213930886, 0.11112959266856537, 0.12388416595679752, 0.07471829429820176, 0.06508836179051469, 0.11508990772398775, 0.0927204237091882, 0.07942496397481913, 0.12975155346445122, 0.16098098411046868, 0.10000954728234535, 0.14127668629616563, 0.1424543871126005, 0.1422866487482104, 0.10426903970441614, 0.17196690059812048, 0.02519661253564287, 0.09755880248829907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0041414647066827515, 0.03197261892791359, 0.01144205937186471, 0.034539564745987406, 0.02414723703317756, 0.031080539968785903, 0.03895082644096837, 0.01606605277067852, 0.05875763565301417, 0.043265399459225584, 0.013441436681685848, 0.021921807896654877, 0.17039360879104992, 0.05288928346707622, 0.04728163597093682, 0.03570361827484447, 0.03439450226123186, 0.027403371318871717, 0.04582379865954156, 0.10136937182919115, 0.04772954695606202, 0.033067145302296375, 0.004983922121045925, 0.06537940645177132, 0.08477190717276184, 0.04901936022795783, 0.0746309718206043, 0.06596425845032095, 0.366332110846356, 0.4044270573060843, 0.32550901060147563, 0.41463777348278397, 0.4347333431762419, 0.2076652303437858, 0.3828760728137325, 0.43822717020481616, 0.42128816393155966, 0.0678867637580921, 0.06392346936999005, 0.07221433035844815, 0.07965033668759025, 0.071213308745533, 0.05377340600699665, 0.07961530122578553, 0.11151717499833835, 0.07347952546376657, 0.14224486717108265, 0.1706484405522789, 0.1316020545321931, 0.17152598526692198, 0.14060989378008693, 0.1242275420949236, 0.14623691219019597, 0.1824005515493815, 0.1338567654318118, 0.19639495031529042, 0.24724457600311622, 0.2509203482024345, 0.18584903103047357, 0.2715388818402189, 0.23325459717218977, 0.24654940160796546, 0.20824813037552992, 0.2596885556194889, 0.15326712881437865, 0.12597541710652627, 0.17373928463759936, 0.1609698779495844, 0.1598666738726946, 0.1715537494267776, 0.21282318050690452, 0.22365090933307807, 0.14775367057850786, 0.1880047334014887, 0.16035610218485707, 0.16683464047819052, 0.1607494416345755, 0.15911815227575676, 0.16218041875798406, 0.15068512717260452, 0.161064011581886, 0.16789719410995896, 0.1778871158950326, 0.16319487410353228, 0.17582783652448875, 0.19006518715106935, 0.1624741477588515, 0.1833563998750627, 0.18517025282883204, 0.16910416186579846, 0.16761212019359573, 0.1680152568731319, 0.1511920117317348, 0.18782750418445615, 0.1556394911716421, 0.18937792298972522, 0.14388386439451373, 0.14192406342051767, 0.1278196619135853, 0.5818588626589477, 0.23084670229476867, 0.20281437785647127, 0.22383062157705047, 0.22999287288235415, 0.20472600700166177, 0.1791553318959841, 0.18949244445676672, 0.20433879809942623, 0.14735401372219914, 0.19465020116427945, 0.1796900201335465, 0.1759838693400093, 0.17874264733901313, 0.18029519841564257, 0.2056154639652107, 0.1853502662266885, 0.20037102372990157, 0.18574997849811048, 0.05005602555609934, 0.05372722661616858, 0.051167708091167885, 0.08395006087467083, 0.06007613197806949, 0.054618408256417394, 0.06350399818839947, 0.06276141941311741, 0.0688923628567234]}, "mutation_prompt": null}
{"id": "47ed7d87-5d8c-456c-a5d4-9c0b87875e12", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.w = 0.9 - (0.4 * (self.func_evals / self.budget))  # Adaptive inertia weight\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced convergence with adaptive inertia weight adjustment for better exploration-exploitation balance.", "configspace": "", "generation": 16, "fitness": 0.15852323002146232, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "1b0dc632-72cb-4d1d-93b1-de5e12cb0055", "metadata": {"aucs": [0.44193854130184573, 0.38439260309690615, 0.3440072095880303, 0.4189909486102581, 0.44726376042292026, 0.43590276702305686, 0.17024628950335974, 0.41962992419474077, 0.3923908133530788, 0.10287610323473906, 9.999999999998899e-05, 0.08242673290811531, 0.07795510452696386, 0.03667693939517791, 0.024657673223767218, 0.017357459688962296, 0.09617987766504466, 0.04433707935069886, 0.0680912288627924, 0.05836142020150892, 0.061977720505536515, 0.05089132370375937, 0.048261530798052954, 0.05754024384395762, 0.04539654397721293, 0.0695332851767656, 0.06220890654335198, 0.04722723027588205, 0.016306512476017998, 0.05319068859262721, 0.07111341620157641, 0.07908290125719775, 0.04050426448900035, 0.08366811476337754, 0.05534385668985231, 0.03403031249545074, 0.9732525281043672, 0.9869720920767365, 0.9522715598587291, 0.9869171131120802, 0.9551949687884453, 0.9541530196349672, 0.9800678311307293, 0.9864126985593831, 0.9922152012783712, 0.10377087343216684, 0.0846769322486256, 0.06880963093667447, 0.08915859121428471, 0.08211289733717386, 0.09993257743064154, 0.049173631794410144, 0.09517726741662513, 0.0777745942560023, 0.19899986570183936, 0.14816792935942036, 0.1276619065867679, 0.17561945521745348, 0.23896927722009254, 0.1679670152144721, 0.1368118437587269, 0.13638010828728364, 0.17169166659043822, 0.10001697188636915, 0.12785219790173508, 0.11726892512166576, 0.057847007838637166, 0.06758496530910618, 0.045297927739940125, 0.08897762726895175, 0.047596602246427255, 0.07525917827190354, 0.014326335637645404, 0.014976322296166522, 0.0403324742932345, 0.11020761490196196, 0.08736179904672003, 0.07632655522721143, 0.10077244778634431, 0.020624605329694568, 0.01959302074060687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027665546257221618, 0.00932900005506998, 0.03875368367106513, 0.04794657997943719, 0.02524690403307228, 0.03419061631183051, 0.03311895468634174, 0.0347101291180969, 0.03753925167899275, 0.00571395510815742, 0.01760173956398381, 0.02784104020401268, 0.011423045223597383, 0.040503412495919267, 0.02003790129939953, 0.039704117675207984, 0.012947744248159698, 0.02402550540476789, 0.003957689054662983, 0.09118980761033091, 0.01754937326356354, 0.06544804429832873, 0.06667253254216376, 0.03165936629822064, 0.03751210110605441, 9.999999999998899e-05, 0.031646442415792064, 0.34011332507455205, 0.3461271692405181, 0.26473803887161296, 0.40163437723323514, 0.3052622555745841, 0.32160779087701685, 0.35618314879700497, 0.30782202348264764, 0.29178675714061375, 0.0809967594246811, 0.07992819958842334, 0.06419913295666646, 0.05666980210099026, 0.05343028760022939, 0.06820535190212251, 0.07649370817863399, 0.08372455513542643, 0.07269712009095997, 0.1454741124064307, 0.14256048478918515, 0.16126234896027603, 0.14327727588233774, 0.13417140620218582, 0.16820394358021895, 0.12971107879197608, 0.17574831070636887, 0.12760862338501666, 0.1911689876427174, 0.1962966345756879, 0.2320069382244898, 0.19265515004063827, 0.21745638254615185, 0.1718772078697859, 0.2252770662771697, 0.22309053987247118, 0.19430374250838744, 0.1507673124291763, 0.1212224678884033, 0.14868622333153636, 0.1154567754552388, 0.13764046206321456, 0.15173018814547434, 0.1326502582446084, 0.18964475993706353, 0.13094573479976623, 0.15726980579453698, 0.15196537856990688, 0.1406057618831008, 0.15815535644314982, 0.14127944807452386, 0.15887406072109844, 0.17975707957143927, 0.1527291419818224, 0.14687168769449177, 0.12539923558549448, 0.17138053714442358, 0.16029730503907924, 0.17306978008688034, 0.11883300998980684, 0.16716008334712185, 0.1724753592793168, 0.1587140186558449, 0.15460240259521651, 0.3775050888224246, 0.14595102128780746, 0.18555596686519138, 0.15336827961693433, 0.16805778664838456, 0.20069024296474614, 0.13932201583796755, 0.1288008656518348, 0.17516475977281132, 0.25678105793399186, 0.18538769968308066, 0.14717081720705605, 0.1337080833342661, 0.17536594165693875, 0.11221386601732453, 0.1903550951568892, 0.1939166792315331, 0.18638826900587158, 0.20090533903117092, 0.1988504743717211, 0.1914538211591853, 0.17933213383345847, 0.17808124811071335, 0.19092316271741983, 0.192946974159955, 0.18422201764821522, 0.18153268231689168, 0.051178916274518094, 0.056953140985547934, 0.053287728344163066, 0.0498181768730126, 0.04246539204648048, 0.05496593684873374, 0.049068722826587696, 0.06164571936880381, 0.04819942180481973]}, "mutation_prompt": null}
{"id": "ba92fb0f-1459-45de-840c-54f95a9504a1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n\n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduced a dynamic adjustment for DE crossover rate to enhance diversity and convergence speed.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b0dc632-72cb-4d1d-93b1-de5e12cb0055", "metadata": {"aucs": [0.571349802037463, 0.4381352146229073, 0.5120890081099287, 0.5414216100986435, 0.556072684359323, 0.5609655984894903, 0.1740762170106096, 0.5134675506428159, 0.5130096488172303, 0.18983557710337806, 0.057950034859717725, 0.18215379442881208, 0.07268127335762165, 9.999999999998899e-05, 0.0859970862280115, 0.11693156953129602, 0.041412400385195225, 0.16612902751836667, 0.10038434202562607, 0.07204743093095545, 0.07525488915565404, 0.06945202204981493, 0.08334433550619702, 0.08299487771553682, 0.08038472351076309, 0.11832314807227307, 0.07892127624308198, 0.022460535336735088, 0.08713942009938636, 0.054933708190978536, 0.14537700764232153, 0.06397409015061517, 0.060232818127891385, 0.0598025328350823, 0.05786466860602901, 0.07230825058218815, 0.9743400653627529, 0.9858122591911017, 0.958974534903685, 0.9855380766224558, 0.9028298725175289, 0.9594429718704813, 0.9815862359052884, 0.9852181400260522, 0.9912025896468687, 0.09686412360945029, 0.14198088342514292, 0.07528629352514038, 0.0991239724487305, 0.102992302174297, 0.11209210490979726, 0.0758446728539025, 0.08988864789559159, 0.16418562580694163, 0.15464627971842315, 0.1719349497771665, 0.16946949712147708, 0.1872482174927933, 0.1948091931267827, 0.17987388283073036, 0.21944316224082572, 0.11481506559128996, 0.31003860907490144, 0.22219440213930886, 0.11112959266856537, 0.12388416595679752, 0.07471829429820176, 0.06508836179051469, 0.11508990772398775, 0.0927204237091882, 0.07942496397481913, 0.12975155346445122, 0.16098098411046868, 0.10000954728234535, 0.14127668629616563, 0.1424543871126005, 0.1422866487482104, 0.10426903970441614, 0.17196690059812048, 0.02519661253564287, 0.09755880248829907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0041414647066827515, 0.03197261892791359, 0.01144205937186471, 0.034539564745987406, 0.02414723703317756, 0.031080539968785903, 0.03895082644096837, 0.01606605277067852, 0.05875763565301417, 0.043265399459225584, 0.013441436681685848, 0.021921807896654877, 0.17039360879104992, 0.05288928346707622, 0.04728163597093682, 0.03570361827484447, 0.03439450226123186, 0.027403371318871717, 0.04582379865954156, 0.10136937182919115, 0.04772954695606202, 0.033067145302296375, 0.004983922121045925, 0.06537940645177132, 0.08477190717276184, 0.04901936022795783, 0.0746309718206043, 0.06596425845032095, 0.366332110846356, 0.4044270573060843, 0.32550901060147563, 0.41463777348278397, 0.4347333431762419, 0.2076652303437858, 0.3828760728137325, 0.43822717020481616, 0.42128816393155966, 0.0678867637580921, 0.06392346936999005, 0.07221433035844815, 0.07965033668759025, 0.071213308745533, 0.05377340600699665, 0.07961530122578553, 0.11151717499833835, 0.07347952546376657, 0.14224486717108265, 0.1706484405522789, 0.1316020545321931, 0.17152598526692198, 0.14060989378008693, 0.1242275420949236, 0.14623691219019597, 0.1824005515493815, 0.1338567654318118, 0.19639495031529042, 0.24724457600311622, 0.2509203482024345, 0.18584903103047357, 0.2715388818402189, 0.23325459717218977, 0.24654940160796546, 0.20824813037552992, 0.2596885556194889, 0.15326712881437865, 0.12597541710652627, 0.17373928463759936, 0.1609698779495844, 0.1598666738726946, 0.1715537494267776, 0.21282318050690452, 0.22365090933307807, 0.14775367057850786, 0.1880047334014887, 0.16035610218485707, 0.16683464047819052, 0.1607494416345755, 0.15911815227575676, 0.16218041875798406, 0.15068512717260452, 0.161064011581886, 0.16789719410995896, 0.1778871158950326, 0.16319487410353228, 0.17582783652448875, 0.19006518715106935, 0.1624741477588515, 0.1833563998750627, 0.18517025282883204, 0.16910416186579846, 0.16761212019359573, 0.1680152568731319, 0.1511920117317348, 0.18782750418445615, 0.1556394911716421, 0.18937792298972522, 0.14388386439451373, 0.14192406342051767, 0.1278196619135853, 0.5818588626589477, 0.23084670229476867, 0.20281437785647127, 0.22383062157705047, 0.22999287288235415, 0.20472600700166177, 0.1791553318959841, 0.18949244445676672, 0.20433879809942623, 0.14735401372219914, 0.19465020116427945, 0.1796900201335465, 0.1759838693400093, 0.17874264733901313, 0.18029519841564257, 0.2056154639652107, 0.1853502662266885, 0.20037102372990157, 0.18574997849811048, 0.05005602555609934, 0.05372722661616858, 0.051167708091167885, 0.08395006087467083, 0.06007613197806949, 0.054618408256417394, 0.06350399818839947, 0.06276141941311741, 0.0688923628567234]}, "mutation_prompt": null}
{"id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor dynamically based on function evaluations to better balance exploration and exploitation.", "configspace": "", "generation": 18, "fitness": 0.18266677834803252, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "1b0dc632-72cb-4d1d-93b1-de5e12cb0055", "metadata": {"aucs": [0.4586236101780258, 0.4930770353514866, 0.49788656856649227, 0.4854750308603105, 0.5540858156219834, 0.4090431503304125, 0.1737491593120618, 0.5391887386462118, 0.5741435357478307, 0.18312714940414176, 0.10738295583832624, 0.20171111486344606, 0.2299288349900539, 0.056875676919142304, 0.12233059600270868, 0.06876045043600221, 0.1953038417767402, 0.3062194517120419, 0.10725466013199769, 0.05682773150364295, 0.07999329270756206, 0.07455920839528207, 0.08576895511452698, 0.057421175226967214, 0.06619763442669424, 0.06527962172512125, 0.11234032464554333, 0.024506524195002766, 0.06166541065041531, 0.08400709630323777, 0.04853283102366679, 0.03209778126694951, 0.045276701736470915, 0.050999061753738695, 0.05056520054096236, 0.0515598456327776, 0.9743357279812056, 0.9858137078615576, 0.9589357822881478, 0.9855392688674628, 0.8991202460140129, 0.9594179047745611, 0.9815851565033492, 0.9852144643350744, 0.9912028446823005, 0.09686412360945029, 0.10650781209870797, 0.07562780874254549, 0.1384005889385369, 0.10369797895777522, 0.08548327773617725, 0.07642906738030997, 0.08133345181295792, 0.22252169108996622, 0.1581673369803035, 0.21604001683382834, 0.1831202407623056, 0.19122313949011327, 0.1801702090158802, 0.17714407951045763, 0.2135598874644733, 0.22521875110776912, 0.17961392371137042, 0.10154952742484968, 0.12037130485533976, 0.10570070862882841, 0.09477425721803678, 0.04596432234182524, 0.09926083472741343, 0.11779950369750836, 0.05833196178018918, 0.14660246311276226, 0.16138767415995448, 0.10688847238624621, 0.09505657660110411, 0.14917438009454786, 0.13596507580465567, 0.10208457108611724, 0.100386518588784, 0.09290762857361912, 0.1048208145310977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005546611128655732, 0.07087056305398143, 0.04648208879183713, 0.02240217804371314, 0.06671274698560825, 0.011582553654104433, 0.03434638100552678, 0.07446515280941168, 0.033093512058429364, 0.04147093094740262, 0.033804195488496, 9.999999999998899e-05, 0.025727138239213132, 0.026996218575098485, 0.07481828086373354, 0.05200767796502592, 0.02707046879992525, 0.05058679127628474, 0.03566016971104857, 0.09066748094578103, 0.13589115339872493, 0.03657769500515462, 0.1109720516673508, 0.03894529829466287, 0.06514509585646489, 0.04550804531535235, 0.05403704711057422, 0.05973077399920035, 0.3573676987045191, 0.39886783051202146, 0.3693250547625636, 0.40166800760124954, 0.36950507724806536, 0.2549647434233432, 0.40111789657778407, 0.34480386021706, 0.33070699992294417, 0.09101447234194493, 0.07060278226558692, 0.06360418904726828, 0.07500565803901349, 0.04315773219785424, 0.0570996359882302, 0.07648499953891463, 0.12166891875917996, 0.05504168981932578, 0.1366365426284365, 0.14580246033077915, 0.1365586276991657, 0.15670916972624982, 0.13093996988827727, 0.15727574229254293, 0.15985066143610782, 0.1289112925453102, 0.160965573894161, 0.2071373625849129, 0.2777772785100042, 0.22441533320344065, 0.18966535081519775, 0.21156366445012476, 0.22145033047809926, 0.28005371022717984, 0.32412372164570014, 0.2598864543290511, 0.18367920339889565, 0.24737399200668642, 0.15279541810556185, 0.11829639120350222, 0.1657896304198222, 0.17689952324621083, 0.18012225978263796, 0.18703111637962655, 0.15829250826222052, 0.18581743963251074, 0.18151877608177625, 0.17946956673976888, 0.16789801771183943, 0.16097534151852122, 0.17313218650821305, 0.1678176951843776, 0.16838221279961396, 0.16179743992079088, 0.16538366400588145, 0.176378820994894, 0.1732951052436269, 0.18445563104820695, 0.1628305399093326, 0.1744197223295454, 0.178667499643836, 0.1812288005750513, 0.17616975824797154, 0.19246811497599803, 0.25552638987922915, 0.19435607685715472, 0.22197165460477508, 0.18187512806488215, 0.1357607632159188, 0.14760092938074143, 0.15754414763321423, 0.5828557608154532, 0.23084670229476867, 0.16948676508142857, 0.1575767167304155, 0.11612265378221631, 0.19617073731373003, 0.14932345735598396, 0.20200129565824199, 0.20790012001737246, 0.18771822125923854, 0.1955662350787768, 0.18089343951960668, 0.16559193921647564, 0.1643977406834265, 0.16300157038842678, 0.1696570038447861, 0.16979618757115678, 0.1782784917969915, 0.17531708414755776, 0.05566410481932649, 0.07116281499029209, 0.05158060942592024, 0.09213389655454451, 0.06033995367672107, 0.06181835438441119, 0.05663806796673654, 0.06194702603331825, 0.05838605491103388]}, "mutation_prompt": null}
{"id": "21af2cb5-99d8-41df-8863-287f53748b26", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor dynamically based on function evaluations to better balance exploration and exploitation.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.4586236101780258, 0.4930770353514866, 0.49788656856649227, 0.4854750308603105, 0.5540858156219834, 0.4090431503304125, 0.1737491593120618, 0.5391887386462118, 0.5741435357478307, 0.18312714940414176, 0.10738295583832624, 0.20171111486344606, 0.2299288349900539, 0.056875676919142304, 0.12233059600270868, 0.06876045043600221, 0.1953038417767402, 0.3062194517120419, 0.10725466013199769, 0.05682773150364295, 0.07999329270756206, 0.07455920839528207, 0.08576895511452698, 0.057421175226967214, 0.06619763442669424, 0.06527962172512125, 0.11234032464554333, 0.024506524195002766, 0.06166541065041531, 0.08400709630323777, 0.04853283102366679, 0.03209778126694951, 0.045276701736470915, 0.050999061753738695, 0.05056520054096236, 0.0515598456327776, 0.9743357279812056, 0.9858137078615576, 0.9589357822881478, 0.9855392688674628, 0.8991202460140129, 0.9594179047745611, 0.9815851565033492, 0.9852144643350744, 0.9912028446823005, 0.09686412360945029, 0.10650781209870797, 0.07562780874254549, 0.1384005889385369, 0.10369797895777522, 0.08548327773617725, 0.07642906738030997, 0.08133345181295792, 0.22252169108996622, 0.1581673369803035, 0.21604001683382834, 0.1831202407623056, 0.19122313949011327, 0.1801702090158802, 0.17714407951045763, 0.2135598874644733, 0.22521875110776912, 0.17961392371137042, 0.10154952742484968, 0.12037130485533976, 0.10570070862882841, 0.09477425721803678, 0.04596432234182524, 0.09926083472741343, 0.11779950369750836, 0.05833196178018918, 0.14660246311276226, 0.16138767415995448, 0.10688847238624621, 0.09505657660110411, 0.14917438009454786, 0.13596507580465567, 0.10208457108611724, 0.100386518588784, 0.09290762857361912, 0.1048208145310977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005546611128655732, 0.07087056305398143, 0.04648208879183713, 0.02240217804371314, 0.06671274698560825, 0.011582553654104433, 0.03434638100552678, 0.07446515280941168, 0.033093512058429364, 0.04147093094740262, 0.033804195488496, 9.999999999998899e-05, 0.025727138239213132, 0.026996218575098485, 0.07481828086373354, 0.05200767796502592, 0.02707046879992525, 0.05058679127628474, 0.03566016971104857, 0.09066748094578103, 0.13589115339872493, 0.03657769500515462, 0.1109720516673508, 0.03894529829466287, 0.06514509585646489, 0.04550804531535235, 0.05403704711057422, 0.05973077399920035, 0.3573676987045191, 0.39886783051202146, 0.3693250547625636, 0.40166800760124954, 0.36950507724806536, 0.2549647434233432, 0.40111789657778407, 0.34480386021706, 0.33070699992294417, 0.09101447234194493, 0.07060278226558692, 0.06360418904726828, 0.07500565803901349, 0.04315773219785424, 0.0570996359882302, 0.07648499953891463, 0.12166891875917996, 0.05504168981932578, 0.1366365426284365, 0.14580246033077915, 0.1365586276991657, 0.15670916972624982, 0.13093996988827727, 0.15727574229254293, 0.15985066143610782, 0.1289112925453102, 0.160965573894161, 0.2071373625849129, 0.2777772785100042, 0.22441533320344065, 0.18966535081519775, 0.21156366445012476, 0.22145033047809926, 0.28005371022717984, 0.32412372164570014, 0.2598864543290511, 0.18367920339889565, 0.24737399200668642, 0.15279541810556185, 0.11829639120350222, 0.1657896304198222, 0.17689952324621083, 0.18012225978263796, 0.18703111637962655, 0.15829250826222052, 0.18581743963251074, 0.18151877608177625, 0.17946956673976888, 0.16789801771183943, 0.16097534151852122, 0.17313218650821305, 0.1678176951843776, 0.16838221279961396, 0.16179743992079088, 0.16538366400588145, 0.176378820994894, 0.1732951052436269, 0.18445563104820695, 0.1628305399093326, 0.1744197223295454, 0.178667499643836, 0.1812288005750513, 0.17616975824797154, 0.19246811497599803, 0.25552638987922915, 0.19435607685715472, 0.22197165460477508, 0.18187512806488215, 0.1357607632159188, 0.14760092938074143, 0.15754414763321423, 0.5828557608154532, 0.23084670229476867, 0.16948676508142857, 0.1575767167304155, 0.11612265378221631, 0.19617073731373003, 0.14932345735598396, 0.20200129565824199, 0.20790012001737246, 0.18771822125923854, 0.1955662350787768, 0.18089343951960668, 0.16559193921647564, 0.1643977406834265, 0.16300157038842678, 0.1696570038447861, 0.16979618757115678, 0.1782784917969915, 0.17531708414755776, 0.05566410481932649, 0.07116281499029209, 0.05158060942592024, 0.09213389655454451, 0.06033995367672107, 0.06181835438441119, 0.05663806796673654, 0.06194702603331825, 0.05838605491103388]}, "mutation_prompt": null}
{"id": "23fb0445-f2f0-4e9f-8da5-d3e105fbd9ed", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.6  # cognitive component\n        self.c2 = 1.6  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Slightly increased the cognitive and social components to enhance exploration and convergence rates.", "configspace": "", "generation": 20, "fitness": 0.1710559592851227, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.3919599316202764, 0.4774473864694577, 0.47529031874168615, 0.442480906166297, 0.48975429499063916, 0.34970555212246, 0.4072367800792326, 0.4497049252165618, 0.581746257735503, 0.14131312448404276, 0.12283592287080647, 0.12046127452732724, 0.06958416267524825, 0.07590012133255353, 0.014251231689109911, 0.09440373419211379, 0.03718612779634933, 0.00018134888739462784, 0.10448355571892876, 0.10722404058227586, 0.06635888422780989, 0.07895887883633457, 0.07102597747197992, 0.05414100378393705, 0.07230858782521843, 0.10397419011160403, 0.0697156456608784, 0.08204616919388663, 0.04234124003997475, 0.07412846950732477, 0.054659850008320965, 0.032116381889238044, 0.03729448756709641, 0.0685518958187864, 0.035413785507837026, 0.055192701615129014, 0.9763402114767399, 0.9859268389411396, 0.9851525189352477, 0.9856445469702868, 0.9696440114406539, 0.9578558624040893, 0.9816446154053036, 0.9851895157583062, 0.9922352489551368, 0.11254607640701453, 0.10381385874500304, 0.09841361159916273, 0.07906796333052224, 0.09973486211919003, 0.08478330205326579, 0.05062012864943921, 0.07836605391442009, 0.11965582004354292, 0.1927209980026936, 0.18564246820248687, 0.1319847131130376, 0.18020119325598316, 0.13701235526449618, 0.15866457794960676, 0.15914031225521919, 0.1449563193725668, 0.18248477428230703, 0.11221385337011214, 0.06695546767757732, 0.07061458295468293, 0.00507203757184338, 0.10251136329097732, 0.11934000650601684, 0.12278786990612789, 0.08158424425338584, 0.09854047327604143, 0.1537498275625463, 0.10443939098552013, 0.04434951016383892, 0.11542334702636947, 0.10118102079195468, 0.1274161454824989, 0.11924511533809179, 0.027997223389501724, 0.07752703416463558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008083312791819841, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07650147165770982, 0.02430996128935692, 0.03098302800540731, 0.022516338099116906, 0.08236768100695246, 0.055710541094830424, 0.04282766452977027, 0.024488612216909678, 0.03837426046448855, 0.03869837358615402, 0.06403896390813768, 0.026832721467592968, 0.0024782873423904173, 0.003686007699731819, 0.015800055416026804, 0.040109908321512955, 0.010937610445945434, 0.0276752130836474, 0.06509974866711943, 0.05214421817917414, 0.013992683717963361, 0.13648957704898512, 0.04683344917812082, 0.004613495980531845, 0.04132002530419854, 0.04273396763389192, 0.05062940753414591, 0.338328036996392, 0.3611821250139111, 0.33463030580435327, 0.38195658763607065, 0.3381126995596193, 0.336449165629207, 0.4083712129111041, 0.35335456117819153, 0.3199193543713562, 0.08146708788545787, 0.07526458339013442, 0.059779845295085066, 0.06843813607293303, 0.0618311252537862, 0.06807102418161814, 0.05969806621861484, 0.06896897125454493, 0.06409434669550029, 0.13916566887060344, 0.14502687819479143, 0.14342688076915056, 0.13549675153707852, 0.15082026821906547, 0.11889188645076432, 0.13201511567519397, 0.15742860104096001, 0.14489292559743172, 0.2284385307216351, 0.19205481602478935, 0.25942766295342345, 0.26823702479031497, 0.16706053681255328, 0.16722228614235501, 0.20145374274907712, 0.2985238638672706, 0.22709263983357364, 0.2048437715575464, 0.15957838003075653, 0.2062051297914873, 0.16469927607980117, 0.16990855133606253, 0.17399201043857793, 0.2191350731649505, 0.20580354694619207, 0.20586444786716618, 0.1525242200228758, 0.17068176338719843, 0.16298574925652487, 0.17727428190789418, 0.17142699547198026, 0.161768632991925, 0.18237353447996263, 0.17538699777069156, 0.1964463511990423, 0.16443685211397896, 0.1905890202838587, 0.15817119357961962, 0.18166209753267337, 0.17391272547058, 0.16637239735574494, 0.14821642193730566, 0.1803481076548562, 0.1834971709582982, 0.1738916598110838, 0.15012121763328834, 0.16673486503112223, 0.2116317451928219, 0.1950734465080487, 0.16833954385379346, 0.14145536414400162, 0.17800880214859027, 0.19748674370494024, 0.22439095356844696, 0.1961564129601785, 0.13963931006248653, 0.14639265784814703, 0.17558321821919454, 0.13752941628956816, 0.1984451993887808, 0.19836753575015476, 0.19848878994448738, 0.17403464271614544, 0.18278453313954746, 0.17313679969622686, 0.16179048649104733, 0.17679670114925594, 0.18117833064775046, 0.1925292712080504, 0.18171874749743389, 0.18010444919481816, 0.0435503369499054, 0.04155191222655463, 0.05446535017253862, 0.058778145342279875, 0.05800985936475156, 0.04330083739534751, 0.051180916220367134, 0.058585520821975656, 0.05930846191407835]}, "mutation_prompt": null}
{"id": "73550d86-18a0-4662-8905-000ab3a5643f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor dynamically based on function evaluations to better balance exploration and exploitation.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.4586236101780258, 0.4930770353514866, 0.49788656856649227, 0.4854750308603105, 0.5540858156219834, 0.4090431503304125, 0.1737491593120618, 0.5391887386462118, 0.5741435357478307, 0.18312714940414176, 0.10738295583832624, 0.20171111486344606, 0.2299288349900539, 0.056875676919142304, 0.12233059600270868, 0.06876045043600221, 0.1953038417767402, 0.3062194517120419, 0.10725466013199769, 0.05682773150364295, 0.07999329270756206, 0.07455920839528207, 0.08576895511452698, 0.057421175226967214, 0.06619763442669424, 0.06527962172512125, 0.11234032464554333, 0.024506524195002766, 0.06166541065041531, 0.08400709630323777, 0.04853283102366679, 0.03209778126694951, 0.045276701736470915, 0.050999061753738695, 0.05056520054096236, 0.0515598456327776, 0.9743357279812056, 0.9858137078615576, 0.9589357822881478, 0.9855392688674628, 0.8991202460140129, 0.9594179047745611, 0.9815851565033492, 0.9852144643350744, 0.9912028446823005, 0.09686412360945029, 0.10650781209870797, 0.07562780874254549, 0.1384005889385369, 0.10369797895777522, 0.08548327773617725, 0.07642906738030997, 0.08133345181295792, 0.22252169108996622, 0.1581673369803035, 0.21604001683382834, 0.1831202407623056, 0.19122313949011327, 0.1801702090158802, 0.17714407951045763, 0.2135598874644733, 0.22521875110776912, 0.17961392371137042, 0.10154952742484968, 0.12037130485533976, 0.10570070862882841, 0.09477425721803678, 0.04596432234182524, 0.09926083472741343, 0.11779950369750836, 0.05833196178018918, 0.14660246311276226, 0.16138767415995448, 0.10688847238624621, 0.09505657660110411, 0.14917438009454786, 0.13596507580465567, 0.10208457108611724, 0.100386518588784, 0.09290762857361912, 0.1048208145310977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005546611128655732, 0.07087056305398143, 0.04648208879183713, 0.02240217804371314, 0.06671274698560825, 0.011582553654104433, 0.03434638100552678, 0.07446515280941168, 0.033093512058429364, 0.04147093094740262, 0.033804195488496, 9.999999999998899e-05, 0.025727138239213132, 0.026996218575098485, 0.07481828086373354, 0.05200767796502592, 0.02707046879992525, 0.05058679127628474, 0.03566016971104857, 0.09066748094578103, 0.13589115339872493, 0.03657769500515462, 0.1109720516673508, 0.03894529829466287, 0.06514509585646489, 0.04550804531535235, 0.05403704711057422, 0.05973077399920035, 0.3573676987045191, 0.39886783051202146, 0.3693250547625636, 0.40166800760124954, 0.36950507724806536, 0.2549647434233432, 0.40111789657778407, 0.34480386021706, 0.33070699992294417, 0.09101447234194493, 0.07060278226558692, 0.06360418904726828, 0.07500565803901349, 0.04315773219785424, 0.0570996359882302, 0.07648499953891463, 0.12166891875917996, 0.05504168981932578, 0.1366365426284365, 0.14580246033077915, 0.1365586276991657, 0.15670916972624982, 0.13093996988827727, 0.15727574229254293, 0.15985066143610782, 0.1289112925453102, 0.160965573894161, 0.2071373625849129, 0.2777772785100042, 0.22441533320344065, 0.18966535081519775, 0.21156366445012476, 0.22145033047809926, 0.28005371022717984, 0.32412372164570014, 0.2598864543290511, 0.18367920339889565, 0.24737399200668642, 0.15279541810556185, 0.11829639120350222, 0.1657896304198222, 0.17689952324621083, 0.18012225978263796, 0.18703111637962655, 0.15829250826222052, 0.18581743963251074, 0.18151877608177625, 0.17946956673976888, 0.16789801771183943, 0.16097534151852122, 0.17313218650821305, 0.1678176951843776, 0.16838221279961396, 0.16179743992079088, 0.16538366400588145, 0.176378820994894, 0.1732951052436269, 0.18445563104820695, 0.1628305399093326, 0.1744197223295454, 0.178667499643836, 0.1812288005750513, 0.17616975824797154, 0.19246811497599803, 0.25552638987922915, 0.19435607685715472, 0.22197165460477508, 0.18187512806488215, 0.1357607632159188, 0.14760092938074143, 0.15754414763321423, 0.5828557608154532, 0.23084670229476867, 0.16948676508142857, 0.1575767167304155, 0.11612265378221631, 0.19617073731373003, 0.14932345735598396, 0.20200129565824199, 0.20790012001737246, 0.18771822125923854, 0.1955662350787768, 0.18089343951960668, 0.16559193921647564, 0.1643977406834265, 0.16300157038842678, 0.1696570038447861, 0.16979618757115678, 0.1782784917969915, 0.17531708414755776, 0.05566410481932649, 0.07116281499029209, 0.05158060942592024, 0.09213389655454451, 0.06033995367672107, 0.06181835438441119, 0.05663806796673654, 0.06194702603331825, 0.05838605491103388]}, "mutation_prompt": null}
{"id": "8d7574c1-1e18-4b96-991a-2727b8632b03", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.w = 0.9 - (self.func_evals / self.budget) * 0.5  # Linearly decreasing inertia weight\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduced a linearly decreasing inertia weight to improve the exploration-exploitation balance over iterations.", "configspace": "", "generation": 22, "fitness": 0.17386676580347663, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.4669056197627167, 0.43459857758610265, 0.4566346869365838, 0.48954284507049284, 0.43864378037583074, 0.4957852203493184, 0.17103253643933491, 0.4018196899041816, 0.17778719360383588, 0.2746516145420713, 0.02095920750787794, 0.2119314641879455, 0.22648327941768098, 0.24779853563982002, 0.19742035000993619, 0.20410503200699615, 0.20618202345855252, 0.03174888588420144, 0.07375730516268086, 0.08026810888351588, 0.06705971884918815, 0.06886272742801225, 0.05854462693167184, 0.06055232425886736, 0.09290706034730778, 0.06966875643221027, 0.057215609259996913, 0.04575975154543943, 0.04344884014248995, 0.05038631437368235, 0.06707208779207408, 0.04718437753277649, 0.031036050016223782, 0.1172409732419959, 0.054611082511520914, 0.04305903056315108, 0.9732562248980484, 0.9869736316579516, 0.9519758222271684, 0.9869180983006094, 0.9551242305502536, 0.9541222057626906, 0.9800503136967935, 0.9864096494721813, 0.99221516990561, 0.10886044991491761, 0.10041406363102501, 0.09470162586173314, 0.09594716338289233, 0.05276556851614356, 0.08994908548270342, 0.049209816718715604, 0.07919709200779201, 0.13839607491207973, 0.19757612175765915, 0.16845727862282767, 0.2370554019889316, 0.20134310672502242, 0.3987940541221987, 0.16690502138754237, 0.18680469350499884, 0.147442873673565, 0.25700310134285387, 0.13479708952913683, 0.07060785686435278, 0.08186384796275725, 0.08171686655848132, 0.08738627500864349, 0.08457084561197104, 0.09929233285495698, 0.08009078125649571, 0.06980820354194128, 0.03802107408579125, 0.018943613307204732, 0.013737959771531694, 0.10805884415334677, 0.09856795754491199, 0.08012150969823728, 0.09367150517338518, 0.05923344441062495, 0.08102875232833173, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021649251372871214, 0.036368035063131576, 0.013229972060496809, 0.043382217662323974, 0.022339433957947907, 9.999999999998899e-05, 0.03203044701357827, 0.028692368495715326, 0.020579267139270607, 0.0620880711031121, 0.013422660798484531, 9.999999999998899e-05, 0.006928867102866554, 0.047834525222510305, 0.051609447279405085, 0.022084028776264808, 0.03467252987594871, 0.04068057432427852, 0.026211553383266972, 0.06175426523736438, 0.02717777412356459, 0.06764984069546476, 0.03857094531824845, 0.05170907992398677, 0.06981842440753916, 0.05183835436551543, 9.999999999998899e-05, 0.03528872620411383, 0.3541325855108657, 0.30915876527936215, 0.33791965375528166, 0.3590249281713487, 0.3300563491023678, 0.3828625755701205, 0.36725418633287266, 0.33036064906400464, 0.3060245538835179, 0.1010587791013775, 0.08100087890001995, 0.07166709012244099, 0.07011120362611878, 0.071946400072193, 0.06877314486757424, 0.07450038777632706, 0.07904310834455686, 0.06980968447409486, 0.1574163314302628, 0.14141649128938083, 0.1419794143973253, 0.13576460145745983, 0.13582162841178802, 0.14088579820593472, 0.13802344143797052, 0.13042824839718759, 0.14078318667813583, 0.21667887495236438, 0.2341302791427775, 0.21872487037006472, 0.20677041697149612, 0.23985419894358562, 0.2216272466563417, 0.25691984344223806, 0.27573958761044004, 0.20603159164939056, 0.16986268789475834, 0.15852768311258691, 0.17558741760627794, 0.1486501345377863, 0.15718718637724705, 0.14829099060494266, 0.1660085501861942, 0.21627310524526822, 0.10620345575979884, 0.15954592624915964, 0.17438745250035337, 0.16203442993759687, 0.1692057950350765, 0.15145398285013, 0.15013805738045105, 0.1719071178180307, 0.17224641305370847, 0.15138852944098014, 0.12090510512484565, 0.1804828867571039, 0.16578353723748662, 0.18366516941286182, 0.1647933920618292, 0.1650474578880763, 0.18048034400357338, 0.16551192066005493, 0.1898811005174189, 0.4564854909388527, 0.14381272462614125, 0.13982764211847187, 0.28840055084360905, 0.3986295146874371, 0.14887846701179752, 0.1709340029012565, 0.1694177675890729, 0.17869683781519274, 0.27325446176111845, 0.16769678895588536, 0.15085022757756938, 0.1092807191020786, 0.1774759334842403, 0.15646979339919165, 0.19846340055678136, 0.18725703069060418, 0.25483178351835445, 0.17818654676747336, 0.1683147957241481, 0.17672391411134414, 0.18456372807825905, 0.18654195967055642, 0.17890918843999826, 0.1832538035182959, 0.17346956411905956, 0.18014171178715277, 0.06907098499359376, 0.05168213248725628, 0.05968353888508571, 0.06599730838572326, 0.05413109008782502, 0.057189590831068005, 0.05068265293062324, 0.05127581274416548, 0.05482649920892346]}, "mutation_prompt": null}
{"id": "bc18cc2d-3904-4143-a349-844a8cb091c5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor dynamically based on function evaluations to better balance exploration and exploitation.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.4586236101780258, 0.4930770353514866, 0.49788656856649227, 0.4854750308603105, 0.5540858156219834, 0.4090431503304125, 0.1737491593120618, 0.5391887386462118, 0.5741435357478307, 0.18312714940414176, 0.10738295583832624, 0.20171111486344606, 0.2299288349900539, 0.056875676919142304, 0.12233059600270868, 0.06876045043600221, 0.1953038417767402, 0.3062194517120419, 0.10725466013199769, 0.05682773150364295, 0.07999329270756206, 0.07455920839528207, 0.08576895511452698, 0.057421175226967214, 0.06619763442669424, 0.06527962172512125, 0.11234032464554333, 0.024506524195002766, 0.06166541065041531, 0.08400709630323777, 0.04853283102366679, 0.03209778126694951, 0.045276701736470915, 0.050999061753738695, 0.05056520054096236, 0.0515598456327776, 0.9743357279812056, 0.9858137078615576, 0.9589357822881478, 0.9855392688674628, 0.8991202460140129, 0.9594179047745611, 0.9815851565033492, 0.9852144643350744, 0.9912028446823005, 0.09686412360945029, 0.10650781209870797, 0.07562780874254549, 0.1384005889385369, 0.10369797895777522, 0.08548327773617725, 0.07642906738030997, 0.08133345181295792, 0.22252169108996622, 0.1581673369803035, 0.21604001683382834, 0.1831202407623056, 0.19122313949011327, 0.1801702090158802, 0.17714407951045763, 0.2135598874644733, 0.22521875110776912, 0.17961392371137042, 0.10154952742484968, 0.12037130485533976, 0.10570070862882841, 0.09477425721803678, 0.04596432234182524, 0.09926083472741343, 0.11779950369750836, 0.05833196178018918, 0.14660246311276226, 0.16138767415995448, 0.10688847238624621, 0.09505657660110411, 0.14917438009454786, 0.13596507580465567, 0.10208457108611724, 0.100386518588784, 0.09290762857361912, 0.1048208145310977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005546611128655732, 0.07087056305398143, 0.04648208879183713, 0.02240217804371314, 0.06671274698560825, 0.011582553654104433, 0.03434638100552678, 0.07446515280941168, 0.033093512058429364, 0.04147093094740262, 0.033804195488496, 9.999999999998899e-05, 0.025727138239213132, 0.026996218575098485, 0.07481828086373354, 0.05200767796502592, 0.02707046879992525, 0.05058679127628474, 0.03566016971104857, 0.09066748094578103, 0.13589115339872493, 0.03657769500515462, 0.1109720516673508, 0.03894529829466287, 0.06514509585646489, 0.04550804531535235, 0.05403704711057422, 0.05973077399920035, 0.3573676987045191, 0.39886783051202146, 0.3693250547625636, 0.40166800760124954, 0.36950507724806536, 0.2549647434233432, 0.40111789657778407, 0.34480386021706, 0.33070699992294417, 0.09101447234194493, 0.07060278226558692, 0.06360418904726828, 0.07500565803901349, 0.04315773219785424, 0.0570996359882302, 0.07648499953891463, 0.12166891875917996, 0.05504168981932578, 0.1366365426284365, 0.14580246033077915, 0.1365586276991657, 0.15670916972624982, 0.13093996988827727, 0.15727574229254293, 0.15985066143610782, 0.1289112925453102, 0.160965573894161, 0.2071373625849129, 0.2777772785100042, 0.22441533320344065, 0.18966535081519775, 0.21156366445012476, 0.22145033047809926, 0.28005371022717984, 0.32412372164570014, 0.2598864543290511, 0.18367920339889565, 0.24737399200668642, 0.15279541810556185, 0.11829639120350222, 0.1657896304198222, 0.17689952324621083, 0.18012225978263796, 0.18703111637962655, 0.15829250826222052, 0.18581743963251074, 0.18151877608177625, 0.17946956673976888, 0.16789801771183943, 0.16097534151852122, 0.17313218650821305, 0.1678176951843776, 0.16838221279961396, 0.16179743992079088, 0.16538366400588145, 0.176378820994894, 0.1732951052436269, 0.18445563104820695, 0.1628305399093326, 0.1744197223295454, 0.178667499643836, 0.1812288005750513, 0.17616975824797154, 0.19246811497599803, 0.25552638987922915, 0.19435607685715472, 0.22197165460477508, 0.18187512806488215, 0.1357607632159188, 0.14760092938074143, 0.15754414763321423, 0.5828557608154532, 0.23084670229476867, 0.16948676508142857, 0.1575767167304155, 0.11612265378221631, 0.19617073731373003, 0.14932345735598396, 0.20200129565824199, 0.20790012001737246, 0.18771822125923854, 0.1955662350787768, 0.18089343951960668, 0.16559193921647564, 0.1643977406834265, 0.16300157038842678, 0.1696570038447861, 0.16979618757115678, 0.1782784917969915, 0.17531708414755776, 0.05566410481932649, 0.07116281499029209, 0.05158060942592024, 0.09213389655454451, 0.06033995367672107, 0.06181835438441119, 0.05663806796673654, 0.06194702603331825, 0.05838605491103388]}, "mutation_prompt": null}
{"id": "b7c03ed8-2bb8-4012-9fdc-80aeeb9e3f8c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Introduced adaptive inertia weight\n                self.w = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduced adaptive inertia mechanism to better control exploration and exploitation balance in PSO.", "configspace": "", "generation": 24, "fitness": 0.17386676580347663, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.4669056197627167, 0.43459857758610265, 0.4566346869365838, 0.48954284507049284, 0.43864378037583074, 0.4957852203493184, 0.17103253643933491, 0.4018196899041816, 0.17778719360383588, 0.2746516145420713, 0.02095920750787794, 0.2119314641879455, 0.22648327941768098, 0.24779853563982002, 0.19742035000993619, 0.20410503200699615, 0.20618202345855252, 0.03174888588420144, 0.07375730516268086, 0.08026810888351588, 0.06705971884918815, 0.06886272742801225, 0.05854462693167184, 0.06055232425886736, 0.09290706034730778, 0.06966875643221027, 0.057215609259996913, 0.04575975154543943, 0.04344884014248995, 0.05038631437368235, 0.06707208779207408, 0.04718437753277649, 0.031036050016223782, 0.1172409732419959, 0.054611082511520914, 0.04305903056315108, 0.9732562248980484, 0.9869736316579516, 0.9519758222271684, 0.9869180983006094, 0.9551242305502536, 0.9541222057626906, 0.9800503136967935, 0.9864096494721813, 0.99221516990561, 0.10886044991491761, 0.10041406363102501, 0.09470162586173314, 0.09594716338289233, 0.05276556851614356, 0.08994908548270342, 0.049209816718715604, 0.07919709200779201, 0.13839607491207973, 0.19757612175765915, 0.16845727862282767, 0.2370554019889316, 0.20134310672502242, 0.3987940541221987, 0.16690502138754237, 0.18680469350499884, 0.147442873673565, 0.25700310134285387, 0.13479708952913683, 0.07060785686435278, 0.08186384796275725, 0.08171686655848132, 0.08738627500864349, 0.08457084561197104, 0.09929233285495698, 0.08009078125649571, 0.06980820354194128, 0.03802107408579125, 0.018943613307204732, 0.013737959771531694, 0.10805884415334677, 0.09856795754491199, 0.08012150969823728, 0.09367150517338518, 0.05923344441062495, 0.08102875232833173, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021649251372871214, 0.036368035063131576, 0.013229972060496809, 0.043382217662323974, 0.022339433957947907, 9.999999999998899e-05, 0.03203044701357827, 0.028692368495715326, 0.020579267139270607, 0.0620880711031121, 0.013422660798484531, 9.999999999998899e-05, 0.006928867102866554, 0.047834525222510305, 0.051609447279405085, 0.022084028776264808, 0.03467252987594871, 0.04068057432427852, 0.026211553383266972, 0.06175426523736438, 0.02717777412356459, 0.06764984069546476, 0.03857094531824845, 0.05170907992398677, 0.06981842440753916, 0.05183835436551543, 9.999999999998899e-05, 0.03528872620411383, 0.3541325855108657, 0.30915876527936215, 0.33791965375528166, 0.3590249281713487, 0.3300563491023678, 0.3828625755701205, 0.36725418633287266, 0.33036064906400464, 0.3060245538835179, 0.1010587791013775, 0.08100087890001995, 0.07166709012244099, 0.07011120362611878, 0.071946400072193, 0.06877314486757424, 0.07450038777632706, 0.07904310834455686, 0.06980968447409486, 0.1574163314302628, 0.14141649128938083, 0.1419794143973253, 0.13576460145745983, 0.13582162841178802, 0.14088579820593472, 0.13802344143797052, 0.13042824839718759, 0.14078318667813583, 0.21667887495236438, 0.2341302791427775, 0.21872487037006472, 0.20677041697149612, 0.23985419894358562, 0.2216272466563417, 0.25691984344223806, 0.27573958761044004, 0.20603159164939056, 0.16986268789475834, 0.15852768311258691, 0.17558741760627794, 0.1486501345377863, 0.15718718637724705, 0.14829099060494266, 0.1660085501861942, 0.21627310524526822, 0.10620345575979884, 0.15954592624915964, 0.17438745250035337, 0.16203442993759687, 0.1692057950350765, 0.15145398285013, 0.15013805738045105, 0.1719071178180307, 0.17224641305370847, 0.15138852944098014, 0.12090510512484565, 0.1804828867571039, 0.16578353723748662, 0.18366516941286182, 0.1647933920618292, 0.1650474578880763, 0.18048034400357338, 0.16551192066005493, 0.1898811005174189, 0.4564854909388527, 0.14381272462614125, 0.13982764211847187, 0.28840055084360905, 0.3986295146874371, 0.14887846701179752, 0.1709340029012565, 0.1694177675890729, 0.17869683781519274, 0.27325446176111845, 0.16769678895588536, 0.15085022757756938, 0.1092807191020786, 0.1774759334842403, 0.15646979339919165, 0.19846340055678136, 0.18725703069060418, 0.25483178351835445, 0.17818654676747336, 0.1683147957241481, 0.17672391411134414, 0.18456372807825905, 0.18654195967055642, 0.17890918843999826, 0.1832538035182959, 0.17346956411905956, 0.18014171178715277, 0.06907098499359376, 0.05168213248725628, 0.05968353888508571, 0.06599730838572326, 0.05413109008782502, 0.057189590831068005, 0.05068265293062324, 0.05127581274416548, 0.05482649920892346]}, "mutation_prompt": null}
{"id": "19f3f7e5-4fb1-42f2-8bf4-65a8a8b6c958", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.7 * (self.func_evals / self.budget))  # More aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced exploration by adjusting the dynamic DE scaling factor using a more aggressive decrement.", "configspace": "", "generation": 25, "fitness": 0.17809543086612928, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.436870574133823, 0.4624399702547076, 0.5469209806889822, 0.5141132049639505, 0.4233418837294728, 0.4361161281004473, 0.17379979936100876, 0.40208287409479304, 0.5499314084363616, 0.13959733741914493, 0.1180416665003422, 0.1871583388096798, 0.22490994401669617, 0.12759431818913458, 0.030789895620543906, 0.26000278075827044, 0.03801613775085644, 0.03937616878833683, 0.11182614006335512, 0.10504272338036813, 0.089187544180106, 0.06132718885163779, 0.10540764672784608, 0.06337277695326249, 0.07017964013440847, 0.09074835275028703, 0.10745938542493716, 0.022379820385331595, 0.04001967886708968, 0.11131259993310993, 0.06657587663942977, 0.06056647647407121, 0.08673114619426436, 0.050028267051410835, 0.0865983808115185, 0.03898684925965701, 0.9743340468995547, 0.9858142889599438, 0.9589224799314099, 0.9855397470048135, 0.8959340386173001, 0.9594097207526231, 0.9815847260531787, 0.9852130134547412, 0.9912029470469592, 0.10803469555698009, 0.10124786361738247, 0.07485488944677743, 0.12127269307831245, 0.09715279673561505, 0.10637431243693096, 0.07834884110818308, 0.07559489049391355, 0.10075768638054616, 0.15861729253681678, 0.1696969371508621, 0.16699390231688527, 0.1951178488545232, 0.23774684623684994, 0.19257163738144634, 0.18714630156038115, 0.18541747138177012, 0.15383437678064038, 0.11897729273363278, 0.13542951744776677, 0.11907108251931275, 0.09050537635309797, 0.07849796352305927, 0.06795124430310373, 0.09403328565463165, 0.12202794649106241, 0.13274488346674262, 0.12951082774922107, 0.01891987066735279, 0.09162185357495434, 0.11206063113852216, 0.1087473495272896, 0.1123697597065828, 0.13355354642801487, 0.03450436907945964, 0.06119661198279791, 9.999999999998899e-05, 0.0013847919919540708, 9.999999999998899e-05, 0.00011559671972605212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023085019669586426, 9.999999999998899e-05, 0.06143450248283955, 0.047030986381865314, 0.048553086379321764, 0.05937777822928747, 0.011297603747591367, 0.04774725432302296, 0.019419721222608155, 0.12036231906363715, 0.029072909907770228, 0.02165825559244916, 9.999999999998899e-05, 0.03352571778294755, 0.04016861857341614, 0.007319059487078228, 0.02519471336018908, 0.021736890152632027, 0.013788029947798153, 0.0465758673194987, 0.08721640605549452, 0.1045777652417692, 0.03172778930296738, 0.06092796220868002, 0.0860590309507121, 0.13010305259535615, 0.05124941455428966, 0.04840159579591696, 0.06231467692606041, 0.38638654016521423, 0.4006186968146085, 0.37568081365539197, 0.3396724339389964, 0.386861586307379, 0.2066377796512605, 0.4132552922330376, 0.31077096810572213, 0.36397835485447316, 0.07493734349653536, 0.06940238666160825, 0.06255101804426522, 0.06619208457290437, 0.07413323476621192, 0.06483839360500554, 0.09149076460838224, 0.07278083080867004, 0.10996199619052383, 0.13904142833911115, 0.14427660024830224, 0.13543056677534138, 0.13187125668941824, 0.13259225391457075, 0.15692492097341315, 0.1768975991093812, 0.13401693531017156, 0.17797097851228105, 0.21568399982801234, 0.2683807887287226, 0.21819238249844675, 0.24057973409287559, 0.17187518300736415, 0.22640304909950937, 0.265428904235931, 0.2862469810713948, 0.25930228935167554, 0.18451344759017163, 0.1945902464411663, 0.15712690322553935, 0.10888608178747305, 0.1638015825036273, 0.18690990507203675, 0.13779108945671847, 0.16406794508704492, 0.17258920109206122, 0.1817201777393832, 0.17723889020185157, 0.16146876657349618, 0.16019674112011595, 0.16226010932568824, 0.155270861160003, 0.15603525669907392, 0.18005054198365467, 0.1584423592168106, 0.1718335951442005, 0.18040248178912532, 0.15990956181490767, 0.18175278142218854, 0.16696496657588322, 0.1644108685177078, 0.17554840404605898, 0.17531385307022507, 0.1736811466277366, 0.20227981375675008, 0.21911120878806467, 0.18827403196568437, 0.14748807398767383, 0.18485573267976996, 0.14249473592514927, 0.1804100824262438, 0.1277581371331069, 0.5358106309704198, 0.24521951390682617, 0.19343071466862216, 0.1508035790860004, 0.15580519564281226, 0.2050668246383961, 0.14987555272678832, 0.20312440058701686, 0.20456218448633845, 0.208886835293004, 0.18223447333815235, 0.17788850378560817, 0.18588721577013734, 0.19013046410506163, 0.18167540662157222, 0.1809235357162382, 0.19315014114058515, 0.18286513237119417, 0.1759460922107945, 0.07194063400916895, 0.056445877236862674, 0.04746393384211389, 0.05585436661032639, 0.05383611164380997, 0.05200508727480824, 0.06306348424586428, 0.06110025818569775, 0.05623745667276159]}, "mutation_prompt": null}
{"id": "972a1f76-8a8f-4a71-a39a-91dcdef407ab", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor dynamically based on function evaluations to better balance exploration and exploitation.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.4586236101780258, 0.4930770353514866, 0.49788656856649227, 0.4854750308603105, 0.5540858156219834, 0.4090431503304125, 0.1737491593120618, 0.5391887386462118, 0.5741435357478307, 0.18312714940414176, 0.10738295583832624, 0.20171111486344606, 0.2299288349900539, 0.056875676919142304, 0.12233059600270868, 0.06876045043600221, 0.1953038417767402, 0.3062194517120419, 0.10725466013199769, 0.05682773150364295, 0.07999329270756206, 0.07455920839528207, 0.08576895511452698, 0.057421175226967214, 0.06619763442669424, 0.06527962172512125, 0.11234032464554333, 0.024506524195002766, 0.06166541065041531, 0.08400709630323777, 0.04853283102366679, 0.03209778126694951, 0.045276701736470915, 0.050999061753738695, 0.05056520054096236, 0.0515598456327776, 0.9743357279812056, 0.9858137078615576, 0.9589357822881478, 0.9855392688674628, 0.8991202460140129, 0.9594179047745611, 0.9815851565033492, 0.9852144643350744, 0.9912028446823005, 0.09686412360945029, 0.10650781209870797, 0.07562780874254549, 0.1384005889385369, 0.10369797895777522, 0.08548327773617725, 0.07642906738030997, 0.08133345181295792, 0.22252169108996622, 0.1581673369803035, 0.21604001683382834, 0.1831202407623056, 0.19122313949011327, 0.1801702090158802, 0.17714407951045763, 0.2135598874644733, 0.22521875110776912, 0.17961392371137042, 0.10154952742484968, 0.12037130485533976, 0.10570070862882841, 0.09477425721803678, 0.04596432234182524, 0.09926083472741343, 0.11779950369750836, 0.05833196178018918, 0.14660246311276226, 0.16138767415995448, 0.10688847238624621, 0.09505657660110411, 0.14917438009454786, 0.13596507580465567, 0.10208457108611724, 0.100386518588784, 0.09290762857361912, 0.1048208145310977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005546611128655732, 0.07087056305398143, 0.04648208879183713, 0.02240217804371314, 0.06671274698560825, 0.011582553654104433, 0.03434638100552678, 0.07446515280941168, 0.033093512058429364, 0.04147093094740262, 0.033804195488496, 9.999999999998899e-05, 0.025727138239213132, 0.026996218575098485, 0.07481828086373354, 0.05200767796502592, 0.02707046879992525, 0.05058679127628474, 0.03566016971104857, 0.09066748094578103, 0.13589115339872493, 0.03657769500515462, 0.1109720516673508, 0.03894529829466287, 0.06514509585646489, 0.04550804531535235, 0.05403704711057422, 0.05973077399920035, 0.3573676987045191, 0.39886783051202146, 0.3693250547625636, 0.40166800760124954, 0.36950507724806536, 0.2549647434233432, 0.40111789657778407, 0.34480386021706, 0.33070699992294417, 0.09101447234194493, 0.07060278226558692, 0.06360418904726828, 0.07500565803901349, 0.04315773219785424, 0.0570996359882302, 0.07648499953891463, 0.12166891875917996, 0.05504168981932578, 0.1366365426284365, 0.14580246033077915, 0.1365586276991657, 0.15670916972624982, 0.13093996988827727, 0.15727574229254293, 0.15985066143610782, 0.1289112925453102, 0.160965573894161, 0.2071373625849129, 0.2777772785100042, 0.22441533320344065, 0.18966535081519775, 0.21156366445012476, 0.22145033047809926, 0.28005371022717984, 0.32412372164570014, 0.2598864543290511, 0.18367920339889565, 0.24737399200668642, 0.15279541810556185, 0.11829639120350222, 0.1657896304198222, 0.17689952324621083, 0.18012225978263796, 0.18703111637962655, 0.15829250826222052, 0.18581743963251074, 0.18151877608177625, 0.17946956673976888, 0.16789801771183943, 0.16097534151852122, 0.17313218650821305, 0.1678176951843776, 0.16838221279961396, 0.16179743992079088, 0.16538366400588145, 0.176378820994894, 0.1732951052436269, 0.18445563104820695, 0.1628305399093326, 0.1744197223295454, 0.178667499643836, 0.1812288005750513, 0.17616975824797154, 0.19246811497599803, 0.25552638987922915, 0.19435607685715472, 0.22197165460477508, 0.18187512806488215, 0.1357607632159188, 0.14760092938074143, 0.15754414763321423, 0.5828557608154532, 0.23084670229476867, 0.16948676508142857, 0.1575767167304155, 0.11612265378221631, 0.19617073731373003, 0.14932345735598396, 0.20200129565824199, 0.20790012001737246, 0.18771822125923854, 0.1955662350787768, 0.18089343951960668, 0.16559193921647564, 0.1643977406834265, 0.16300157038842678, 0.1696570038447861, 0.16979618757115678, 0.1782784917969915, 0.17531708414755776, 0.05566410481932649, 0.07116281499029209, 0.05158060942592024, 0.09213389655454451, 0.06033995367672107, 0.06181835438441119, 0.05663806796673654, 0.06194702603331825, 0.05838605491103388]}, "mutation_prompt": null}
{"id": "6a5986da-297f-467d-a7b7-715aa4a7ac9c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor dynamically based on function evaluations to better balance exploration and exploitation.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.4586236101780258, 0.4930770353514866, 0.49788656856649227, 0.4854750308603105, 0.5540858156219834, 0.4090431503304125, 0.1737491593120618, 0.5391887386462118, 0.5741435357478307, 0.18312714940414176, 0.10738295583832624, 0.20171111486344606, 0.2299288349900539, 0.056875676919142304, 0.12233059600270868, 0.06876045043600221, 0.1953038417767402, 0.3062194517120419, 0.10725466013199769, 0.05682773150364295, 0.07999329270756206, 0.07455920839528207, 0.08576895511452698, 0.057421175226967214, 0.06619763442669424, 0.06527962172512125, 0.11234032464554333, 0.024506524195002766, 0.06166541065041531, 0.08400709630323777, 0.04853283102366679, 0.03209778126694951, 0.045276701736470915, 0.050999061753738695, 0.05056520054096236, 0.0515598456327776, 0.9743357279812056, 0.9858137078615576, 0.9589357822881478, 0.9855392688674628, 0.8991202460140129, 0.9594179047745611, 0.9815851565033492, 0.9852144643350744, 0.9912028446823005, 0.09686412360945029, 0.10650781209870797, 0.07562780874254549, 0.1384005889385369, 0.10369797895777522, 0.08548327773617725, 0.07642906738030997, 0.08133345181295792, 0.22252169108996622, 0.1581673369803035, 0.21604001683382834, 0.1831202407623056, 0.19122313949011327, 0.1801702090158802, 0.17714407951045763, 0.2135598874644733, 0.22521875110776912, 0.17961392371137042, 0.10154952742484968, 0.12037130485533976, 0.10570070862882841, 0.09477425721803678, 0.04596432234182524, 0.09926083472741343, 0.11779950369750836, 0.05833196178018918, 0.14660246311276226, 0.16138767415995448, 0.10688847238624621, 0.09505657660110411, 0.14917438009454786, 0.13596507580465567, 0.10208457108611724, 0.100386518588784, 0.09290762857361912, 0.1048208145310977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005546611128655732, 0.07087056305398143, 0.04648208879183713, 0.02240217804371314, 0.06671274698560825, 0.011582553654104433, 0.03434638100552678, 0.07446515280941168, 0.033093512058429364, 0.04147093094740262, 0.033804195488496, 9.999999999998899e-05, 0.025727138239213132, 0.026996218575098485, 0.07481828086373354, 0.05200767796502592, 0.02707046879992525, 0.05058679127628474, 0.03566016971104857, 0.09066748094578103, 0.13589115339872493, 0.03657769500515462, 0.1109720516673508, 0.03894529829466287, 0.06514509585646489, 0.04550804531535235, 0.05403704711057422, 0.05973077399920035, 0.3573676987045191, 0.39886783051202146, 0.3693250547625636, 0.40166800760124954, 0.36950507724806536, 0.2549647434233432, 0.40111789657778407, 0.34480386021706, 0.33070699992294417, 0.09101447234194493, 0.07060278226558692, 0.06360418904726828, 0.07500565803901349, 0.04315773219785424, 0.0570996359882302, 0.07648499953891463, 0.12166891875917996, 0.05504168981932578, 0.1366365426284365, 0.14580246033077915, 0.1365586276991657, 0.15670916972624982, 0.13093996988827727, 0.15727574229254293, 0.15985066143610782, 0.1289112925453102, 0.160965573894161, 0.2071373625849129, 0.2777772785100042, 0.22441533320344065, 0.18966535081519775, 0.21156366445012476, 0.22145033047809926, 0.28005371022717984, 0.32412372164570014, 0.2598864543290511, 0.18367920339889565, 0.24737399200668642, 0.15279541810556185, 0.11829639120350222, 0.1657896304198222, 0.17689952324621083, 0.18012225978263796, 0.18703111637962655, 0.15829250826222052, 0.18581743963251074, 0.18151877608177625, 0.17946956673976888, 0.16789801771183943, 0.16097534151852122, 0.17313218650821305, 0.1678176951843776, 0.16838221279961396, 0.16179743992079088, 0.16538366400588145, 0.176378820994894, 0.1732951052436269, 0.18445563104820695, 0.1628305399093326, 0.1744197223295454, 0.178667499643836, 0.1812288005750513, 0.17616975824797154, 0.19246811497599803, 0.25552638987922915, 0.19435607685715472, 0.22197165460477508, 0.18187512806488215, 0.1357607632159188, 0.14760092938074143, 0.15754414763321423, 0.5828557608154532, 0.23084670229476867, 0.16948676508142857, 0.1575767167304155, 0.11612265378221631, 0.19617073731373003, 0.14932345735598396, 0.20200129565824199, 0.20790012001737246, 0.18771822125923854, 0.1955662350787768, 0.18089343951960668, 0.16559193921647564, 0.1643977406834265, 0.16300157038842678, 0.1696570038447861, 0.16979618757115678, 0.1782784917969915, 0.17531708414755776, 0.05566410481932649, 0.07116281499029209, 0.05158060942592024, 0.09213389655454451, 0.06033995367672107, 0.06181835438441119, 0.05663806796673654, 0.06194702603331825, 0.05838605491103388]}, "mutation_prompt": null}
{"id": "ca54a56a-67b6-47b4-8625-c7ff3285685d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Enhanced dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced dynamic adjustment of DE scaling factor for improved exploration and convergence.", "configspace": "", "generation": 28, "fitness": 0.1772536760628461, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.5581075360478175, 0.4851723272757349, 0.5400851885833191, 0.42056205224267906, 0.18785069875736793, 0.18822871158613375, 0.17278956104440257, 0.5078533936307699, 0.532309342666242, 0.12131978543443134, 0.11889174649781653, 0.15864824926998278, 0.032583955730771, 0.1966377769619243, 0.03239535938043259, 0.08052643125091818, 0.22099592675029966, 0.2773106088080469, 0.11247784444612097, 0.0922426616143055, 0.07621410772283976, 0.08670387464797946, 0.08223271086699568, 0.05937638857291205, 0.06689272408794145, 0.07491108792068213, 0.05739936849724658, 0.0587474189531596, 0.029468088558504357, 0.04113450901204996, 0.07911524621723731, 0.027335872068906975, 0.04601132498436056, 0.08908396243105876, 0.03511138587851237, 0.09650599515238978, 0.9742876413645268, 0.9858832701032361, 0.9702585761014129, 0.9856065769789852, 0.9410922896543693, 0.9657259551151126, 0.9788181735134481, 0.9851334637038193, 0.9911968684562456, 0.09686412360945029, 0.09747173927489061, 0.08022474309668615, 0.13318550848464294, 0.12558176792301834, 0.09436013440508051, 0.09339186044244618, 0.07264238811879586, 0.184414657011838, 0.2989795361114451, 0.19203528320815333, 0.1819676209759703, 0.24160621114630376, 0.17571551968173538, 0.18787705444342873, 0.16499537572797673, 0.1892483976504188, 0.19319828113643567, 0.1318277804262622, 0.12471580718008968, 0.1333862173760041, 0.10825105886962849, 0.0816635532761264, 0.1556857927432702, 0.11369943648557235, 0.07468044088433867, 0.10497955988043817, 0.10570559349085162, 0.06124881267555282, 0.10715037955242224, 0.11280912194765902, 0.06317604406048938, 0.14957894051422205, 0.11477226805164298, 0.07777708074967982, 0.09549668572441983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035114156212986414, 0.0008935762162838312, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031960715252987715, 0.021622495562351296, 0.020579637632544112, 0.06878446459624554, 0.04501116486094048, 0.005497031537760044, 0.05958156552823879, 0.02645389050271829, 0.02542607758145221, 0.0378907141981486, 0.026315318635902973, 0.02591128295213807, 0.05762422681632984, 0.02461328995240586, 9.999999999998899e-05, 0.03239718752292042, 0.006598478910152306, 0.03601634603232362, 0.08287548087758512, 0.05132703460006538, 0.050223162439698044, 0.0681496350498837, 0.10634798252962685, 0.09458658355658789, 0.013453209080887651, 0.04911686565162965, 9.999999999998899e-05, 0.08844782518757621, 0.37075366949744404, 0.3389319371031213, 0.430814236269624, 0.3135494218966961, 0.3498974223625574, 0.39142516875843125, 0.43561670282790665, 0.2813009882231998, 0.375673322693857, 0.07318280022154233, 0.0814200120115669, 0.06210147773797303, 0.08137974202718434, 0.06402578142122461, 0.08138204697170082, 0.0718695341270097, 0.09182939505290377, 0.059211741365890025, 0.13652310440641435, 0.13894532832097617, 0.14667229460372333, 0.1508472242729214, 0.12138760833959428, 0.17842360504789412, 0.1509807542035655, 0.11622802181771208, 0.1484271263265624, 0.23826790924184726, 0.22385878373928858, 0.2586906512039746, 0.19364049553003948, 0.3022795729266353, 0.222983084651046, 0.23499466763732246, 0.2573461040240609, 0.24857520527975863, 0.19058352641111143, 0.15328651247143932, 0.13946238175835113, 0.15397500921745655, 0.170303291298035, 0.13846061334989823, 0.21918971718921954, 0.2163240111632977, 0.20349021539918266, 0.23295516329197907, 0.16427508145070624, 0.15753964658713537, 0.1705863349025425, 0.1437351168347223, 0.1741779624223787, 0.17392055538396511, 0.15871030711595957, 0.16587848168379948, 0.19090241632424476, 0.19387471754803232, 0.16405961896328658, 0.20821397434956057, 0.16043966428775114, 0.17050720255542962, 0.16948645981699062, 0.1733841127780701, 0.1915163559591514, 0.1655493629347624, 0.1512747445370256, 0.19692554095764447, 0.17955097914257, 0.17744777659073752, 0.15652607396253992, 0.14125096757898337, 0.17302706371172138, 0.20570714132514267, 0.23084670229476867, 0.20665407669219882, 0.17506873345818752, 0.16709031576026223, 0.20404472891677494, 0.12466336425602353, 0.20284222952187092, 0.20626624426388773, 0.21082171122389037, 0.17514565856994047, 0.17169876962197939, 0.20524487717895834, 0.18536419287615713, 0.1824489048599487, 0.18442647918049238, 0.17271536028593437, 0.1797766946627387, 0.17014984157264967, 0.0536649877701737, 0.04531795634901459, 0.07875184963109805, 0.058374809711672415, 0.08297834944819882, 0.055030886763478115, 0.0543512783054344, 0.05589915154228964, 0.05236800141890874]}, "mutation_prompt": null}
{"id": "ae8cb9a5-14e4-415c-a96d-038ea194e319", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjusted the DE scaling factor dynamically based on function evaluations to better balance exploration and exploitation.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.4586236101780258, 0.4930770353514866, 0.49788656856649227, 0.4854750308603105, 0.5540858156219834, 0.4090431503304125, 0.1737491593120618, 0.5391887386462118, 0.5741435357478307, 0.18312714940414176, 0.10738295583832624, 0.20171111486344606, 0.2299288349900539, 0.056875676919142304, 0.12233059600270868, 0.06876045043600221, 0.1953038417767402, 0.3062194517120419, 0.10725466013199769, 0.05682773150364295, 0.07999329270756206, 0.07455920839528207, 0.08576895511452698, 0.057421175226967214, 0.06619763442669424, 0.06527962172512125, 0.11234032464554333, 0.024506524195002766, 0.06166541065041531, 0.08400709630323777, 0.04853283102366679, 0.03209778126694951, 0.045276701736470915, 0.050999061753738695, 0.05056520054096236, 0.0515598456327776, 0.9743357279812056, 0.9858137078615576, 0.9589357822881478, 0.9855392688674628, 0.8991202460140129, 0.9594179047745611, 0.9815851565033492, 0.9852144643350744, 0.9912028446823005, 0.09686412360945029, 0.10650781209870797, 0.07562780874254549, 0.1384005889385369, 0.10369797895777522, 0.08548327773617725, 0.07642906738030997, 0.08133345181295792, 0.22252169108996622, 0.1581673369803035, 0.21604001683382834, 0.1831202407623056, 0.19122313949011327, 0.1801702090158802, 0.17714407951045763, 0.2135598874644733, 0.22521875110776912, 0.17961392371137042, 0.10154952742484968, 0.12037130485533976, 0.10570070862882841, 0.09477425721803678, 0.04596432234182524, 0.09926083472741343, 0.11779950369750836, 0.05833196178018918, 0.14660246311276226, 0.16138767415995448, 0.10688847238624621, 0.09505657660110411, 0.14917438009454786, 0.13596507580465567, 0.10208457108611724, 0.100386518588784, 0.09290762857361912, 0.1048208145310977, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005546611128655732, 0.07087056305398143, 0.04648208879183713, 0.02240217804371314, 0.06671274698560825, 0.011582553654104433, 0.03434638100552678, 0.07446515280941168, 0.033093512058429364, 0.04147093094740262, 0.033804195488496, 9.999999999998899e-05, 0.025727138239213132, 0.026996218575098485, 0.07481828086373354, 0.05200767796502592, 0.02707046879992525, 0.05058679127628474, 0.03566016971104857, 0.09066748094578103, 0.13589115339872493, 0.03657769500515462, 0.1109720516673508, 0.03894529829466287, 0.06514509585646489, 0.04550804531535235, 0.05403704711057422, 0.05973077399920035, 0.3573676987045191, 0.39886783051202146, 0.3693250547625636, 0.40166800760124954, 0.36950507724806536, 0.2549647434233432, 0.40111789657778407, 0.34480386021706, 0.33070699992294417, 0.09101447234194493, 0.07060278226558692, 0.06360418904726828, 0.07500565803901349, 0.04315773219785424, 0.0570996359882302, 0.07648499953891463, 0.12166891875917996, 0.05504168981932578, 0.1366365426284365, 0.14580246033077915, 0.1365586276991657, 0.15670916972624982, 0.13093996988827727, 0.15727574229254293, 0.15985066143610782, 0.1289112925453102, 0.160965573894161, 0.2071373625849129, 0.2777772785100042, 0.22441533320344065, 0.18966535081519775, 0.21156366445012476, 0.22145033047809926, 0.28005371022717984, 0.32412372164570014, 0.2598864543290511, 0.18367920339889565, 0.24737399200668642, 0.15279541810556185, 0.11829639120350222, 0.1657896304198222, 0.17689952324621083, 0.18012225978263796, 0.18703111637962655, 0.15829250826222052, 0.18581743963251074, 0.18151877608177625, 0.17946956673976888, 0.16789801771183943, 0.16097534151852122, 0.17313218650821305, 0.1678176951843776, 0.16838221279961396, 0.16179743992079088, 0.16538366400588145, 0.176378820994894, 0.1732951052436269, 0.18445563104820695, 0.1628305399093326, 0.1744197223295454, 0.178667499643836, 0.1812288005750513, 0.17616975824797154, 0.19246811497599803, 0.25552638987922915, 0.19435607685715472, 0.22197165460477508, 0.18187512806488215, 0.1357607632159188, 0.14760092938074143, 0.15754414763321423, 0.5828557608154532, 0.23084670229476867, 0.16948676508142857, 0.1575767167304155, 0.11612265378221631, 0.19617073731373003, 0.14932345735598396, 0.20200129565824199, 0.20790012001737246, 0.18771822125923854, 0.1955662350787768, 0.18089343951960668, 0.16559193921647564, 0.1643977406834265, 0.16300157038842678, 0.1696570038447861, 0.16979618757115678, 0.1782784917969915, 0.17531708414755776, 0.05566410481932649, 0.07116281499029209, 0.05158060942592024, 0.09213389655454451, 0.06033995367672107, 0.06181835438441119, 0.05663806796673654, 0.06194702603331825, 0.05838605491103388]}, "mutation_prompt": null}
{"id": "0b6df51c-51fa-4b19-9e78-83e81ac1a629", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduced a small random disturbance to the DE mutation step to enhance exploration.", "configspace": "", "generation": 30, "fitness": 0.1892551259320978, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "8ee4cc5b-e286-4613-9ef5-19900c280dd1", "metadata": {"aucs": [0.45996999481973544, 0.47488500518494337, 0.44196694237664846, 0.6067090212999531, 0.6073564903868729, 0.5692011787754185, 0.5849810051342892, 0.5140871359063108, 0.5504199058878354, 0.2418277735797415, 0.09118798742799517, 0.12774708613465624, 0.21949872649714341, 0.13824835343984965, 0.0846307842357723, 0.2138279559162498, 0.18731206936521672, 0.14248307166614826, 0.060855334547279205, 0.1331603979610383, 0.11657386165354167, 0.08427874145143144, 0.06712671760353117, 0.0761150829351398, 0.0899233799518091, 0.07085365757928752, 0.09352385091783721, 0.075046022968418, 0.06628725030624905, 0.06726002961530286, 0.05875326403920822, 0.03439153037494891, 0.05837909931101326, 0.0676630206829617, 0.05598841979112168, 0.029316117888925852, 0.9705940599617744, 0.9918922233470804, 0.9797589706615035, 0.9848809614920655, 0.9607065229840511, 0.9820545609313155, 0.9796598962463215, 0.9873088130011975, 0.9873304869918887, 0.09686412360945029, 0.07128723479992494, 0.06237165436608416, 0.10288226606594686, 0.08202923665990236, 0.081078609948397, 0.09270889040597796, 0.09063748073246347, 0.10842758273558684, 0.19845083856417134, 0.16489295814143368, 0.1462904287724659, 0.2004225041689246, 0.48883575611095376, 0.18983113149447794, 0.18852407141541283, 0.18011398140580603, 0.16904673769413148, 0.12760398406155693, 0.12683347641953313, 0.13247578906456714, 0.13001294520356954, 0.09770296829602798, 0.11737696391240937, 0.11960827987701506, 0.0985325916574924, 0.11652732996975323, 0.15348245841393915, 0.10772597458682887, 0.12827093685419444, 0.13159663668305654, 0.09043262433099786, 0.09730183004100201, 0.10875720759785623, 0.2572785250305951, 0.17741882227455807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023125093385520934, 0.059078265104893, 0.03108727034103176, 0.07173744476245625, 0.051911001961617353, 0.038104367210174295, 0.025546035570316983, 0.057246863928882674, 0.03943551524127742, 0.03702464665964722, 0.037476588600143246, 0.018239907800390753, 0.021385453806285426, 0.024680749710449756, 0.009371239279473365, 0.041306178128294735, 0.04595403303173373, 0.049582952275897485, 0.05575517244959971, 0.11838602101190976, 0.025068087722618704, 0.10385509427606043, 0.05619248781995989, 0.08554822722180866, 0.08019642397526883, 0.05568103518305745, 0.10834974017896182, 0.07409984168986616, 0.3621389857626456, 0.4011493780141775, 0.4024650197317535, 0.4032376215039801, 0.2866848125174686, 0.3187099557059875, 0.3692400543120504, 0.35322363963926406, 0.39614237762236637, 0.07189899493027097, 0.08357607715561322, 0.09704218267613418, 0.05843401132646964, 0.08604561842295566, 0.09408117442733, 0.05200577109582116, 0.07489176550974697, 0.05514773261011341, 0.17614964414585377, 0.18019919344597313, 0.13828806280159855, 0.14008040942427924, 0.13916824086922897, 0.14947715775832726, 0.14368893187908816, 0.13770279145529818, 0.13799503484518505, 0.2209525717239007, 0.26489956089993316, 0.2505539100113868, 0.2123235003762899, 0.22652210739021383, 0.18875241774750384, 0.24029474167429254, 0.22750358356854272, 0.23260645960591586, 0.16608030687440645, 0.13910903712851652, 0.16616227308436426, 0.17175925494752753, 0.13597754754911706, 0.1404051481045332, 0.20383576245374724, 0.2786218095097627, 0.2456043528996643, 0.16298650324108532, 0.15647045738888787, 0.1747819365988369, 0.1803074681971386, 0.15485220928155763, 0.17558168743313507, 0.17180436355480488, 0.15610697063845325, 0.15480182203898074, 0.1742760961470583, 0.1779674926191307, 0.16538529360645338, 0.16553627845986962, 0.18445046054390268, 0.1754089753173368, 0.17439296270880644, 0.17269309761916352, 0.19299540800457016, 0.18642033129525937, 0.3211320662153794, 0.24808522367110541, 0.3371708859582291, 0.19607608798584142, 0.1549400804888813, 0.14031340431629702, 0.18565515333110805, 0.168672479285088, 0.2795919692431236, 0.20022478994626103, 0.28297003181213065, 0.18010250179524268, 0.21248410384580907, 0.12068260182199775, 0.15349644640735227, 0.2106676799569671, 0.12314422291894167, 0.17834738352429558, 0.19726276765231177, 0.1776118900358581, 0.17972631362819702, 0.19126855731612769, 0.1749160656658041, 0.19490613316877115, 0.1702702998345902, 0.17741760374769378, 0.06524705516995877, 0.07250764476676907, 0.07120858339281111, 0.05237448418626878, 0.0772266815742576, 0.054329868340706855, 0.0538302227262788, 0.0704116705672384, 0.08171469832428624]}, "mutation_prompt": null}
{"id": "7cd11cef-e395-443d-9d5a-bfa24b858e66", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c) + np.random.normal(0, 0.15, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.5 * (self.func_evals / self.budget))  # Dynamic DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improved exploration by adjusting DE mutation with enhanced dynamic scaling factor.", "configspace": "", "generation": 31, "fitness": 0.18833536108823629, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "0b6df51c-51fa-4b19-9e78-83e81ac1a629", "metadata": {"aucs": [0.5094532757682332, 0.5630103044844788, 0.5933342754611406, 0.5979976093456396, 0.6024776640702949, 0.5793147504180748, 0.5228455612528085, 0.5665985336327622, 0.436221617931454, 0.10765329318005734, 0.22249311539544536, 0.2170891421412421, 0.1539985961992656, 0.10182175268398219, 0.06373911510423225, 0.13160585364345567, 0.14745448711652265, 0.13040518449063054, 0.05969961769397669, 0.08997554692445231, 0.11236704370437345, 0.07326453315904091, 0.06576230952556905, 0.10831202295836428, 0.055532422401557646, 0.08112427064259431, 0.06208782762055087, 0.021916707324355578, 0.029910599235241198, 0.032412418151362865, 0.08569997182317834, 0.048969443350701636, 0.07026705658814358, 0.08591367813317374, 0.09554994989810672, 0.04946150907536062, 0.9657000060349699, 0.9918937185941543, 0.9797515852867026, 0.9848810207118033, 0.9646872636528039, 0.9820550200832773, 0.9795883559321076, 0.9873070889609369, 0.9873387656607835, 0.09965778984637741, 0.06267219026678905, 0.09778178702393359, 0.11783933881757858, 0.0928605026688778, 0.09233942106042081, 0.09758463478428947, 0.12820102518081744, 0.12361088634764383, 0.20352501726979333, 0.20457263544055726, 0.18353147135109005, 0.3116159609918503, 0.21371603993469912, 0.2208382638235611, 0.15551675711250723, 0.18325293311437085, 0.17724921125868276, 0.1348473976249197, 0.14288091143115256, 0.08654912531564618, 0.12032196913293935, 0.11122217506698995, 0.11968094550158437, 0.146959715121198, 0.08869683560177999, 0.11415169822338267, 0.08625328108491992, 0.10905237390597011, 0.1134144734202095, 0.1347726725879056, 0.15374757676213358, 0.06826068449033695, 0.03152657057810926, 0.09659617337876458, 0.1126126980043155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011827465751331312, 0.03220571407888417, 0.058602247085974835, 0.059089506166674965, 0.028199426607635858, 0.03537438951478722, 0.045195699348564045, 0.044991412482594195, 0.03621339578828642, 0.023173108953125854, 0.056668487641017284, 0.016359257119532566, 9.999999999998899e-05, 0.08833125289310828, 0.020527813349558333, 0.024011836590560054, 0.04898112665708576, 0.04362283139929746, 0.07476116839945901, 0.0817696621727888, 0.03454588029115946, 0.03794893048630543, 0.08983080966991819, 0.06672543014665366, 0.07151409711351409, 0.04827404816902603, 0.06696189836096933, 0.3845714196029708, 0.3752325855230476, 0.4251232867009511, 0.34020165805398006, 0.36961635699645035, 0.43110577210123, 0.3371554283138295, 0.37620293596319443, 0.4528176255586982, 0.07997888449447998, 0.06757936118336105, 0.06923114691467858, 0.06505717986889181, 0.1052158071414564, 0.06825787438798381, 0.06632679801820196, 0.06374434441003962, 0.06799375948821329, 0.1405343212546848, 0.15671093697572502, 0.13943720428661055, 0.15296188261100685, 0.18757309664667132, 0.19058913284607304, 0.18857249560522693, 0.13638694393513873, 0.16100909165270982, 0.2226437534643657, 0.21329017765010827, 0.21072387227754552, 0.22537615988061233, 0.22247509764257178, 0.23494116826015254, 0.24344617595572404, 0.2500569663134755, 0.21885469540498548, 0.17329166333209356, 0.11556028909644034, 0.2247393948762323, 0.2445283781503108, 0.13787566786690608, 0.1283332003375608, 0.19101254824240455, 0.2190788159643421, 0.21886650043605982, 0.17216646285873793, 0.1711252111455076, 0.14962074483187204, 0.1621129307319814, 0.18288450842575876, 0.1577443048683399, 0.17176689492019592, 0.16258871531400831, 0.15283891793826954, 0.1975716546064783, 0.19835403354243164, 0.16680598502052946, 0.19930291038712822, 0.16911731381516149, 0.17498629528763543, 0.17844666765306816, 0.165014301047554, 0.17168010933764233, 0.1418729260863143, 0.1513350387808785, 0.1518598700854794, 0.5951810902176748, 0.1904043753425323, 0.16753682892968302, 0.14081308416802718, 0.17515838413311446, 0.3427870324821686, 0.23084670229476867, 0.19198222346909288, 0.3112827175505458, 0.20201205530776878, 0.18392674953188648, 0.1425076634905834, 0.15312346259960363, 0.21112045825447356, 0.1893034125444195, 0.17161776120489325, 0.1845378633778757, 0.17945097942768184, 0.1742638369423255, 0.17973939454007049, 0.1742333563318298, 0.17559161812801283, 0.18936844717604795, 0.19185135754390237, 0.04933934271375928, 0.056970060300903014, 0.06110984531477992, 0.06257237310892416, 0.050608718497392124, 0.06097890486591573, 0.046431115630329645, 0.04869289476386551, 0.06805230729054057]}, "mutation_prompt": null}
{"id": "995a77c7-c1d9-4ce3-b379-bbc26d999d4e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.3 * (self.func_evals / self.budget))  # Slightly modified DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced the dynamic adjustment of DE parameters to balance exploration and exploitation.", "configspace": "", "generation": 32, "fitness": 0.1903848637081507, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0b6df51c-51fa-4b19-9e78-83e81ac1a629", "metadata": {"aucs": [0.4767190201444723, 0.6074928842040624, 0.5265724909780176, 0.5477575563857231, 0.5524675254170106, 0.5530447143841559, 0.5367000920219562, 0.533883606432191, 0.532733522155564, 0.15988695154029486, 0.2354113142221631, 0.28658795392778946, 0.16718727332619343, 0.06367404856429093, 0.2137498141060108, 0.22467027554618801, 0.07110784560804828, 0.17415822037799622, 0.07916917168345428, 0.08599890205599292, 0.1433258328520497, 0.10601263299647434, 0.09210364014710826, 0.08603380852036813, 0.08801274176219376, 0.08293762053023979, 0.05628356166298176, 0.05299685773464968, 0.04311900981970884, 0.05828473831166525, 0.06600352702131385, 0.0700532870602254, 0.07553505061344512, 0.07036664278164262, 0.04345280839537469, 0.06897890264749018, 0.9708834569188959, 0.9918922000187856, 0.9797590903078929, 0.9848809630283313, 0.9607141750775507, 0.9820545652236878, 0.9796599622521666, 0.9873090293307137, 0.9873315458212593, 0.09686412360945029, 0.11559754462217897, 0.10516075220370835, 0.09856585937653073, 0.07199145473373114, 0.09172886184170115, 0.11646583364726426, 0.0877721551031091, 0.13387127846693403, 0.17106216269660368, 0.15882520150931412, 0.2133866967242548, 0.20747897717759511, 0.31926190895310824, 0.18462193981162123, 0.18355597169975513, 0.17608988407117543, 0.1974608025101574, 0.11892303129083726, 0.1463087667371039, 0.13244841890252212, 0.061646074748615165, 0.08997601253423348, 0.12460264165112733, 0.10709179297210814, 0.09836233024534702, 0.13347298348498537, 0.1401187383113911, 0.10286600231249865, 0.1273834695849395, 0.12315417911461368, 0.10201272711213805, 0.082303378514478, 0.09789859799573719, 0.11404126805931158, 0.14085795568679116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021196259014321095, 9.999999999998899e-05, 0.0478261988085098, 0.06835908212129871, 0.07175670803571943, 0.06639604298981283, 0.00027052902241853083, 0.05549602499009576, 0.04343097894790138, 0.05274529430630004, 0.03464428220588556, 0.017526603924069017, 0.01722255359437308, 0.021161608936281273, 0.039895136047296, 0.11574631315414041, 0.05631947923662051, 0.024729683905891253, 0.0026724135652752556, 0.08487286648864556, 0.17024973547770716, 0.030519690018177448, 0.08426267666466392, 0.04016430016053041, 0.11752631219510734, 0.13044378783195554, 0.06994211927289906, 0.045144128478469936, 0.07329372178156679, 0.3580637895784433, 0.3884202587782193, 0.3556982137798096, 0.3889387689478895, 0.42661428245255517, 0.40031035107056523, 0.3818562562885406, 0.353767544817599, 0.42348219548622956, 0.06885329579807897, 0.0695486775983214, 0.08108418002409545, 0.07476563759002852, 0.08638632230291077, 0.08367317808800179, 0.0689411309300767, 0.07397068163086462, 0.059264733270135594, 0.12179213808359435, 0.1526700141284555, 0.12068174525424291, 0.1771255423899023, 0.15300600917525176, 0.15739937269143323, 0.1373982949702549, 0.12180115381875312, 0.1365913419116176, 0.24052799645391443, 0.22811030891734918, 0.22650461392141263, 0.23730615850965997, 0.19644807077711335, 0.2228683208789214, 0.24332089240018473, 0.25009659895445313, 0.2599539977155144, 0.16338329867593715, 0.1252971290129704, 0.1976137461680707, 0.17037441173074663, 0.16292274703544518, 0.17198300861668647, 0.21804967652764584, 0.230066032885745, 0.20884488344216712, 0.1611184875146362, 0.16363751755636635, 0.15682382129237327, 0.1630988246880063, 0.16737603052954309, 0.16093325157669935, 0.16098517865050876, 0.17722961519516245, 0.16806908939376297, 0.17067168049307946, 0.19756268874711447, 0.18327655449968894, 0.18031616896469882, 0.16318513612707997, 0.17315478990117317, 0.1743135362083944, 0.17563346429692228, 0.15748348716270977, 0.19429613064246554, 0.1502990421355871, 0.14940238985449017, 0.6842342745664522, 0.19003749163854877, 0.15026979122146256, 0.17697719063361161, 0.18481665857394214, 0.19023509001758931, 0.3027556967244516, 0.1983504590469758, 0.25910929851073383, 0.12986210415703647, 0.1256629457850602, 0.2147239631016694, 0.15094060877972149, 0.21154259493235072, 0.12081267923948058, 0.1651276476845831, 0.17458675110939226, 0.17347051303984207, 0.20004582118632774, 0.16679921045898305, 0.17463567883330977, 0.1740158081959755, 0.18568288181921866, 0.17236575058164616, 0.04714519723527688, 0.0634805099460728, 0.057756716247434614, 0.045461690151030076, 0.0636525990488106, 0.05696174284311162, 0.06526725456957683, 0.052565122986792945, 0.05340841918599648]}, "mutation_prompt": null}
{"id": "0ccc4d47-867f-411a-a68d-8a359014248f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.3 * (self.func_evals / self.budget))  # Slightly modified DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced the dynamic adjustment of DE parameters to balance exploration and exploitation.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "995a77c7-c1d9-4ce3-b379-bbc26d999d4e", "metadata": {"aucs": [0.4767190201444723, 0.6074928842040624, 0.5265724909780176, 0.5477575563857231, 0.5524675254170106, 0.5530447143841559, 0.5367000920219562, 0.533883606432191, 0.532733522155564, 0.15988695154029486, 0.2354113142221631, 0.28658795392778946, 0.16718727332619343, 0.06367404856429093, 0.2137498141060108, 0.22467027554618801, 0.07110784560804828, 0.17415822037799622, 0.07916917168345428, 0.08599890205599292, 0.1433258328520497, 0.10601263299647434, 0.09210364014710826, 0.08603380852036813, 0.08801274176219376, 0.08293762053023979, 0.05628356166298176, 0.05299685773464968, 0.04311900981970884, 0.05828473831166525, 0.06600352702131385, 0.0700532870602254, 0.07553505061344512, 0.07036664278164262, 0.04345280839537469, 0.06897890264749018, 0.9708834569188959, 0.9918922000187856, 0.9797590903078929, 0.9848809630283313, 0.9607141750775507, 0.9820545652236878, 0.9796599622521666, 0.9873090293307137, 0.9873315458212593, 0.09686412360945029, 0.11559754462217897, 0.10516075220370835, 0.09856585937653073, 0.07199145473373114, 0.09172886184170115, 0.11646583364726426, 0.0877721551031091, 0.13387127846693403, 0.17106216269660368, 0.15882520150931412, 0.2133866967242548, 0.20747897717759511, 0.31926190895310824, 0.18462193981162123, 0.18355597169975513, 0.17608988407117543, 0.1974608025101574, 0.11892303129083726, 0.1463087667371039, 0.13244841890252212, 0.061646074748615165, 0.08997601253423348, 0.12460264165112733, 0.10709179297210814, 0.09836233024534702, 0.13347298348498537, 0.1401187383113911, 0.10286600231249865, 0.1273834695849395, 0.12315417911461368, 0.10201272711213805, 0.082303378514478, 0.09789859799573719, 0.11404126805931158, 0.14085795568679116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021196259014321095, 9.999999999998899e-05, 0.0478261988085098, 0.06835908212129871, 0.07175670803571943, 0.06639604298981283, 0.00027052902241853083, 0.05549602499009576, 0.04343097894790138, 0.05274529430630004, 0.03464428220588556, 0.017526603924069017, 0.01722255359437308, 0.021161608936281273, 0.039895136047296, 0.11574631315414041, 0.05631947923662051, 0.024729683905891253, 0.0026724135652752556, 0.08487286648864556, 0.17024973547770716, 0.030519690018177448, 0.08426267666466392, 0.04016430016053041, 0.11752631219510734, 0.13044378783195554, 0.06994211927289906, 0.045144128478469936, 0.07329372178156679, 0.3580637895784433, 0.3884202587782193, 0.3556982137798096, 0.3889387689478895, 0.42661428245255517, 0.40031035107056523, 0.3818562562885406, 0.353767544817599, 0.42348219548622956, 0.06885329579807897, 0.0695486775983214, 0.08108418002409545, 0.07476563759002852, 0.08638632230291077, 0.08367317808800179, 0.0689411309300767, 0.07397068163086462, 0.059264733270135594, 0.12179213808359435, 0.1526700141284555, 0.12068174525424291, 0.1771255423899023, 0.15300600917525176, 0.15739937269143323, 0.1373982949702549, 0.12180115381875312, 0.1365913419116176, 0.24052799645391443, 0.22811030891734918, 0.22650461392141263, 0.23730615850965997, 0.19644807077711335, 0.2228683208789214, 0.24332089240018473, 0.25009659895445313, 0.2599539977155144, 0.16338329867593715, 0.1252971290129704, 0.1976137461680707, 0.17037441173074663, 0.16292274703544518, 0.17198300861668647, 0.21804967652764584, 0.230066032885745, 0.20884488344216712, 0.1611184875146362, 0.16363751755636635, 0.15682382129237327, 0.1630988246880063, 0.16737603052954309, 0.16093325157669935, 0.16098517865050876, 0.17722961519516245, 0.16806908939376297, 0.17067168049307946, 0.19756268874711447, 0.18327655449968894, 0.18031616896469882, 0.16318513612707997, 0.17315478990117317, 0.1743135362083944, 0.17563346429692228, 0.15748348716270977, 0.19429613064246554, 0.1502990421355871, 0.14940238985449017, 0.6842342745664522, 0.19003749163854877, 0.15026979122146256, 0.17697719063361161, 0.18481665857394214, 0.19023509001758931, 0.3027556967244516, 0.1983504590469758, 0.25910929851073383, 0.12986210415703647, 0.1256629457850602, 0.2147239631016694, 0.15094060877972149, 0.21154259493235072, 0.12081267923948058, 0.1651276476845831, 0.17458675110939226, 0.17347051303984207, 0.20004582118632774, 0.16679921045898305, 0.17463567883330977, 0.1740158081959755, 0.18568288181921866, 0.17236575058164616, 0.04714519723527688, 0.0634805099460728, 0.057756716247434614, 0.045461690151030076, 0.0636525990488106, 0.05696174284311162, 0.06526725456957683, 0.052565122986792945, 0.05340841918599648]}, "mutation_prompt": null}
{"id": "a7574d8a-6b7c-467c-be44-797aac00acc6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Changed mutation from Gaussian to uniform perturbation\n                mutant = np.clip(a + self.F * (b - c) + np.random.uniform(-0.1, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.3 * (self.func_evals / self.budget))  # Slightly modified DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Refined mutation strategy by replacing Gaussian with a uniform perturbation for better exploration.", "configspace": "", "generation": 34, "fitness": 0.1897851296823277, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "995a77c7-c1d9-4ce3-b379-bbc26d999d4e", "metadata": {"aucs": [0.4462460682931021, 0.46769599472042145, 0.45310442546948493, 0.5975411860708699, 0.5635645272432284, 0.5184418965482984, 0.5341350586849081, 0.413407682061008, 0.4026021371214912, 0.2705815006668164, 0.1603423151044654, 0.16540770786481007, 0.14470487602468096, 0.10499025707004728, 0.09010108115319404, 0.12503638988879795, 0.252907005510707, 0.20522981360484915, 0.090524571984411, 0.06416148514898157, 0.08312796809464273, 0.10948836731610478, 0.10306042930333825, 0.07848528134885402, 0.062116152910345446, 0.06256719035506708, 0.10483237911639631, 0.056484236808630905, 0.07193067351210869, 0.06533751014579281, 0.033883290622840234, 0.04429907022099289, 0.035569982481897244, 0.048131072969903155, 0.0327332509615097, 0.0406244321034086, 0.9713953873647242, 0.9880089738960159, 0.9764105925046437, 0.98070247613427, 0.9766693706572578, 0.968707486015959, 0.9816918499405715, 0.9899280243601726, 0.990586346754768, 0.10779710449204705, 0.10093674636039218, 0.06189958607900592, 0.11820793792497009, 0.09852147217520435, 0.10635573106048724, 0.10338540634435212, 0.12155511362214277, 0.1876660790201009, 0.2639156709993691, 0.1648509616844882, 0.18754714601579026, 0.26309021360093643, 0.24411251658379585, 0.26004912095419286, 0.16448056385159815, 0.19376247062612673, 0.15446868551614534, 0.11024185230042771, 0.1146876061657911, 0.09756458537035939, 0.06778741899385532, 0.11080631320690404, 0.07629112993272735, 0.11447233735665818, 0.12652707192039947, 0.1349518567712772, 0.07626548652717902, 0.09525264149603585, 0.10927040389561249, 0.10657311760642174, 0.13175113664458804, 0.1531061416500452, 0.09135964858282497, 0.10232595876094552, 0.11514499477363538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0448723615403418, 0.026620256518146923, 0.025780236759842423, 0.021962232590318487, 0.04120245266456479, 0.05404878356790199, 0.03828613252528845, 0.01619341018154241, 0.05186215249347115, 0.022411610183562525, 0.048573800982146365, 0.016856367156470542, 0.03253708739959127, 0.047196284261593946, 0.04641380838955589, 0.04521240550835415, 0.058989722578583814, 0.09939190388575847, 0.053379522475163865, 0.032513398432510665, 0.025715743390210766, 0.12412445297775943, 0.07462972026064107, 0.1270604391062241, 0.040425813453368376, 0.07731056774853007, 0.06402053317906897, 0.2987789409759055, 0.344107901228348, 0.33429358670924336, 0.37453074749211623, 0.4128592712117114, 0.35701610385932325, 0.3994559799851022, 0.4360835204478063, 0.36542005396054544, 0.09649557577548207, 0.07908739211495797, 0.08378949109850642, 0.09785686991211584, 0.07241739142238546, 0.06766851990472533, 0.06114696036881284, 0.06096068885058903, 0.07520361841106227, 0.12618742861938337, 0.25710130172750145, 0.14584984284442637, 0.1185883221567785, 0.1371551142425882, 0.16780608763775218, 0.14816078671884148, 0.17423214128530184, 0.12892180402488884, 0.18211706850817577, 0.18802998769718138, 0.21642264430220826, 0.253432056124821, 0.2357330205420547, 0.191427283891222, 0.24090611686544783, 0.26396491512956954, 0.2955375840127412, 0.17383420112573422, 0.16523346349260704, 0.16568233012716937, 0.13172226220534466, 0.17475900324750016, 0.13532396973360994, 0.2025710702605934, 0.20073308451032845, 0.1545765270405971, 0.18867583519310627, 0.14748774434318623, 0.1556920776473416, 0.1582963915021186, 0.16944793310529405, 0.151836150122013, 0.17190947828266379, 0.20083366638940892, 0.1945479897578558, 0.16407499203802434, 0.19040442531776502, 0.18484659028307282, 0.16707792970213775, 0.1770909845673443, 0.16460947146615834, 0.16078429428903562, 0.1901969381591303, 0.16168025037313072, 0.2060814477527041, 0.5259566619270981, 0.15379262135119842, 0.17112901581195294, 0.1957036987128873, 0.4344405981312325, 0.1894025866273813, 0.34283215767526876, 0.4758089388437916, 0.313757856943642, 0.18767272602906016, 0.2530695049865559, 0.28918852297670306, 0.11735687197494937, 0.11961046665972486, 0.20678263587000778, 0.18345428793416463, 0.15608873696008263, 0.19018991734671076, 0.17349040070400457, 0.18193239714470832, 0.18972120748047572, 0.18641743048984805, 0.19682182464628728, 0.17974431451461859, 0.17619330150070722, 0.19877216786857688, 0.042323312540986424, 0.06220286062856628, 0.06286436196374612, 0.045706160392314676, 0.053817090608412554, 0.07059117948102545, 0.05940468956409406, 0.09198668791573561, 0.09363298986952318]}, "mutation_prompt": null}
{"id": "536a1bed-622d-48a0-b2f2-f473b9981a3c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.3 * (self.func_evals / self.budget))  # Slightly modified DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced the dynamic adjustment of DE parameters to balance exploration and exploitation.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "995a77c7-c1d9-4ce3-b379-bbc26d999d4e", "metadata": {"aucs": [0.4767190201444723, 0.6074928842040624, 0.5265724909780176, 0.5477575563857231, 0.5524675254170106, 0.5530447143841559, 0.5367000920219562, 0.533883606432191, 0.532733522155564, 0.15988695154029486, 0.2354113142221631, 0.28658795392778946, 0.16718727332619343, 0.06367404856429093, 0.2137498141060108, 0.22467027554618801, 0.07110784560804828, 0.17415822037799622, 0.07916917168345428, 0.08599890205599292, 0.1433258328520497, 0.10601263299647434, 0.09210364014710826, 0.08603380852036813, 0.08801274176219376, 0.08293762053023979, 0.05628356166298176, 0.05299685773464968, 0.04311900981970884, 0.05828473831166525, 0.06600352702131385, 0.0700532870602254, 0.07553505061344512, 0.07036664278164262, 0.04345280839537469, 0.06897890264749018, 0.9708834569188959, 0.9918922000187856, 0.9797590903078929, 0.9848809630283313, 0.9607141750775507, 0.9820545652236878, 0.9796599622521666, 0.9873090293307137, 0.9873315458212593, 0.09686412360945029, 0.11559754462217897, 0.10516075220370835, 0.09856585937653073, 0.07199145473373114, 0.09172886184170115, 0.11646583364726426, 0.0877721551031091, 0.13387127846693403, 0.17106216269660368, 0.15882520150931412, 0.2133866967242548, 0.20747897717759511, 0.31926190895310824, 0.18462193981162123, 0.18355597169975513, 0.17608988407117543, 0.1974608025101574, 0.11892303129083726, 0.1463087667371039, 0.13244841890252212, 0.061646074748615165, 0.08997601253423348, 0.12460264165112733, 0.10709179297210814, 0.09836233024534702, 0.13347298348498537, 0.1401187383113911, 0.10286600231249865, 0.1273834695849395, 0.12315417911461368, 0.10201272711213805, 0.082303378514478, 0.09789859799573719, 0.11404126805931158, 0.14085795568679116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021196259014321095, 9.999999999998899e-05, 0.0478261988085098, 0.06835908212129871, 0.07175670803571943, 0.06639604298981283, 0.00027052902241853083, 0.05549602499009576, 0.04343097894790138, 0.05274529430630004, 0.03464428220588556, 0.017526603924069017, 0.01722255359437308, 0.021161608936281273, 0.039895136047296, 0.11574631315414041, 0.05631947923662051, 0.024729683905891253, 0.0026724135652752556, 0.08487286648864556, 0.17024973547770716, 0.030519690018177448, 0.08426267666466392, 0.04016430016053041, 0.11752631219510734, 0.13044378783195554, 0.06994211927289906, 0.045144128478469936, 0.07329372178156679, 0.3580637895784433, 0.3884202587782193, 0.3556982137798096, 0.3889387689478895, 0.42661428245255517, 0.40031035107056523, 0.3818562562885406, 0.353767544817599, 0.42348219548622956, 0.06885329579807897, 0.0695486775983214, 0.08108418002409545, 0.07476563759002852, 0.08638632230291077, 0.08367317808800179, 0.0689411309300767, 0.07397068163086462, 0.059264733270135594, 0.12179213808359435, 0.1526700141284555, 0.12068174525424291, 0.1771255423899023, 0.15300600917525176, 0.15739937269143323, 0.1373982949702549, 0.12180115381875312, 0.1365913419116176, 0.24052799645391443, 0.22811030891734918, 0.22650461392141263, 0.23730615850965997, 0.19644807077711335, 0.2228683208789214, 0.24332089240018473, 0.25009659895445313, 0.2599539977155144, 0.16338329867593715, 0.1252971290129704, 0.1976137461680707, 0.17037441173074663, 0.16292274703544518, 0.17198300861668647, 0.21804967652764584, 0.230066032885745, 0.20884488344216712, 0.1611184875146362, 0.16363751755636635, 0.15682382129237327, 0.1630988246880063, 0.16737603052954309, 0.16093325157669935, 0.16098517865050876, 0.17722961519516245, 0.16806908939376297, 0.17067168049307946, 0.19756268874711447, 0.18327655449968894, 0.18031616896469882, 0.16318513612707997, 0.17315478990117317, 0.1743135362083944, 0.17563346429692228, 0.15748348716270977, 0.19429613064246554, 0.1502990421355871, 0.14940238985449017, 0.6842342745664522, 0.19003749163854877, 0.15026979122146256, 0.17697719063361161, 0.18481665857394214, 0.19023509001758931, 0.3027556967244516, 0.1983504590469758, 0.25910929851073383, 0.12986210415703647, 0.1256629457850602, 0.2147239631016694, 0.15094060877972149, 0.21154259493235072, 0.12081267923948058, 0.1651276476845831, 0.17458675110939226, 0.17347051303984207, 0.20004582118632774, 0.16679921045898305, 0.17463567883330977, 0.1740158081959755, 0.18568288181921866, 0.17236575058164616, 0.04714519723527688, 0.0634805099460728, 0.057756716247434614, 0.045461690151030076, 0.0636525990488106, 0.05696174284311162, 0.06526725456957683, 0.052565122986792945, 0.05340841918599648]}, "mutation_prompt": null}
{"id": "6c5deeac-885c-483f-8ccb-795391cbef33", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.3 * (self.func_evals / self.budget))  # Slightly modified DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced the dynamic adjustment of DE parameters to balance exploration and exploitation.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "995a77c7-c1d9-4ce3-b379-bbc26d999d4e", "metadata": {"aucs": [0.4767190201444723, 0.6074928842040624, 0.5265724909780176, 0.5477575563857231, 0.5524675254170106, 0.5530447143841559, 0.5367000920219562, 0.533883606432191, 0.532733522155564, 0.15988695154029486, 0.2354113142221631, 0.28658795392778946, 0.16718727332619343, 0.06367404856429093, 0.2137498141060108, 0.22467027554618801, 0.07110784560804828, 0.17415822037799622, 0.07916917168345428, 0.08599890205599292, 0.1433258328520497, 0.10601263299647434, 0.09210364014710826, 0.08603380852036813, 0.08801274176219376, 0.08293762053023979, 0.05628356166298176, 0.05299685773464968, 0.04311900981970884, 0.05828473831166525, 0.06600352702131385, 0.0700532870602254, 0.07553505061344512, 0.07036664278164262, 0.04345280839537469, 0.06897890264749018, 0.9708834569188959, 0.9918922000187856, 0.9797590903078929, 0.9848809630283313, 0.9607141750775507, 0.9820545652236878, 0.9796599622521666, 0.9873090293307137, 0.9873315458212593, 0.09686412360945029, 0.11559754462217897, 0.10516075220370835, 0.09856585937653073, 0.07199145473373114, 0.09172886184170115, 0.11646583364726426, 0.0877721551031091, 0.13387127846693403, 0.17106216269660368, 0.15882520150931412, 0.2133866967242548, 0.20747897717759511, 0.31926190895310824, 0.18462193981162123, 0.18355597169975513, 0.17608988407117543, 0.1974608025101574, 0.11892303129083726, 0.1463087667371039, 0.13244841890252212, 0.061646074748615165, 0.08997601253423348, 0.12460264165112733, 0.10709179297210814, 0.09836233024534702, 0.13347298348498537, 0.1401187383113911, 0.10286600231249865, 0.1273834695849395, 0.12315417911461368, 0.10201272711213805, 0.082303378514478, 0.09789859799573719, 0.11404126805931158, 0.14085795568679116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021196259014321095, 9.999999999998899e-05, 0.0478261988085098, 0.06835908212129871, 0.07175670803571943, 0.06639604298981283, 0.00027052902241853083, 0.05549602499009576, 0.04343097894790138, 0.05274529430630004, 0.03464428220588556, 0.017526603924069017, 0.01722255359437308, 0.021161608936281273, 0.039895136047296, 0.11574631315414041, 0.05631947923662051, 0.024729683905891253, 0.0026724135652752556, 0.08487286648864556, 0.17024973547770716, 0.030519690018177448, 0.08426267666466392, 0.04016430016053041, 0.11752631219510734, 0.13044378783195554, 0.06994211927289906, 0.045144128478469936, 0.07329372178156679, 0.3580637895784433, 0.3884202587782193, 0.3556982137798096, 0.3889387689478895, 0.42661428245255517, 0.40031035107056523, 0.3818562562885406, 0.353767544817599, 0.42348219548622956, 0.06885329579807897, 0.0695486775983214, 0.08108418002409545, 0.07476563759002852, 0.08638632230291077, 0.08367317808800179, 0.0689411309300767, 0.07397068163086462, 0.059264733270135594, 0.12179213808359435, 0.1526700141284555, 0.12068174525424291, 0.1771255423899023, 0.15300600917525176, 0.15739937269143323, 0.1373982949702549, 0.12180115381875312, 0.1365913419116176, 0.24052799645391443, 0.22811030891734918, 0.22650461392141263, 0.23730615850965997, 0.19644807077711335, 0.2228683208789214, 0.24332089240018473, 0.25009659895445313, 0.2599539977155144, 0.16338329867593715, 0.1252971290129704, 0.1976137461680707, 0.17037441173074663, 0.16292274703544518, 0.17198300861668647, 0.21804967652764584, 0.230066032885745, 0.20884488344216712, 0.1611184875146362, 0.16363751755636635, 0.15682382129237327, 0.1630988246880063, 0.16737603052954309, 0.16093325157669935, 0.16098517865050876, 0.17722961519516245, 0.16806908939376297, 0.17067168049307946, 0.19756268874711447, 0.18327655449968894, 0.18031616896469882, 0.16318513612707997, 0.17315478990117317, 0.1743135362083944, 0.17563346429692228, 0.15748348716270977, 0.19429613064246554, 0.1502990421355871, 0.14940238985449017, 0.6842342745664522, 0.19003749163854877, 0.15026979122146256, 0.17697719063361161, 0.18481665857394214, 0.19023509001758931, 0.3027556967244516, 0.1983504590469758, 0.25910929851073383, 0.12986210415703647, 0.1256629457850602, 0.2147239631016694, 0.15094060877972149, 0.21154259493235072, 0.12081267923948058, 0.1651276476845831, 0.17458675110939226, 0.17347051303984207, 0.20004582118632774, 0.16679921045898305, 0.17463567883330977, 0.1740158081959755, 0.18568288181921866, 0.17236575058164616, 0.04714519723527688, 0.0634805099460728, 0.057756716247434614, 0.045461690151030076, 0.0636525990488106, 0.05696174284311162, 0.06526725456957683, 0.052565122986792945, 0.05340841918599648]}, "mutation_prompt": null}
{"id": "4318c062-1603-4d18-8567-d8fcfc492289", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.3 * (self.func_evals / self.budget))  # Slightly modified DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduced adaptive inertia weight (w) to improve convergence by dynamically adjusting exploration and exploitation.", "configspace": "", "generation": 37, "fitness": 0.22215007982427531, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "995a77c7-c1d9-4ce3-b379-bbc26d999d4e", "metadata": {"aucs": [0.6456969057406411, 0.6650610735032043, 0.7038578628456937, 0.6828468291739007, 0.665736760515186, 0.675631218743463, 0.6716076382193081, 0.6411260432541197, 0.6676650272124578, 0.3084605272641967, 0.4261096661567735, 0.4203165255003142, 0.3754284875956355, 0.3088171661296758, 0.3729896512835792, 0.27607012653379137, 0.4074101830088992, 0.3601073692753456, 0.09371997483736905, 0.10126697991260569, 0.07934210063102964, 0.09558828293117638, 0.07704090851357726, 0.1249469842899178, 0.12440203701220087, 0.1050761305663318, 0.08284373860883609, 0.07421253310736642, 0.04512437539315162, 0.09037390541785995, 0.08288227761947053, 0.09583343534778654, 0.0944022558564197, 0.10665515780770551, 0.05209879202102419, 0.0752546152400273, 0.9705737074383587, 0.9918922175101353, 0.9796752242800985, 0.9848642795976096, 0.960687139324122, 0.9820502573557446, 0.9795860082636607, 0.9873072370358842, 0.9873298230865162, 0.11377847323980472, 0.13492726657398635, 0.1802806361297138, 0.1359844003627, 0.18846903579273466, 0.14614827052168422, 0.16312772149977495, 0.21474235290085109, 0.19803763649612638, 0.2002064399527822, 0.15843889786415688, 0.48021873977131213, 0.20687408581342748, 0.7339355373045285, 0.1960440946085915, 0.19646217132814803, 0.2818379617719068, 0.2179297785282418, 0.16712969744086514, 0.1463778875516173, 0.1369873910522823, 0.15285013655638835, 0.09867111937243134, 0.13558828118356925, 0.11099653121513897, 0.16007368881166073, 0.11467506334429178, 0.1592912583038466, 0.0971240569375601, 0.13212585955185208, 0.17276491400144456, 0.09352583484330756, 0.09494064407007097, 0.07456303468351655, 0.17715548673305914, 0.17634146678998075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031202216647696623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0456050827078478, 0.06376457339443242, 0.04852079831451661, 0.06347992519015788, 0.05807897755944136, 0.017153756891749583, 0.02454309139464439, 0.04788757092840734, 0.04484451279074986, 0.05485311719042352, 0.03473247908876698, 0.022959285633004978, 0.057648067211369725, 0.15144503870153125, 0.05099624441208339, 0.04220995597969135, 0.06282802147587951, 0.06588364585108608, 0.11542149146630731, 0.03728604617159759, 0.06321953549345616, 0.03536606261037045, 0.03426733647105007, 0.05318901778344165, 0.05148373375831505, 0.04881200611420977, 0.07400850980983864, 0.44292933705475124, 0.5392903147239299, 0.46900004484637847, 0.434565524401624, 0.48150806490146447, 0.43215977387860427, 0.4100525737296342, 0.4444886569129102, 0.4415506117345699, 0.0980788973737885, 0.0852104369599892, 0.0697339258741908, 0.07052210465022235, 0.10065425136310913, 0.09863099164445899, 0.07661656540812978, 0.08231792381540404, 0.08188782923957061, 0.1439583799249491, 0.1364582466142752, 0.14595459602809202, 0.1924600733885773, 0.14664469741699027, 0.14099516711985582, 0.16301397724653943, 0.20291231505011686, 0.21631645817523104, 0.25722913622998933, 0.25676824311545066, 0.29096967266280527, 0.21071016090623473, 0.29430423574711473, 0.28158269082075316, 0.26698187026296305, 0.34068880855697903, 0.23004636589661254, 0.21012958797343917, 0.139377322365566, 0.18176015043521299, 0.2453255183791051, 0.1604520953107793, 0.15482609519105806, 0.2231686109108484, 0.1978694808513084, 0.2597499112346421, 0.18362770123237626, 0.16799482517193887, 0.1713401723070378, 0.18473784813302507, 0.1709441656333911, 0.1538828059856041, 0.17469438878929755, 0.16956820902662728, 0.1534985507283374, 0.17853404956554297, 0.20264346747926143, 0.20947691774561128, 0.1835539151120401, 0.18982799272754636, 0.19439333251110036, 0.17980279534453836, 0.18481615228496062, 0.18357413901522324, 0.14263086271522063, 0.15681497729288185, 0.14467769487082027, 0.6354954898543586, 0.18871465339705973, 0.147890667732958, 0.1402239391782215, 0.18616647175792245, 0.205025444770787, 0.3381203955713594, 0.20093109738041826, 0.44782717652139337, 0.10732783631250364, 0.3139055260906819, 0.3391633263303141, 0.15382880276852084, 0.21069082309367393, 0.201964290057982, 0.1830088212934593, 0.1842169177657894, 0.17598150494281695, 0.1859245554966532, 0.17491525344359327, 0.1821077639859735, 0.1803611377770128, 0.17421230480831895, 0.18679127273825125, 0.07748030285123264, 0.05773026838607953, 0.06675352311370386, 0.06036912670901895, 0.07286332348131419, 0.053084199604825466, 0.06963105573027639, 0.06588636283524718, 0.061933546336485734]}, "mutation_prompt": null}
{"id": "1edff31a-dc64-4aae-8f38-a5d7dd4799c2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.3 * (self.func_evals / self.budget))  # Slightly modified DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance the DE mutation by introducing a differential evolution inspired adaptive strategy for balancing exploration and exploitation.", "configspace": "", "generation": 38, "fitness": 0.22352762880538912, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "4318c062-1603-4d18-8567-d8fcfc492289", "metadata": {"aucs": [0.6248818867393677, 0.6478821791590514, 0.6539290815557712, 0.685366798093394, 0.6500719404154092, 0.7089347634282024, 0.6440492979343806, 0.6380312840999014, 0.6253878692069061, 0.4145177749169584, 0.33352390858468506, 0.2294449008079965, 0.28947568172006977, 0.4785978731993745, 0.3886602404246755, 0.37174362789494375, 0.36594562384213336, 0.33835269249761246, 0.0983959545921449, 0.0747432534072614, 0.09789721440513799, 0.10267057883423714, 0.11277054389837882, 0.09887357913706074, 0.09016281542021476, 0.09733034409981878, 0.05625817094094565, 0.08765670918536084, 0.08220064272925243, 0.07878810763810962, 0.07623850360557993, 0.08616007259009983, 0.0808051298251179, 0.09585678046581358, 0.09011824208521668, 0.08144833373922333, 0.980028240276233, 0.9919149258641317, 0.9414710409508313, 0.9920357609146625, 0.9758100795915784, 0.985056639255845, 0.9796530222018754, 0.9886515639268033, 0.9873478068379182, 0.28591404810672805, 0.19737511225332527, 0.16702968971561327, 0.20100826344087241, 0.20677861573558598, 0.19462685768823407, 0.1815120085832328, 0.16542730306275388, 0.22388125730650532, 0.19409687935170472, 0.16828446098480832, 0.29418192698450296, 0.297835703608487, 0.23869234769923575, 0.17887496114912704, 0.22119715125228367, 0.21068137125783004, 0.4230075602163008, 0.16120573976228603, 0.16020314977578232, 0.14351584814488738, 0.08802127211957522, 0.1584254218308362, 0.10403666956874824, 0.08425918057575577, 0.17793387745126388, 0.13022707585350124, 0.14246594461980278, 0.07665288236176981, 0.10348613172363985, 0.2895863809606021, 0.10128455705574746, 0.1418534515027804, 0.1775217222191231, 0.1710846465146214, 0.10775622628488346, 9.999999999998899e-05, 0.023206271733100747, 9.999999999998899e-05, 0.021420356254977513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05817691239405576, 0.03307436545733666, 0.036591474616068265, 0.11813648352046258, 0.008102002985566514, 0.03199963640665904, 0.04412311274773306, 0.05353219343565563, 0.03971327508232714, 0.09064631058695172, 0.05274619057918806, 0.025601551219928798, 0.061136179100976906, 0.06776409397422356, 0.04914110552342066, 0.06956653581440209, 0.20073571061606565, 0.033621870649481744, 0.2140669617822698, 0.15540881857668787, 0.10010699695496728, 0.05114911557432045, 0.036478258517493534, 0.24588767849026938, 0.047982094793629915, 0.05480320533773286, 0.10875082931616142, 0.4289592452750973, 0.4416350997177886, 0.4315691792676474, 0.4494720904228551, 0.44378161897177393, 0.43947121528905486, 0.4510456579380637, 0.38154039302809195, 0.42241258769092116, 0.1026281586652964, 0.08719186303206228, 0.10754359682352355, 0.08249318750507684, 0.08199627540958987, 0.07808158390285791, 0.06688918121979293, 0.08168530127566553, 0.10151892371956495, 0.29291794816032735, 0.1477776342403342, 0.1538702199981129, 0.20253964285759174, 0.1465594642824879, 0.1850822955350111, 0.20549721341139915, 0.15952347474046857, 0.15071804340454364, 0.2634771488628629, 0.25983619332078334, 0.313144732004041, 0.2525810481009547, 0.23325309297760788, 0.28691601079562956, 0.3052211112792488, 0.24919755998756865, 0.29374789433070114, 0.15895663888627298, 0.1511035869586249, 0.17302458132287413, 0.1531473405106566, 0.180881291486927, 0.1885176691180499, 0.22306821888341388, 0.19529327272187835, 0.24504627734838946, 0.162043164470432, 0.1679952633711569, 0.17440484993490013, 0.17398723303471564, 0.1675968260685784, 0.17469263137667235, 0.16305760525247426, 0.17042445032037723, 0.1713671420441607, 0.21916491082112466, 0.19686924752935864, 0.18024589049395234, 0.17663600713902072, 0.2079292951195285, 0.1862299880376712, 0.22453513380538537, 0.18724125671551506, 0.18471304782281417, 0.20602862133375466, 0.16071341744450618, 0.15666673908474493, 0.7459594707276515, 0.19623272843184225, 0.16569308508043612, 0.13941253338189763, 0.14136250397575134, 0.20182232568103908, 0.3540857101457757, 0.2060135386205455, 0.15311744645053227, 0.15999029861343628, 0.1960401479586088, 0.14241775068278184, 0.20471206286448274, 0.21058276697496536, 0.3327363406414704, 0.20860119476021644, 0.18093293824901602, 0.1722917085161031, 0.18159265081373255, 0.17481238962250267, 0.17942853059298391, 0.1775829035721005, 0.1700580445004345, 0.18943261126543232, 0.06734027008250609, 0.06340025322643472, 0.07002191647124145, 0.08777184126028204, 0.06491153593126286, 0.08337989263680978, 0.057818886917118784, 0.06928084759509112, 0.06633644011270312]}, "mutation_prompt": null}
{"id": "f2cc3572-55a9-4454-96bf-01eb8aa1c7ba", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.3 * (self.func_evals / self.budget))  # Slightly modified DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance the DE mutation by introducing a differential evolution inspired adaptive strategy for balancing exploration and exploitation.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1edff31a-dc64-4aae-8f38-a5d7dd4799c2", "metadata": {"aucs": [0.6248818867393677, 0.6478821791590514, 0.6539290815557712, 0.685366798093394, 0.6500719404154092, 0.7089347634282024, 0.6440492979343806, 0.6380312840999014, 0.6253878692069061, 0.4145177749169584, 0.33352390858468506, 0.2294449008079965, 0.28947568172006977, 0.4785978731993745, 0.3886602404246755, 0.37174362789494375, 0.36594562384213336, 0.33835269249761246, 0.0983959545921449, 0.0747432534072614, 0.09789721440513799, 0.10267057883423714, 0.11277054389837882, 0.09887357913706074, 0.09016281542021476, 0.09733034409981878, 0.05625817094094565, 0.08765670918536084, 0.08220064272925243, 0.07878810763810962, 0.07623850360557993, 0.08616007259009983, 0.0808051298251179, 0.09585678046581358, 0.09011824208521668, 0.08144833373922333, 0.980028240276233, 0.9919149258641317, 0.9414710409508313, 0.9920357609146625, 0.9758100795915784, 0.985056639255845, 0.9796530222018754, 0.9886515639268033, 0.9873478068379182, 0.28591404810672805, 0.19737511225332527, 0.16702968971561327, 0.20100826344087241, 0.20677861573558598, 0.19462685768823407, 0.1815120085832328, 0.16542730306275388, 0.22388125730650532, 0.19409687935170472, 0.16828446098480832, 0.29418192698450296, 0.297835703608487, 0.23869234769923575, 0.17887496114912704, 0.22119715125228367, 0.21068137125783004, 0.4230075602163008, 0.16120573976228603, 0.16020314977578232, 0.14351584814488738, 0.08802127211957522, 0.1584254218308362, 0.10403666956874824, 0.08425918057575577, 0.17793387745126388, 0.13022707585350124, 0.14246594461980278, 0.07665288236176981, 0.10348613172363985, 0.2895863809606021, 0.10128455705574746, 0.1418534515027804, 0.1775217222191231, 0.1710846465146214, 0.10775622628488346, 9.999999999998899e-05, 0.023206271733100747, 9.999999999998899e-05, 0.021420356254977513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05817691239405576, 0.03307436545733666, 0.036591474616068265, 0.11813648352046258, 0.008102002985566514, 0.03199963640665904, 0.04412311274773306, 0.05353219343565563, 0.03971327508232714, 0.09064631058695172, 0.05274619057918806, 0.025601551219928798, 0.061136179100976906, 0.06776409397422356, 0.04914110552342066, 0.06956653581440209, 0.20073571061606565, 0.033621870649481744, 0.2140669617822698, 0.15540881857668787, 0.10010699695496728, 0.05114911557432045, 0.036478258517493534, 0.24588767849026938, 0.047982094793629915, 0.05480320533773286, 0.10875082931616142, 0.4289592452750973, 0.4416350997177886, 0.4315691792676474, 0.4494720904228551, 0.44378161897177393, 0.43947121528905486, 0.4510456579380637, 0.38154039302809195, 0.42241258769092116, 0.1026281586652964, 0.08719186303206228, 0.10754359682352355, 0.08249318750507684, 0.08199627540958987, 0.07808158390285791, 0.06688918121979293, 0.08168530127566553, 0.10151892371956495, 0.29291794816032735, 0.1477776342403342, 0.1538702199981129, 0.20253964285759174, 0.1465594642824879, 0.1850822955350111, 0.20549721341139915, 0.15952347474046857, 0.15071804340454364, 0.2634771488628629, 0.25983619332078334, 0.313144732004041, 0.2525810481009547, 0.23325309297760788, 0.28691601079562956, 0.3052211112792488, 0.24919755998756865, 0.29374789433070114, 0.15895663888627298, 0.1511035869586249, 0.17302458132287413, 0.1531473405106566, 0.180881291486927, 0.1885176691180499, 0.22306821888341388, 0.19529327272187835, 0.24504627734838946, 0.162043164470432, 0.1679952633711569, 0.17440484993490013, 0.17398723303471564, 0.1675968260685784, 0.17469263137667235, 0.16305760525247426, 0.17042445032037723, 0.1713671420441607, 0.21916491082112466, 0.19686924752935864, 0.18024589049395234, 0.17663600713902072, 0.2079292951195285, 0.1862299880376712, 0.22453513380538537, 0.18724125671551506, 0.18471304782281417, 0.20602862133375466, 0.16071341744450618, 0.15666673908474493, 0.7459594707276515, 0.19623272843184225, 0.16569308508043612, 0.13941253338189763, 0.14136250397575134, 0.20182232568103908, 0.3540857101457757, 0.2060135386205455, 0.15311744645053227, 0.15999029861343628, 0.1960401479586088, 0.14241775068278184, 0.20471206286448274, 0.21058276697496536, 0.3327363406414704, 0.20860119476021644, 0.18093293824901602, 0.1722917085161031, 0.18159265081373255, 0.17481238962250267, 0.17942853059298391, 0.1775829035721005, 0.1700580445004345, 0.18943261126543232, 0.06734027008250609, 0.06340025322643472, 0.07002191647124145, 0.08777184126028204, 0.06491153593126286, 0.08337989263680978, 0.057818886917118784, 0.06928084759509112, 0.06633644011270312]}, "mutation_prompt": null}
{"id": "6dc8fc11-a26e-405c-b24b-42f89eeb5426", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.3 * (self.func_evals / self.budget))  # Slightly modified DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance exploration by introducing a dynamic global adjustment factor in the DE mutation process.", "configspace": "", "generation": 40, "fitness": 0.22352762880538912, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "1edff31a-dc64-4aae-8f38-a5d7dd4799c2", "metadata": {"aucs": [0.6248818867393677, 0.6478821791590514, 0.6539290815557712, 0.685366798093394, 0.6500719404154092, 0.7089347634282024, 0.6440492979343806, 0.6380312840999014, 0.6253878692069061, 0.4145177749169584, 0.33352390858468506, 0.2294449008079965, 0.28947568172006977, 0.4785978731993745, 0.3886602404246755, 0.37174362789494375, 0.36594562384213336, 0.33835269249761246, 0.0983959545921449, 0.0747432534072614, 0.09789721440513799, 0.10267057883423714, 0.11277054389837882, 0.09887357913706074, 0.09016281542021476, 0.09733034409981878, 0.05625817094094565, 0.08765670918536084, 0.08220064272925243, 0.07878810763810962, 0.07623850360557993, 0.08616007259009983, 0.0808051298251179, 0.09585678046581358, 0.09011824208521668, 0.08144833373922333, 0.980028240276233, 0.9919149258641317, 0.9414710409508313, 0.9920357609146625, 0.9758100795915784, 0.985056639255845, 0.9796530222018754, 0.9886515639268033, 0.9873478068379182, 0.28591404810672805, 0.19737511225332527, 0.16702968971561327, 0.20100826344087241, 0.20677861573558598, 0.19462685768823407, 0.1815120085832328, 0.16542730306275388, 0.22388125730650532, 0.19409687935170472, 0.16828446098480832, 0.29418192698450296, 0.297835703608487, 0.23869234769923575, 0.17887496114912704, 0.22119715125228367, 0.21068137125783004, 0.4230075602163008, 0.16120573976228603, 0.16020314977578232, 0.14351584814488738, 0.08802127211957522, 0.1584254218308362, 0.10403666956874824, 0.08425918057575577, 0.17793387745126388, 0.13022707585350124, 0.14246594461980278, 0.07665288236176981, 0.10348613172363985, 0.2895863809606021, 0.10128455705574746, 0.1418534515027804, 0.1775217222191231, 0.1710846465146214, 0.10775622628488346, 9.999999999998899e-05, 0.023206271733100747, 9.999999999998899e-05, 0.021420356254977513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05817691239405576, 0.03307436545733666, 0.036591474616068265, 0.11813648352046258, 0.008102002985566514, 0.03199963640665904, 0.04412311274773306, 0.05353219343565563, 0.03971327508232714, 0.09064631058695172, 0.05274619057918806, 0.025601551219928798, 0.061136179100976906, 0.06776409397422356, 0.04914110552342066, 0.06956653581440209, 0.20073571061606565, 0.033621870649481744, 0.2140669617822698, 0.15540881857668787, 0.10010699695496728, 0.05114911557432045, 0.036478258517493534, 0.24588767849026938, 0.047982094793629915, 0.05480320533773286, 0.10875082931616142, 0.4289592452750973, 0.4416350997177886, 0.4315691792676474, 0.4494720904228551, 0.44378161897177393, 0.43947121528905486, 0.4510456579380637, 0.38154039302809195, 0.42241258769092116, 0.1026281586652964, 0.08719186303206228, 0.10754359682352355, 0.08249318750507684, 0.08199627540958987, 0.07808158390285791, 0.06688918121979293, 0.08168530127566553, 0.10151892371956495, 0.29291794816032735, 0.1477776342403342, 0.1538702199981129, 0.20253964285759174, 0.1465594642824879, 0.1850822955350111, 0.20549721341139915, 0.15952347474046857, 0.15071804340454364, 0.2634771488628629, 0.25983619332078334, 0.313144732004041, 0.2525810481009547, 0.23325309297760788, 0.28691601079562956, 0.3052211112792488, 0.24919755998756865, 0.29374789433070114, 0.15895663888627298, 0.1511035869586249, 0.17302458132287413, 0.1531473405106566, 0.180881291486927, 0.1885176691180499, 0.22306821888341388, 0.19529327272187835, 0.24504627734838946, 0.162043164470432, 0.1679952633711569, 0.17440484993490013, 0.17398723303471564, 0.1675968260685784, 0.17469263137667235, 0.16305760525247426, 0.17042445032037723, 0.1713671420441607, 0.21916491082112466, 0.19686924752935864, 0.18024589049395234, 0.17663600713902072, 0.2079292951195285, 0.1862299880376712, 0.22453513380538537, 0.18724125671551506, 0.18471304782281417, 0.20602862133375466, 0.16071341744450618, 0.15666673908474493, 0.7459594707276515, 0.19623272843184225, 0.16569308508043612, 0.13941253338189763, 0.14136250397575134, 0.20182232568103908, 0.3540857101457757, 0.2060135386205455, 0.15311744645053227, 0.15999029861343628, 0.1960401479586088, 0.14241775068278184, 0.20471206286448274, 0.21058276697496536, 0.3327363406414704, 0.20860119476021644, 0.18093293824901602, 0.1722917085161031, 0.18159265081373255, 0.17481238962250267, 0.17942853059298391, 0.1775829035721005, 0.1700580445004345, 0.18943261126543232, 0.06734027008250609, 0.06340025322643472, 0.07002191647124145, 0.08777184126028204, 0.06491153593126286, 0.08337989263680978, 0.057818886917118784, 0.06928084759509112, 0.06633644011270312]}, "mutation_prompt": null}
{"id": "70adc302-2951-4861-a533-efe70f2c8a33", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.3 * (self.func_evals / self.budget))  # Slightly modified DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance the DE mutation by introducing a differential evolution inspired adaptive strategy for balancing exploration and exploitation.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1edff31a-dc64-4aae-8f38-a5d7dd4799c2", "metadata": {"aucs": [0.6248818867393677, 0.6478821791590514, 0.6539290815557712, 0.685366798093394, 0.6500719404154092, 0.7089347634282024, 0.6440492979343806, 0.6380312840999014, 0.6253878692069061, 0.4145177749169584, 0.33352390858468506, 0.2294449008079965, 0.28947568172006977, 0.4785978731993745, 0.3886602404246755, 0.37174362789494375, 0.36594562384213336, 0.33835269249761246, 0.0983959545921449, 0.0747432534072614, 0.09789721440513799, 0.10267057883423714, 0.11277054389837882, 0.09887357913706074, 0.09016281542021476, 0.09733034409981878, 0.05625817094094565, 0.08765670918536084, 0.08220064272925243, 0.07878810763810962, 0.07623850360557993, 0.08616007259009983, 0.0808051298251179, 0.09585678046581358, 0.09011824208521668, 0.08144833373922333, 0.980028240276233, 0.9919149258641317, 0.9414710409508313, 0.9920357609146625, 0.9758100795915784, 0.985056639255845, 0.9796530222018754, 0.9886515639268033, 0.9873478068379182, 0.28591404810672805, 0.19737511225332527, 0.16702968971561327, 0.20100826344087241, 0.20677861573558598, 0.19462685768823407, 0.1815120085832328, 0.16542730306275388, 0.22388125730650532, 0.19409687935170472, 0.16828446098480832, 0.29418192698450296, 0.297835703608487, 0.23869234769923575, 0.17887496114912704, 0.22119715125228367, 0.21068137125783004, 0.4230075602163008, 0.16120573976228603, 0.16020314977578232, 0.14351584814488738, 0.08802127211957522, 0.1584254218308362, 0.10403666956874824, 0.08425918057575577, 0.17793387745126388, 0.13022707585350124, 0.14246594461980278, 0.07665288236176981, 0.10348613172363985, 0.2895863809606021, 0.10128455705574746, 0.1418534515027804, 0.1775217222191231, 0.1710846465146214, 0.10775622628488346, 9.999999999998899e-05, 0.023206271733100747, 9.999999999998899e-05, 0.021420356254977513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05817691239405576, 0.03307436545733666, 0.036591474616068265, 0.11813648352046258, 0.008102002985566514, 0.03199963640665904, 0.04412311274773306, 0.05353219343565563, 0.03971327508232714, 0.09064631058695172, 0.05274619057918806, 0.025601551219928798, 0.061136179100976906, 0.06776409397422356, 0.04914110552342066, 0.06956653581440209, 0.20073571061606565, 0.033621870649481744, 0.2140669617822698, 0.15540881857668787, 0.10010699695496728, 0.05114911557432045, 0.036478258517493534, 0.24588767849026938, 0.047982094793629915, 0.05480320533773286, 0.10875082931616142, 0.4289592452750973, 0.4416350997177886, 0.4315691792676474, 0.4494720904228551, 0.44378161897177393, 0.43947121528905486, 0.4510456579380637, 0.38154039302809195, 0.42241258769092116, 0.1026281586652964, 0.08719186303206228, 0.10754359682352355, 0.08249318750507684, 0.08199627540958987, 0.07808158390285791, 0.06688918121979293, 0.08168530127566553, 0.10151892371956495, 0.29291794816032735, 0.1477776342403342, 0.1538702199981129, 0.20253964285759174, 0.1465594642824879, 0.1850822955350111, 0.20549721341139915, 0.15952347474046857, 0.15071804340454364, 0.2634771488628629, 0.25983619332078334, 0.313144732004041, 0.2525810481009547, 0.23325309297760788, 0.28691601079562956, 0.3052211112792488, 0.24919755998756865, 0.29374789433070114, 0.15895663888627298, 0.1511035869586249, 0.17302458132287413, 0.1531473405106566, 0.180881291486927, 0.1885176691180499, 0.22306821888341388, 0.19529327272187835, 0.24504627734838946, 0.162043164470432, 0.1679952633711569, 0.17440484993490013, 0.17398723303471564, 0.1675968260685784, 0.17469263137667235, 0.16305760525247426, 0.17042445032037723, 0.1713671420441607, 0.21916491082112466, 0.19686924752935864, 0.18024589049395234, 0.17663600713902072, 0.2079292951195285, 0.1862299880376712, 0.22453513380538537, 0.18724125671551506, 0.18471304782281417, 0.20602862133375466, 0.16071341744450618, 0.15666673908474493, 0.7459594707276515, 0.19623272843184225, 0.16569308508043612, 0.13941253338189763, 0.14136250397575134, 0.20182232568103908, 0.3540857101457757, 0.2060135386205455, 0.15311744645053227, 0.15999029861343628, 0.1960401479586088, 0.14241775068278184, 0.20471206286448274, 0.21058276697496536, 0.3327363406414704, 0.20860119476021644, 0.18093293824901602, 0.1722917085161031, 0.18159265081373255, 0.17481238962250267, 0.17942853059298391, 0.1775829035721005, 0.1700580445004345, 0.18943261126543232, 0.06734027008250609, 0.06340025322643472, 0.07002191647124145, 0.08777184126028204, 0.06491153593126286, 0.08337989263680978, 0.057818886917118784, 0.06928084759509112, 0.06633644011270312]}, "mutation_prompt": null}
{"id": "1c543f84-f577-420c-bc66-44927f093b9f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.4 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improve convergence by reducing DE scaling factor F more aggressively over time.", "configspace": "", "generation": 42, "fitness": 0.23209739019378142, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "1edff31a-dc64-4aae-8f38-a5d7dd4799c2", "metadata": {"aucs": [0.6785088128074537, 0.6314782740115239, 0.6496383609011469, 0.7422203720037386, 0.6611935094630539, 0.6665245869235181, 0.6763018882748355, 0.6769641442711808, 0.6224404265695465, 0.40787324523935176, 0.4252731747606424, 0.41480995676294197, 0.43174234015886914, 0.4550782186580973, 0.3980247504606176, 0.38529352945793394, 0.32310578428246794, 0.43090627693036887, 0.08151584023648939, 0.11373842784815902, 0.09051541514881323, 0.057261957676027264, 0.09365989188311596, 0.09834488726473933, 0.1363702628156992, 0.09640672648840332, 0.0900353612029865, 0.08361101294888773, 0.08416332228690282, 0.08861212359756787, 0.09913709246168223, 0.0925996719715938, 0.0979209903474999, 0.09304300462635784, 0.09335649203180674, 0.10372184657877859, 0.9800247639485352, 0.9919148222270907, 0.9414590085624581, 0.9920354751628256, 0.9758079647552972, 0.9850566320767428, 0.9796528309468522, 0.988651560783833, 0.987347784758913, 0.23433371075493292, 0.19472399363704396, 0.1098119762991353, 0.2310669036055898, 0.22510883708950846, 0.18750014239164814, 0.2367763573986229, 0.20186279724867995, 0.1852821926207735, 0.5303199923087558, 0.4971823670520976, 0.5170304685945668, 0.2471561096815541, 0.3114661097938737, 0.22626149044016797, 0.2275627448930584, 0.35021854129293084, 0.2702709704557972, 0.1736706282558469, 0.16590187663801537, 0.13296349377865258, 0.12457853760042725, 0.18081629589055637, 0.11404100825278052, 0.12664244017900617, 0.15987822341718383, 0.17768849097204242, 0.12707532128842391, 0.09840878615640125, 0.13234584457822474, 0.1500300861550924, 0.11496709971762942, 0.1557371810771656, 0.11655930017352256, 0.15521138883342633, 0.177212441341416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003310201265344981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005686874033877243, 9.999999999998899e-05, 0.04806069178695338, 0.03802211647385523, 0.040551640466226724, 0.07300784938665672, 0.005209876403152736, 0.005960738472244542, 0.03737284185325518, 0.029277482208583394, 0.04067698299518818, 0.0371805086283572, 0.18374818658706826, 0.027551893723863352, 0.05642483988722724, 0.06075828202194844, 0.055013961186034965, 0.04963095999965883, 0.06829129123256428, 0.05956377885919606, 0.04187547326646346, 0.03855217286456669, 0.10656111602093765, 0.05576062855061459, 0.05694317840114582, 0.10717500505498845, 0.0780304151420087, 0.05725669328230887, 0.07474097608961294, 0.43055016618993003, 0.3977554688941859, 0.3889600762845241, 0.451804828214046, 0.4228044171302938, 0.44882319699430684, 0.4300084381596928, 0.45984202643346395, 0.4481187127428774, 0.08460820094221888, 0.07509624025455064, 0.08779290581007004, 0.08477024801647037, 0.08222678559400742, 0.06765424848950474, 0.0671068738881564, 0.11830274055855317, 0.10517354717426874, 0.15048938785879906, 0.15798554121065822, 0.15104628319006408, 0.15073632286074878, 0.2039086879986991, 0.3348549417721086, 0.195911692632892, 0.1463311128441266, 0.21230130592302443, 0.2858368168420179, 0.2875605896698916, 0.2277010182926511, 0.2679548089385365, 0.2721686484657343, 0.27059744144494347, 0.30191668474441336, 0.3266031112456893, 0.3239100190220514, 0.1436700895998998, 0.16761707535452752, 0.17789380295435553, 0.20863882008360146, 0.16626761228396514, 0.19059393405918845, 0.23206067197416458, 0.2724372512553991, 0.17068314619690572, 0.164812122548606, 0.14555838180753178, 0.17079405357168143, 0.16104697979646787, 0.17237869474123657, 0.21666142164314184, 0.17788651496250718, 0.1714537175319818, 0.16366128145383263, 0.1915881664704413, 0.18889886449994142, 0.18748023093021982, 0.19263747437585366, 0.18525434373003757, 0.19231097334054237, 0.20531076570451234, 0.18988214397852443, 0.1832017868712883, 0.20743577072667208, 0.6065327995289358, 0.15751467297175237, 0.7729928853889014, 0.1936157891987338, 0.16566891548893037, 0.1391903698198752, 0.14119988314710608, 0.20288923504096223, 0.3756131739876204, 0.20997438627054166, 0.15086405021427785, 0.16510332850445397, 0.20246458449530358, 0.14674239266495492, 0.20473381871061236, 0.2100065822910987, 0.48309209117116647, 0.1750044918471576, 0.18178284771637465, 0.16485452519873456, 0.18476363191338196, 0.1790990986862001, 0.17926082310620384, 0.1689176561940614, 0.17152248593669006, 0.17745523428876964, 0.0675407881215433, 0.06455216453814883, 0.06341739174841676, 0.06236148934049779, 0.06343794881698761, 0.07532866018248607, 0.06564056406606555, 0.0735285763492941, 0.06513568715154527]}, "mutation_prompt": null}
{"id": "5b52add2-2754-43c2-be32-8076710d12cd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.4 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improve convergence by reducing DE scaling factor F more aggressively over time.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c543f84-f577-420c-bc66-44927f093b9f", "metadata": {"aucs": [0.6785088128074537, 0.6314782740115239, 0.6496383609011469, 0.7422203720037386, 0.6611935094630539, 0.6665245869235181, 0.6763018882748355, 0.6769641442711808, 0.6224404265695465, 0.40787324523935176, 0.4252731747606424, 0.41480995676294197, 0.43174234015886914, 0.4550782186580973, 0.3980247504606176, 0.38529352945793394, 0.32310578428246794, 0.43090627693036887, 0.08151584023648939, 0.11373842784815902, 0.09051541514881323, 0.057261957676027264, 0.09365989188311596, 0.09834488726473933, 0.1363702628156992, 0.09640672648840332, 0.0900353612029865, 0.08361101294888773, 0.08416332228690282, 0.08861212359756787, 0.09913709246168223, 0.0925996719715938, 0.0979209903474999, 0.09304300462635784, 0.09335649203180674, 0.10372184657877859, 0.9800247639485352, 0.9919148222270907, 0.9414590085624581, 0.9920354751628256, 0.9758079647552972, 0.9850566320767428, 0.9796528309468522, 0.988651560783833, 0.987347784758913, 0.23433371075493292, 0.19472399363704396, 0.1098119762991353, 0.2310669036055898, 0.22510883708950846, 0.18750014239164814, 0.2367763573986229, 0.20186279724867995, 0.1852821926207735, 0.5303199923087558, 0.4971823670520976, 0.5170304685945668, 0.2471561096815541, 0.3114661097938737, 0.22626149044016797, 0.2275627448930584, 0.35021854129293084, 0.2702709704557972, 0.1736706282558469, 0.16590187663801537, 0.13296349377865258, 0.12457853760042725, 0.18081629589055637, 0.11404100825278052, 0.12664244017900617, 0.15987822341718383, 0.17768849097204242, 0.12707532128842391, 0.09840878615640125, 0.13234584457822474, 0.1500300861550924, 0.11496709971762942, 0.1557371810771656, 0.11655930017352256, 0.15521138883342633, 0.177212441341416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003310201265344981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005686874033877243, 9.999999999998899e-05, 0.04806069178695338, 0.03802211647385523, 0.040551640466226724, 0.07300784938665672, 0.005209876403152736, 0.005960738472244542, 0.03737284185325518, 0.029277482208583394, 0.04067698299518818, 0.0371805086283572, 0.18374818658706826, 0.027551893723863352, 0.05642483988722724, 0.06075828202194844, 0.055013961186034965, 0.04963095999965883, 0.06829129123256428, 0.05956377885919606, 0.04187547326646346, 0.03855217286456669, 0.10656111602093765, 0.05576062855061459, 0.05694317840114582, 0.10717500505498845, 0.0780304151420087, 0.05725669328230887, 0.07474097608961294, 0.43055016618993003, 0.3977554688941859, 0.3889600762845241, 0.451804828214046, 0.4228044171302938, 0.44882319699430684, 0.4300084381596928, 0.45984202643346395, 0.4481187127428774, 0.08460820094221888, 0.07509624025455064, 0.08779290581007004, 0.08477024801647037, 0.08222678559400742, 0.06765424848950474, 0.0671068738881564, 0.11830274055855317, 0.10517354717426874, 0.15048938785879906, 0.15798554121065822, 0.15104628319006408, 0.15073632286074878, 0.2039086879986991, 0.3348549417721086, 0.195911692632892, 0.1463311128441266, 0.21230130592302443, 0.2858368168420179, 0.2875605896698916, 0.2277010182926511, 0.2679548089385365, 0.2721686484657343, 0.27059744144494347, 0.30191668474441336, 0.3266031112456893, 0.3239100190220514, 0.1436700895998998, 0.16761707535452752, 0.17789380295435553, 0.20863882008360146, 0.16626761228396514, 0.19059393405918845, 0.23206067197416458, 0.2724372512553991, 0.17068314619690572, 0.164812122548606, 0.14555838180753178, 0.17079405357168143, 0.16104697979646787, 0.17237869474123657, 0.21666142164314184, 0.17788651496250718, 0.1714537175319818, 0.16366128145383263, 0.1915881664704413, 0.18889886449994142, 0.18748023093021982, 0.19263747437585366, 0.18525434373003757, 0.19231097334054237, 0.20531076570451234, 0.18988214397852443, 0.1832017868712883, 0.20743577072667208, 0.6065327995289358, 0.15751467297175237, 0.7729928853889014, 0.1936157891987338, 0.16566891548893037, 0.1391903698198752, 0.14119988314710608, 0.20288923504096223, 0.3756131739876204, 0.20997438627054166, 0.15086405021427785, 0.16510332850445397, 0.20246458449530358, 0.14674239266495492, 0.20473381871061236, 0.2100065822910987, 0.48309209117116647, 0.1750044918471576, 0.18178284771637465, 0.16485452519873456, 0.18476363191338196, 0.1790990986862001, 0.17926082310620384, 0.1689176561940614, 0.17152248593669006, 0.17745523428876964, 0.0675407881215433, 0.06455216453814883, 0.06341739174841676, 0.06236148934049779, 0.06343794881698761, 0.07532866018248607, 0.06564056406606555, 0.0735285763492941, 0.06513568715154527]}, "mutation_prompt": null}
{"id": "fd106774-0279-44e5-8859-b2ee772dc853", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.4 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improve convergence by reducing DE scaling factor F more aggressively over time.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c543f84-f577-420c-bc66-44927f093b9f", "metadata": {"aucs": [0.6785088128074537, 0.6314782740115239, 0.6496383609011469, 0.7422203720037386, 0.6611935094630539, 0.6665245869235181, 0.6763018882748355, 0.6769641442711808, 0.6224404265695465, 0.40787324523935176, 0.4252731747606424, 0.41480995676294197, 0.43174234015886914, 0.4550782186580973, 0.3980247504606176, 0.38529352945793394, 0.32310578428246794, 0.43090627693036887, 0.08151584023648939, 0.11373842784815902, 0.09051541514881323, 0.057261957676027264, 0.09365989188311596, 0.09834488726473933, 0.1363702628156992, 0.09640672648840332, 0.0900353612029865, 0.08361101294888773, 0.08416332228690282, 0.08861212359756787, 0.09913709246168223, 0.0925996719715938, 0.0979209903474999, 0.09304300462635784, 0.09335649203180674, 0.10372184657877859, 0.9800247639485352, 0.9919148222270907, 0.9414590085624581, 0.9920354751628256, 0.9758079647552972, 0.9850566320767428, 0.9796528309468522, 0.988651560783833, 0.987347784758913, 0.23433371075493292, 0.19472399363704396, 0.1098119762991353, 0.2310669036055898, 0.22510883708950846, 0.18750014239164814, 0.2367763573986229, 0.20186279724867995, 0.1852821926207735, 0.5303199923087558, 0.4971823670520976, 0.5170304685945668, 0.2471561096815541, 0.3114661097938737, 0.22626149044016797, 0.2275627448930584, 0.35021854129293084, 0.2702709704557972, 0.1736706282558469, 0.16590187663801537, 0.13296349377865258, 0.12457853760042725, 0.18081629589055637, 0.11404100825278052, 0.12664244017900617, 0.15987822341718383, 0.17768849097204242, 0.12707532128842391, 0.09840878615640125, 0.13234584457822474, 0.1500300861550924, 0.11496709971762942, 0.1557371810771656, 0.11655930017352256, 0.15521138883342633, 0.177212441341416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003310201265344981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005686874033877243, 9.999999999998899e-05, 0.04806069178695338, 0.03802211647385523, 0.040551640466226724, 0.07300784938665672, 0.005209876403152736, 0.005960738472244542, 0.03737284185325518, 0.029277482208583394, 0.04067698299518818, 0.0371805086283572, 0.18374818658706826, 0.027551893723863352, 0.05642483988722724, 0.06075828202194844, 0.055013961186034965, 0.04963095999965883, 0.06829129123256428, 0.05956377885919606, 0.04187547326646346, 0.03855217286456669, 0.10656111602093765, 0.05576062855061459, 0.05694317840114582, 0.10717500505498845, 0.0780304151420087, 0.05725669328230887, 0.07474097608961294, 0.43055016618993003, 0.3977554688941859, 0.3889600762845241, 0.451804828214046, 0.4228044171302938, 0.44882319699430684, 0.4300084381596928, 0.45984202643346395, 0.4481187127428774, 0.08460820094221888, 0.07509624025455064, 0.08779290581007004, 0.08477024801647037, 0.08222678559400742, 0.06765424848950474, 0.0671068738881564, 0.11830274055855317, 0.10517354717426874, 0.15048938785879906, 0.15798554121065822, 0.15104628319006408, 0.15073632286074878, 0.2039086879986991, 0.3348549417721086, 0.195911692632892, 0.1463311128441266, 0.21230130592302443, 0.2858368168420179, 0.2875605896698916, 0.2277010182926511, 0.2679548089385365, 0.2721686484657343, 0.27059744144494347, 0.30191668474441336, 0.3266031112456893, 0.3239100190220514, 0.1436700895998998, 0.16761707535452752, 0.17789380295435553, 0.20863882008360146, 0.16626761228396514, 0.19059393405918845, 0.23206067197416458, 0.2724372512553991, 0.17068314619690572, 0.164812122548606, 0.14555838180753178, 0.17079405357168143, 0.16104697979646787, 0.17237869474123657, 0.21666142164314184, 0.17788651496250718, 0.1714537175319818, 0.16366128145383263, 0.1915881664704413, 0.18889886449994142, 0.18748023093021982, 0.19263747437585366, 0.18525434373003757, 0.19231097334054237, 0.20531076570451234, 0.18988214397852443, 0.1832017868712883, 0.20743577072667208, 0.6065327995289358, 0.15751467297175237, 0.7729928853889014, 0.1936157891987338, 0.16566891548893037, 0.1391903698198752, 0.14119988314710608, 0.20288923504096223, 0.3756131739876204, 0.20997438627054166, 0.15086405021427785, 0.16510332850445397, 0.20246458449530358, 0.14674239266495492, 0.20473381871061236, 0.2100065822910987, 0.48309209117116647, 0.1750044918471576, 0.18178284771637465, 0.16485452519873456, 0.18476363191338196, 0.1790990986862001, 0.17926082310620384, 0.1689176561940614, 0.17152248593669006, 0.17745523428876964, 0.0675407881215433, 0.06455216453814883, 0.06341739174841676, 0.06236148934049779, 0.06343794881698761, 0.07532866018248607, 0.06564056406606555, 0.0735285763492941, 0.06513568715154527]}, "mutation_prompt": null}
{"id": "99600ed7-7dc2-428d-8781-f7e6723676ad", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.4 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improve convergence by reducing DE scaling factor F more aggressively over time.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c543f84-f577-420c-bc66-44927f093b9f", "metadata": {"aucs": [0.6785088128074537, 0.6314782740115239, 0.6496383609011469, 0.7422203720037386, 0.6611935094630539, 0.6665245869235181, 0.6763018882748355, 0.6769641442711808, 0.6224404265695465, 0.40787324523935176, 0.4252731747606424, 0.41480995676294197, 0.43174234015886914, 0.4550782186580973, 0.3980247504606176, 0.38529352945793394, 0.32310578428246794, 0.43090627693036887, 0.08151584023648939, 0.11373842784815902, 0.09051541514881323, 0.057261957676027264, 0.09365989188311596, 0.09834488726473933, 0.1363702628156992, 0.09640672648840332, 0.0900353612029865, 0.08361101294888773, 0.08416332228690282, 0.08861212359756787, 0.09913709246168223, 0.0925996719715938, 0.0979209903474999, 0.09304300462635784, 0.09335649203180674, 0.10372184657877859, 0.9800247639485352, 0.9919148222270907, 0.9414590085624581, 0.9920354751628256, 0.9758079647552972, 0.9850566320767428, 0.9796528309468522, 0.988651560783833, 0.987347784758913, 0.23433371075493292, 0.19472399363704396, 0.1098119762991353, 0.2310669036055898, 0.22510883708950846, 0.18750014239164814, 0.2367763573986229, 0.20186279724867995, 0.1852821926207735, 0.5303199923087558, 0.4971823670520976, 0.5170304685945668, 0.2471561096815541, 0.3114661097938737, 0.22626149044016797, 0.2275627448930584, 0.35021854129293084, 0.2702709704557972, 0.1736706282558469, 0.16590187663801537, 0.13296349377865258, 0.12457853760042725, 0.18081629589055637, 0.11404100825278052, 0.12664244017900617, 0.15987822341718383, 0.17768849097204242, 0.12707532128842391, 0.09840878615640125, 0.13234584457822474, 0.1500300861550924, 0.11496709971762942, 0.1557371810771656, 0.11655930017352256, 0.15521138883342633, 0.177212441341416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003310201265344981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005686874033877243, 9.999999999998899e-05, 0.04806069178695338, 0.03802211647385523, 0.040551640466226724, 0.07300784938665672, 0.005209876403152736, 0.005960738472244542, 0.03737284185325518, 0.029277482208583394, 0.04067698299518818, 0.0371805086283572, 0.18374818658706826, 0.027551893723863352, 0.05642483988722724, 0.06075828202194844, 0.055013961186034965, 0.04963095999965883, 0.06829129123256428, 0.05956377885919606, 0.04187547326646346, 0.03855217286456669, 0.10656111602093765, 0.05576062855061459, 0.05694317840114582, 0.10717500505498845, 0.0780304151420087, 0.05725669328230887, 0.07474097608961294, 0.43055016618993003, 0.3977554688941859, 0.3889600762845241, 0.451804828214046, 0.4228044171302938, 0.44882319699430684, 0.4300084381596928, 0.45984202643346395, 0.4481187127428774, 0.08460820094221888, 0.07509624025455064, 0.08779290581007004, 0.08477024801647037, 0.08222678559400742, 0.06765424848950474, 0.0671068738881564, 0.11830274055855317, 0.10517354717426874, 0.15048938785879906, 0.15798554121065822, 0.15104628319006408, 0.15073632286074878, 0.2039086879986991, 0.3348549417721086, 0.195911692632892, 0.1463311128441266, 0.21230130592302443, 0.2858368168420179, 0.2875605896698916, 0.2277010182926511, 0.2679548089385365, 0.2721686484657343, 0.27059744144494347, 0.30191668474441336, 0.3266031112456893, 0.3239100190220514, 0.1436700895998998, 0.16761707535452752, 0.17789380295435553, 0.20863882008360146, 0.16626761228396514, 0.19059393405918845, 0.23206067197416458, 0.2724372512553991, 0.17068314619690572, 0.164812122548606, 0.14555838180753178, 0.17079405357168143, 0.16104697979646787, 0.17237869474123657, 0.21666142164314184, 0.17788651496250718, 0.1714537175319818, 0.16366128145383263, 0.1915881664704413, 0.18889886449994142, 0.18748023093021982, 0.19263747437585366, 0.18525434373003757, 0.19231097334054237, 0.20531076570451234, 0.18988214397852443, 0.1832017868712883, 0.20743577072667208, 0.6065327995289358, 0.15751467297175237, 0.7729928853889014, 0.1936157891987338, 0.16566891548893037, 0.1391903698198752, 0.14119988314710608, 0.20288923504096223, 0.3756131739876204, 0.20997438627054166, 0.15086405021427785, 0.16510332850445397, 0.20246458449530358, 0.14674239266495492, 0.20473381871061236, 0.2100065822910987, 0.48309209117116647, 0.1750044918471576, 0.18178284771637465, 0.16485452519873456, 0.18476363191338196, 0.1790990986862001, 0.17926082310620384, 0.1689176561940614, 0.17152248593669006, 0.17745523428876964, 0.0675407881215433, 0.06455216453814883, 0.06341739174841676, 0.06236148934049779, 0.06343794881698761, 0.07532866018248607, 0.06564056406606555, 0.0735285763492941, 0.06513568715154527]}, "mutation_prompt": null}
{"id": "2122587c-16a9-46da-96c4-d847f78f7325", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.4 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improve convergence by reducing DE scaling factor F more aggressively over time.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c543f84-f577-420c-bc66-44927f093b9f", "metadata": {"aucs": [0.6785088128074537, 0.6314782740115239, 0.6496383609011469, 0.7422203720037386, 0.6611935094630539, 0.6665245869235181, 0.6763018882748355, 0.6769641442711808, 0.6224404265695465, 0.40787324523935176, 0.4252731747606424, 0.41480995676294197, 0.43174234015886914, 0.4550782186580973, 0.3980247504606176, 0.38529352945793394, 0.32310578428246794, 0.43090627693036887, 0.08151584023648939, 0.11373842784815902, 0.09051541514881323, 0.057261957676027264, 0.09365989188311596, 0.09834488726473933, 0.1363702628156992, 0.09640672648840332, 0.0900353612029865, 0.08361101294888773, 0.08416332228690282, 0.08861212359756787, 0.09913709246168223, 0.0925996719715938, 0.0979209903474999, 0.09304300462635784, 0.09335649203180674, 0.10372184657877859, 0.9800247639485352, 0.9919148222270907, 0.9414590085624581, 0.9920354751628256, 0.9758079647552972, 0.9850566320767428, 0.9796528309468522, 0.988651560783833, 0.987347784758913, 0.23433371075493292, 0.19472399363704396, 0.1098119762991353, 0.2310669036055898, 0.22510883708950846, 0.18750014239164814, 0.2367763573986229, 0.20186279724867995, 0.1852821926207735, 0.5303199923087558, 0.4971823670520976, 0.5170304685945668, 0.2471561096815541, 0.3114661097938737, 0.22626149044016797, 0.2275627448930584, 0.35021854129293084, 0.2702709704557972, 0.1736706282558469, 0.16590187663801537, 0.13296349377865258, 0.12457853760042725, 0.18081629589055637, 0.11404100825278052, 0.12664244017900617, 0.15987822341718383, 0.17768849097204242, 0.12707532128842391, 0.09840878615640125, 0.13234584457822474, 0.1500300861550924, 0.11496709971762942, 0.1557371810771656, 0.11655930017352256, 0.15521138883342633, 0.177212441341416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003310201265344981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005686874033877243, 9.999999999998899e-05, 0.04806069178695338, 0.03802211647385523, 0.040551640466226724, 0.07300784938665672, 0.005209876403152736, 0.005960738472244542, 0.03737284185325518, 0.029277482208583394, 0.04067698299518818, 0.0371805086283572, 0.18374818658706826, 0.027551893723863352, 0.05642483988722724, 0.06075828202194844, 0.055013961186034965, 0.04963095999965883, 0.06829129123256428, 0.05956377885919606, 0.04187547326646346, 0.03855217286456669, 0.10656111602093765, 0.05576062855061459, 0.05694317840114582, 0.10717500505498845, 0.0780304151420087, 0.05725669328230887, 0.07474097608961294, 0.43055016618993003, 0.3977554688941859, 0.3889600762845241, 0.451804828214046, 0.4228044171302938, 0.44882319699430684, 0.4300084381596928, 0.45984202643346395, 0.4481187127428774, 0.08460820094221888, 0.07509624025455064, 0.08779290581007004, 0.08477024801647037, 0.08222678559400742, 0.06765424848950474, 0.0671068738881564, 0.11830274055855317, 0.10517354717426874, 0.15048938785879906, 0.15798554121065822, 0.15104628319006408, 0.15073632286074878, 0.2039086879986991, 0.3348549417721086, 0.195911692632892, 0.1463311128441266, 0.21230130592302443, 0.2858368168420179, 0.2875605896698916, 0.2277010182926511, 0.2679548089385365, 0.2721686484657343, 0.27059744144494347, 0.30191668474441336, 0.3266031112456893, 0.3239100190220514, 0.1436700895998998, 0.16761707535452752, 0.17789380295435553, 0.20863882008360146, 0.16626761228396514, 0.19059393405918845, 0.23206067197416458, 0.2724372512553991, 0.17068314619690572, 0.164812122548606, 0.14555838180753178, 0.17079405357168143, 0.16104697979646787, 0.17237869474123657, 0.21666142164314184, 0.17788651496250718, 0.1714537175319818, 0.16366128145383263, 0.1915881664704413, 0.18889886449994142, 0.18748023093021982, 0.19263747437585366, 0.18525434373003757, 0.19231097334054237, 0.20531076570451234, 0.18988214397852443, 0.1832017868712883, 0.20743577072667208, 0.6065327995289358, 0.15751467297175237, 0.7729928853889014, 0.1936157891987338, 0.16566891548893037, 0.1391903698198752, 0.14119988314710608, 0.20288923504096223, 0.3756131739876204, 0.20997438627054166, 0.15086405021427785, 0.16510332850445397, 0.20246458449530358, 0.14674239266495492, 0.20473381871061236, 0.2100065822910987, 0.48309209117116647, 0.1750044918471576, 0.18178284771637465, 0.16485452519873456, 0.18476363191338196, 0.1790990986862001, 0.17926082310620384, 0.1689176561940614, 0.17152248593669006, 0.17745523428876964, 0.0675407881215433, 0.06455216453814883, 0.06341739174841676, 0.06236148934049779, 0.06343794881698761, 0.07532866018248607, 0.06564056406606555, 0.0735285763492941, 0.06513568715154527]}, "mutation_prompt": null}
{"id": "1fe18de4-a3cb-4b32-8cd6-f3ae0d501a96", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.c1 = 1.5 + (0.5 * (self.func_evals / self.budget))  # Dynamic adjustment of cognitive component\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.4 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance exploration by dynamically adjusting PSO cognitive component.", "configspace": "", "generation": 47, "fitness": 0.22143723851639086, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "1c543f84-f577-420c-bc66-44927f093b9f", "metadata": {"aucs": [0.685064552222558, 0.6446793726616777, 0.6171651820704859, 0.5993076471501577, 0.6982153561887289, 0.6651805850892203, 0.6869953120357871, 0.674052617531391, 0.6534497103897386, 0.3195975897670644, 0.36080243555892666, 0.3953062732646663, 0.36663620413613784, 0.45884581944903535, 0.3485441417773131, 0.3794011438475763, 0.3600109833877435, 0.45369597371223813, 0.12015374786390587, 0.10805095768597162, 0.07599220469991741, 0.06433937312768923, 0.08228010784425843, 0.07019074064866104, 0.1083225021912484, 0.08697045132722392, 0.06391725824222849, 0.07569323694506913, 0.08695620727642506, 0.08159612903938829, 0.0690407207698156, 0.06603205855464489, 0.07591869947957808, 0.07989706965814636, 0.09341413782385044, 0.0867880394273488, 0.9800247639485352, 0.9919148222270907, 0.9414589912381545, 0.9920354751628256, 0.9758079647552972, 0.9850566320767428, 0.9796528309468522, 0.988651560783833, 0.987347784758913, 0.2584821754848441, 0.22819708494362567, 0.1396390730022915, 0.15729472243149123, 0.1936867219566457, 0.1454635493062979, 0.16844548569132733, 0.18162782946172562, 0.2202622153796323, 0.2628696837272845, 0.24341580286476594, 0.21484456451490708, 0.2344127433804588, 0.20353486353415906, 0.2430236939090884, 0.21460786603930682, 0.3076917864783614, 0.19303975536712525, 0.14673529554552756, 0.15174186760200536, 0.10019635457384268, 0.11343312231955838, 0.15201552568326693, 0.11386584221044882, 0.08384033648852052, 0.14355300169686724, 0.14168090880217588, 0.1467924986188518, 0.15393712655846337, 0.10400534517986149, 0.1090797975345893, 0.10631417296445911, 0.14407236516859045, 0.13936227129158973, 0.16323367499374486, 0.17825829617209843, 9.999999999998899e-05, 9.999999999998899e-05, 0.011082021185052304, 0.000203240573429464, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008598455874223587, 9.999999999998899e-05, 9.999999999998899e-05, 0.0602347324257404, 0.04602355210727327, 0.03666347312532303, 0.1573040460500923, 0.0071726492554107235, 0.011818486157935015, 0.06495998699045213, 0.027841294721872134, 0.050194270753130654, 0.03365732090016538, 0.021363976315451172, 0.024524562228026348, 0.04423786946212771, 0.05887916336554444, 0.042189434324085395, 0.05151385036369427, 0.07170349065308679, 0.060278144013727775, 0.05437301065921807, 0.0907997880005249, 0.14177857347193346, 0.19092788616163858, 0.04690422383727855, 0.1502321933985108, 0.05061625053846475, 0.06106334826606419, 0.07672086622178464, 0.39668385821871044, 0.42383826301215655, 0.40017806612839635, 0.4395442645393257, 0.4076268628726798, 0.4511950572990552, 0.4075675461663836, 0.4262248165860678, 0.43035605145389266, 0.08057975349255264, 0.07777720871482141, 0.08500801451604112, 0.0758086973727573, 0.06486209233634976, 0.07368986290901525, 0.06829663239351735, 0.07340430610009896, 0.08821468112894326, 0.24785969269155506, 0.1328221788493794, 0.1863513224115424, 0.1790766069345665, 0.19459581169602502, 0.1519847927554061, 0.22260531500618352, 0.13570324153122115, 0.18000157909560766, 0.23605412720695973, 0.24185004542341604, 0.2760884520166732, 0.25619427854666554, 0.2444377498430661, 0.2749158332022159, 0.2601386077101935, 0.3303923894116909, 0.36065411268904557, 0.138225575199314, 0.1520918147929491, 0.16854168179188878, 0.14964449485480202, 0.17860961022312227, 0.1774917108787557, 0.19966460152447885, 0.2115617415695895, 0.16592534878338316, 0.18024995399035237, 0.15317834720833723, 0.18202759021883264, 0.17180222911468013, 0.1796937078040779, 0.1577252293666368, 0.18454774838055588, 0.16541825781020947, 0.1715908486623524, 0.19498002280200288, 0.19703198527026455, 0.2053147193727124, 0.2011147836039089, 0.19629435916751115, 0.1662365782220473, 0.1728694575796017, 0.18060926686268153, 0.19456902520897124, 0.20796487418553422, 0.5713116489310873, 0.1568370823480112, 0.7456509350972563, 0.1917744332800928, 0.16291830553125364, 0.13828464497271253, 0.1415247454708597, 0.20592019895625313, 0.2983357861918745, 0.2086626971797646, 0.15264530518015218, 0.15867187433682506, 0.20327448556721062, 0.18727943783208956, 0.20365521024612587, 0.21049597506960716, 0.4062434931033383, 0.18283954011450487, 0.17718032690578234, 0.1705772509313358, 0.17250383084920795, 0.1919620518506434, 0.1942408089734765, 0.17644763016696996, 0.1970409100847521, 0.18218633622819946, 0.06991182309969268, 0.06770425986735229, 0.07148163436407651, 0.10165996828019341, 0.06489278686979505, 0.0672821500546319, 0.05390819656903045, 0.05827408092257902, 0.0654715966656284]}, "mutation_prompt": null}
{"id": "f0d5ce49-79cb-4078-952e-5faff6aa0604", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                self.F = 0.9 - (0.4 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjust mutation strategy to include a dimension-wise Gaussian perturbation for better exploration.", "configspace": "", "generation": 48, "fitness": 0.23004872915269856, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "1c543f84-f577-420c-bc66-44927f093b9f", "metadata": {"aucs": [0.708339457807516, 0.6401052070870572, 0.6381820410284672, 0.6347129943494074, 0.6579898572534502, 0.7178618888535833, 0.6504682312599281, 0.6912857498284716, 0.660962738441305, 0.3731934849213754, 0.4790825103653201, 0.35311890384336964, 0.4427634724108068, 0.44242143243875554, 0.16172383882247554, 0.4234666463683626, 0.3506455846107259, 0.42311114289999807, 0.10070997260547587, 0.09613054305416135, 0.1012338388858427, 0.07765232492968022, 0.08781805011394572, 0.09666790860914498, 0.11358338861202921, 0.10999852060418958, 0.09805435062874912, 0.0657962460858198, 0.10093218981588759, 0.08849654945870167, 0.09245807078781021, 0.10256835387971919, 0.09404293141459652, 0.107782108125418, 0.0829984545771496, 0.08276164186437274, 0.9768578323836549, 0.9919116329314251, 0.9285464581470295, 0.992032348590565, 0.9757943099265489, 0.985055592981857, 0.9797153513787703, 0.9887249886149936, 0.98734554727257, 0.2724699060098904, 0.20018334414536498, 0.17165977897071172, 0.2447549169286256, 0.2200756018092671, 0.2217764106916137, 0.21629814504888423, 0.21748227812156606, 0.24182409848943454, 0.3333468078504861, 0.13558086605073405, 0.4374764451085714, 0.32453921781233386, 0.2901429612506764, 0.19605889866912662, 0.1254637951914097, 0.21143410495625392, 0.19935729600251006, 0.11345191618698558, 0.17293220215169636, 0.16225823440245335, 0.16240772843516238, 0.1632033749809787, 0.12423861499904854, 0.1566904345102359, 0.11969650361125173, 0.1476680696872309, 0.19853950631351036, 0.1809058849538162, 0.10863658121134834, 0.1408176548196558, 0.16105741811179652, 0.11678451063243123, 0.1887891293922408, 0.11473278445406598, 0.210708716720172, 0.016271525047549917, 0.020636994327993152, 9.999999999998899e-05, 0.023635008946991887, 9.999999999998899e-05, 9.999999999998899e-05, 0.003171733630230822, 9.999999999998899e-05, 0.00025399314727869715, 0.14398459231587424, 0.05379883105776828, 0.050335820514057716, 0.04688059597745764, 0.009869304299994885, 0.01133923906679335, 0.0530849700563365, 0.052641049146275876, 0.06253693326010856, 0.06281766059130711, 0.023113218986964612, 0.023222591640248758, 0.056816729743125904, 0.04844301837324261, 0.12463451243827273, 0.050253465042398915, 0.1807573824720632, 0.05187251530592252, 0.15546852506433373, 0.07914167111395631, 0.14105910318144343, 0.007706726061560754, 0.07886903139510393, 0.08729198050121467, 0.05191098347811807, 0.05235831790504364, 0.08986523360285159, 0.4204367595565991, 0.44878432678115454, 0.6051812348801161, 0.434244247424593, 0.4389374051696119, 0.44895303764333216, 0.4497232935850479, 0.42136064916522986, 0.45657715306477487, 0.10425705422211773, 0.0739063613165537, 0.09388289999929733, 0.0826840918264703, 0.08034848809833417, 0.08631455618660644, 0.10758050586837742, 0.09674089808028585, 0.07675817885165692, 0.24403605364059378, 0.17220874277667186, 0.14374634660384678, 0.19516176311423206, 0.25312571457039634, 0.13156991822081432, 0.15329939100372592, 0.23792172664486455, 0.16682745317683179, 0.34246540934894176, 0.22984963544352088, 0.35805683085830986, 0.2556130065857485, 0.2950187112643534, 0.2664471620772151, 0.2470858098919183, 0.2536774927023222, 0.30088059007974166, 0.19874652683530836, 0.1901222489242087, 0.18425678196326978, 0.1684018307885653, 0.18680017791070924, 0.18414287374307126, 0.19042065338003955, 0.2608547592384096, 0.23925656150956243, 0.1859563248227868, 0.1620097087670943, 0.17121337966105898, 0.18291436301709796, 0.1910634794420002, 0.17216585228364734, 0.1647490925431495, 0.1736598236178184, 0.19326945156552833, 0.18222096649294883, 0.20443265721996218, 0.2172120907600924, 0.17986124755040545, 0.19995124762856398, 0.18553570018467946, 0.20782649018292343, 0.17534471720044154, 0.17950414614846177, 0.20937781168883574, 0.15914602566684188, 0.1620894433197847, 0.7786822467646926, 0.1927345197821937, 0.16167731038163946, 0.1390676622423147, 0.14137916837835673, 0.2037755892640023, 0.37218500827870515, 0.20659332683389742, 0.3032254198024027, 0.15421069914131547, 0.37923818654056696, 0.14880013860853336, 0.18650236606805615, 0.2112147279362767, 0.14837958127399264, 0.17025896080910374, 0.1765770132667922, 0.18366659453334822, 0.18276760652701263, 0.1798745289551713, 0.19275388407125915, 0.23205754572145465, 0.18223832090383163, 0.1709382059163621, 0.08643507809813422, 0.05590083916920208, 0.06307289993382614, 0.06089042060547978, 0.05824087332321182, 0.06454326700529378, 0.06500700814692151, 0.06385392419875446, 0.06462115547539049]}, "mutation_prompt": null}
{"id": "452c963a-6b34-43c2-975a-480f1bbf60e5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Fine-tune DE mutation by altering control parameter `F` to enhance convergence.", "configspace": "", "generation": 49, "fitness": 0.23351953758724356, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "1c543f84-f577-420c-bc66-44927f093b9f", "metadata": {"aucs": [0.5671945073917245, 0.6472031038655511, 0.6509918924916682, 0.6801456642878629, 0.6945127809870963, 0.7159365332638565, 0.7162548296986881, 0.653421583976064, 0.6567784955170354, 0.35039902099693454, 0.4854089913067945, 0.2981464127250196, 0.39948322674624726, 0.45466086509250636, 0.4023705930260747, 0.36115693456637, 0.31185501442073005, 0.5079315419242345, 0.10383996690634667, 0.10148655894365655, 0.10290807976866001, 0.09802554020766052, 0.08383859702449592, 0.10550388178441206, 0.09403171824076306, 0.1255632750907043, 0.0946316264755993, 0.08907058397101464, 0.07661847709347291, 0.09783107919252465, 0.08110320020260153, 0.07923060697730411, 0.126341052770074, 0.10136376706573247, 0.10998977250559527, 0.08834265695753929, 0.9709522648825576, 0.9919026154497612, 0.9354046857329938, 0.9873473551756148, 0.9740588876679619, 0.9850554008502513, 0.979600698288329, 0.9875314820128618, 0.9873433346388002, 0.20477243811730883, 0.24509445444717093, 0.256697680214231, 0.3104006111197013, 0.25901363813767553, 0.1933804740829883, 0.24274822614411173, 0.26344981251757904, 0.1841824947735763, 0.19471823068296668, 0.2103792659965984, 0.21292682602167456, 0.2515280820972777, 0.23859179183814838, 0.30306055018284483, 0.21676285671662343, 0.2509903827125689, 0.41396096213092004, 0.15072981053575418, 0.1601966688193759, 0.09464381105594877, 0.14438323738247294, 0.14106809860833713, 0.19522368780353694, 0.16731244544821489, 0.1350634432557556, 0.13536731111167177, 0.1506192562098062, 0.14728281741731974, 0.10493557947312804, 0.15997284548260882, 0.16793069989189102, 0.15342346825928654, 0.2048630486663775, 0.16099930026427334, 0.2053022522232819, 9.999999999998899e-05, 0.0020812748390891533, 0.0034479044140003356, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017660391132637288, 0.018612489415452682, 0.04284332834743476, 0.0822325145356343, 0.06338374521100776, 0.013459504261292055, 0.01321262466145634, 0.07518168361055144, 0.024264443180348594, 0.04573357290563218, 0.031791399368453876, 0.0648190283302611, 0.020915345429507903, 0.053403188407365465, 0.07040797516439656, 0.055836332792719934, 0.07185091979709324, 0.1907202878048555, 0.048333533028860565, 0.12234268195426157, 0.04144454070205228, 0.1312639868985891, 0.06674146267519498, 0.1699411747218863, 0.07073718281084662, 0.20586400216342426, 0.072241534320036, 0.2335846271559412, 0.4645039046496008, 0.4418009664173236, 0.45796420872232035, 0.46326486725577176, 0.4595121628322182, 0.41053136937661094, 0.3978649495337284, 0.4009046601445999, 0.41921329341164515, 0.10753669148008793, 0.10662143287968961, 0.10399323469666688, 0.09499509616567758, 0.07975243400353793, 0.09338590046066342, 0.10372632847815311, 0.0823114265714292, 0.08453475816243738, 0.15234651180199543, 0.14856643042003248, 0.19511425600938037, 0.20080121415536312, 0.14761514880478577, 0.13478604491898316, 0.16107297061857717, 0.2773372334113072, 0.13034392997035316, 0.32138937268642187, 0.31660488470076686, 0.3169326741505821, 0.2749724179302363, 0.2898910168932195, 0.19627595011488874, 0.33333013954805335, 0.41570605801788285, 0.31181023252603013, 0.21957825018960275, 0.2021673456147537, 0.1950532022694329, 0.2423039888989137, 0.2366201204642434, 0.2175738113568424, 0.21925292330572932, 0.2541443741602205, 0.26767795982922515, 0.19515808054825357, 0.170122228242094, 0.17131814724337235, 0.19718666335186874, 0.17758351358983704, 0.20304602402686311, 0.16974684849371258, 0.17492214748557877, 0.18524063997425377, 0.1875794009692986, 0.184012160833671, 0.19791283370517798, 0.18789784562971734, 0.20645267354327113, 0.1959697555004698, 0.17972742694501298, 0.4259583545937903, 0.18494620150186425, 0.121885334567716, 0.14558987220783415, 0.15969785121761448, 0.6288455461414652, 0.1930536759221425, 0.11404057222211572, 0.14159722242750827, 0.14179275470733033, 0.20821385158415773, 0.414652114534357, 0.20744075249433114, 0.29472194896593307, 0.1111512715812003, 0.2743680208822785, 0.14886115231614971, 0.19648749380402575, 0.21261884672512288, 0.20853758944377976, 0.18177903807595164, 0.17135334526930057, 0.1867943614463986, 0.19672953329780074, 0.1780277738479975, 0.20374778240935165, 0.18597265178586753, 0.17656477158341055, 0.1836955012365995, 0.08379592254963031, 0.07009828418442887, 0.06878717080788121, 0.06673077896573087, 0.06742665672424064, 0.0659636046524733, 0.07138184632010869, 0.07315174093328292, 0.06849799077596364]}, "mutation_prompt": null}
{"id": "8e963c58-5973-4e0d-975e-9aaabbb95372", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance convergence by updating the influence of global best on DE mutation.", "configspace": "", "generation": 50, "fitness": 0.233541709923936, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "452c963a-6b34-43c2-975a-480f1bbf60e5", "metadata": {"aucs": [0.7268172888140614, 0.6579502154124055, 0.6466170831960163, 0.6948507085737021, 0.7180589614691328, 0.6766611249754275, 0.6725126722196499, 0.6419248154015841, 0.7289961676710678, 0.38574605321417943, 0.3804069595290335, 0.46513519425979954, 0.3879291085138472, 0.2838460084884854, 0.2443314290554469, 0.3884693860544012, 0.4176232430604555, 0.2736020534144703, 0.10829039393094075, 0.09071722283613359, 0.16666682854556636, 0.10142135348140979, 0.13301168238627847, 0.07448853210482032, 0.10974992653575244, 0.09694362533547096, 0.12730387531619491, 0.08208829655870231, 0.09326813861808547, 0.09559711514345304, 0.072327177391323, 0.0842877150167074, 0.09643235270520178, 0.0710982763831145, 0.08045214408379686, 0.06687281958326696, 0.9639233256453342, 0.991897628733357, 0.9758203316846232, 0.9848634239219765, 0.970123714042729, 0.9769923461722103, 0.9797001254818517, 0.9873182235050691, 0.9873478284653141, 0.22914066060559857, 0.18588162369297712, 0.1688511360655821, 0.13985910633329057, 0.16468457178489593, 0.19387206038672644, 0.2303453951184402, 0.1591442531666971, 0.23204434131997165, 0.5123699989385393, 0.2021196519794225, 0.38830076889178067, 0.3111770989030844, 0.4482145341855277, 0.31982064077623307, 0.3668195073967139, 0.2824969327401299, 0.32915445639261676, 0.1363793836494278, 0.11652548252914385, 0.12468300091929418, 0.11787736329542409, 0.07798763222808958, 0.1110211790638792, 0.09836827039773488, 0.14611606848711545, 0.2267777898080403, 0.10653858289520901, 0.1451930243348859, 0.15270191543213774, 0.16149273560895472, 0.16637245129446843, 0.13436338011917592, 0.18949464593001897, 0.15326824203291056, 0.18914354610505235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010751135695287517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016249545671270016, 9.999999999998899e-05, 0.07489965955517797, 0.03529605311137696, 0.09814736623718323, 0.07261535531097596, 0.006640167805687103, 0.0593480664669469, 0.07269724700844926, 0.010121424583223071, 0.09216223025508952, 0.03125519508533414, 0.0323768941632665, 0.0452517857713125, 0.05542120622038271, 0.08055591619413771, 0.047651539272621224, 0.05390893021692933, 0.060937654359700666, 0.13541687320168005, 0.15667105966119343, 0.04109118859075456, 0.14852386863559153, 0.08899065475258428, 0.12008305670940356, 0.09662355937329958, 0.15180599158379826, 0.10005577989560188, 0.07646831922658426, 0.42185571572822733, 0.47347468225763667, 0.41803045465958943, 0.45370676147770084, 0.4806220777697876, 0.4340055340536947, 0.43772532404418185, 0.40921591053625794, 0.4593544546020263, 0.0987417479557069, 0.09072896392509133, 0.08868874415568184, 0.10567292991464405, 0.08490465507054612, 0.09319796255162216, 0.07669366327636273, 0.0979503412976519, 0.07034767355921578, 0.14732982959711038, 0.15007833974782192, 0.189750030408102, 0.3671351921522802, 0.14793941817682676, 0.20369178887849537, 0.2532672444983478, 0.16972142640281584, 0.13389763749074735, 0.271317335574228, 0.23624753428115375, 0.27512094479107296, 0.2653360035226101, 0.28868809991628863, 0.29410222970367317, 0.33912980979239027, 0.2801957482375408, 0.27665758074292446, 0.21991581912544822, 0.25879301876228655, 0.2549205507515344, 0.21356952780142435, 0.18127990904422175, 0.18502565224413492, 0.21347375013557834, 0.23445655188350445, 0.2386738569972705, 0.17015481448613268, 0.15743066376250003, 0.1884548220714447, 0.16166391497644073, 0.1697510996722551, 0.15373455200746433, 0.22293587939321946, 0.17431018756110683, 0.18094957075542528, 0.16710999274457028, 0.19752869880272628, 0.20945709780317134, 0.18048917211326787, 0.17450036448073647, 0.1802940241371811, 0.17326476637171795, 0.17868141378573132, 0.1861305019478453, 0.19088602567598822, 0.1450140272671644, 0.13883268584257202, 0.6432105579680694, 0.19590232447173528, 0.1885765978256203, 0.14122497903531006, 0.13998877691577982, 0.6383867576933462, 0.3331617050232787, 0.20525155269570727, 0.28454646379328596, 0.12673081675494757, 0.1909488102622101, 0.1616709479358973, 0.2073855276472928, 0.2124917823386775, 0.19945275609339796, 0.19703813918121815, 0.17345131054754692, 0.20933096463952816, 0.18138027581465233, 0.1800267802060873, 0.2045242437568241, 0.20771006460865804, 0.18750407544239378, 0.1894767929860397, 0.06888267526986092, 0.07447622766181139, 0.06685623240058924, 0.06968804353495761, 0.07018707904113286, 0.06924687373728045, 0.06843323535508228, 0.06445913629473177, 0.055398079127219724]}, "mutation_prompt": null}
{"id": "573999ac-29dc-486e-af05-8602aeaa57dd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance convergence by updating the influence of global best on DE mutation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e963c58-5973-4e0d-975e-9aaabbb95372", "metadata": {"aucs": [0.7268172888140614, 0.6579502154124055, 0.6466170831960163, 0.6948507085737021, 0.7180589614691328, 0.6766611249754275, 0.6725126722196499, 0.6419248154015841, 0.7289961676710678, 0.38574605321417943, 0.3804069595290335, 0.46513519425979954, 0.3879291085138472, 0.2838460084884854, 0.2443314290554469, 0.3884693860544012, 0.4176232430604555, 0.2736020534144703, 0.10829039393094075, 0.09071722283613359, 0.16666682854556636, 0.10142135348140979, 0.13301168238627847, 0.07448853210482032, 0.10974992653575244, 0.09694362533547096, 0.12730387531619491, 0.08208829655870231, 0.09326813861808547, 0.09559711514345304, 0.072327177391323, 0.0842877150167074, 0.09643235270520178, 0.0710982763831145, 0.08045214408379686, 0.06687281958326696, 0.9639233256453342, 0.991897628733357, 0.9758203316846232, 0.9848634239219765, 0.970123714042729, 0.9769923461722103, 0.9797001254818517, 0.9873182235050691, 0.9873478284653141, 0.22914066060559857, 0.18588162369297712, 0.1688511360655821, 0.13985910633329057, 0.16468457178489593, 0.19387206038672644, 0.2303453951184402, 0.1591442531666971, 0.23204434131997165, 0.5123699989385393, 0.2021196519794225, 0.38830076889178067, 0.3111770989030844, 0.4482145341855277, 0.31982064077623307, 0.3668195073967139, 0.2824969327401299, 0.32915445639261676, 0.1363793836494278, 0.11652548252914385, 0.12468300091929418, 0.11787736329542409, 0.07798763222808958, 0.1110211790638792, 0.09836827039773488, 0.14611606848711545, 0.2267777898080403, 0.10653858289520901, 0.1451930243348859, 0.15270191543213774, 0.16149273560895472, 0.16637245129446843, 0.13436338011917592, 0.18949464593001897, 0.15326824203291056, 0.18914354610505235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010751135695287517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016249545671270016, 9.999999999998899e-05, 0.07489965955517797, 0.03529605311137696, 0.09814736623718323, 0.07261535531097596, 0.006640167805687103, 0.0593480664669469, 0.07269724700844926, 0.010121424583223071, 0.09216223025508952, 0.03125519508533414, 0.0323768941632665, 0.0452517857713125, 0.05542120622038271, 0.08055591619413771, 0.047651539272621224, 0.05390893021692933, 0.060937654359700666, 0.13541687320168005, 0.15667105966119343, 0.04109118859075456, 0.14852386863559153, 0.08899065475258428, 0.12008305670940356, 0.09662355937329958, 0.15180599158379826, 0.10005577989560188, 0.07646831922658426, 0.42185571572822733, 0.47347468225763667, 0.41803045465958943, 0.45370676147770084, 0.4806220777697876, 0.4340055340536947, 0.43772532404418185, 0.40921591053625794, 0.4593544546020263, 0.0987417479557069, 0.09072896392509133, 0.08868874415568184, 0.10567292991464405, 0.08490465507054612, 0.09319796255162216, 0.07669366327636273, 0.0979503412976519, 0.07034767355921578, 0.14732982959711038, 0.15007833974782192, 0.189750030408102, 0.3671351921522802, 0.14793941817682676, 0.20369178887849537, 0.2532672444983478, 0.16972142640281584, 0.13389763749074735, 0.271317335574228, 0.23624753428115375, 0.27512094479107296, 0.2653360035226101, 0.28868809991628863, 0.29410222970367317, 0.33912980979239027, 0.2801957482375408, 0.27665758074292446, 0.21991581912544822, 0.25879301876228655, 0.2549205507515344, 0.21356952780142435, 0.18127990904422175, 0.18502565224413492, 0.21347375013557834, 0.23445655188350445, 0.2386738569972705, 0.17015481448613268, 0.15743066376250003, 0.1884548220714447, 0.16166391497644073, 0.1697510996722551, 0.15373455200746433, 0.22293587939321946, 0.17431018756110683, 0.18094957075542528, 0.16710999274457028, 0.19752869880272628, 0.20945709780317134, 0.18048917211326787, 0.17450036448073647, 0.1802940241371811, 0.17326476637171795, 0.17868141378573132, 0.1861305019478453, 0.19088602567598822, 0.1450140272671644, 0.13883268584257202, 0.6432105579680694, 0.19590232447173528, 0.1885765978256203, 0.14122497903531006, 0.13998877691577982, 0.6383867576933462, 0.3331617050232787, 0.20525155269570727, 0.28454646379328596, 0.12673081675494757, 0.1909488102622101, 0.1616709479358973, 0.2073855276472928, 0.2124917823386775, 0.19945275609339796, 0.19703813918121815, 0.17345131054754692, 0.20933096463952816, 0.18138027581465233, 0.1800267802060873, 0.2045242437568241, 0.20771006460865804, 0.18750407544239378, 0.1894767929860397, 0.06888267526986092, 0.07447622766181139, 0.06685623240058924, 0.06968804353495761, 0.07018707904113286, 0.06924687373728045, 0.06843323535508228, 0.06445913629473177, 0.055398079127219724]}, "mutation_prompt": null}
{"id": "24b1d6af-254e-4bd8-a73b-4c7167cd54c9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.15, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Fine-tune DE mutation by incorporating additional randomness for improved exploration.", "configspace": "", "generation": 52, "fitness": 0.23088338149204587, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "8e963c58-5973-4e0d-975e-9aaabbb95372", "metadata": {"aucs": [0.6813311209615938, 0.6266573087729141, 0.6332296530915014, 0.6906525823787426, 0.6910649999655657, 0.6948772295956712, 0.6294658888249806, 0.7003533842389678, 0.6010001100624983, 0.4452588012192392, 0.28503254845161896, 0.37389547221239783, 0.41927315097627527, 0.37185485379953165, 0.35521122745431, 0.349141896318809, 0.32913092250067266, 0.480562606415301, 0.09757216805096869, 0.08474368494184603, 0.09232020718069545, 0.104449695393102, 0.11043426723507832, 0.09295308433150296, 0.10647054591735705, 0.10381209862921192, 0.11159336762507976, 0.09135936300100567, 0.08352214303668148, 0.1014581937215806, 0.07279549449684675, 0.09166997936859844, 0.10904275806318287, 0.0703116122379015, 0.09586817661079272, 0.08391637325609957, 0.9644025411153287, 0.9918991840276006, 0.9758126801794877, 0.9848634558030702, 0.9701907217621899, 0.9771145603106658, 0.9796659519882887, 0.9873171217810115, 0.9873612040503998, 0.19138704909520776, 0.16744903666133215, 0.14345448884213108, 0.17031144942146315, 0.15044893905418555, 0.16063940498499996, 0.20177651276406217, 0.21610055399085404, 0.16285857547908766, 0.4020874192942314, 0.3165801818583074, 0.5402341623852402, 0.2151312923663572, 0.19710095543365747, 0.4910317600292967, 0.18346460670439557, 0.417570986429763, 0.31370362603256896, 0.17303995702808406, 0.11675409001216597, 0.1278073275170325, 0.16340869103322653, 0.15677856289305547, 0.14806764235888736, 0.1115066533390735, 0.1404011681822792, 0.14367735540527193, 0.18732650751779945, 0.09976921713283649, 0.1994620950881093, 0.1223666636693651, 0.1152168171492578, 0.16142784654356768, 0.10606870792361456, 0.14098649703336974, 0.1398923921975438, 0.0035262547028798163, 0.008665304711302224, 0.06506497485369567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01654474219301394, 0.0416139536910185, 0.06326674744069627, 0.05176346370672158, 0.051826344751618514, 9.999999999998899e-05, 0.015040633439085682, 0.051645798091770834, 0.06304192160623023, 0.04180332405836884, 0.03506412585955221, 0.0881222530928586, 0.031146327969476806, 0.053816116982960516, 0.0691319487747667, 0.04466796087139102, 0.05661602209475991, 0.06949006822918913, 0.20241996397249096, 0.09072698494884368, 0.09926074415020936, 0.03790317402070997, 0.0535664984786024, 0.1301899353405761, 0.05125846779681997, 0.07905412883792018, 0.07421799619713088, 0.07375186268558975, 0.4148765545769807, 0.42903125438199663, 0.40585209253697185, 0.4938926147112812, 0.4044905670706146, 0.43507398070179737, 0.42875971860712736, 0.43826817867353307, 0.4201109174237049, 0.07109174194836765, 0.08452864367721613, 0.09736100949881044, 0.07290165400111437, 0.09749567153043048, 0.10956530696528644, 0.08556638989587495, 0.0805895500229934, 0.0817728215718917, 0.21818255876394355, 0.2069684810443656, 0.2617980229643776, 0.2820253501070389, 0.17787177463888715, 0.14989033412794794, 0.2650621882286005, 0.1405504214524539, 0.13705588939396052, 0.23587262068878734, 0.2768683199881401, 0.3504640661968781, 0.2607865837751757, 0.22009394408430116, 0.21976286476392481, 0.3027664419576851, 0.3240418587964202, 0.3080989509080919, 0.22909862542551673, 0.17592290503869024, 0.28883103929629583, 0.1589528061764922, 0.16371053923029066, 0.2037036305912988, 0.197513377257719, 0.2134014716144933, 0.23607920266227433, 0.19030452877010362, 0.192124104843317, 0.18483128694873907, 0.1748470342450208, 0.19647021801479647, 0.17573776172764233, 0.17683713313069782, 0.17780853726556212, 0.17429195935207442, 0.18280184598696947, 0.19052197338379773, 0.20424630047898795, 0.1699941413756222, 0.19806810670633246, 0.2211817865332164, 0.1824173077879565, 0.19900733903587875, 0.18950758384422028, 0.15378828513288412, 0.14574681120708044, 0.16520492754101035, 0.6710417951298384, 0.19161512375821244, 0.6475900834382282, 0.14057985857270905, 0.1407441260371366, 0.2083510170013264, 0.29774669450373215, 0.20293270553483322, 0.3773230202946908, 0.3009614891107599, 0.20351784921837912, 0.1432661888863006, 0.11840136076416441, 0.21280460469615903, 0.1117455094390234, 0.18234804445427122, 0.1914839161639117, 0.175677840992416, 0.19086725835727036, 0.17869595118420623, 0.17688344615948504, 0.19125191740907554, 0.18308461125196207, 0.18762112911212803, 0.07508576594922234, 0.06931704189442955, 0.0736516965388273, 0.06152758050010487, 0.06996855554047687, 0.07672822721642403, 0.07246015063171185, 0.06517143793047797, 0.08701086656996249]}, "mutation_prompt": null}
{"id": "befcb50b-6e76-4328-bda8-396ecf05bb32", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance convergence by updating the influence of global best on DE mutation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e963c58-5973-4e0d-975e-9aaabbb95372", "metadata": {"aucs": [0.7268172888140614, 0.6579502154124055, 0.6466170831960163, 0.6948507085737021, 0.7180589614691328, 0.6766611249754275, 0.6725126722196499, 0.6419248154015841, 0.7289961676710678, 0.38574605321417943, 0.3804069595290335, 0.46513519425979954, 0.3879291085138472, 0.2838460084884854, 0.2443314290554469, 0.3884693860544012, 0.4176232430604555, 0.2736020534144703, 0.10829039393094075, 0.09071722283613359, 0.16666682854556636, 0.10142135348140979, 0.13301168238627847, 0.07448853210482032, 0.10974992653575244, 0.09694362533547096, 0.12730387531619491, 0.08208829655870231, 0.09326813861808547, 0.09559711514345304, 0.072327177391323, 0.0842877150167074, 0.09643235270520178, 0.0710982763831145, 0.08045214408379686, 0.06687281958326696, 0.9639233256453342, 0.991897628733357, 0.9758203316846232, 0.9848634239219765, 0.970123714042729, 0.9769923461722103, 0.9797001254818517, 0.9873182235050691, 0.9873478284653141, 0.22914066060559857, 0.18588162369297712, 0.1688511360655821, 0.13985910633329057, 0.16468457178489593, 0.19387206038672644, 0.2303453951184402, 0.1591442531666971, 0.23204434131997165, 0.5123699989385393, 0.2021196519794225, 0.38830076889178067, 0.3111770989030844, 0.4482145341855277, 0.31982064077623307, 0.3668195073967139, 0.2824969327401299, 0.32915445639261676, 0.1363793836494278, 0.11652548252914385, 0.12468300091929418, 0.11787736329542409, 0.07798763222808958, 0.1110211790638792, 0.09836827039773488, 0.14611606848711545, 0.2267777898080403, 0.10653858289520901, 0.1451930243348859, 0.15270191543213774, 0.16149273560895472, 0.16637245129446843, 0.13436338011917592, 0.18949464593001897, 0.15326824203291056, 0.18914354610505235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010751135695287517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016249545671270016, 9.999999999998899e-05, 0.07489965955517797, 0.03529605311137696, 0.09814736623718323, 0.07261535531097596, 0.006640167805687103, 0.0593480664669469, 0.07269724700844926, 0.010121424583223071, 0.09216223025508952, 0.03125519508533414, 0.0323768941632665, 0.0452517857713125, 0.05542120622038271, 0.08055591619413771, 0.047651539272621224, 0.05390893021692933, 0.060937654359700666, 0.13541687320168005, 0.15667105966119343, 0.04109118859075456, 0.14852386863559153, 0.08899065475258428, 0.12008305670940356, 0.09662355937329958, 0.15180599158379826, 0.10005577989560188, 0.07646831922658426, 0.42185571572822733, 0.47347468225763667, 0.41803045465958943, 0.45370676147770084, 0.4806220777697876, 0.4340055340536947, 0.43772532404418185, 0.40921591053625794, 0.4593544546020263, 0.0987417479557069, 0.09072896392509133, 0.08868874415568184, 0.10567292991464405, 0.08490465507054612, 0.09319796255162216, 0.07669366327636273, 0.0979503412976519, 0.07034767355921578, 0.14732982959711038, 0.15007833974782192, 0.189750030408102, 0.3671351921522802, 0.14793941817682676, 0.20369178887849537, 0.2532672444983478, 0.16972142640281584, 0.13389763749074735, 0.271317335574228, 0.23624753428115375, 0.27512094479107296, 0.2653360035226101, 0.28868809991628863, 0.29410222970367317, 0.33912980979239027, 0.2801957482375408, 0.27665758074292446, 0.21991581912544822, 0.25879301876228655, 0.2549205507515344, 0.21356952780142435, 0.18127990904422175, 0.18502565224413492, 0.21347375013557834, 0.23445655188350445, 0.2386738569972705, 0.17015481448613268, 0.15743066376250003, 0.1884548220714447, 0.16166391497644073, 0.1697510996722551, 0.15373455200746433, 0.22293587939321946, 0.17431018756110683, 0.18094957075542528, 0.16710999274457028, 0.19752869880272628, 0.20945709780317134, 0.18048917211326787, 0.17450036448073647, 0.1802940241371811, 0.17326476637171795, 0.17868141378573132, 0.1861305019478453, 0.19088602567598822, 0.1450140272671644, 0.13883268584257202, 0.6432105579680694, 0.19590232447173528, 0.1885765978256203, 0.14122497903531006, 0.13998877691577982, 0.6383867576933462, 0.3331617050232787, 0.20525155269570727, 0.28454646379328596, 0.12673081675494757, 0.1909488102622101, 0.1616709479358973, 0.2073855276472928, 0.2124917823386775, 0.19945275609339796, 0.19703813918121815, 0.17345131054754692, 0.20933096463952816, 0.18138027581465233, 0.1800267802060873, 0.2045242437568241, 0.20771006460865804, 0.18750407544239378, 0.1894767929860397, 0.06888267526986092, 0.07447622766181139, 0.06685623240058924, 0.06968804353495761, 0.07018707904113286, 0.06924687373728045, 0.06843323535508228, 0.06445913629473177, 0.055398079127219724]}, "mutation_prompt": null}
{"id": "9bbff5e1-ffab-4c45-b4a4-1333562b7327", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance convergence by updating the influence of global best on DE mutation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e963c58-5973-4e0d-975e-9aaabbb95372", "metadata": {"aucs": [0.7268172888140614, 0.6579502154124055, 0.6466170831960163, 0.6948507085737021, 0.7180589614691328, 0.6766611249754275, 0.6725126722196499, 0.6419248154015841, 0.7289961676710678, 0.38574605321417943, 0.3804069595290335, 0.46513519425979954, 0.3879291085138472, 0.2838460084884854, 0.2443314290554469, 0.3884693860544012, 0.4176232430604555, 0.2736020534144703, 0.10829039393094075, 0.09071722283613359, 0.16666682854556636, 0.10142135348140979, 0.13301168238627847, 0.07448853210482032, 0.10974992653575244, 0.09694362533547096, 0.12730387531619491, 0.08208829655870231, 0.09326813861808547, 0.09559711514345304, 0.072327177391323, 0.0842877150167074, 0.09643235270520178, 0.0710982763831145, 0.08045214408379686, 0.06687281958326696, 0.9639233256453342, 0.991897628733357, 0.9758203316846232, 0.9848634239219765, 0.970123714042729, 0.9769923461722103, 0.9797001254818517, 0.9873182235050691, 0.9873478284653141, 0.22914066060559857, 0.18588162369297712, 0.1688511360655821, 0.13985910633329057, 0.16468457178489593, 0.19387206038672644, 0.2303453951184402, 0.1591442531666971, 0.23204434131997165, 0.5123699989385393, 0.2021196519794225, 0.38830076889178067, 0.3111770989030844, 0.4482145341855277, 0.31982064077623307, 0.3668195073967139, 0.2824969327401299, 0.32915445639261676, 0.1363793836494278, 0.11652548252914385, 0.12468300091929418, 0.11787736329542409, 0.07798763222808958, 0.1110211790638792, 0.09836827039773488, 0.14611606848711545, 0.2267777898080403, 0.10653858289520901, 0.1451930243348859, 0.15270191543213774, 0.16149273560895472, 0.16637245129446843, 0.13436338011917592, 0.18949464593001897, 0.15326824203291056, 0.18914354610505235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010751135695287517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016249545671270016, 9.999999999998899e-05, 0.07489965955517797, 0.03529605311137696, 0.09814736623718323, 0.07261535531097596, 0.006640167805687103, 0.0593480664669469, 0.07269724700844926, 0.010121424583223071, 0.09216223025508952, 0.03125519508533414, 0.0323768941632665, 0.0452517857713125, 0.05542120622038271, 0.08055591619413771, 0.047651539272621224, 0.05390893021692933, 0.060937654359700666, 0.13541687320168005, 0.15667105966119343, 0.04109118859075456, 0.14852386863559153, 0.08899065475258428, 0.12008305670940356, 0.09662355937329958, 0.15180599158379826, 0.10005577989560188, 0.07646831922658426, 0.42185571572822733, 0.47347468225763667, 0.41803045465958943, 0.45370676147770084, 0.4806220777697876, 0.4340055340536947, 0.43772532404418185, 0.40921591053625794, 0.4593544546020263, 0.0987417479557069, 0.09072896392509133, 0.08868874415568184, 0.10567292991464405, 0.08490465507054612, 0.09319796255162216, 0.07669366327636273, 0.0979503412976519, 0.07034767355921578, 0.14732982959711038, 0.15007833974782192, 0.189750030408102, 0.3671351921522802, 0.14793941817682676, 0.20369178887849537, 0.2532672444983478, 0.16972142640281584, 0.13389763749074735, 0.271317335574228, 0.23624753428115375, 0.27512094479107296, 0.2653360035226101, 0.28868809991628863, 0.29410222970367317, 0.33912980979239027, 0.2801957482375408, 0.27665758074292446, 0.21991581912544822, 0.25879301876228655, 0.2549205507515344, 0.21356952780142435, 0.18127990904422175, 0.18502565224413492, 0.21347375013557834, 0.23445655188350445, 0.2386738569972705, 0.17015481448613268, 0.15743066376250003, 0.1884548220714447, 0.16166391497644073, 0.1697510996722551, 0.15373455200746433, 0.22293587939321946, 0.17431018756110683, 0.18094957075542528, 0.16710999274457028, 0.19752869880272628, 0.20945709780317134, 0.18048917211326787, 0.17450036448073647, 0.1802940241371811, 0.17326476637171795, 0.17868141378573132, 0.1861305019478453, 0.19088602567598822, 0.1450140272671644, 0.13883268584257202, 0.6432105579680694, 0.19590232447173528, 0.1885765978256203, 0.14122497903531006, 0.13998877691577982, 0.6383867576933462, 0.3331617050232787, 0.20525155269570727, 0.28454646379328596, 0.12673081675494757, 0.1909488102622101, 0.1616709479358973, 0.2073855276472928, 0.2124917823386775, 0.19945275609339796, 0.19703813918121815, 0.17345131054754692, 0.20933096463952816, 0.18138027581465233, 0.1800267802060873, 0.2045242437568241, 0.20771006460865804, 0.18750407544239378, 0.1894767929860397, 0.06888267526986092, 0.07447622766181139, 0.06685623240058924, 0.06968804353495761, 0.07018707904113286, 0.06924687373728045, 0.06843323535508228, 0.06445913629473177, 0.055398079127219724]}, "mutation_prompt": null}
{"id": "f8d9e386-40ba-4d26-8fc3-3133af317cb3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance convergence by updating the influence of global best on DE mutation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e963c58-5973-4e0d-975e-9aaabbb95372", "metadata": {"aucs": [0.7268172888140614, 0.6579502154124055, 0.6466170831960163, 0.6948507085737021, 0.7180589614691328, 0.6766611249754275, 0.6725126722196499, 0.6419248154015841, 0.7289961676710678, 0.38574605321417943, 0.3804069595290335, 0.46513519425979954, 0.3879291085138472, 0.2838460084884854, 0.2443314290554469, 0.3884693860544012, 0.4176232430604555, 0.2736020534144703, 0.10829039393094075, 0.09071722283613359, 0.16666682854556636, 0.10142135348140979, 0.13301168238627847, 0.07448853210482032, 0.10974992653575244, 0.09694362533547096, 0.12730387531619491, 0.08208829655870231, 0.09326813861808547, 0.09559711514345304, 0.072327177391323, 0.0842877150167074, 0.09643235270520178, 0.0710982763831145, 0.08045214408379686, 0.06687281958326696, 0.9639233256453342, 0.991897628733357, 0.9758203316846232, 0.9848634239219765, 0.970123714042729, 0.9769923461722103, 0.9797001254818517, 0.9873182235050691, 0.9873478284653141, 0.22914066060559857, 0.18588162369297712, 0.1688511360655821, 0.13985910633329057, 0.16468457178489593, 0.19387206038672644, 0.2303453951184402, 0.1591442531666971, 0.23204434131997165, 0.5123699989385393, 0.2021196519794225, 0.38830076889178067, 0.3111770989030844, 0.4482145341855277, 0.31982064077623307, 0.3668195073967139, 0.2824969327401299, 0.32915445639261676, 0.1363793836494278, 0.11652548252914385, 0.12468300091929418, 0.11787736329542409, 0.07798763222808958, 0.1110211790638792, 0.09836827039773488, 0.14611606848711545, 0.2267777898080403, 0.10653858289520901, 0.1451930243348859, 0.15270191543213774, 0.16149273560895472, 0.16637245129446843, 0.13436338011917592, 0.18949464593001897, 0.15326824203291056, 0.18914354610505235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010751135695287517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016249545671270016, 9.999999999998899e-05, 0.07489965955517797, 0.03529605311137696, 0.09814736623718323, 0.07261535531097596, 0.006640167805687103, 0.0593480664669469, 0.07269724700844926, 0.010121424583223071, 0.09216223025508952, 0.03125519508533414, 0.0323768941632665, 0.0452517857713125, 0.05542120622038271, 0.08055591619413771, 0.047651539272621224, 0.05390893021692933, 0.060937654359700666, 0.13541687320168005, 0.15667105966119343, 0.04109118859075456, 0.14852386863559153, 0.08899065475258428, 0.12008305670940356, 0.09662355937329958, 0.15180599158379826, 0.10005577989560188, 0.07646831922658426, 0.42185571572822733, 0.47347468225763667, 0.41803045465958943, 0.45370676147770084, 0.4806220777697876, 0.4340055340536947, 0.43772532404418185, 0.40921591053625794, 0.4593544546020263, 0.0987417479557069, 0.09072896392509133, 0.08868874415568184, 0.10567292991464405, 0.08490465507054612, 0.09319796255162216, 0.07669366327636273, 0.0979503412976519, 0.07034767355921578, 0.14732982959711038, 0.15007833974782192, 0.189750030408102, 0.3671351921522802, 0.14793941817682676, 0.20369178887849537, 0.2532672444983478, 0.16972142640281584, 0.13389763749074735, 0.271317335574228, 0.23624753428115375, 0.27512094479107296, 0.2653360035226101, 0.28868809991628863, 0.29410222970367317, 0.33912980979239027, 0.2801957482375408, 0.27665758074292446, 0.21991581912544822, 0.25879301876228655, 0.2549205507515344, 0.21356952780142435, 0.18127990904422175, 0.18502565224413492, 0.21347375013557834, 0.23445655188350445, 0.2386738569972705, 0.17015481448613268, 0.15743066376250003, 0.1884548220714447, 0.16166391497644073, 0.1697510996722551, 0.15373455200746433, 0.22293587939321946, 0.17431018756110683, 0.18094957075542528, 0.16710999274457028, 0.19752869880272628, 0.20945709780317134, 0.18048917211326787, 0.17450036448073647, 0.1802940241371811, 0.17326476637171795, 0.17868141378573132, 0.1861305019478453, 0.19088602567598822, 0.1450140272671644, 0.13883268584257202, 0.6432105579680694, 0.19590232447173528, 0.1885765978256203, 0.14122497903531006, 0.13998877691577982, 0.6383867576933462, 0.3331617050232787, 0.20525155269570727, 0.28454646379328596, 0.12673081675494757, 0.1909488102622101, 0.1616709479358973, 0.2073855276472928, 0.2124917823386775, 0.19945275609339796, 0.19703813918121815, 0.17345131054754692, 0.20933096463952816, 0.18138027581465233, 0.1800267802060873, 0.2045242437568241, 0.20771006460865804, 0.18750407544239378, 0.1894767929860397, 0.06888267526986092, 0.07447622766181139, 0.06685623240058924, 0.06968804353495761, 0.07018707904113286, 0.06924687373728045, 0.06843323535508228, 0.06445913629473177, 0.055398079127219724]}, "mutation_prompt": null}
{"id": "74b6cfb9-ed07-45e2-aab4-e5b100947bf1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i] + np.random.normal(0, 0.01, self.dim)  # local search refinement\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improve convergence speed by modifying personal best update strategy to incorporate local search.", "configspace": "", "generation": 56, "fitness": 0.20393709534038026, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "8e963c58-5973-4e0d-975e-9aaabbb95372", "metadata": {"aucs": [0.4753737275749622, 0.47995330001281344, 0.49344591815425365, 0.5351089861168461, 0.5056674217466699, 0.516618242110134, 0.4931624493361261, 0.509911398075297, 0.49116617646928384, 0.031116444703515156, 0.10017626204577557, 0.11422517162795487, 0.035652698404115335, 0.0324838114678645, 0.05674501631952589, 0.10602446718016745, 0.08214419158855979, 0.109312834668438, 0.09721210946694481, 0.09209714450696738, 0.07971249479698927, 0.1027356773608391, 0.09559353763649192, 0.09312065100769373, 0.10322902257625355, 0.0878631864482522, 0.10247184165889045, 0.0762231251791049, 0.07395849619418204, 0.08419128655662389, 0.07655428041687207, 0.06144903783724753, 0.11222587152425079, 0.10069029276836461, 0.10837347898520966, 0.06099778078724771, 0.9712316026823336, 0.9867479751650474, 0.980854181333117, 0.9822488439670661, 0.962350519898589, 0.9385044696792697, 0.9768967212773588, 0.981549648342541, 0.9894135821995319, 0.16124106926452098, 0.20291429024366248, 0.1376877856422286, 0.14019768522442178, 0.18051094006638557, 0.15967274989479574, 0.19418386660286668, 0.1929382286955389, 0.2074642152101751, 0.3521799525745003, 0.21530887855360292, 0.370312292970537, 0.20454803672407995, 0.1976838734229539, 0.2543052828183988, 0.36268464068164774, 0.27326268047027436, 0.2237615940390577, 0.1559104198956004, 0.1555799965878708, 0.09241515830325076, 0.16156181468779307, 0.10732119549299346, 0.09499817776214547, 0.12900394596606912, 0.11586424284571295, 0.19204901312538902, 0.1535908056463524, 0.11885526836650784, 0.15413206970662452, 0.1570757487296347, 0.19638792869378652, 0.14963771895910016, 0.1506302550081665, 0.09830745478894365, 0.1453154129180141, 0.0014141560590247293, 9.999999999998899e-05, 9.999999999998899e-05, 0.003128464592268787, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045646117993403235, 0.04773378707280973, 0.05747621960397953, 0.034927701155602286, 0.012586861228877422, 0.031046057454699794, 0.035738392178740974, 0.04614222217308228, 0.15361725967025652, 0.014075920030450328, 0.030244012257228725, 0.006231002027503596, 0.04163320695670647, 9.999999999998899e-05, 0.046840973704738054, 0.03236041912779131, 0.029575904125524022, 0.016008658133771503, 0.07239300085227751, 0.13232425589326047, 0.03914157602548762, 0.08474666236478423, 0.09942439277441806, 0.13607833474999576, 0.0614861299046946, 0.05723917480299967, 0.07485765909227227, 0.3911559070756966, 0.4089342691481046, 0.42920639779101377, 0.4645175173211985, 0.4274827280864957, 0.4557481944297731, 0.44998641605689815, 0.4345979473355649, 0.39087687012121075, 0.07041771528888152, 0.0833722150506222, 0.09270415562819179, 0.08698427535795905, 0.06962272906987887, 0.08366056719791926, 0.08576729327293175, 0.08492027388891821, 0.0950656063121802, 0.3119728780754767, 0.24578505484397906, 0.1443726591269724, 0.2410461820597135, 0.2124435636107349, 0.15715623649344757, 0.1364672118023862, 0.12457512035745821, 0.14702800727058962, 0.30190476633418306, 0.25752254003883857, 0.27988948990287776, 0.22163227310897482, 0.28750570715929735, 0.2550690335219974, 0.3445366578093343, 0.2893582924497661, 0.30938573329545405, 0.1601903681393131, 0.2028274801861144, 0.2116580140201041, 0.18372615347015697, 0.19900153074474458, 0.19657713072954597, 0.2074542117671252, 0.21574995503390415, 0.23137946709359014, 0.17886113545542193, 0.19620999312887988, 0.18284475717016002, 0.1831537362565112, 0.17060572670433516, 0.16794965796199268, 0.17376272467734655, 0.16386407149661664, 0.16543974019383223, 0.29297137520448924, 0.21135582938214925, 0.18268832362766407, 0.19731627410611574, 0.23487941821091196, 0.17488320510154176, 0.17877662067508404, 0.18807057545658823, 0.18978325535349283, 0.20305072610129882, 0.16638650823154244, 0.15594041242761358, 0.6284071704687233, 0.19810166359522963, 0.18009361812709812, 0.14038566286700227, 0.18164252303332973, 0.19680825797624424, 0.3801015776129486, 0.20638918601795198, 0.14417946287293704, 0.1890448751734961, 0.20488176971098904, 0.32742807995710166, 0.2048843953460785, 0.21169364139009295, 0.2094441959657415, 0.1832725610785214, 0.18786202644536065, 0.18352240074228154, 0.17386211035921828, 0.1830160542935303, 0.16928014215180842, 0.1868868486320039, 0.1799340556976785, 0.1864593306219431, 0.07801865133697139, 0.06474912915595088, 0.06536346659811076, 0.06849198498921383, 0.07195076360788899, 0.07066071366677129, 0.06716490547727205, 0.06485913269654886, 0.07034278160715313]}, "mutation_prompt": null}
{"id": "c625db33-3e31-412c-bca2-961e7459eb62", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n        self.momentum = 0.9  # New momentum factor\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.momentum * self.velocity[i] +  # Updated line with momentum\n                                    self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduce momentum factor in PSO velocity update for improved convergence.", "configspace": "", "generation": 57, "fitness": 0.11425819855763161, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.18.", "error": "", "parent_id": "8e963c58-5973-4e0d-975e-9aaabbb95372", "metadata": {"aucs": [0.14874485492542955, 0.1298041768083411, 0.19209225168371657, 0.21195318454209477, 0.20303747668925254, 0.153051467404001, 0.19349058883230918, 0.20275228172472748, 0.18757120110581804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03472727471700654, 0.03211519720889844, 0.033373975051666616, 0.0410659325915087, 0.014095427322522447, 0.032723546684604976, 0.05202632539698748, 0.04613422845620685, 0.05040678749178917, 0.04716986901147702, 0.026427192247933773, 0.0011085893040808648, 0.01916326580133354, 0.03551134938688427, 0.0011685354824542138, 0.00816707203912792, 0.009555813732171403, 0.024103333914710867, 0.10322716860900216, 0.9918950782571251, 0.9803936246222614, 0.9920630915913744, 0.9320089303105396, 0.9856004342023934, 0.9826554206949955, 0.9925003745785326, 0.9893797318592793, 0.11621893588709975, 0.03976821565436561, 0.050217770903056014, 0.03745271050516963, 0.05832895393517046, 0.04359744000162058, 0.05932359149901545, 0.046217210472462855, 0.10727387495657736, 0.1214461107850644, 0.11813766732798103, 0.0748900805778836, 0.09739665343880133, 0.1606017250594075, 0.14352002940649689, 0.11596766752153254, 0.12978943762887174, 0.13785876458762614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032073687058604805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05674409606015418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015497149692201173, 9.999999999998899e-05, 0.015452138251458525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021805102532515996, 0.013670860414276786, 0.036323650834412025, 0.07998925699710324, 9.999999999998899e-05, 9.999999999998899e-05, 0.01698283854552285, 9.999999999998899e-05, 0.015958936549611114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0057778239573431645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004309359174574423, 0.02267615766193698, 9.999999999998899e-05, 9.999999999998899e-05, 0.15524639470231993, 0.17805196604892737, 0.17251008196257067, 0.20579689175295512, 0.21827661625095085, 0.17630173999411203, 0.16120794527601534, 0.14805270274458693, 0.15680631457269323, 0.04945428314924505, 0.059511812515877005, 0.051229744227686, 0.04677905591692488, 0.0609181400188985, 0.03024345373815629, 0.05853031031845801, 0.032612692643706254, 0.0259763843399875, 0.2027636628623325, 0.12115393689605791, 0.1330355814129056, 0.1322972733328599, 0.10678647620358006, 0.1398988837273868, 0.14335216618464797, 0.13219216180891635, 0.11902977568058448, 0.13991758837173185, 0.16952394171929086, 0.14742286768445434, 0.14836709535408266, 0.16995654142710315, 0.14492735181786176, 0.17659787321597764, 0.1649828671941923, 0.16232063963132093, 0.101458313917685, 0.10023548389443748, 0.10617441640909964, 0.10931421782134587, 0.09680141912816032, 0.11155284813831023, 0.11893933496291553, 0.12209163397926714, 0.10556412919052272, 0.1334385522033783, 0.1422729706604432, 0.14102660043770998, 0.1412871728872951, 0.14016334502213434, 0.1365387961842569, 0.15618167594229893, 0.13840487278763047, 0.151872915267399, 0.15245513538172362, 0.13325942585671824, 0.1495220024539422, 0.1351199387115537, 0.07540012781428707, 0.13423083236727273, 0.1274091589311418, 0.1026910207354711, 0.11261233093964929, 0.1720094730243864, 0.1595437639696673, 0.11060451733860899, 0.14104958204472662, 0.10680978221125392, 0.11829973905707936, 0.17251251193881378, 0.15880889724814184, 0.1331813505335453, 0.2211963376616447, 0.143164937760899, 0.10821125576107427, 0.12692717439862622, 0.11914286330786306, 0.10023765679699503, 0.18216999145766677, 0.17246064923661253, 0.22888593367971977, 0.162680210611847, 0.16660540349430952, 0.16757554399250252, 0.18440012139462947, 0.16582256390743022, 0.1795815477162871, 0.1733723597829392, 0.1626768907694377, 0.16453043831504766, 0.056525934484497165, 0.040211540930186085, 0.029632127916577544, 0.040438605754461565, 0.03543434577875437, 0.0436192501565098, 0.03918662835810738, 0.0361874774670492, 0.05648864130464626]}, "mutation_prompt": null}
{"id": "5ab7b727-65c3-49dd-b760-16322897a3e9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                # Modified line to improve DE mutation strategy\n                mutant = np.clip(a + self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance convergence by updating the influence of global best on DE mutation.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8e963c58-5973-4e0d-975e-9aaabbb95372", "metadata": {"aucs": [0.7268172888140614, 0.6579502154124055, 0.6466170831960163, 0.6948507085737021, 0.7180589614691328, 0.6766611249754275, 0.6725126722196499, 0.6419248154015841, 0.7289961676710678, 0.38574605321417943, 0.3804069595290335, 0.46513519425979954, 0.3879291085138472, 0.2838460084884854, 0.2443314290554469, 0.3884693860544012, 0.4176232430604555, 0.2736020534144703, 0.10829039393094075, 0.09071722283613359, 0.16666682854556636, 0.10142135348140979, 0.13301168238627847, 0.07448853210482032, 0.10974992653575244, 0.09694362533547096, 0.12730387531619491, 0.08208829655870231, 0.09326813861808547, 0.09559711514345304, 0.072327177391323, 0.0842877150167074, 0.09643235270520178, 0.0710982763831145, 0.08045214408379686, 0.06687281958326696, 0.9639233256453342, 0.991897628733357, 0.9758203316846232, 0.9848634239219765, 0.970123714042729, 0.9769923461722103, 0.9797001254818517, 0.9873182235050691, 0.9873478284653141, 0.22914066060559857, 0.18588162369297712, 0.1688511360655821, 0.13985910633329057, 0.16468457178489593, 0.19387206038672644, 0.2303453951184402, 0.1591442531666971, 0.23204434131997165, 0.5123699989385393, 0.2021196519794225, 0.38830076889178067, 0.3111770989030844, 0.4482145341855277, 0.31982064077623307, 0.3668195073967139, 0.2824969327401299, 0.32915445639261676, 0.1363793836494278, 0.11652548252914385, 0.12468300091929418, 0.11787736329542409, 0.07798763222808958, 0.1110211790638792, 0.09836827039773488, 0.14611606848711545, 0.2267777898080403, 0.10653858289520901, 0.1451930243348859, 0.15270191543213774, 0.16149273560895472, 0.16637245129446843, 0.13436338011917592, 0.18949464593001897, 0.15326824203291056, 0.18914354610505235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010751135695287517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016249545671270016, 9.999999999998899e-05, 0.07489965955517797, 0.03529605311137696, 0.09814736623718323, 0.07261535531097596, 0.006640167805687103, 0.0593480664669469, 0.07269724700844926, 0.010121424583223071, 0.09216223025508952, 0.03125519508533414, 0.0323768941632665, 0.0452517857713125, 0.05542120622038271, 0.08055591619413771, 0.047651539272621224, 0.05390893021692933, 0.060937654359700666, 0.13541687320168005, 0.15667105966119343, 0.04109118859075456, 0.14852386863559153, 0.08899065475258428, 0.12008305670940356, 0.09662355937329958, 0.15180599158379826, 0.10005577989560188, 0.07646831922658426, 0.42185571572822733, 0.47347468225763667, 0.41803045465958943, 0.45370676147770084, 0.4806220777697876, 0.4340055340536947, 0.43772532404418185, 0.40921591053625794, 0.4593544546020263, 0.0987417479557069, 0.09072896392509133, 0.08868874415568184, 0.10567292991464405, 0.08490465507054612, 0.09319796255162216, 0.07669366327636273, 0.0979503412976519, 0.07034767355921578, 0.14732982959711038, 0.15007833974782192, 0.189750030408102, 0.3671351921522802, 0.14793941817682676, 0.20369178887849537, 0.2532672444983478, 0.16972142640281584, 0.13389763749074735, 0.271317335574228, 0.23624753428115375, 0.27512094479107296, 0.2653360035226101, 0.28868809991628863, 0.29410222970367317, 0.33912980979239027, 0.2801957482375408, 0.27665758074292446, 0.21991581912544822, 0.25879301876228655, 0.2549205507515344, 0.21356952780142435, 0.18127990904422175, 0.18502565224413492, 0.21347375013557834, 0.23445655188350445, 0.2386738569972705, 0.17015481448613268, 0.15743066376250003, 0.1884548220714447, 0.16166391497644073, 0.1697510996722551, 0.15373455200746433, 0.22293587939321946, 0.17431018756110683, 0.18094957075542528, 0.16710999274457028, 0.19752869880272628, 0.20945709780317134, 0.18048917211326787, 0.17450036448073647, 0.1802940241371811, 0.17326476637171795, 0.17868141378573132, 0.1861305019478453, 0.19088602567598822, 0.1450140272671644, 0.13883268584257202, 0.6432105579680694, 0.19590232447173528, 0.1885765978256203, 0.14122497903531006, 0.13998877691577982, 0.6383867576933462, 0.3331617050232787, 0.20525155269570727, 0.28454646379328596, 0.12673081675494757, 0.1909488102622101, 0.1616709479358973, 0.2073855276472928, 0.2124917823386775, 0.19945275609339796, 0.19703813918121815, 0.17345131054754692, 0.20933096463952816, 0.18138027581465233, 0.1800267802060873, 0.2045242437568241, 0.20771006460865804, 0.18750407544239378, 0.1894767929860397, 0.06888267526986092, 0.07447622766181139, 0.06685623240058924, 0.06968804353495761, 0.07018707904113286, 0.06924687373728045, 0.06843323535508228, 0.06445913629473177, 0.055398079127219724]}, "mutation_prompt": null}
{"id": "8c33f83e-e9f7-4b66-9d31-56cca8f1abae", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5)  # New random scaling factor\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjust DE mutation to utilize an additional random scaling factor for better exploration.", "configspace": "", "generation": 59, "fitness": 0.23490828037480907, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "8e963c58-5973-4e0d-975e-9aaabbb95372", "metadata": {"aucs": [0.6718970690258014, 0.6913146890594257, 0.669799100059012, 0.7354746563055921, 0.7282968737983906, 0.6756180776881843, 0.7437275680597407, 0.6730042406594655, 0.6008097547996681, 0.43165924928940336, 0.4623917499369746, 0.3861065447776604, 0.4342607125051551, 0.298033913176313, 0.5215370104530757, 0.3596021090386755, 0.4188682475318495, 0.3805277447348432, 0.08847592638735802, 0.09618672270868833, 0.10873253762490565, 0.11519850865195336, 0.09099727015006087, 0.0939041098943062, 0.12398336744227578, 0.1004265164892082, 0.09453639199793018, 0.07856495621249504, 0.0875896169297623, 0.07477259596113361, 0.08570245695706491, 0.09593634490806979, 0.08408972510906243, 0.06960957002061474, 0.09099292725550023, 0.0912821703458514, 0.9857189550064809, 0.9919011522335408, 0.978762020198281, 0.9920840978604746, 0.9750258059606125, 0.9736604869122749, 0.9805182051583868, 0.9786410994343311, 0.9864378851822305, 0.20642091256915196, 0.1529890809034259, 0.1994441159514616, 0.1641627364861371, 0.207926222555609, 0.1569188741005335, 0.2029864996129277, 0.22175770110003, 0.18591430296654998, 0.3085185965965651, 0.4501616450446664, 0.2012815759513631, 0.26358593241085504, 0.1568436764124881, 0.25211622782140064, 0.34672041737986126, 0.1837116383781332, 0.21597077437918988, 0.16251615206919956, 0.10426575701148888, 0.15183860391631043, 0.11791896205622343, 0.14887544909487538, 0.12087592454141927, 0.16411747342641814, 0.18295234551938144, 0.159821948665251, 0.13334080465171172, 0.16431108987127718, 0.14984551892952402, 0.10754247338111633, 0.14060308130789567, 0.2036483072876989, 0.1437724172032011, 0.1363812015454492, 0.17064168684832182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005467892822013098, 9.999999999998899e-05, 0.03843907363821886, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025190233278675755, 0.04856531281552612, 0.022728307286838167, 0.0811783129188014, 0.07522947735772689, 0.014136584263185759, 0.02860168831799914, 0.039271785742254206, 0.06129769487999859, 0.05086561853997007, 0.03784799750344792, 0.04721816457329242, 0.03823741892513732, 0.05236301848542535, 0.04825248402542326, 0.08299215299736662, 0.06691932128022182, 0.12589198879829744, 0.05672408190621192, 0.1260295490886001, 0.08884038362663615, 0.17800666574738078, 0.09467336367239809, 0.07208949029055833, 0.20852617908631665, 0.15391801694385776, 0.10022985844431809, 0.12248947893710116, 0.4251341653190289, 0.43942294748817523, 0.4229742075090951, 0.4669037016866444, 0.4441355722043411, 0.4794475348950862, 0.45309400291265434, 0.3993276276035359, 0.4392300705518978, 0.06525679682205665, 0.08329236695336117, 0.07971283146322816, 0.1384497258332834, 0.04442347399451807, 0.08486340378089785, 0.08135530884154851, 0.08573268475011064, 0.09279577189303057, 0.22100099811624874, 0.15436892972679128, 0.16345766080870106, 0.18117675555302737, 0.2184742123705583, 0.17655814119955504, 0.30530908907833654, 0.16272601970668998, 0.18227887444302338, 0.23620977504298257, 0.37150274383257387, 0.2434464201344666, 0.29197204135360955, 0.19305571469548244, 0.2881170798581957, 0.3199746306250745, 0.31024133078451943, 0.2761373124005355, 0.22975859573303614, 0.21863671235695714, 0.23942143641188784, 0.21719167137946882, 0.18779845538110596, 0.16956246395101082, 0.2259183639512562, 0.22111443680619847, 0.24491212992154077, 0.19302347548893817, 0.15660480645346286, 0.1664049812320736, 0.18178065970518809, 0.16453378301008037, 0.1801100219771028, 0.18748698499492078, 0.17276282895261053, 0.18837685278317384, 0.20502549722168384, 0.2018771154164113, 0.17875472062899844, 0.17774168152552994, 0.16592664737403084, 0.18012929698928415, 0.18975548931911845, 0.19262805972504882, 0.20951802618441295, 0.20464755177520466, 0.16206894726839238, 0.1605693123534826, 0.5457053853353797, 0.19411757589051726, 0.16612112545126712, 0.137843751761062, 0.5898236294630785, 0.19791708883897585, 0.41171689543493883, 0.2101795215976805, 0.155312948063831, 0.4777530922200013, 0.16700636742793218, 0.1506043521253756, 0.580126530038108, 0.21198641977326738, 0.20987035094991413, 0.16478541834074711, 0.19995837886933454, 0.17770131816716717, 0.1948533767609134, 0.17483069142965602, 0.18024085744125606, 0.1706656977918226, 0.19105926247540406, 0.18282732145945246, 0.07050920197942157, 0.06280742403778261, 0.06945694231801991, 0.06101623305442938, 0.06220002345108533, 0.06688049065242307, 0.06511193442100938, 0.07759145569878878, 0.06341642319245822]}, "mutation_prompt": null}
{"id": "b0045614-d338-48ba-9a2b-b5f8b74c50e1", "solution": "# Description: Introduce a dynamic inertia weight range for more adaptive exploration.\n# Code:\nimport numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.9 - (0.4 * (self.func_evals / self.budget))  # Modified inertia weight range\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5)  # New random scaling factor\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduce a dynamic inertia weight range for more adaptive exploration.", "configspace": "", "generation": 60, "fitness": 0.16795371613184773, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "8c33f83e-e9f7-4b66-9d31-56cca8f1abae", "metadata": {"aucs": [0.3363870733013027, 0.3409475158286406, 0.3141434877192968, 0.40134103144076083, 0.44957251908788676, 0.3770973084617889, 0.3607807716649468, 0.31676125183921144, 0.34990247652012973, 0.04972539023024014, 0.12422622499865321, 0.18623602500018832, 0.08119879399268926, 0.10682383880024648, 0.03970086364546532, 0.15899240142012638, 0.06540187951929288, 0.11255230913457215, 0.07122674882098201, 0.07146207814951233, 0.060512231544182615, 0.05771159480538335, 0.06034204699791512, 0.08444040679867193, 0.056559414632734506, 0.0660877355816869, 0.0990085619914336, 0.041957153768177324, 0.03308045806315463, 0.04933352219217524, 0.0462028613494786, 0.049543424969493044, 0.04579529725240683, 0.05464509495843106, 0.043947164211339484, 0.04813600774585158, 0.9823876131359323, 0.9919170595881796, 0.9790861718439786, 0.9920946283725083, 0.9760151013190838, 0.9737763977884708, 0.9709490877295124, 0.9793062276069128, 0.9908902877440892, 0.14922380663183032, 0.10813901308674212, 0.11118714182422063, 0.1375995149468766, 0.11000807911891897, 0.11661309669161524, 0.11934428213431625, 0.12889342593414854, 0.13800707765157405, 0.1841638031053241, 0.16906928293074885, 0.16516810299976825, 0.20651545396877968, 0.18663532955437712, 0.17433279089565312, 0.1675896526999291, 0.19698428739471463, 0.1635164929784716, 0.10053295074311486, 0.09047252210118384, 0.10087718722868577, 0.08479731625800524, 0.101455431147635, 0.12014210711412654, 0.0685579776081422, 0.0875395747967781, 0.052610865310850574, 0.09774953027234934, 0.10991079893968925, 0.09191533501710092, 0.09976724447402308, 0.09042431029017062, 0.07414833572193058, 0.05574060799548075, 0.06504625820730947, 0.0797795780638133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014629722632578668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04243632647548001, 0.023434632592113536, 0.062105275968209916, 0.042015284865620006, 0.040883320848633775, 0.08527411082640013, 0.04712862513665372, 0.02008482653255428, 0.024701368085935482, 0.00030732159876478704, 0.010110414922742339, 0.004893527620203564, 0.03471105114775841, 0.018503969460953562, 0.01597391146407623, 0.029719630027429944, 0.019599470029698418, 0.025883097850139758, 0.031798918563657574, 0.022279387270947026, 0.04185676837956542, 0.04446846345434696, 0.05159927965253519, 0.06564453786902702, 0.03947148916311727, 0.048040639542226926, 0.06738744846936462, 0.3186242365707125, 0.2849087195334792, 0.3339180136758436, 0.3479258439493149, 0.30806025242572055, 0.35063245043719604, 0.36570994064350026, 0.3311229084348434, 0.3030196033829875, 0.09349672907510231, 0.06719140542048041, 0.08981674082651514, 0.06330320909348408, 0.08374053614023291, 0.07340534987370761, 0.06662770521899397, 0.08433193703236708, 0.05941392961567382, 0.11655776550077823, 0.15303139740177485, 0.1535387854622542, 0.17601198678935637, 0.1622269608103899, 0.1358352239612275, 0.12572971554730283, 0.16596604578313912, 0.15573788336782213, 0.26932325579202365, 0.21035569930514242, 0.2394946099347841, 0.22876518409367608, 0.22262855464897824, 0.1918708509998024, 0.24800241007886847, 0.2213383552977497, 0.2564369309264922, 0.16998344394731135, 0.15363755707825988, 0.1340632667937569, 0.12304120231538695, 0.14285859105136134, 0.17407597657830232, 0.18114510964613395, 0.1963127544832015, 0.1306841293689669, 0.181996756934234, 0.1561854682765057, 0.17001181603986748, 0.18818598956091293, 0.16492606325160197, 0.15366367249256696, 0.170247359951758, 0.1685254515145871, 0.16837663032185268, 0.15306931890245956, 0.16350453869316384, 0.1632596680291516, 0.16761535703680963, 0.17725373119039, 0.1902748379374426, 0.17080401157931757, 0.1579565575079176, 0.15597452489522223, 0.17994829338587004, 0.16086056766028944, 0.15381252894409825, 0.1541916616019514, 0.23762447379674756, 0.1725993262093749, 0.16758521109497437, 0.129299742586938, 0.15636707487715906, 0.23701017875545605, 0.1913145415489026, 0.247903707460293, 0.15610062138567304, 0.16983642447413005, 0.1511715899017907, 0.20725908777172486, 0.21167718092608168, 0.1985038656227559, 0.19736494925775705, 0.1772344199771818, 0.17822895352767953, 0.20297472680049067, 0.18287779567865736, 0.17258950951056995, 0.20835354687789964, 0.18729158767869858, 0.1789200491245443, 0.054884765502662414, 0.051577891404469334, 0.05350952110669238, 0.05707423155185787, 0.05632977516430315, 0.05873190323775812, 0.06096229973584322, 0.055062632659914734, 0.059992957760835464]}, "mutation_prompt": null}
{"id": "cd12044b-779e-40a2-b89c-d06e6ad4f558", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5)  # New random scaling factor\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjust DE mutation to utilize an additional random scaling factor for better exploration.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8c33f83e-e9f7-4b66-9d31-56cca8f1abae", "metadata": {"aucs": [0.6718970690258014, 0.6913146890594257, 0.669799100059012, 0.7354746563055921, 0.7282968737983906, 0.6756180776881843, 0.7437275680597407, 0.6730042406594655, 0.6008097547996681, 0.43165924928940336, 0.4623917499369746, 0.3861065447776604, 0.4342607125051551, 0.298033913176313, 0.5215370104530757, 0.3596021090386755, 0.4188682475318495, 0.3805277447348432, 0.08847592638735802, 0.09618672270868833, 0.10873253762490565, 0.11519850865195336, 0.09099727015006087, 0.0939041098943062, 0.12398336744227578, 0.1004265164892082, 0.09453639199793018, 0.07856495621249504, 0.0875896169297623, 0.07477259596113361, 0.08570245695706491, 0.09593634490806979, 0.08408972510906243, 0.06960957002061474, 0.09099292725550023, 0.0912821703458514, 0.9857189550064809, 0.9919011522335408, 0.978762020198281, 0.9920840978604746, 0.9750258059606125, 0.9736604869122749, 0.9805182051583868, 0.9786410994343311, 0.9864378851822305, 0.20642091256915196, 0.1529890809034259, 0.1994441159514616, 0.1641627364861371, 0.207926222555609, 0.1569188741005335, 0.2029864996129277, 0.22175770110003, 0.18591430296654998, 0.3085185965965651, 0.4501616450446664, 0.2012815759513631, 0.26358593241085504, 0.1568436764124881, 0.25211622782140064, 0.34672041737986126, 0.1837116383781332, 0.21597077437918988, 0.16251615206919956, 0.10426575701148888, 0.15183860391631043, 0.11791896205622343, 0.14887544909487538, 0.12087592454141927, 0.16411747342641814, 0.18295234551938144, 0.159821948665251, 0.13334080465171172, 0.16431108987127718, 0.14984551892952402, 0.10754247338111633, 0.14060308130789567, 0.2036483072876989, 0.1437724172032011, 0.1363812015454492, 0.17064168684832182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005467892822013098, 9.999999999998899e-05, 0.03843907363821886, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025190233278675755, 0.04856531281552612, 0.022728307286838167, 0.0811783129188014, 0.07522947735772689, 0.014136584263185759, 0.02860168831799914, 0.039271785742254206, 0.06129769487999859, 0.05086561853997007, 0.03784799750344792, 0.04721816457329242, 0.03823741892513732, 0.05236301848542535, 0.04825248402542326, 0.08299215299736662, 0.06691932128022182, 0.12589198879829744, 0.05672408190621192, 0.1260295490886001, 0.08884038362663615, 0.17800666574738078, 0.09467336367239809, 0.07208949029055833, 0.20852617908631665, 0.15391801694385776, 0.10022985844431809, 0.12248947893710116, 0.4251341653190289, 0.43942294748817523, 0.4229742075090951, 0.4669037016866444, 0.4441355722043411, 0.4794475348950862, 0.45309400291265434, 0.3993276276035359, 0.4392300705518978, 0.06525679682205665, 0.08329236695336117, 0.07971283146322816, 0.1384497258332834, 0.04442347399451807, 0.08486340378089785, 0.08135530884154851, 0.08573268475011064, 0.09279577189303057, 0.22100099811624874, 0.15436892972679128, 0.16345766080870106, 0.18117675555302737, 0.2184742123705583, 0.17655814119955504, 0.30530908907833654, 0.16272601970668998, 0.18227887444302338, 0.23620977504298257, 0.37150274383257387, 0.2434464201344666, 0.29197204135360955, 0.19305571469548244, 0.2881170798581957, 0.3199746306250745, 0.31024133078451943, 0.2761373124005355, 0.22975859573303614, 0.21863671235695714, 0.23942143641188784, 0.21719167137946882, 0.18779845538110596, 0.16956246395101082, 0.2259183639512562, 0.22111443680619847, 0.24491212992154077, 0.19302347548893817, 0.15660480645346286, 0.1664049812320736, 0.18178065970518809, 0.16453378301008037, 0.1801100219771028, 0.18748698499492078, 0.17276282895261053, 0.18837685278317384, 0.20502549722168384, 0.2018771154164113, 0.17875472062899844, 0.17774168152552994, 0.16592664737403084, 0.18012929698928415, 0.18975548931911845, 0.19262805972504882, 0.20951802618441295, 0.20464755177520466, 0.16206894726839238, 0.1605693123534826, 0.5457053853353797, 0.19411757589051726, 0.16612112545126712, 0.137843751761062, 0.5898236294630785, 0.19791708883897585, 0.41171689543493883, 0.2101795215976805, 0.155312948063831, 0.4777530922200013, 0.16700636742793218, 0.1506043521253756, 0.580126530038108, 0.21198641977326738, 0.20987035094991413, 0.16478541834074711, 0.19995837886933454, 0.17770131816716717, 0.1948533767609134, 0.17483069142965602, 0.18024085744125606, 0.1706656977918226, 0.19105926247540406, 0.18282732145945246, 0.07050920197942157, 0.06280742403778261, 0.06945694231801991, 0.06101623305442938, 0.06220002345108533, 0.06688049065242307, 0.06511193442100938, 0.07759145569878878, 0.06341642319245822]}, "mutation_prompt": null}
{"id": "ee909891-910c-4753-ac5c-7defb265a04d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5)  # New random scaling factor\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Adjust DE mutation to utilize an additional random scaling factor for better exploration.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8c33f83e-e9f7-4b66-9d31-56cca8f1abae", "metadata": {"aucs": [0.6718970690258014, 0.6913146890594257, 0.669799100059012, 0.7354746563055921, 0.7282968737983906, 0.6756180776881843, 0.7437275680597407, 0.6730042406594655, 0.6008097547996681, 0.43165924928940336, 0.4623917499369746, 0.3861065447776604, 0.4342607125051551, 0.298033913176313, 0.5215370104530757, 0.3596021090386755, 0.4188682475318495, 0.3805277447348432, 0.08847592638735802, 0.09618672270868833, 0.10873253762490565, 0.11519850865195336, 0.09099727015006087, 0.0939041098943062, 0.12398336744227578, 0.1004265164892082, 0.09453639199793018, 0.07856495621249504, 0.0875896169297623, 0.07477259596113361, 0.08570245695706491, 0.09593634490806979, 0.08408972510906243, 0.06960957002061474, 0.09099292725550023, 0.0912821703458514, 0.9857189550064809, 0.9919011522335408, 0.978762020198281, 0.9920840978604746, 0.9750258059606125, 0.9736604869122749, 0.9805182051583868, 0.9786410994343311, 0.9864378851822305, 0.20642091256915196, 0.1529890809034259, 0.1994441159514616, 0.1641627364861371, 0.207926222555609, 0.1569188741005335, 0.2029864996129277, 0.22175770110003, 0.18591430296654998, 0.3085185965965651, 0.4501616450446664, 0.2012815759513631, 0.26358593241085504, 0.1568436764124881, 0.25211622782140064, 0.34672041737986126, 0.1837116383781332, 0.21597077437918988, 0.16251615206919956, 0.10426575701148888, 0.15183860391631043, 0.11791896205622343, 0.14887544909487538, 0.12087592454141927, 0.16411747342641814, 0.18295234551938144, 0.159821948665251, 0.13334080465171172, 0.16431108987127718, 0.14984551892952402, 0.10754247338111633, 0.14060308130789567, 0.2036483072876989, 0.1437724172032011, 0.1363812015454492, 0.17064168684832182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005467892822013098, 9.999999999998899e-05, 0.03843907363821886, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025190233278675755, 0.04856531281552612, 0.022728307286838167, 0.0811783129188014, 0.07522947735772689, 0.014136584263185759, 0.02860168831799914, 0.039271785742254206, 0.06129769487999859, 0.05086561853997007, 0.03784799750344792, 0.04721816457329242, 0.03823741892513732, 0.05236301848542535, 0.04825248402542326, 0.08299215299736662, 0.06691932128022182, 0.12589198879829744, 0.05672408190621192, 0.1260295490886001, 0.08884038362663615, 0.17800666574738078, 0.09467336367239809, 0.07208949029055833, 0.20852617908631665, 0.15391801694385776, 0.10022985844431809, 0.12248947893710116, 0.4251341653190289, 0.43942294748817523, 0.4229742075090951, 0.4669037016866444, 0.4441355722043411, 0.4794475348950862, 0.45309400291265434, 0.3993276276035359, 0.4392300705518978, 0.06525679682205665, 0.08329236695336117, 0.07971283146322816, 0.1384497258332834, 0.04442347399451807, 0.08486340378089785, 0.08135530884154851, 0.08573268475011064, 0.09279577189303057, 0.22100099811624874, 0.15436892972679128, 0.16345766080870106, 0.18117675555302737, 0.2184742123705583, 0.17655814119955504, 0.30530908907833654, 0.16272601970668998, 0.18227887444302338, 0.23620977504298257, 0.37150274383257387, 0.2434464201344666, 0.29197204135360955, 0.19305571469548244, 0.2881170798581957, 0.3199746306250745, 0.31024133078451943, 0.2761373124005355, 0.22975859573303614, 0.21863671235695714, 0.23942143641188784, 0.21719167137946882, 0.18779845538110596, 0.16956246395101082, 0.2259183639512562, 0.22111443680619847, 0.24491212992154077, 0.19302347548893817, 0.15660480645346286, 0.1664049812320736, 0.18178065970518809, 0.16453378301008037, 0.1801100219771028, 0.18748698499492078, 0.17276282895261053, 0.18837685278317384, 0.20502549722168384, 0.2018771154164113, 0.17875472062899844, 0.17774168152552994, 0.16592664737403084, 0.18012929698928415, 0.18975548931911845, 0.19262805972504882, 0.20951802618441295, 0.20464755177520466, 0.16206894726839238, 0.1605693123534826, 0.5457053853353797, 0.19411757589051726, 0.16612112545126712, 0.137843751761062, 0.5898236294630785, 0.19791708883897585, 0.41171689543493883, 0.2101795215976805, 0.155312948063831, 0.4777530922200013, 0.16700636742793218, 0.1506043521253756, 0.580126530038108, 0.21198641977326738, 0.20987035094991413, 0.16478541834074711, 0.19995837886933454, 0.17770131816716717, 0.1948533767609134, 0.17483069142965602, 0.18024085744125606, 0.1706656977918226, 0.19105926247540406, 0.18282732145945246, 0.07050920197942157, 0.06280742403778261, 0.06945694231801991, 0.06101623305442938, 0.06220002345108533, 0.06688049065242307, 0.06511193442100938, 0.07759145569878878, 0.06341642319245822]}, "mutation_prompt": null}
{"id": "b62733a2-f2db-4b1c-9abf-fe3bd7eb613b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Add adaptive random scaling to DE mutation for enhanced diversity.", "configspace": "", "generation": 63, "fitness": 0.23780872328821448, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "8c33f83e-e9f7-4b66-9d31-56cca8f1abae", "metadata": {"aucs": [0.6265504956194898, 0.6839609555640149, 0.5753179068488069, 0.6508214888014701, 0.7348080298185928, 0.7142290366220491, 0.6948856158561973, 0.6499291942370049, 0.6348842343925036, 0.5032491597270939, 0.48200426958020215, 0.3683800836815614, 0.3087986315411426, 0.37179555943537135, 0.462218906435773, 0.4155146997072062, 0.29003451417172244, 0.42895735384478406, 0.0738270161764858, 0.10832851151418998, 0.08844614640950244, 0.08721405857380737, 0.10719998575084133, 0.10994946736862854, 0.10902311848531243, 0.09032480993823322, 0.07793276833541007, 0.08980154305234356, 0.06779685116207379, 0.07055803039594066, 0.11493776711841219, 0.05988389019250118, 0.08203720859367436, 0.07832590724093991, 0.07766664996050598, 0.07241849170574555, 0.98176664877211, 0.9911449185824762, 0.9480286914925071, 0.9864899552261067, 0.9819566395008124, 0.9858346584732339, 0.9786394649305251, 0.9765144258762132, 0.9900272951082281, 0.19419735756906076, 0.23441949457568467, 0.15128375373728797, 0.1768507059339257, 0.2465345043035556, 0.15912247432718973, 0.16593505731792335, 0.19778405174604918, 0.19273046215471168, 0.27018087024614557, 0.46885252789374565, 0.2750626108070555, 0.24565009745271726, 0.25217641284677017, 0.20598316664667138, 0.2581646843863946, 0.6446213419295785, 0.48030205094491907, 0.17381706660006935, 0.2215820437673055, 0.13853779891616103, 0.11185511286937111, 0.15796491413636782, 0.11551183169525925, 0.1432266725099931, 0.0906029906657756, 0.1377146574250071, 0.15515960610523305, 0.09513230448607735, 0.11146789072199303, 0.16578177681736528, 0.1541419887071226, 0.11950946338200696, 0.11729919960699664, 0.11027592037918788, 0.16030002672863863, 0.0001029609947441612, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025900368548392727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0818782233410249, 0.02097503392549538, 0.05794863961306129, 0.04902399849657779, 9.999999999998899e-05, 0.03437768018110188, 0.07143811158581759, 0.052270431442100196, 0.060970316291708126, 0.03694014731100137, 0.023004071316963692, 0.03964156787943851, 0.09282758608827424, 0.1133767839568065, 0.062433343843760314, 0.04284477648523166, 0.06299183502611139, 0.050935585062574895, 0.12025291825290374, 0.06484366668823427, 0.12988966402721747, 0.15950204141225588, 0.18560868959145116, 0.12039362400229625, 0.05245214407028853, 0.1805393393725484, 0.0502925484266894, 0.4239551277489626, 0.45066553223872385, 0.3984587490034106, 0.4505276580120309, 0.3882152871419283, 0.4580350843347284, 0.47830839747894827, 0.42978023090542383, 0.4294604585197984, 0.09139250731266968, 0.09526995826211715, 0.1098851269517187, 0.08475196726089884, 0.08308598705149939, 0.1088919130737559, 0.07683670425882116, 0.07787007491345244, 0.09097360404872556, 0.14618316811559418, 0.14357775116247906, 0.14804802507274506, 0.1398432905869229, 0.16649306968876953, 0.1291799310890157, 0.17216330116769607, 0.1575067558244143, 0.13943319954681976, 0.26468839774565667, 0.30011825811565074, 0.3109521998972231, 0.3249314580749457, 0.1991600036306449, 0.23968778951099867, 0.277831713252805, 0.3732345453256316, 0.2778190464351855, 0.22393821809569103, 0.19398125051379422, 0.23047543594060926, 0.20609419608330692, 0.16830745470300112, 0.2368877412023881, 0.24762493140139985, 0.26755080146671983, 0.23857817950158766, 0.1749571219097399, 0.1466506351185104, 0.20464150417928695, 0.19959408160352476, 0.16639033329358777, 0.16807444739511557, 0.17792812431743532, 0.1824820650556871, 0.16366770342817616, 0.1801057048814828, 0.19877158526618266, 0.19709531913735334, 0.18178577936685614, 0.173160383292292, 0.1845521380344679, 0.1785245667383899, 0.20460779170740362, 0.19084973632979674, 0.6877355020910163, 0.1832436189785842, 0.6293137538213778, 0.7206725859128651, 0.18504232000664267, 0.15483341299525566, 0.6946068545394437, 0.13972778808223463, 0.21075988435257076, 0.41397628331531744, 0.16878363230044413, 0.32549474338100004, 0.3365172188350055, 0.2033574320237571, 0.14420382358531492, 0.20611330816725526, 0.2129179987304527, 0.2004359223451665, 0.17972728342056943, 0.19699592527045073, 0.18558095772175143, 0.20558517487137196, 0.1895724158043266, 0.17483134253773147, 0.1869492581189811, 0.19752418119677861, 0.18958637214714347, 0.05711345552912639, 0.06622507048953974, 0.062277786455540274, 0.07483918651288257, 0.06369985598520578, 0.07670404491908989, 0.07386160348918658, 0.07367016743487509, 0.06874788362924533]}, "mutation_prompt": null}
{"id": "b2ef7360-5f42-445a-9a3d-5edf52f7b358", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.4 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Apply an adaptive learning rate to DE mutation for smoother exploration.", "configspace": "", "generation": 64, "fitness": 0.23252751190736104, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "b62733a2-f2db-4b1c-9abf-fe3bd7eb613b", "metadata": {"aucs": [0.6892690932365457, 0.6504871244976369, 0.6847066661525938, 0.6512618292116001, 0.6597185437973532, 0.7218971058364065, 0.7298039089814561, 0.724517672023778, 0.5571286522668621, 0.37275637222986746, 0.3871601120254077, 0.4058854136221093, 0.42833398123171895, 0.32487174421498377, 0.382781961277569, 0.3850244165733564, 0.37239689009791876, 0.5305017845031155, 0.09580356952540536, 0.09954368471320718, 0.08501525624314077, 0.1301112477368821, 0.10003137587681699, 0.10155804408422986, 0.0910576296630281, 0.09750664570893919, 0.09121567768209893, 0.08935102384833515, 0.09339229488287004, 0.09048168748653351, 0.08245456381027583, 0.10468490110709949, 0.14098930411502242, 0.09729112849562749, 0.10471065061258067, 0.0717960613872608, 0.9817206216544881, 0.9911151296177377, 0.9267262366769166, 0.9862030778408141, 0.9819555969503317, 0.9815991477490237, 0.9766929206506911, 0.9812806704730102, 0.989665373000818, 0.18500293522376654, 0.17289903662743344, 0.12049519435348266, 0.18531693969460428, 0.20320984686271604, 0.209354271143799, 0.20098733973436766, 0.2120654489198328, 0.18322391239796354, 0.40772099986086474, 0.30655928653482456, 0.2704481221431322, 0.2182481374817027, 0.2539046632094374, 0.2763184642749993, 0.42892051429281974, 0.3002814500094467, 0.4062031582700524, 0.185498501052637, 0.11223484796027605, 0.13273272345716702, 0.10377437125935118, 0.09412915991566095, 0.11793671497588254, 0.11344445836717276, 0.1250694084305931, 0.2830405663428769, 0.08311711623429507, 0.14657701335670736, 0.12020155207591232, 0.18288824307048313, 0.12430821052135377, 0.14753423691957956, 0.16202838353271987, 0.10451374266867586, 0.1754400920938649, 9.999999999998899e-05, 9.999999999998899e-05, 0.021266423232933818, 0.01344139679209766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059107001326108355, 0.08748512154874244, 0.058194948196324536, 0.0930997258263756, 0.0290928900062547, 0.011551857602561388, 0.02418381531852687, 0.05498607348380247, 0.03849122647065473, 0.038208010031325124, 0.02686871916128386, 0.052765758827421294, 0.07600839716024621, 0.07357261062695031, 0.07257825490985981, 0.05350670498108212, 0.05110449253576155, 0.04791892291919431, 0.1937434846820305, 0.05048992708919309, 0.12275134492232698, 0.09526262545464748, 0.15080753855250018, 0.07925324744624718, 0.048848377466484405, 0.11992346406880372, 0.08908757293701963, 0.4561869799173901, 0.4608198481398126, 0.4157730247807294, 0.45662912092541164, 0.42663202335946226, 0.4284267565683081, 0.43375807629225605, 0.4419019233983127, 0.48803412918795575, 0.10510253030169137, 0.12071487621474408, 0.1019039696564803, 0.10714928362247123, 0.07929804671835061, 0.08004399212601443, 0.08974838327127455, 0.09729766662236217, 0.09788276548245833, 0.17097512394580028, 0.205286817682529, 0.18418212696157898, 0.3397583148477814, 0.16860739840728822, 0.18143745072018014, 0.14219235149856235, 0.1991809600640101, 0.21786134359181486, 0.30450218749343094, 0.27193004102982155, 0.3234943986212899, 0.2872371241615338, 0.29890124495864134, 0.2501637733561324, 0.2966757163878023, 0.3671573991218251, 0.30676399056244374, 0.2336701428153133, 0.20658725601274786, 0.2928616250268976, 0.19607417425955986, 0.16072241070291093, 0.21693934007937965, 0.1987647267543976, 0.24921720164131667, 0.27518950213465454, 0.19431078418016923, 0.143417720510555, 0.1936682368933048, 0.16493752819982022, 0.15010001303744247, 0.17742311250927456, 0.18755195208992914, 0.19890553435107572, 0.17512336241137016, 0.19917161034392017, 0.20374878758975257, 0.20464766305515236, 0.17739159009835626, 0.17971921966388804, 0.18862548488295727, 0.17841956508130785, 0.18712017164320316, 0.1888400849940446, 0.1986254702486584, 0.16533972414271414, 0.16426359578503325, 0.5187868501291171, 0.19702337658165803, 0.15490998263774614, 0.14151930334488938, 0.14158029569251374, 0.2013279080137359, 0.3212210319903489, 0.1682890692703759, 0.1495627633061718, 0.29498535698080164, 0.11727145110237647, 0.1919087765067543, 0.2081664109274326, 0.21309577875236385, 0.5255364163365956, 0.17520532765201113, 0.16290747352734347, 0.19169347939737613, 0.1737393996604829, 0.18401008017887477, 0.17402689030868934, 0.17812687079995881, 0.17947277148484864, 0.18133879308838874, 0.0726814297273477, 0.0675390330787673, 0.06213943326908267, 0.06608926483733213, 0.0648199280025834, 0.06265702002896811, 0.0619645934673807, 0.07975125516420645, 0.07522021538572521]}, "mutation_prompt": null}
{"id": "bf97d7e9-d0fa-46ce-82f0-f6c934125b3f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + np.sin(random_scaling * self.F) * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduce a nonlinear scaling factor for DE mutation to improve convergence speed.", "configspace": "", "generation": 65, "fitness": 0.23475482648017856, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "b62733a2-f2db-4b1c-9abf-fe3bd7eb613b", "metadata": {"aucs": [0.6813694105294066, 0.6404088801775667, 0.6732230973026578, 0.735806855786254, 0.7094109137661386, 0.6645507004601547, 0.6835053114540179, 0.6459575079826032, 0.7436301929084896, 0.4742189026082705, 0.3957429951727742, 0.3837876451591058, 0.39146216437030057, 0.4228042963857742, 0.3671856638991239, 0.35029603327402914, 0.34246208204770856, 0.47832700208756984, 0.09875285936693057, 0.1113288734787844, 0.10641019580763966, 0.08751780310033463, 0.10137390590485706, 0.10706751179910912, 0.10428341945745345, 0.10498920752445307, 0.06221012484435484, 0.064019136171928, 0.07862193721301924, 0.08853643734765959, 0.0984107141587528, 0.1097115065379558, 0.09278060266172417, 0.10432962634896414, 0.08042718622421852, 0.07750637147961137, 0.9823199813421116, 0.9911164465766241, 0.9270257226374781, 0.9864792630392026, 0.9819008329014177, 0.9858319881782843, 0.978609393320426, 0.9767859729220257, 0.9896250871208184, 0.281961696103628, 0.23563467314211195, 0.1787099677406344, 0.1851891385529354, 0.20374367610935407, 0.15412642410640898, 0.2126301940334644, 0.15869548577404746, 0.2875137659311301, 0.31167111571628325, 0.24268908718404558, 0.29205238843909265, 0.26565284623333196, 0.21254702696117378, 0.19944492005542702, 0.22338940380129357, 0.2087415424317789, 0.22622562852016637, 0.16208616005865772, 0.155620032967413, 0.16084251450603348, 0.12021160704910239, 0.12180228128241999, 0.14919914736741557, 0.11828607333499608, 0.09658710506056689, 0.15051697886827897, 0.10715447356592744, 0.21497219638216591, 0.12320340995336987, 0.17874766121068164, 0.15736642516811228, 0.1375604097408898, 0.172130251431163, 0.23417529918720514, 0.15769861291125709, 0.0052357209545259575, 9.999999999998899e-05, 9.999999999998899e-05, 0.00042867864772866415, 0.022282460136873627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029310501163093083, 0.03050827201479256, 0.06030037180067993, 0.046744003905654474, 0.022491891677159037, 0.018246656652696425, 0.08002344531980721, 0.04377876333027486, 0.04114848066443355, 0.04289017307638765, 0.11398464098608352, 0.06623837734286986, 0.09631853697678738, 0.10192400130217083, 0.05768822258992401, 0.10985767210852715, 0.049839779970935916, 0.057751621470080505, 0.10272090688885493, 0.06041471476772553, 0.12925806082242686, 0.05882189873888277, 0.11745726520113531, 0.09169185192055118, 0.05613286501234105, 0.08830399917645881, 0.22551366131434325, 0.413788794288504, 0.4627795127403047, 0.4324440850067077, 0.4451943481657631, 0.42992062035498224, 0.48861440571340564, 0.47534641707207514, 0.4549337680103127, 0.4339668693134213, 0.09101224091996118, 0.12610339981620367, 0.07613746047980097, 0.09509045748297595, 0.1057129349954452, 0.10920670631576213, 0.09343572143679157, 0.08377070538392128, 0.09782568957864746, 0.22555844383143242, 0.14341414996661372, 0.3096345549247528, 0.3928697813232065, 0.15888644683768893, 0.18906601343455254, 0.1615769675844726, 0.20673572986765, 0.14940206596868244, 0.3437448096139787, 0.2713974000984293, 0.3289577983733517, 0.260663112406894, 0.2597867597495328, 0.2552991786577332, 0.29950402773164264, 0.29485420028224985, 0.32525362292078264, 0.21772675797339702, 0.22736408140523467, 0.2140190214418416, 0.24482664013684463, 0.2481048414044369, 0.23303417387983338, 0.22051218830722974, 0.22033283423963934, 0.2014519350078715, 0.19769218142430622, 0.14767257905093467, 0.17347858631378765, 0.18911204831581696, 0.17297523150561445, 0.1822105345443371, 0.17985398361284222, 0.17537913179218378, 0.168694276377232, 0.22364476999085958, 0.20835412998091296, 0.3577571677418554, 0.19981299534546282, 0.1963329645991133, 0.19336170703532685, 0.17373104291970953, 0.18475558115625568, 0.19201012676149143, 0.18094817630543458, 0.1631550540800335, 0.15898359461125477, 0.6267448765170863, 0.19428816771409363, 0.15871889751410218, 0.1413038463210411, 0.1418503505384242, 0.21133563685666745, 0.5411512798222617, 0.1685198588560124, 0.18903994497498466, 0.31821607220698056, 0.0810431690791662, 0.3736636108020548, 0.2088121113858612, 0.2125938290107252, 0.20593785991627667, 0.16859376766233125, 0.17423353070610448, 0.17044091132502015, 0.18347198432279221, 0.18772370048278508, 0.18209049423196566, 0.18453491923347887, 0.186052125682733, 0.18590735483527776, 0.07217408484956722, 0.0583542448614478, 0.06695364535841564, 0.07092602137079651, 0.07561441869734431, 0.06701901605806304, 0.10358268353885614, 0.06437500313385902, 0.10378868428801147]}, "mutation_prompt": null}
{"id": "6f467560-7f89-49fd-88d1-a0e351266be1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Add adaptive random scaling to DE mutation for enhanced diversity.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b62733a2-f2db-4b1c-9abf-fe3bd7eb613b", "metadata": {"aucs": [0.6265504956194898, 0.6839609555640149, 0.5753179068488069, 0.6508214888014701, 0.7348080298185928, 0.7142290366220491, 0.6948856158561973, 0.6499291942370049, 0.6348842343925036, 0.5032491597270939, 0.48200426958020215, 0.3683800836815614, 0.3087986315411426, 0.37179555943537135, 0.462218906435773, 0.4155146997072062, 0.29003451417172244, 0.42895735384478406, 0.0738270161764858, 0.10832851151418998, 0.08844614640950244, 0.08721405857380737, 0.10719998575084133, 0.10994946736862854, 0.10902311848531243, 0.09032480993823322, 0.07793276833541007, 0.08980154305234356, 0.06779685116207379, 0.07055803039594066, 0.11493776711841219, 0.05988389019250118, 0.08203720859367436, 0.07832590724093991, 0.07766664996050598, 0.07241849170574555, 0.98176664877211, 0.9911449185824762, 0.9480286914925071, 0.9864899552261067, 0.9819566395008124, 0.9858346584732339, 0.9786394649305251, 0.9765144258762132, 0.9900272951082281, 0.19419735756906076, 0.23441949457568467, 0.15128375373728797, 0.1768507059339257, 0.2465345043035556, 0.15912247432718973, 0.16593505731792335, 0.19778405174604918, 0.19273046215471168, 0.27018087024614557, 0.46885252789374565, 0.2750626108070555, 0.24565009745271726, 0.25217641284677017, 0.20598316664667138, 0.2581646843863946, 0.6446213419295785, 0.48030205094491907, 0.17381706660006935, 0.2215820437673055, 0.13853779891616103, 0.11185511286937111, 0.15796491413636782, 0.11551183169525925, 0.1432266725099931, 0.0906029906657756, 0.1377146574250071, 0.15515960610523305, 0.09513230448607735, 0.11146789072199303, 0.16578177681736528, 0.1541419887071226, 0.11950946338200696, 0.11729919960699664, 0.11027592037918788, 0.16030002672863863, 0.0001029609947441612, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025900368548392727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0818782233410249, 0.02097503392549538, 0.05794863961306129, 0.04902399849657779, 9.999999999998899e-05, 0.03437768018110188, 0.07143811158581759, 0.052270431442100196, 0.060970316291708126, 0.03694014731100137, 0.023004071316963692, 0.03964156787943851, 0.09282758608827424, 0.1133767839568065, 0.062433343843760314, 0.04284477648523166, 0.06299183502611139, 0.050935585062574895, 0.12025291825290374, 0.06484366668823427, 0.12988966402721747, 0.15950204141225588, 0.18560868959145116, 0.12039362400229625, 0.05245214407028853, 0.1805393393725484, 0.0502925484266894, 0.4239551277489626, 0.45066553223872385, 0.3984587490034106, 0.4505276580120309, 0.3882152871419283, 0.4580350843347284, 0.47830839747894827, 0.42978023090542383, 0.4294604585197984, 0.09139250731266968, 0.09526995826211715, 0.1098851269517187, 0.08475196726089884, 0.08308598705149939, 0.1088919130737559, 0.07683670425882116, 0.07787007491345244, 0.09097360404872556, 0.14618316811559418, 0.14357775116247906, 0.14804802507274506, 0.1398432905869229, 0.16649306968876953, 0.1291799310890157, 0.17216330116769607, 0.1575067558244143, 0.13943319954681976, 0.26468839774565667, 0.30011825811565074, 0.3109521998972231, 0.3249314580749457, 0.1991600036306449, 0.23968778951099867, 0.277831713252805, 0.3732345453256316, 0.2778190464351855, 0.22393821809569103, 0.19398125051379422, 0.23047543594060926, 0.20609419608330692, 0.16830745470300112, 0.2368877412023881, 0.24762493140139985, 0.26755080146671983, 0.23857817950158766, 0.1749571219097399, 0.1466506351185104, 0.20464150417928695, 0.19959408160352476, 0.16639033329358777, 0.16807444739511557, 0.17792812431743532, 0.1824820650556871, 0.16366770342817616, 0.1801057048814828, 0.19877158526618266, 0.19709531913735334, 0.18178577936685614, 0.173160383292292, 0.1845521380344679, 0.1785245667383899, 0.20460779170740362, 0.19084973632979674, 0.6877355020910163, 0.1832436189785842, 0.6293137538213778, 0.7206725859128651, 0.18504232000664267, 0.15483341299525566, 0.6946068545394437, 0.13972778808223463, 0.21075988435257076, 0.41397628331531744, 0.16878363230044413, 0.32549474338100004, 0.3365172188350055, 0.2033574320237571, 0.14420382358531492, 0.20611330816725526, 0.2129179987304527, 0.2004359223451665, 0.17972728342056943, 0.19699592527045073, 0.18558095772175143, 0.20558517487137196, 0.1895724158043266, 0.17483134253773147, 0.1869492581189811, 0.19752418119677861, 0.18958637214714347, 0.05711345552912639, 0.06622507048953974, 0.062277786455540274, 0.07483918651288257, 0.06369985598520578, 0.07670404491908989, 0.07386160348918658, 0.07367016743487509, 0.06874788362924533]}, "mutation_prompt": null}
{"id": "dfe5f39b-fa93-4209-a319-d7b2a9624c04", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.05))  # Reduced standard deviation for stability\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Further fine-tune adaptive random scaling by reducing its standard deviation for better stability.", "configspace": "", "generation": 67, "fitness": 0.23109909600082063, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "b62733a2-f2db-4b1c-9abf-fe3bd7eb613b", "metadata": {"aucs": [0.6274813541762766, 0.7195019307347019, 0.6270469987084197, 0.7139025433424311, 0.6940144727659462, 0.6823738359168574, 0.715073477813124, 0.7143870897919946, 0.6707992137750234, 0.4668070390017487, 0.34009626778279467, 0.2969571223975953, 0.3994313041630364, 0.23760073813670635, 0.336625549490852, 0.4475362378744726, 0.35203066813368455, 0.3872868533790341, 0.1093868381246279, 0.08839120894171482, 0.11624082396884639, 0.0938624225211766, 0.08174783723712375, 0.10235655977520042, 0.10110522759977625, 0.08604444032756475, 0.10321633523120544, 0.10115839201703769, 0.09344799139037363, 0.08120836909507578, 0.10972702758873876, 0.11043002656644363, 0.08061507546327085, 0.09436392186133258, 0.0685583722515627, 0.07765935903745214, 0.9818229807242884, 0.9911677995309524, 0.9134228709358997, 0.9864894114079962, 0.9819567681807224, 0.9858469638072209, 0.9786383546742807, 0.9770151100338359, 0.9896637864779492, 0.25037705868263893, 0.17683948131097094, 0.13057831847040702, 0.20762022926239465, 0.21995457940128893, 0.13749738191613925, 0.14956210526801628, 0.24107798603123032, 0.1717496419297142, 0.2319079678673407, 0.2407392724423849, 0.42664855023272896, 0.31189137865145933, 0.2099386533451716, 0.19651538297903415, 0.20864245553707017, 0.45156790153856863, 0.44566280679875003, 0.14927618199886128, 0.17021880633903785, 0.1552354122879862, 0.16256459821932912, 0.24415790595031672, 0.1194918635606469, 0.14041769979720453, 0.10649410178763175, 0.14612089002708384, 0.1492714461240353, 0.16144780711819218, 0.11412278111773144, 0.19123315033091637, 0.12448699250067041, 0.12407644815036112, 0.16304079874380695, 0.16440912712088107, 0.09638745839291574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006325784219077479, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422767001832576, 0.08884198399122178, 0.08984008430092072, 0.0227308392593355, 0.03158523033072669, 0.020585199023065104, 0.05963792202614826, 0.027017334819980143, 0.04061033769063738, 0.033029385951469314, 0.036896990838786614, 0.035045922489418846, 0.1497736142464906, 0.06339240844529648, 0.046747300816258, 0.04685881063354391, 0.076155860770166, 0.05051332676822895, 0.17400955917646665, 0.06869723686018225, 0.03567096238040535, 0.1832778917919351, 0.1350651138629162, 0.20306432384621675, 0.15116546569840417, 0.07327084169052411, 0.06380992552360043, 0.4279752128128481, 0.45320007468437595, 0.4317281087739617, 0.42649835741520825, 0.4693640208338974, 0.4460729448881051, 0.44428501391998443, 0.4264099952012631, 0.41483066237669575, 0.09330056689265953, 0.08721633235485549, 0.08200346732719643, 0.13211745038797784, 0.0748744809434373, 0.08869019617934248, 0.07478675360281417, 0.09567439642086406, 0.10160167273262855, 0.15877798687500022, 0.1449513128532226, 0.13264042940349774, 0.18243113980345105, 0.22629958790456117, 0.15811412208415332, 0.13435465466962815, 0.15352615248059143, 0.15575717507043652, 0.29007247985667894, 0.3018096885977716, 0.26958314396720817, 0.3074652943621481, 0.2774048380576907, 0.2431323023994454, 0.3371821875736568, 0.3593957969371617, 0.34974694978326915, 0.21835604002930808, 0.21661962606867924, 0.19649101758946685, 0.16138560419293246, 0.21710580529424062, 0.2050475978275229, 0.24409104484579458, 0.23958747174233963, 0.2037247725601259, 0.1765101964621837, 0.14218809068470806, 0.20000228829012956, 0.17995425268289766, 0.17298537851979, 0.1868714376403433, 0.17514419328620168, 0.1769167154626735, 0.1847065076333141, 0.21975447916566204, 0.17101337782790416, 0.2012313783995493, 0.179583466690296, 0.1710894567659449, 0.1753983442511613, 0.20361597847572466, 0.18287468044387878, 0.1813794261647086, 0.19637182713993917, 0.20206650811449323, 0.5763745248411005, 0.16391737834022502, 0.18732401305098378, 0.1603201588353963, 0.14059597956139314, 0.14153693732191952, 0.21078915772450413, 0.33832335278341363, 0.16895215468466618, 0.35198778806160047, 0.37858360269610436, 0.1851740491225392, 0.15081814138734595, 0.19315040723174126, 0.2116117681401133, 0.39839442859246565, 0.18938035883645465, 0.1869182922220155, 0.1873368403081923, 0.17736803666073342, 0.18123260350474857, 0.20041059425958652, 0.18765766044868415, 0.16734277482797477, 0.19353866047927692, 0.06855020214008345, 0.08013686037396905, 0.07636308844249706, 0.07319821138856952, 0.08163898263186697, 0.06562556722996593, 0.06797488284938669, 0.06331634067333214, 0.07185010098576416]}, "mutation_prompt": null}
{"id": "f242bfe3-2390-4158-ba5a-6975ac03fa90", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Add adaptive random scaling to DE mutation for enhanced diversity.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b62733a2-f2db-4b1c-9abf-fe3bd7eb613b", "metadata": {"aucs": [0.6265504956194898, 0.6839609555640149, 0.5753179068488069, 0.6508214888014701, 0.7348080298185928, 0.7142290366220491, 0.6948856158561973, 0.6499291942370049, 0.6348842343925036, 0.5032491597270939, 0.48200426958020215, 0.3683800836815614, 0.3087986315411426, 0.37179555943537135, 0.462218906435773, 0.4155146997072062, 0.29003451417172244, 0.42895735384478406, 0.0738270161764858, 0.10832851151418998, 0.08844614640950244, 0.08721405857380737, 0.10719998575084133, 0.10994946736862854, 0.10902311848531243, 0.09032480993823322, 0.07793276833541007, 0.08980154305234356, 0.06779685116207379, 0.07055803039594066, 0.11493776711841219, 0.05988389019250118, 0.08203720859367436, 0.07832590724093991, 0.07766664996050598, 0.07241849170574555, 0.98176664877211, 0.9911449185824762, 0.9480286914925071, 0.9864899552261067, 0.9819566395008124, 0.9858346584732339, 0.9786394649305251, 0.9765144258762132, 0.9900272951082281, 0.19419735756906076, 0.23441949457568467, 0.15128375373728797, 0.1768507059339257, 0.2465345043035556, 0.15912247432718973, 0.16593505731792335, 0.19778405174604918, 0.19273046215471168, 0.27018087024614557, 0.46885252789374565, 0.2750626108070555, 0.24565009745271726, 0.25217641284677017, 0.20598316664667138, 0.2581646843863946, 0.6446213419295785, 0.48030205094491907, 0.17381706660006935, 0.2215820437673055, 0.13853779891616103, 0.11185511286937111, 0.15796491413636782, 0.11551183169525925, 0.1432266725099931, 0.0906029906657756, 0.1377146574250071, 0.15515960610523305, 0.09513230448607735, 0.11146789072199303, 0.16578177681736528, 0.1541419887071226, 0.11950946338200696, 0.11729919960699664, 0.11027592037918788, 0.16030002672863863, 0.0001029609947441612, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00025900368548392727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0818782233410249, 0.02097503392549538, 0.05794863961306129, 0.04902399849657779, 9.999999999998899e-05, 0.03437768018110188, 0.07143811158581759, 0.052270431442100196, 0.060970316291708126, 0.03694014731100137, 0.023004071316963692, 0.03964156787943851, 0.09282758608827424, 0.1133767839568065, 0.062433343843760314, 0.04284477648523166, 0.06299183502611139, 0.050935585062574895, 0.12025291825290374, 0.06484366668823427, 0.12988966402721747, 0.15950204141225588, 0.18560868959145116, 0.12039362400229625, 0.05245214407028853, 0.1805393393725484, 0.0502925484266894, 0.4239551277489626, 0.45066553223872385, 0.3984587490034106, 0.4505276580120309, 0.3882152871419283, 0.4580350843347284, 0.47830839747894827, 0.42978023090542383, 0.4294604585197984, 0.09139250731266968, 0.09526995826211715, 0.1098851269517187, 0.08475196726089884, 0.08308598705149939, 0.1088919130737559, 0.07683670425882116, 0.07787007491345244, 0.09097360404872556, 0.14618316811559418, 0.14357775116247906, 0.14804802507274506, 0.1398432905869229, 0.16649306968876953, 0.1291799310890157, 0.17216330116769607, 0.1575067558244143, 0.13943319954681976, 0.26468839774565667, 0.30011825811565074, 0.3109521998972231, 0.3249314580749457, 0.1991600036306449, 0.23968778951099867, 0.277831713252805, 0.3732345453256316, 0.2778190464351855, 0.22393821809569103, 0.19398125051379422, 0.23047543594060926, 0.20609419608330692, 0.16830745470300112, 0.2368877412023881, 0.24762493140139985, 0.26755080146671983, 0.23857817950158766, 0.1749571219097399, 0.1466506351185104, 0.20464150417928695, 0.19959408160352476, 0.16639033329358777, 0.16807444739511557, 0.17792812431743532, 0.1824820650556871, 0.16366770342817616, 0.1801057048814828, 0.19877158526618266, 0.19709531913735334, 0.18178577936685614, 0.173160383292292, 0.1845521380344679, 0.1785245667383899, 0.20460779170740362, 0.19084973632979674, 0.6877355020910163, 0.1832436189785842, 0.6293137538213778, 0.7206725859128651, 0.18504232000664267, 0.15483341299525566, 0.6946068545394437, 0.13972778808223463, 0.21075988435257076, 0.41397628331531744, 0.16878363230044413, 0.32549474338100004, 0.3365172188350055, 0.2033574320237571, 0.14420382358531492, 0.20611330816725526, 0.2129179987304527, 0.2004359223451665, 0.17972728342056943, 0.19699592527045073, 0.18558095772175143, 0.20558517487137196, 0.1895724158043266, 0.17483134253773147, 0.1869492581189811, 0.19752418119677861, 0.18958637214714347, 0.05711345552912639, 0.06622507048953974, 0.062277786455540274, 0.07483918651288257, 0.06369985598520578, 0.07670404491908989, 0.07386160348918658, 0.07367016743487509, 0.06874788362924533]}, "mutation_prompt": null}
{"id": "5c6c4bcd-6b5e-4bbc-97bb-2480c5ca1e67", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 2.0) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Increase exploration by enhancing the DE mutation with a stronger perturbation.", "configspace": "", "generation": 69, "fitness": 0.22878350132471834, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "b62733a2-f2db-4b1c-9abf-fe3bd7eb613b", "metadata": {"aucs": [0.6425179135630477, 0.6496341873701652, 0.6589146312096075, 0.6927047569335459, 0.6009414624154316, 0.7155696790884039, 0.6811917806022838, 0.6949054437250544, 0.6695728154360356, 0.38294886206552137, 0.3914322611647455, 0.3777839521710902, 0.37570696422060523, 0.4043285999765902, 0.3694462373355991, 0.42411773582739365, 0.39693061254239814, 0.4195257650384021, 0.09062690697423825, 0.06871646250406416, 0.0995264368121328, 0.06000931408686938, 0.10715755726285658, 0.1265123427138931, 0.11032307098377403, 0.08767401534139097, 0.05806201519741139, 0.11681900613341822, 0.07194544255984858, 0.07431023607769927, 0.08022662938690972, 0.09495494386316439, 0.0681976594047281, 0.08800015603615707, 0.06729841684212456, 0.0693268462803941, 0.9815582142885794, 0.9911483288158989, 0.9439750614247703, 0.9865115801208472, 0.9813650833173979, 0.9819612430426006, 0.9792744511020727, 0.976560612167041, 0.9902956893530823, 0.1716598788963778, 0.14644851329836783, 0.15954199920629364, 0.12318274320305522, 0.12824033003765412, 0.12536835856629025, 0.22923943397584967, 0.16218492630331527, 0.17421739067162578, 0.3226774293014203, 0.24453682763641027, 0.4698838062043291, 0.4192459630888037, 0.18952042764973898, 0.25419385547513185, 0.2976886233497762, 0.20117442075646952, 0.6005226274363917, 0.20922079366674617, 0.30871200989671, 0.1563603038465019, 0.10386888372621306, 0.14814511239104666, 0.11188640354313772, 0.17398653729626878, 0.1357904506319092, 0.17013034077223133, 0.16879100089157906, 0.16890874605002482, 0.11186173190866378, 0.14872367979857282, 0.15694967265372928, 0.10561720363890381, 0.16869744005218856, 0.1362008824796882, 0.17340645704139734, 0.00035054090778863234, 0.007771441719427452, 9.999999999998899e-05, 9.999999999998899e-05, 0.01374498636884347, 9.999999999998899e-05, 0.0001685462762633927, 9.999999999998899e-05, 9.999999999998899e-05, 0.06996996492495633, 0.034707699135754555, 0.046682392192422206, 0.06267444515018394, 0.03297283610143964, 0.019913130930734213, 0.04477083922168512, 0.06882622861234644, 0.025889913882112925, 0.034491518175498115, 0.026408543296208897, 0.13685914498536966, 0.11246463375976945, 0.059579978457366845, 0.055668917999287415, 0.08434891679625856, 0.0634960089852582, 0.10933544557226638, 0.1595122322141166, 0.03584193687381665, 0.043167963470920556, 0.2190679555235564, 0.08355281633174416, 0.22054720443268316, 0.052853961663624105, 0.09370484085645947, 0.0816002665307215, 0.43175398205474247, 0.4394233108813189, 0.47815849927660015, 0.377728722721144, 0.4904712021077263, 0.46317072665015724, 0.41893242366119143, 0.4817099172949043, 0.42915694034621144, 0.08734289498903092, 0.09335760495298928, 0.08188913103630346, 0.11528476643767649, 0.08354306998909977, 0.09993772541591062, 0.0816320556550818, 0.08374631877614624, 0.08711480489375623, 0.18192219653653696, 0.13165009022265373, 0.14239476579183852, 0.1428041588754384, 0.16815455163847148, 0.1994763706662699, 0.17085774952945776, 0.13208523924660898, 0.13788292655772116, 0.27299686471928697, 0.28284320468924173, 0.33698790995112604, 0.2483482286010672, 0.2614290068328433, 0.2651771809708351, 0.2618570791995397, 0.3471583116998619, 0.3269056432063252, 0.2610356778643258, 0.2006049001245992, 0.2467031684288109, 0.23492250366555512, 0.1602627823326549, 0.21563361375901346, 0.2242787903910778, 0.2259641495164153, 0.24628388749351748, 0.1818619120522902, 0.13348220414265166, 0.17374608928414126, 0.16276091306556972, 0.16440013586692293, 0.16824402861579912, 0.23653010405381714, 0.17764753661476385, 0.15842706706409426, 0.17685564537826826, 0.15476746669220043, 0.1916902499552916, 0.18800790289939295, 0.178244234431161, 0.20442816280698395, 0.1883501664085787, 0.1895733674417509, 0.1972800339882972, 0.1993114153179052, 0.15757301742952445, 0.16181699779316838, 0.16628450997721267, 0.19033825784956626, 0.14060314649048866, 0.13880954255952527, 0.14036196686327473, 0.14464748789808346, 0.336929525069107, 0.16789995084362397, 0.1547199190773425, 0.3060814056184359, 0.18305485723984072, 0.3806327856321996, 0.20959347171310472, 0.21228852408298904, 0.30960169664917303, 0.18205657989408697, 0.19360371765755757, 0.17680179540886243, 0.17131690429324176, 0.19131977675130463, 0.2015715027455277, 0.1985277541482331, 0.18450864530636668, 0.1791969771562263, 0.07069961853801887, 0.0630519098668183, 0.07088254344170997, 0.07238405806694459, 0.09198412108491483, 0.06251504221478121, 0.06957727522185864, 0.10260747062714215, 0.07806800572695538]}, "mutation_prompt": null}
{"id": "a2252c8d-26f4-454b-a1d4-95b6bf3371b6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                # Occasionally amplify scaling factor to enhance diversity\n                if np.random.rand() < 0.1: random_scaling *= 1.5  \n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduce a condition to enhance the diversity of mutation by occasionally amplifying the scaling factor under budget constraints.", "configspace": "", "generation": 70, "fitness": 0.23345305767994895, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "b62733a2-f2db-4b1c-9abf-fe3bd7eb613b", "metadata": {"aucs": [0.7090843761052363, 0.6552862472548886, 0.6587662504387759, 0.709070529695349, 0.6682857884170657, 0.6393106981627553, 0.6847658256328124, 0.6063632472900168, 0.7128830971141282, 0.4367110190749449, 0.45267969978506717, 0.27333600050469364, 0.4674073489769043, 0.4351448153105686, 0.4413523159412469, 0.3000157563082848, 0.43957728157130427, 0.33779182119605444, 0.11442058459846971, 0.08962094119287067, 0.08990670157408054, 0.1089376287653322, 0.10021032827115539, 0.1029493433969737, 0.08882091838464834, 0.0992983619673814, 0.10961357187487941, 0.08541073151693612, 0.075685102343367, 0.10669490629318967, 0.09200707065915337, 0.09550647642570476, 0.07707975782869836, 0.0665371969431644, 0.07928795098346653, 0.09543522055259979, 0.9853487535516816, 0.9919467962811241, 0.9711832851603948, 0.9861013961617948, 0.9751136812596157, 0.9658329749746126, 0.9707894195606979, 0.9820935776318829, 0.9913794265576322, 0.248670212381239, 0.1407361077666225, 0.17947923064835591, 0.18754242917838115, 0.1365288802841138, 0.19330205057871108, 0.15233398763579098, 0.17269398267619906, 0.23476154539107041, 0.2114721016391129, 0.16149911661429472, 0.5732878228667528, 0.536578574122792, 0.3284582601938225, 0.19040801367375737, 0.3066094175131976, 0.17724376607718517, 0.6263333886938983, 0.11762735275561009, 0.15680828993441376, 0.14325212182758418, 0.12401964020915568, 0.09754003144521883, 0.10502158154726404, 0.09101562554720699, 0.11281038642213059, 0.1534159908196231, 0.1509291662052974, 0.12948629102226428, 0.10873957075822549, 0.17196227035718492, 0.16975161131355965, 0.12474781926373946, 0.15143166569465483, 0.21675052555789998, 0.15265996759223477, 9.999999999998899e-05, 0.017432622689773414, 0.001743255442782532, 0.020503477353826738, 0.005181036573946751, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018153787448962344, 0.03212605160671722, 0.04189098168962757, 0.031267968891951936, 0.0764532855984047, 0.05928236207744353, 9.999999999998899e-05, 0.06765039723290533, 0.02526372034455926, 0.0661379247999273, 0.053674119413153476, 0.03386661608575359, 0.059415506767069526, 0.022043315339583924, 0.06526816398365731, 0.11084031145536488, 0.04959971085810466, 0.045411606406298266, 0.060642022937309914, 0.13955587997245422, 0.09393307329104883, 0.049952222713565586, 0.09268675242987223, 0.20686760552905614, 0.1367556476002374, 0.09836870285878829, 0.12356437550527133, 0.053409490996337405, 0.0890772591813147, 0.4062861723788246, 0.3952076477287926, 0.41397316816066654, 0.42613600727194334, 0.47774532090466504, 0.4311167037814797, 0.4346501016514286, 0.35263737119533367, 0.4419188957366008, 0.08396515212569211, 0.09665923150265421, 0.09122009959489863, 0.08117508449041322, 0.07651486777398264, 0.09728811621763178, 0.11065539505768318, 0.07579659822373686, 0.0686079455839923, 0.2927155819647109, 0.14012408623065098, 0.15555661670330467, 0.16522191976057898, 0.2348062426665567, 0.18746837675102201, 0.14314348468469185, 0.1841293681320606, 0.15295435087910303, 0.3110547624466351, 0.2791716363491201, 0.31691601000338165, 0.30136823647519173, 0.18621976763426784, 0.2724947773983899, 0.3474968709558591, 0.3220077968963849, 0.29364471057209995, 0.18272214693795052, 0.16514550424177432, 0.19843468797344554, 0.2148657920290048, 0.1839427041775461, 0.19236856542366088, 0.20776296768904523, 0.2511781806023414, 0.22410793093159131, 0.17288513732972044, 0.16993522540219907, 0.1626648839094873, 0.16302875680054474, 0.20277094041065025, 0.18275360412257302, 0.17891481518701946, 0.18741338872247537, 0.18239595675403308, 0.20494872215484816, 0.2149604021133259, 0.18621322684915376, 0.1916082395333938, 0.1842392765056382, 0.1846129389582356, 0.17864305454180052, 0.17675927344533793, 0.19069761032111132, 0.1867666739702003, 0.152227114005962, 0.15570925529793422, 0.7683149910027371, 0.5897527119471838, 0.6379945163695198, 0.17350191731815157, 0.18524757129771297, 0.20981213344374983, 0.38080645149079484, 0.19365554997995638, 0.1644660225614729, 0.12558300737502848, 0.18990536174680972, 0.16678874128519272, 0.15436959600742517, 0.20775618900511916, 0.10443630074015398, 0.18351429520084195, 0.1864761802748076, 0.1762461388133053, 0.20127218352985643, 0.17305024968250549, 0.17661157283996365, 0.17992206329055094, 0.2022128015281226, 0.17729193482703598, 0.06494151283685956, 0.07747602502409612, 0.06706836215657075, 0.09036126039560277, 0.06444026332842345, 0.05875904624228934, 0.06760076743320531, 0.07140664103771555, 0.08305878055860472]}, "mutation_prompt": null}
{"id": "502cfb2a-d480-47f7-a2c4-5d8cba34a10b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.2, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.5 * (self.func_evals / self.budget))\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduce Gaussian noise in DE mutation for smoother exploration.", "configspace": "", "generation": 71, "fitness": 0.22932790692523392, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "b62733a2-f2db-4b1c-9abf-fe3bd7eb613b", "metadata": {"aucs": [0.5891238846577214, 0.623950710608048, 0.631795178089793, 0.6997840033064135, 0.6854333776801806, 0.6290502303795784, 0.7459063142959431, 0.7198770753747021, 0.7157779915394527, 0.32101194563763646, 0.3671247835269603, 0.43685744123729187, 0.37239969994801947, 0.35036740533949695, 0.437203147823616, 0.4190871359148014, 0.3250147257249396, 0.4644830169079658, 0.11407206363055189, 0.08988642302750582, 0.12986029159163914, 0.08889170829540849, 0.12531111323426536, 0.07638116063355482, 0.07579667985905703, 0.08640208526661175, 0.11397595273956596, 0.06581720995690177, 0.1015325256128441, 0.09867429169287678, 0.09083331750839918, 0.08038314293717175, 0.07607285213437376, 0.08342635748735883, 0.07536740763935812, 0.08449183478591837, 0.9821168159367166, 0.9911472540637023, 0.931856733727966, 0.9864510120274725, 0.9819421990876764, 0.9858425712489876, 0.9768524286729997, 0.9757295246690497, 0.9903167975034156, 0.2166316987962531, 0.1412476579961991, 0.1622573308948596, 0.13164857468961433, 0.14196030459329245, 0.16067809026433966, 0.1817086631456295, 0.21746791402553756, 0.28261538959933663, 0.4141506108770796, 0.2184252130640154, 0.2943259908480589, 0.23892595211964618, 0.2585707017151434, 0.2003104317484944, 0.4439405404230349, 0.4000950181872478, 0.24080200212931335, 0.10551674309808146, 0.17651293802217694, 0.11312372689013406, 0.1376705166365193, 0.11210346320680198, 0.11553655583871059, 0.14519866651977353, 0.09373726636622925, 0.1399294752181346, 0.13061046673429078, 0.1627589123363905, 0.111357865583817, 0.15478098126821627, 0.10799295211665194, 0.09785637079407261, 0.17016344386890103, 0.2264401066993612, 0.18020985758841157, 9.999999999998899e-05, 9.999999999998899e-05, 0.002963314995964139, 9.999999999998899e-05, 0.0015356756602912247, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05239619392176009, 0.0656622522334468, 0.09963149508823932, 0.04347132614638871, 0.004784842871584982, 0.003810983665216705, 0.04108405762086986, 0.06095802179869314, 0.03896241431013947, 0.04504279306667158, 0.047274284500768204, 0.06929128575602228, 0.09940780887832157, 0.06824990661972863, 0.05293967860795479, 0.051803603074622284, 0.06741119907558035, 0.08128655212617397, 0.11861146374053189, 0.06162979252328005, 0.09992245471087768, 0.04515749601228214, 0.1285717325298712, 0.08699978273100073, 0.06677366419672726, 0.13578283489667498, 0.11229554526791996, 0.423156730581701, 0.4318956047928534, 0.4537095706434038, 0.4479718611074459, 0.46940757576839465, 0.41656224261584807, 0.4686236756585077, 0.4865924013095988, 0.45912352238723675, 0.08742739047650716, 0.07985623316322832, 0.08400424483063684, 0.07983921676745087, 0.08702564173616956, 0.08934163370365822, 0.08605499335681377, 0.08067707185085782, 0.08180340162641153, 0.1333922881377122, 0.15518527303029028, 0.15021897627511283, 0.1790829815855739, 0.15266515486471577, 0.18753488965660203, 0.29218291067995594, 0.14604470914332524, 0.13726889244359175, 0.3102262354065626, 0.3205554801196768, 0.260507578467815, 0.24373087738635713, 0.2701322538043649, 0.27898495362452835, 0.30718292077309395, 0.351741382740943, 0.2463137878117918, 0.19188340903090606, 0.20386318153851346, 0.22210416171202907, 0.17510671094828945, 0.175346297521365, 0.2662054817225197, 0.24666734386212907, 0.23421254390820467, 0.2329123880699684, 0.20910213535873168, 0.16355379865148767, 0.1879633431147274, 0.18361793685462102, 0.15603904746861386, 0.17669525948464093, 0.20481571789970876, 0.19758348864502873, 0.17004017086172785, 0.20354717856654547, 0.1747224965612031, 0.2019550130400557, 0.16538731397980933, 0.19570879023044807, 0.17724016237979245, 0.17668834785927878, 0.1757525161581147, 0.18064880157850205, 0.20116018869878782, 0.1290712134578138, 0.15296105001031846, 0.5977156641326788, 0.18476909288157284, 0.15614297710377778, 0.13937740201249382, 0.14154969033816123, 0.6755486627549991, 0.36112216043237344, 0.1689685561425951, 0.3680383794397545, 0.1260469698936677, 0.22897856900828706, 0.15200233074638414, 0.20359441238128984, 0.21316120303483588, 0.20504938452823973, 0.17565551570553561, 0.1910118255341463, 0.17632269892289965, 0.1812664527193527, 0.1806094620636428, 0.16936898867925065, 0.1866887042024311, 0.1774436605444054, 0.18629897141937135, 0.06035700724156101, 0.0784144711662631, 0.06807522313374792, 0.06275385953493295, 0.08368010653733637, 0.076172576047292, 0.0743056162426714, 0.07424470541155392, 0.06615787491511671]}, "mutation_prompt": null}
{"id": "82c94c06-1a0c-4361-b1b6-3c6515a12609", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance the algorithm by improving convergence through dynamic adjustment of the DE crossover rate.", "configspace": "", "generation": 72, "fitness": 0.2407420535025311, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "b62733a2-f2db-4b1c-9abf-fe3bd7eb613b", "metadata": {"aucs": [0.6634864688615205, 0.666426395658344, 0.6538684986509737, 0.6545174595035879, 0.7089978618636892, 0.7150640945916872, 0.6621379681521579, 0.6377036647421833, 0.6859399169913729, 0.5197062669873938, 0.35057976756872444, 0.4997227714029433, 0.4282325644883591, 0.4272019865597748, 0.4848245133435767, 0.3494614421093102, 0.34102886519944364, 0.29384777480803137, 0.13083131274826187, 0.09941653911596748, 0.11825397138520999, 0.0998887097677521, 0.07536804792347007, 0.1018549813290498, 0.11112137371940223, 0.07534384441429864, 0.08773486527294916, 0.07697753788559003, 0.092190901195223, 0.08290483169238927, 0.08533602263391582, 0.08194527573509347, 0.09220226048412028, 0.07744923786850211, 0.09359717594475603, 0.07599774722014152, 0.9817808950742558, 0.9911449185824762, 0.9479373780567703, 0.9864899552261067, 0.9819566395008124, 0.9858346584732339, 0.9767849163236574, 0.9765144258762132, 0.9900272951082281, 0.23808309243062042, 0.1330011952521296, 0.15511005590828297, 0.19034642953486736, 0.1658486106790943, 0.210960956299717, 0.1891366235739521, 0.21007080976948833, 0.24981516608158705, 0.3824580416563679, 0.5380273152049762, 0.24445441326021178, 0.27492653591952787, 0.2707650765989065, 0.22601195430240417, 0.2779597654509025, 0.31292349550270404, 0.2075203377652306, 0.18119641512541806, 0.16940098916869206, 0.10266231025334072, 0.12241390025808052, 0.15780368679602685, 0.10464678736436694, 0.14854689902934715, 0.1763777606029251, 0.15523143763687097, 0.10907112647108785, 0.15030917169736802, 0.11749248248669353, 0.16569572246840125, 0.11323045816810462, 0.25470110674267077, 0.15510919194567463, 0.15068291758113206, 0.12330968717703761, 0.008831930834979018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08247764414774139, 0.024472774195862024, 0.06536624621558096, 0.05275748156487048, 0.01414568555519402, 0.006572763713096341, 0.06806246913973624, 0.041469412227149616, 0.041750701661827816, 0.04511629741012624, 0.054855443339357435, 0.04734638881396058, 0.2992795188479582, 0.108454212287036, 0.08953014060664322, 0.04203830504415418, 0.051882852018326986, 0.05280922574465663, 0.20625565642445054, 0.03170875002611662, 0.07775497323594027, 0.06697478626120301, 0.19001397900388295, 0.10274934107358569, 0.05739077987275232, 0.10825636722654086, 0.08301010149718913, 0.44220348168381696, 0.417933958730329, 0.4259399319860664, 0.46168696637523543, 0.40875315416046576, 0.4868377363779306, 0.4530887993733588, 0.4374427675156528, 0.4245787586724902, 0.0796975339310404, 0.107766386249871, 0.06975479632079573, 0.07208373037079674, 0.10295299697149696, 0.09030933247546258, 0.07530867067705582, 0.10250429336328148, 0.08592838980092188, 0.1349983258741302, 0.14359700437628364, 0.33410408250478085, 0.2658053093437669, 0.21925475294498908, 0.17954649727885807, 0.19589797380211227, 0.16118408076335922, 0.27735284146397365, 0.276335768050621, 0.29901090542126896, 0.33445377430983736, 0.2866390230788647, 0.2940070038262431, 0.264556332877834, 0.3445222317221053, 0.2616189424102968, 0.2908306914260531, 0.21440396487584734, 0.26776019260039485, 0.21486776812295616, 0.1746998438045717, 0.18091786201359905, 0.2138047521899571, 0.24521163246635547, 0.22598413754026947, 0.25098583182272827, 0.17674466596157112, 0.14927741904729097, 0.17655219238617137, 0.18378799605265272, 0.18900077171246443, 0.1725713057767554, 0.1932268196415502, 0.16952402003330502, 0.1934014408697714, 0.19175771053117197, 0.17662002015907796, 0.2284668545694123, 0.1799872186234598, 0.23351426118795093, 0.18557169592376854, 0.2764339656350199, 0.2162924840683903, 0.19677061905678994, 0.6982320391881337, 0.46322652745097426, 0.17807952077832545, 0.7342444275103326, 0.18983981527502958, 0.15539034157848908, 0.14156171701599907, 0.14007911962314779, 0.21049927511397404, 0.3570722226413221, 0.1689636705080264, 0.3156896063579492, 0.34003793688807293, 0.2003645621068343, 0.18808224284023112, 0.20637142886886117, 0.2130882858437929, 0.5769430186644857, 0.16880148921575333, 0.18811554795212548, 0.17352395243016105, 0.17603608285573358, 0.18727951087414474, 0.17728249855755163, 0.18966497949452488, 0.17024449058427293, 0.19337324110961207, 0.06803381374608775, 0.07558632369889207, 0.06415794978038503, 0.07101941884028784, 0.08460323229902167, 0.0661187922733163, 0.06283748221326446, 0.0737052844386542, 0.06843888054919645]}, "mutation_prompt": null}
{"id": "77e481e2-2d6b-4461-9345-dd82e23778c9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = (0.8 - (0.5 * (self.func_evals / self.budget))) * (1 - self.func_evals / (2 * self.budget))  # Introduce decay mechanism\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduce a decay mechanism for the DE scaling factor for improved convergence control.", "configspace": "", "generation": 73, "fitness": 0.2364825783484796, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "82c94c06-1a0c-4361-b1b6-3c6515a12609", "metadata": {"aucs": [0.7013484796992913, 0.6642208529782541, 0.5927088225180432, 0.6376140239413413, 0.6966119310233154, 0.6792450593152457, 0.6439005659382375, 0.6002453490581708, 0.625715558313388, 0.5158582087149207, 0.3851480509068669, 0.4887355782276078, 0.3680553565110095, 0.16857979671297085, 0.4244217749767346, 0.3611750962452047, 0.4183007610297539, 0.49607934430701683, 0.08950773237113696, 0.11504471733456234, 0.092902119244475, 0.09262536718011993, 0.10275860587396857, 0.1270580285760471, 0.11308560936074141, 0.09393655709030868, 0.09536409579407368, 0.06635189390781637, 0.08565435995926751, 0.07721360756824902, 0.08159932839148842, 0.1072229083877011, 0.06152414160206077, 0.08459620414003421, 0.08099606425834316, 0.08830214121409641, 0.9817835945173186, 0.9911444462208526, 0.9479144030760167, 0.9864894664567795, 0.9819566226256031, 0.9858348791477265, 0.976772151018247, 0.9764298425741673, 0.9900276919814083, 0.24855254959804296, 0.16094566635993812, 0.1609908860601208, 0.16863322190201357, 0.18408756229536227, 0.19789632549328817, 0.20684804804786905, 0.19053350255700208, 0.26812704215976235, 0.31011488314257485, 0.34513342649557466, 0.4291229868105142, 0.2333456758648228, 0.193031187785624, 0.4347280435283528, 0.20138970683985657, 0.522401117623448, 0.221364869195521, 0.166718410307525, 0.11747897571325705, 0.08338355822254018, 0.14990239724660515, 0.1432423510823606, 0.0985310804917201, 0.117215369423596, 0.09610453009317776, 0.14939949617620407, 0.0859241883858245, 0.19105155774037486, 0.1139288970599569, 0.18907157876067338, 0.13261471278555292, 0.10990442459016248, 0.12664623284114407, 0.10882224435635235, 0.17533973638153544, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037746875279299763, 9.999999999998899e-05, 0.030687207770460745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05910730280550436, 0.04196002417351197, 0.045649065773993636, 0.016889989764064195, 0.005287070183850107, 0.015140093919025488, 0.08847751982205032, 0.04088606293511221, 0.056853066053020984, 0.0423821587723644, 0.16930321404831827, 0.192060695885221, 0.09411271379426922, 0.053402492424761805, 0.08112155140016242, 0.04935355069292369, 0.19006708392835714, 0.04706425355396382, 0.1105697857404695, 0.0499514095640643, 0.2054949809037614, 0.10621888534526369, 0.08888638518103964, 0.13724561039026117, 0.050509802973493834, 0.13135961823183584, 0.10126054073924373, 0.4001603721659416, 0.46867142154176267, 0.41562567115787896, 0.4659157490884972, 0.4933347590893128, 0.44630612572977535, 0.45125248159882225, 0.41593290673128036, 0.4245445364926902, 0.07961619978716117, 0.09663563482994264, 0.08674164878031843, 0.08796194124782519, 0.08436314050394034, 0.08523485648639018, 0.0701019432641411, 0.090092369866972, 0.07957715710938518, 0.16201873981958193, 0.1375436187984831, 0.17230169526212247, 0.1774397070531608, 0.2873118954256294, 0.1933779007259836, 0.18445014843593566, 0.15177156231102273, 0.13997134176592785, 0.2829676645068956, 0.34773797659812156, 0.3020293285978247, 0.2749765218671799, 0.2162113572576746, 0.2684795716833762, 0.3281098979013264, 0.3347341940081252, 0.32670634643268737, 0.21597419761583947, 0.19246591791858192, 0.20699818529281522, 0.15682825446453685, 0.23004060895548806, 0.2794842131708095, 0.25438751294038264, 0.2568881618651232, 0.21591033651495084, 0.19101261491831056, 0.1873911841595447, 0.19034298767547053, 0.18393939797549586, 0.19009739052443997, 0.19210807284057008, 0.18308607237343344, 0.16955850836392206, 0.18595848259086856, 0.19859092648402932, 0.17629743025759104, 0.17513774852052755, 0.1977501474159823, 0.16868010581517923, 0.16446512351664333, 0.17592162664465105, 0.19905586067149084, 0.16602949510476106, 0.16196790929191263, 0.7357886593179085, 0.16122543489939822, 0.6323408625260969, 0.15976530869242123, 0.1591601099540374, 0.14043447921426866, 0.14031399005926837, 0.20785393869905078, 0.3451025154335665, 0.16831968403349273, 0.4164454661623118, 0.37348376589206655, 0.1934587278359835, 0.345890769567857, 0.2038198228588879, 0.2135346456533379, 0.446292682995057, 0.18342650461580978, 0.17991395921329534, 0.18096464593012163, 0.18278992046381037, 0.1723752124151925, 0.1877703561845364, 0.1879122581271615, 0.17201106136906852, 0.178758138755839, 0.06754873382537585, 0.06460795948602771, 0.07979604443163246, 0.08001124030171325, 0.06959608569481301, 0.0732983452695144, 0.0705160967435573, 0.06544576812565106, 0.06332241271047645]}, "mutation_prompt": null}
{"id": "ef39fcdf-52a5-4673-b868-8ca7fdbd8f00", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                stochastic_perturbation = np.random.normal(0, 0.05, self.dim)  # Added perturbation\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]) +\n                                    stochastic_perturbation)  # Changed line\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = np.random.uniform(0.5, 1.5) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance exploration by introducing a stochastic perturbation to the PSO velocity update.", "configspace": "", "generation": 74, "fitness": 0.18695644753980692, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "82c94c06-1a0c-4361-b1b6-3c6515a12609", "metadata": {"aucs": [0.4209466791141203, 0.39769771597810766, 0.4066564077858684, 0.3993693397036837, 0.4013032303568783, 0.3669148882092048, 0.376649322372437, 0.409207901316865, 0.3916683730821323, 0.001353553078215941, 0.004303785018074491, 0.01949546602904706, 0.002564203444082369, 0.03981368156416809, 0.007016408373653582, 0.010148571859380562, 0.022629513217750308, 0.01576729156857326, 0.08979561804820113, 0.08530435459813257, 0.09473919847290091, 0.09107805663808177, 0.0827312903989692, 0.09088201736190804, 0.08382001309658149, 0.08787785006564697, 0.09445511459346978, 0.07205394290678635, 0.07553718108886243, 0.07040029998626396, 0.060029522587464856, 0.05683141130749214, 0.06810747013414054, 0.07443313411254171, 0.08567398804430104, 0.07370957251904364, 0.956750409493443, 0.9873716082981907, 0.9697926169125737, 0.9897375500474664, 0.981540908109261, 0.9152309755088569, 0.9740191833820331, 0.9751244916366005, 0.9912485816294553, 0.18538148499839735, 0.18068513179144252, 0.1658971086076917, 0.21367830425140955, 0.16936997872711435, 0.15469979635397701, 0.20020912483393438, 0.16225968277163683, 0.15653539970731112, 0.2567713071901989, 0.3944791636626074, 0.23361596843380217, 0.2524417817707788, 0.2793494958512519, 0.32452091647660486, 0.22009565231802475, 0.2873290984464075, 0.22926925700499445, 0.17480642740657804, 0.18433348829481022, 0.06674206997184684, 0.09177390382034878, 0.13541168053426378, 0.1163095624796402, 0.11363752412989814, 0.12092711537851897, 0.14002037078066387, 0.13343088897500965, 0.09196083359006402, 0.09568747533712763, 0.10767863321199678, 0.12569249177365927, 0.1293143449151014, 0.1496969328009905, 0.14842661192061823, 0.13972273193079088, 0.008225368790173326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002578412599911095, 9.999999999998899e-05, 9.999999999998899e-05, 0.05869969667212682, 0.03825886520113997, 0.07926323988440198, 0.06324300899126267, 0.008432794405326405, 0.09144655843974947, 0.07211949856822342, 0.04643364419502072, 0.04344989482173567, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0662186317000133, 0.05785031713190625, 0.09058393915696761, 0.10547620030347915, 0.06838084153529711, 0.084926743007679, 0.0686912703941962, 0.0564797896878132, 0.07984369470680375, 0.36855138786879915, 0.37641720733494344, 0.3836092641090616, 0.36305716255586573, 0.35898763124354505, 0.3685266899586669, 0.39413466145689835, 0.3677655179188112, 0.36894092389338984, 0.09330276153594808, 0.09086431869993483, 0.0778969149287112, 0.08292198048317956, 0.08865907415057916, 0.08195420803032738, 0.07542863540109379, 0.08883451810107579, 0.08512494029595163, 0.1275985703177014, 0.13159341890038068, 0.12953482879382516, 0.19641482145559386, 0.184979262503134, 0.13794248175835833, 0.17678137661875948, 0.15483684989462232, 0.17657395578744794, 0.26802718427020045, 0.23463849799807635, 0.21807966567296178, 0.24401102213658454, 0.27444853950897374, 0.23471884031065648, 0.25986820488549245, 0.2598971010013099, 0.247494020825744, 0.17925380647322586, 0.18047918670647178, 0.18197928362549154, 0.2050564294339451, 0.16252458860166097, 0.2212237765104963, 0.2113472855930797, 0.21112756473715677, 0.22979235131415376, 0.1725742070848002, 0.16605645370081124, 0.16499784546220198, 0.19929385924782217, 0.16787277044158455, 0.19091320869693962, 0.18896968106216938, 0.1849832849328117, 0.17860809406956746, 0.21017271839481422, 0.17254044079050979, 0.17117836759933092, 0.19601209391406516, 0.18244735103920984, 0.17823792633004465, 0.17560834633194422, 0.1760850051975874, 0.19163130321684363, 0.1613232449401819, 0.17828688007062465, 0.15280997438138055, 0.5724710620226174, 0.18571216162104176, 0.1637203454637709, 0.14110711088414996, 0.17839908041540353, 0.1949332355025144, 0.488197457741842, 0.20646507843360973, 0.2588667974993023, 0.30065638654737525, 0.10675835313662452, 0.14464407683972058, 0.19443951885644972, 0.10417289386747652, 0.2111297886007143, 0.17774567793413376, 0.1782512726667883, 0.17785825678210598, 0.17767538552255813, 0.17533950844626778, 0.17276675231464234, 0.173665402206014, 0.20130022614108212, 0.18026811249147612, 0.06584295233272786, 0.06079841773021655, 0.06353015435542564, 0.06818429508458379, 0.06457679888141554, 0.06469900241772863, 0.07037809113431215, 0.07794397138366782, 0.06814442913934671]}, "mutation_prompt": null}
{"id": "809526e6-5ce8-45be-8c21-fbb968c6e257", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound)\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Fine-tune the DE mutation strategy by introducing a dynamic component in the adaptive scaling factor for improved exploration.", "configspace": "", "generation": 75, "fitness": 0.25205079766498334, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "82c94c06-1a0c-4361-b1b6-3c6515a12609", "metadata": {"aucs": [0.7316792564764747, 0.7401555581374408, 0.702644521654091, 0.7469644796498229, 0.7425997677111837, 0.6946059160216997, 0.718729747074011, 0.7508746074576954, 0.7724458242875203, 0.38920151869051267, 0.4498302015870633, 0.3797242107479524, 0.5294378817679393, 0.3977770815292442, 0.4611000996282044, 0.4930007807483815, 0.3833615006342296, 0.3375115460119412, 0.1004366202547986, 0.11850639728051005, 0.0921021732327244, 0.11714561790734446, 0.08237150491063527, 0.12362031747084967, 0.08691057090826304, 0.09212081547547513, 0.11449629013145857, 0.09393381046735882, 0.10747782175472564, 0.10688484411285082, 0.08861613349244779, 0.08651764038408416, 0.1030635812027707, 0.11153827156778517, 0.09105498246383881, 0.10968934231068539, 0.9791316949982832, 0.9872679147979163, 0.9623022357854369, 0.9870766282270894, 0.9525915024250851, 0.9840179570334897, 0.9712904057521132, 0.9805716977323057, 0.9858865345122554, 0.20228324130013775, 0.23670185744397165, 0.19797368785600322, 0.2600191936279108, 0.27826000410243346, 0.18252873581397766, 0.2782193210840074, 0.3309366389766971, 0.3448976566136206, 0.3464152241085606, 0.29022189447599345, 0.3250706853275872, 0.25996254036093913, 0.4632273350120446, 0.41650222972598994, 0.547427164572998, 0.343583771282188, 0.35843706473468995, 0.17963162482983774, 0.17502430656508428, 0.10682475688144644, 0.14260382513607506, 0.19108519004544, 0.16391436911962742, 0.1582397559087162, 0.22715288717841609, 0.14480743674077, 0.16862110003926067, 0.18098266874625468, 0.15740487504811662, 0.13010422095764584, 0.19652858640269044, 0.17743283182483682, 0.1958062514031721, 0.18929511960775658, 0.18586887021184761, 9.999999999998899e-05, 0.007875704729392918, 9.999999999998899e-05, 0.0018039182913899277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03769911635493772, 0.0463656971882892, 0.07312217032852708, 0.04339518514447005, 0.03908475308737669, 0.09194294287211036, 0.040030116856035636, 0.048713402936377714, 0.08666099990080034, 0.04380953395530229, 0.12615341148135362, 0.18061585690433535, 0.0614112809621844, 0.09359358522814532, 0.07573348330106655, 0.05363994972042396, 0.148771378446095, 0.1318911252728736, 0.10306924572716725, 0.11145984630429262, 0.1376853222311254, 0.1383707315331516, 0.14057384664257955, 0.10097994353475026, 0.15865056235251507, 0.12411891268930597, 0.05525206571089769, 0.42844277399204234, 0.42855790931581084, 0.4589253494484793, 0.49407843539118035, 0.4782722328110143, 0.5093485623048797, 0.45241556688089646, 0.47151012960051975, 0.44716900515631686, 0.10013731892306055, 0.07366593279782574, 0.09282866298519021, 0.08770841013770747, 0.09316212605656471, 0.09986524252741658, 0.07535685264628011, 0.09689643525218616, 0.07545880678983397, 0.15333482537724286, 0.17765652112572916, 0.13241462847590213, 0.19982064477105888, 0.15530258677137876, 0.17455094672083982, 0.15513578275543005, 0.1793172052939197, 0.18212480408096465, 0.28069538611310285, 0.21445245831641202, 0.3269270211636969, 0.36847826588743793, 0.33982847221198365, 0.2072158365565283, 0.34549704310640306, 0.3735717923341436, 0.35950700686275716, 0.24029226991810537, 0.265851685321045, 0.2076870992160953, 0.24806420504245374, 0.2567964184946131, 0.22201076583910584, 0.28439550324273766, 0.2848164244288939, 0.17290005820671484, 0.196517696082665, 0.17461253762005402, 0.1793026974352393, 0.18979516518352257, 0.23053625696708724, 0.1970096002209708, 0.19296065242194405, 0.1880798430943278, 0.18283150211573473, 0.21627803703017168, 0.18629290173362212, 0.18049582923089147, 0.1805577248116852, 0.20260846933303212, 0.20425451000232875, 0.2706250847126177, 0.20452700821809222, 0.23025915266663532, 0.18577504139182488, 0.18571487787250962, 0.16436929280711232, 0.17354408417511968, 0.20014131842472904, 0.1613323138258409, 0.14244883848736922, 0.16800775271912238, 0.8276976518175874, 0.4942408117258825, 0.2108836427947215, 0.6221338709344117, 0.5315561296182856, 0.14735139868199765, 0.14821020150171593, 0.09395563012849872, 0.10519167039718136, 0.16322409528290116, 0.17547479424485302, 0.18854645514253798, 0.18946020552724463, 0.17777040334046945, 0.18168283609658642, 0.18751546762635474, 0.17700272613365087, 0.18217284785380794, 0.18747602822457998, 0.06977635104580604, 0.07726386035050692, 0.08046751948092701, 0.07855703337750253, 0.08484351764383513, 0.08493640714994033, 0.07988726519658829, 0.0828097175393806, 0.0761213383804854]}, "mutation_prompt": null}
{"id": "ca441aff-4cb9-4485-9905-c69ea392d685", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improved exploration by adjusting the DE mutation formula with an additional weighted term.", "configspace": "", "generation": 76, "fitness": 0.27792804080865596, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "809526e6-5ce8-45be-8c21-fbb968c6e257", "metadata": {"aucs": [0.7566203348768141, 0.7608546750363588, 0.7519934712261429, 0.7532686947892656, 0.7665615431075251, 0.6958116354160906, 0.7666096226536291, 0.703553186098712, 0.7032397325353883, 0.48187593413258767, 0.46779985253876843, 0.4899828507068391, 0.4778355086306588, 0.5026300141661006, 0.4765108208632016, 0.4552232472956179, 0.47997420016617076, 0.5167830064387501, 0.11460002590769913, 0.11839797108098082, 0.126676574435299, 0.10850994450944584, 0.114747502616667, 0.12571232844296976, 0.11334519264875287, 0.1275093023703051, 0.12740238013930427, 0.11403374967625513, 0.11706921423423189, 0.10596679142233112, 0.10014770730759959, 0.0962543118428244, 0.1067213768062586, 0.10020936236602795, 0.09935882735757173, 0.09083255439324078, 0.9598516880956046, 0.9865817950209059, 0.9762795598659451, 0.9868962872351048, 0.9677014386220723, 0.9759110452446589, 0.9762313041334576, 0.9860511165050182, 0.9819095591692814, 0.37367343145469, 0.31834819510385226, 0.29447167909075533, 0.32204842884269824, 0.3244167570219445, 0.35207988575822835, 0.36976143456978183, 0.3743072473707384, 0.3645269461771422, 0.490737980553975, 0.3457857859507998, 0.5679787337543325, 0.7245980993519601, 0.35613599263705353, 0.8369140443283872, 0.23560913886793444, 0.22922156159577567, 0.870303155636157, 0.2506862736276163, 0.16086675865945144, 0.12614172146818914, 0.10027366451840625, 0.18951706535389645, 0.20320764791697754, 0.18697449197546612, 0.301047989290536, 0.1775352941737932, 0.12313242150023085, 0.18713327923734946, 0.13170491293284026, 0.1639428899840878, 0.20612450462214715, 0.20270280227412818, 0.10288990741814663, 0.22085615262664238, 0.21375868447808488, 0.01375125683377465, 0.031991288837665555, 0.05074480874056719, 9.999999999998899e-05, 0.008979186484652568, 9.999999999998899e-05, 0.024482562877482628, 9.999999999998899e-05, 0.008283495939916619, 0.08386549309755631, 0.06244903732840701, 0.0646932479206469, 0.027874348783105574, 0.04361602072826065, 0.08272455038843074, 0.04338093959414746, 0.09868799863701372, 0.06618063113113548, 0.04009474380540434, 0.1894747269425061, 0.027586132856966317, 0.05487828645495907, 0.08143025009749438, 0.05867521312128032, 0.04868820564114029, 0.06376035925001355, 0.07742472230046538, 0.19055876910308733, 0.08965747839073424, 0.1547922996593547, 0.11290675650919513, 0.1571104845319966, 0.12003080690682233, 0.1632662872308409, 0.12872917107362936, 0.20684284846921142, 0.49259507356281407, 0.476300969411497, 0.45750814352630276, 0.4874239757261246, 0.476937000317332, 0.4696398762243593, 0.49215343144324153, 0.482741617396773, 0.5406505644527952, 0.1415265382862364, 0.10440661680574881, 0.08975983118921371, 0.09661486899582328, 0.09573396213559138, 0.15041029874283174, 0.08827597385336317, 0.10565390534713626, 0.10621122885967904, 0.3292102926939533, 0.36891801610502073, 0.20783557861531676, 0.1583473420032696, 0.14789042383267348, 0.22458654719261173, 0.14296787922242638, 0.18886111906548586, 0.16979564756730325, 0.32250518266366546, 0.32118501940100597, 0.39336045409827447, 0.4057827537020653, 0.2894455578498609, 0.34760459524862297, 0.4394473524985497, 0.37195459050797286, 0.25742546845600833, 0.23757148213024704, 0.2506562583081119, 0.25929684782794193, 0.19920046055249108, 0.3896433138646779, 0.3153475500805396, 0.21336573714557938, 0.2237527294008108, 0.18532195645421135, 0.21489414791207306, 0.17617702449825157, 0.212865710303905, 0.18659669983393823, 0.20653020086666019, 0.21088069604508186, 0.2227900805064743, 0.18929102908647488, 0.20664445457488323, 0.2127902145792112, 0.1987929847199692, 0.19155162306010065, 0.20108492420642, 0.23483717267222293, 0.2133728779393853, 0.20826899300331947, 0.48375023880639223, 0.20240371225588105, 0.18665904253392018, 0.18583474644549658, 0.16486786865644898, 0.8730783298243457, 0.2004637509517848, 0.1623978748501289, 0.14310639224673471, 0.17627442657444148, 0.8501913887733992, 0.6127841311665909, 0.21055885203696334, 0.5781430640921932, 0.4839670414521039, 0.15326476236141062, 0.1492758758389935, 0.09456106753136684, 0.10465329172037585, 0.10389312293133424, 0.174329619284617, 0.17765309887652425, 0.19985926819807087, 0.17073734779983607, 0.18324293033493577, 0.17503482117728741, 0.1906436711967704, 0.17910038361194092, 0.1756336845581955, 0.08293246616808769, 0.0947182529284577, 0.08697611001627881, 0.07384161171377601, 0.08701288672756002, 0.0951682979205003, 0.089612698974327, 0.08664760597340959, 0.09662559966437201]}, "mutation_prompt": null}
{"id": "16bfcbf0-83a3-4f75-a8fd-ff5a33ad11e5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improved exploration by adjusting the DE mutation formula with an additional weighted term.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.7566203348768141, 0.7608546750363588, 0.7519934712261429, 0.7532686947892656, 0.7665615431075251, 0.6958116354160906, 0.7666096226536291, 0.703553186098712, 0.7032397325353883, 0.48187593413258767, 0.46779985253876843, 0.4899828507068391, 0.4778355086306588, 0.5026300141661006, 0.4765108208632016, 0.4552232472956179, 0.47997420016617076, 0.5167830064387501, 0.11460002590769913, 0.11839797108098082, 0.126676574435299, 0.10850994450944584, 0.114747502616667, 0.12571232844296976, 0.11334519264875287, 0.1275093023703051, 0.12740238013930427, 0.11403374967625513, 0.11706921423423189, 0.10596679142233112, 0.10014770730759959, 0.0962543118428244, 0.1067213768062586, 0.10020936236602795, 0.09935882735757173, 0.09083255439324078, 0.9598516880956046, 0.9865817950209059, 0.9762795598659451, 0.9868962872351048, 0.9677014386220723, 0.9759110452446589, 0.9762313041334576, 0.9860511165050182, 0.9819095591692814, 0.37367343145469, 0.31834819510385226, 0.29447167909075533, 0.32204842884269824, 0.3244167570219445, 0.35207988575822835, 0.36976143456978183, 0.3743072473707384, 0.3645269461771422, 0.490737980553975, 0.3457857859507998, 0.5679787337543325, 0.7245980993519601, 0.35613599263705353, 0.8369140443283872, 0.23560913886793444, 0.22922156159577567, 0.870303155636157, 0.2506862736276163, 0.16086675865945144, 0.12614172146818914, 0.10027366451840625, 0.18951706535389645, 0.20320764791697754, 0.18697449197546612, 0.301047989290536, 0.1775352941737932, 0.12313242150023085, 0.18713327923734946, 0.13170491293284026, 0.1639428899840878, 0.20612450462214715, 0.20270280227412818, 0.10288990741814663, 0.22085615262664238, 0.21375868447808488, 0.01375125683377465, 0.031991288837665555, 0.05074480874056719, 9.999999999998899e-05, 0.008979186484652568, 9.999999999998899e-05, 0.024482562877482628, 9.999999999998899e-05, 0.008283495939916619, 0.08386549309755631, 0.06244903732840701, 0.0646932479206469, 0.027874348783105574, 0.04361602072826065, 0.08272455038843074, 0.04338093959414746, 0.09868799863701372, 0.06618063113113548, 0.04009474380540434, 0.1894747269425061, 0.027586132856966317, 0.05487828645495907, 0.08143025009749438, 0.05867521312128032, 0.04868820564114029, 0.06376035925001355, 0.07742472230046538, 0.19055876910308733, 0.08965747839073424, 0.1547922996593547, 0.11290675650919513, 0.1571104845319966, 0.12003080690682233, 0.1632662872308409, 0.12872917107362936, 0.20684284846921142, 0.49259507356281407, 0.476300969411497, 0.45750814352630276, 0.4874239757261246, 0.476937000317332, 0.4696398762243593, 0.49215343144324153, 0.482741617396773, 0.5406505644527952, 0.1415265382862364, 0.10440661680574881, 0.08975983118921371, 0.09661486899582328, 0.09573396213559138, 0.15041029874283174, 0.08827597385336317, 0.10565390534713626, 0.10621122885967904, 0.3292102926939533, 0.36891801610502073, 0.20783557861531676, 0.1583473420032696, 0.14789042383267348, 0.22458654719261173, 0.14296787922242638, 0.18886111906548586, 0.16979564756730325, 0.32250518266366546, 0.32118501940100597, 0.39336045409827447, 0.4057827537020653, 0.2894455578498609, 0.34760459524862297, 0.4394473524985497, 0.37195459050797286, 0.25742546845600833, 0.23757148213024704, 0.2506562583081119, 0.25929684782794193, 0.19920046055249108, 0.3896433138646779, 0.3153475500805396, 0.21336573714557938, 0.2237527294008108, 0.18532195645421135, 0.21489414791207306, 0.17617702449825157, 0.212865710303905, 0.18659669983393823, 0.20653020086666019, 0.21088069604508186, 0.2227900805064743, 0.18929102908647488, 0.20664445457488323, 0.2127902145792112, 0.1987929847199692, 0.19155162306010065, 0.20108492420642, 0.23483717267222293, 0.2133728779393853, 0.20826899300331947, 0.48375023880639223, 0.20240371225588105, 0.18665904253392018, 0.18583474644549658, 0.16486786865644898, 0.8730783298243457, 0.2004637509517848, 0.1623978748501289, 0.14310639224673471, 0.17627442657444148, 0.8501913887733992, 0.6127841311665909, 0.21055885203696334, 0.5781430640921932, 0.4839670414521039, 0.15326476236141062, 0.1492758758389935, 0.09456106753136684, 0.10465329172037585, 0.10389312293133424, 0.174329619284617, 0.17765309887652425, 0.19985926819807087, 0.17073734779983607, 0.18324293033493577, 0.17503482117728741, 0.1906436711967704, 0.17910038361194092, 0.1756336845581955, 0.08293246616808769, 0.0947182529284577, 0.08697611001627881, 0.07384161171377601, 0.08701288672756002, 0.0951682979205003, 0.089612698974327, 0.08664760597340959, 0.09662559966437201]}, "mutation_prompt": null}
{"id": "07267302-718c-46f5-921f-054a7151c6e3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]) +\n                                    np.random.normal(0, 0.05, self.dim))  # Added random perturbation\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced exploration by introducing a slight random perturbation to the PSO velocity, allowing better escape from local optima.", "configspace": "", "generation": 78, "fitness": 0.21699061548380513, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.4359150831708176, 0.4565202751022792, 0.4289343755286832, 0.4520903011523555, 0.43412741869707283, 0.43556674418748753, 0.4403738162517993, 0.44550369501181375, 0.48968852604476165, 0.01478258201239202, 0.021098384749545063, 0.02364922921265411, 0.038957156853535846, 0.06892443460446629, 0.020208952709022232, 0.036997225723052196, 0.018844377184417338, 0.015279686583864915, 0.10205885616158084, 0.10369950434693709, 0.10197101481928073, 0.09751631408145989, 0.09145051261232873, 0.11041898495313485, 0.079789568802201, 0.10096894594065076, 0.10518042946336503, 0.09994136955458832, 0.10051675809825278, 0.10362699131036479, 0.10495315783907244, 0.09135452365688213, 0.10429554916457529, 0.09239317969730743, 0.08899232618412156, 0.08933717659908091, 0.9845985145587055, 0.9908057253235811, 0.9659046805988325, 0.986968981517703, 0.9380628220375093, 0.9814410765964449, 0.9549678994505402, 0.9760081745375145, 0.9852647781162804, 0.2781782267729598, 0.28584758476732475, 0.26949381911309367, 0.2792214022592916, 0.2600785197001786, 0.27912434619248383, 0.27314871836566534, 0.2792292143350741, 0.31335843495634486, 0.2286827422652431, 0.33643180552575513, 0.3280374527809399, 0.36270209226772354, 0.2725741491526903, 0.31193142336426194, 0.33533812789008166, 0.22505889725101913, 0.23738575651849636, 0.17518323996582386, 0.15353333981952022, 0.1281249578664989, 0.10539625731630908, 0.20266613128027733, 0.16881451573195094, 0.15582957538030728, 0.16022148361321342, 0.1826527679008908, 0.19415543490332565, 0.17559108586763272, 0.1716328372975786, 0.129974881692837, 0.16287567755076326, 0.1655770981675576, 0.20067876009794328, 0.15626130058911947, 0.17381294600312236, 0.0214713229449931, 9.999999999998899e-05, 9.999999999998899e-05, 0.0470272099561998, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009573432613986244, 0.020884580078625037, 0.038389518948563794, 0.08218481487821683, 0.144451910322679, 0.05503354548022432, 0.07114850767249192, 0.0439866013061615, 0.08461927200111952, 0.024026025432730025, 0.06160983619341931, 0.10733204583800782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09661748177975227, 0.05954850115637145, 0.07609291483556246, 0.08933428050320213, 0.09276903367755007, 0.08676854410051349, 0.09773642365897339, 0.09254505823074666, 0.0910140197215209, 0.4147851916840708, 0.41156242884977423, 0.40759467215303447, 0.39519444272637716, 0.42056011327627474, 0.4154279015879573, 0.41070637311059177, 0.41444665810782155, 0.41333401537953396, 0.09376267483927547, 0.09982416291798968, 0.0917279858860729, 0.09307153729387352, 0.0841432867690668, 0.10599245009126246, 0.08571218206886355, 0.11560915732220434, 0.0857254727058887, 0.15318753143847574, 0.20162606290663332, 0.19159855996615816, 0.1601829384075114, 0.17894706777405134, 0.18337471520249804, 0.24096164339075676, 0.14820003212866484, 0.16290355904471598, 0.2894644238948778, 0.26558357433492796, 0.2987553951212806, 0.2262414051578353, 0.2901265296721707, 0.2773568166058109, 0.2917192199292796, 0.29371086970986593, 0.2975640558677062, 0.2248487269889199, 0.24974955519640862, 0.22114734731329722, 0.23872857768324807, 0.16677259657453347, 0.23053530742421713, 0.25192169427716216, 0.22597950575809833, 0.21537824462586586, 0.21292097590122427, 0.17814808761517475, 0.20501897190208784, 0.20233240906093874, 0.17635304366996862, 0.19920686329477355, 0.19838334329754115, 0.19876531803306607, 0.22148108724333837, 0.19103694406907012, 0.2041480354935611, 0.23171951675808278, 0.1955028306209876, 0.20607417000922945, 0.19436770562296235, 0.20819803623418964, 0.2672821418091451, 0.2512908419628135, 0.21094028773724738, 0.1464386791055312, 0.17556828214875075, 0.643359091263918, 0.1984405934686111, 0.654116305011321, 0.1706645136230276, 0.16988030018370115, 0.6221079949069387, 0.5246420770162376, 0.21163429560112823, 0.5363529942229716, 0.0934097040626175, 0.2109984516328448, 0.1534670669150171, 0.49037835893792325, 0.10397514714473688, 0.16472371987975398, 0.16606901568334342, 0.18132526288227968, 0.1725440759998481, 0.1898344272883551, 0.19656419623316557, 0.1842808210520802, 0.17598853577678653, 0.18748902402712664, 0.17057099925463404, 0.08042302921725408, 0.08445847497255343, 0.09001220703493196, 0.0969018512876324, 0.0786609993892533, 0.0845146013911241, 0.09118218874804518, 0.0773147585174262, 0.08715974981609798]}, "mutation_prompt": null}
{"id": "1ba4cc1e-a6fd-42d1-a161-5bbf81cb5ff3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + (0.3 + 0.7 * np.linalg.norm(self.global_best - a) / np.sqrt(self.dim)) * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced global exploration by refining the DE mutation formula with a more dynamic scaling factor influenced by the global best.", "configspace": "", "generation": 79, "fitness": 0.24703622012423157, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.6951864467274718, 0.687876898821357, 0.7309224713531413, 0.7794306491911825, 0.7207211116012247, 0.7611762691677011, 0.718530441369744, 0.7397058249654536, 0.7084104458458135, 0.353545725198106, 0.41176144527950054, 0.4966655038854524, 0.43228431272219325, 0.3682412748328352, 0.3082808990156468, 0.3513493197592358, 0.41209239664144726, 0.41586559776925913, 0.10652719284840528, 0.12448584778196292, 0.11833557380318527, 0.11684798170569788, 0.13485095288660542, 0.14187512869996388, 0.1011162014665844, 0.1362809240013133, 0.11343054728175628, 0.07544230250886397, 0.07676526047996135, 0.08636532746914449, 0.1136634782737812, 0.09762396195440981, 0.08849801229326348, 0.10276911174668768, 0.08509970130892341, 0.09266797059720644, 0.9536830611818523, 0.9865817950209059, 0.97584686337931, 0.9923894847677001, 0.9764612971370571, 0.9714788601246646, 0.9772461793576093, 0.9759173978549753, 0.9858683165091975, 0.3884940791252185, 0.325073008713046, 0.26189252139905084, 0.23120946798952546, 0.299394595505188, 0.3162823717063681, 0.2821228766700442, 0.33626987005263964, 0.4471974592838611, 0.20357247128694667, 0.1691022843039336, 0.6911499696870469, 0.2645724144746945, 0.2562800790996793, 0.2679912665547187, 0.5305396627247239, 0.1645652358086922, 0.5775531026790961, 0.15617604698155851, 0.17266343098562176, 0.10115685226654747, 0.15423212527045038, 0.17392951875772977, 0.11281059635200885, 0.16659146457685414, 0.27036379025035207, 0.1553240715864055, 0.153766281635078, 0.11502514177188239, 0.1101213907469013, 0.17167980268747973, 0.16150475998535407, 0.17435609434545363, 0.19160162520736757, 0.16015269000890708, 0.17735422560390546, 0.00035675528381673427, 9.999999999998899e-05, 0.002294320695959362, 9.999999999998899e-05, 0.0001557877381166417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06469886675508296, 0.06117885164546277, 0.035003968214011194, 0.07345823407472651, 9.999999999998899e-05, 0.07756257197736105, 0.04843764325862032, 0.0829695456997861, 0.03689093538349375, 0.04430863407302055, 0.04217746659257904, 0.02667334697452084, 0.050248593540608844, 0.0569727690356282, 0.12681981219967275, 0.07593624877695071, 0.12875369536582726, 0.0717340770422965, 0.09336775491652771, 0.017354299778108206, 0.07420948492594326, 0.049234420373353904, 0.08374622701836343, 0.05427065808864662, 0.09373498781394118, 0.1559517418911035, 0.07119177985056646, 0.45073760670905527, 0.441359573517051, 0.4502759860570744, 0.48936851188092256, 0.5100144114693196, 0.49150240385754973, 0.4631375219333682, 0.45255682754144866, 0.49178859258055785, 0.11532161800588236, 0.08651730030496185, 0.10193916608814102, 0.09373778930008625, 0.06146523340214949, 0.09420933365618456, 0.08031047541056391, 0.09500008506078006, 0.09233038751901856, 0.12393705170810376, 0.1399409091471403, 0.1498686687715719, 0.14745954499105152, 0.24819942080353208, 0.14405515280322667, 0.13169975458254102, 0.1167589867698483, 0.16956109891115845, 0.305079231443977, 0.3325386414069237, 0.3804340831342604, 0.2205106969613475, 0.38740951549518376, 0.33653437165265243, 0.3758373184356555, 0.3295331287917842, 0.3891581332830243, 0.2665938995309213, 0.20760216532153197, 0.22207480442794603, 0.1718321913047972, 0.1722454772194888, 0.2747946502240507, 0.2751121225375941, 0.2828258733454223, 0.22477074527384144, 0.18026364486670554, 0.16585550699948004, 0.17997892334250132, 0.181021729064632, 0.1800004416151556, 0.1704675333178347, 0.1675031510021323, 0.17668144041687794, 0.20268647549244156, 0.17687473718659819, 0.17975175179500003, 0.191366535381029, 0.17849294764833212, 0.20271580165180803, 0.20276226666100272, 0.1769743099628378, 0.18896116574842325, 0.18456932155467987, 0.20772444470823048, 0.1522925040974633, 0.16393792225979997, 0.7194076446522362, 0.1765319145112889, 0.16867057366013627, 0.1693459143168602, 0.1640344781943759, 0.6302215566030367, 0.3295677237577037, 0.20952019166562263, 0.3819708908736097, 0.18994834011048678, 0.18776885477104466, 0.22763926383977973, 0.18862340951511225, 0.20554754815463516, 0.20938263637595655, 0.1957769467586855, 0.17657392197801636, 0.18857992975533622, 0.1602840978745409, 0.17081017970335943, 0.17798833648562373, 0.19913938908937723, 0.1705592242735916, 0.17017019460798788, 0.07706966922278968, 0.0795242174498586, 0.08068266307756333, 0.07715991339747941, 0.06451810054232321, 0.08887817159771716, 0.0788052683815269, 0.07617299643890296, 0.07749447619561811]}, "mutation_prompt": null}
{"id": "f33121dd-1fd9-4ddf-b787-f0cb702c6d7f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                fitness_diversity = np.std(fitness) / np.mean(fitness)  # Adaptive scaling enhanced with fitness diversity\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget) * (1 + fitness_diversity))  # Modified line\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance adaptive scaling by incorporating fitness diversity for more balanced exploration and exploitation.", "configspace": "", "generation": 80, "fitness": 0.2654636770710376, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.7465782384947857, 0.7744728770318665, 0.7386860376031755, 0.7831583012987414, 0.7591973189485373, 0.7444107398783807, 0.7462729225995514, 0.7310056109357278, 0.7106585852553942, 0.45939454086314135, 0.37517680585681823, 0.4416239516254479, 0.47683454183921026, 0.3807279667612625, 0.19308973238822802, 0.2387602880249452, 0.4190780022452292, 0.4431076979151862, 0.13437158704923802, 0.10048855477360974, 0.14135290108774756, 0.12357945066344378, 0.13236948006197669, 0.10123862601102085, 0.12639935042796258, 0.10577768968676249, 0.13170547418184997, 0.12798288858951323, 0.09844498969925752, 0.08001504890393785, 0.09300618611224742, 0.10242003267575406, 0.1118648026956951, 0.09031488027642898, 0.08522060329892533, 0.0861349260266383, 0.9688441612932063, 0.9918808024289197, 0.9736693080512584, 0.9848627198536809, 0.9440320293916711, 0.9820297634652324, 0.977000748638701, 0.9856946189394572, 0.9839500617995444, 0.2999240637172057, 0.23450462516191906, 0.19185232469621571, 0.19921800139557944, 0.2655849841854512, 0.23224739487421298, 0.3854433346217253, 0.20508978160475233, 0.36641957735652664, 0.6867978584646348, 0.47200189449013086, 0.3633856039350116, 0.3733300806626496, 0.2720890736544399, 0.1939148413179419, 0.30937152675561763, 0.5049335865643941, 0.34640118395736297, 0.18561263222780366, 0.17209303337535498, 0.12559171842850014, 0.16071431848465623, 0.2376137469893751, 0.22722816024606307, 0.10565423699897858, 0.12847965813329953, 0.17667507991296316, 0.19956103365666222, 0.19063209847932905, 0.17734540102027818, 0.12795908484035923, 0.15582293695732075, 0.18622955980890543, 0.10973529186056152, 0.19923915086580768, 0.21228711770185016, 0.0031302031123399132, 9.999999999998899e-05, 0.0056123512782471074, 0.015752190062292004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908752343526136, 0.07983264732792417, 0.07044649676790338, 0.05952961633756115, 0.03327236728733041, 0.012435502232175488, 0.07255624526682458, 0.11120878793859668, 0.02752237716813144, 0.08204843694482966, 0.03577960852987849, 0.10526059595835924, 0.05817317841985281, 0.06199174101119731, 0.07063124430147039, 0.08047233459797731, 0.0718740280090242, 0.08283993491611252, 0.05662413788030918, 0.22487632343773434, 0.049780427186712606, 0.08104232318902616, 0.09947284751931784, 0.15193394224910517, 0.18142209600099024, 0.2944081450095952, 0.12817476192166755, 0.10638976190765426, 0.4867720979274571, 0.44114415458689704, 0.49349630561958135, 0.5174737736600941, 0.48752334017577836, 0.49613868315340914, 0.5099438482886991, 0.5075760877060995, 0.4640501801655834, 0.12953805730493773, 0.09680074450463527, 0.11418116506997356, 0.08176101105152556, 0.09084746443962433, 0.10717546623712038, 0.10216450008040923, 0.10723626933868091, 0.06973735543940163, 0.16403698281928303, 0.173007148453155, 0.1457615084177749, 0.26622833911645616, 0.18258436731217942, 0.3087077373017675, 0.19519843531261072, 0.14444887525021421, 0.18269720161062297, 0.21774894343517337, 0.16353478038814573, 0.38634376181243524, 0.26030961495646066, 0.3892586522768383, 0.3241780782821999, 0.37698168211320526, 0.4124516472863985, 0.4671908647168278, 0.21612196647282667, 0.2939489013028609, 0.3292740049852284, 0.2811870593150392, 0.2413194005708007, 0.25526788913787946, 0.2743787890661712, 0.31776746232369246, 0.29293318651882094, 0.21934962780446776, 0.1999081024619851, 0.20119636438725452, 0.19338840003165814, 0.21329340489927673, 0.2044653096249771, 0.21135897219576183, 0.19975837084744685, 0.23229525368300974, 0.20449750489499152, 0.21560259182777763, 0.20638915074754394, 0.20384621690585636, 0.24231730943481433, 0.20268080804927013, 0.217102982198906, 0.2155477015124443, 0.2309249141050067, 0.20918260435694114, 0.18714764795583183, 0.16718585740397174, 0.8414065940245166, 0.19998052004774802, 0.7943677113387126, 0.14235479712373622, 0.14244987341605597, 0.8055007542770249, 0.7270755760596379, 0.2114034754693328, 0.1548235985230202, 0.6421479081226877, 0.21099803663587513, 0.15275972551593764, 0.09459742810016503, 0.21187653126085426, 0.1652788662252973, 0.20852659722260158, 0.18102939499857673, 0.2009675679998405, 0.19258943869117473, 0.17802229149516313, 0.18845035796734366, 0.18752283965389493, 0.17735880154118966, 0.17724624647190834, 0.09678396341115114, 0.07404575870281538, 0.08001161206104113, 0.07290261747183724, 0.08192451933201006, 0.07468936032073303, 0.07974444505535216, 0.08183932847021114, 0.08365880944395487]}, "mutation_prompt": null}
{"id": "c83bf3a0-cef6-47d2-979e-e2936551ce8e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improved exploration by adjusting the DE mutation formula with an additional weighted term.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.7566203348768141, 0.7608546750363588, 0.7519934712261429, 0.7532686947892656, 0.7665615431075251, 0.6958116354160906, 0.7666096226536291, 0.703553186098712, 0.7032397325353883, 0.48187593413258767, 0.46779985253876843, 0.4899828507068391, 0.4778355086306588, 0.5026300141661006, 0.4765108208632016, 0.4552232472956179, 0.47997420016617076, 0.5167830064387501, 0.11460002590769913, 0.11839797108098082, 0.126676574435299, 0.10850994450944584, 0.114747502616667, 0.12571232844296976, 0.11334519264875287, 0.1275093023703051, 0.12740238013930427, 0.11403374967625513, 0.11706921423423189, 0.10596679142233112, 0.10014770730759959, 0.0962543118428244, 0.1067213768062586, 0.10020936236602795, 0.09935882735757173, 0.09083255439324078, 0.9598516880956046, 0.9865817950209059, 0.9762795598659451, 0.9868962872351048, 0.9677014386220723, 0.9759110452446589, 0.9762313041334576, 0.9860511165050182, 0.9819095591692814, 0.37367343145469, 0.31834819510385226, 0.29447167909075533, 0.32204842884269824, 0.3244167570219445, 0.35207988575822835, 0.36976143456978183, 0.3743072473707384, 0.3645269461771422, 0.490737980553975, 0.3457857859507998, 0.5679787337543325, 0.7245980993519601, 0.35613599263705353, 0.8369140443283872, 0.23560913886793444, 0.22922156159577567, 0.870303155636157, 0.2506862736276163, 0.16086675865945144, 0.12614172146818914, 0.10027366451840625, 0.18951706535389645, 0.20320764791697754, 0.18697449197546612, 0.301047989290536, 0.1775352941737932, 0.12313242150023085, 0.18713327923734946, 0.13170491293284026, 0.1639428899840878, 0.20612450462214715, 0.20270280227412818, 0.10288990741814663, 0.22085615262664238, 0.21375868447808488, 0.01375125683377465, 0.031991288837665555, 0.05074480874056719, 9.999999999998899e-05, 0.008979186484652568, 9.999999999998899e-05, 0.024482562877482628, 9.999999999998899e-05, 0.008283495939916619, 0.08386549309755631, 0.06244903732840701, 0.0646932479206469, 0.027874348783105574, 0.04361602072826065, 0.08272455038843074, 0.04338093959414746, 0.09868799863701372, 0.06618063113113548, 0.04009474380540434, 0.1894747269425061, 0.027586132856966317, 0.05487828645495907, 0.08143025009749438, 0.05867521312128032, 0.04868820564114029, 0.06376035925001355, 0.07742472230046538, 0.19055876910308733, 0.08965747839073424, 0.1547922996593547, 0.11290675650919513, 0.1571104845319966, 0.12003080690682233, 0.1632662872308409, 0.12872917107362936, 0.20684284846921142, 0.49259507356281407, 0.476300969411497, 0.45750814352630276, 0.4874239757261246, 0.476937000317332, 0.4696398762243593, 0.49215343144324153, 0.482741617396773, 0.5406505644527952, 0.1415265382862364, 0.10440661680574881, 0.08975983118921371, 0.09661486899582328, 0.09573396213559138, 0.15041029874283174, 0.08827597385336317, 0.10565390534713626, 0.10621122885967904, 0.3292102926939533, 0.36891801610502073, 0.20783557861531676, 0.1583473420032696, 0.14789042383267348, 0.22458654719261173, 0.14296787922242638, 0.18886111906548586, 0.16979564756730325, 0.32250518266366546, 0.32118501940100597, 0.39336045409827447, 0.4057827537020653, 0.2894455578498609, 0.34760459524862297, 0.4394473524985497, 0.37195459050797286, 0.25742546845600833, 0.23757148213024704, 0.2506562583081119, 0.25929684782794193, 0.19920046055249108, 0.3896433138646779, 0.3153475500805396, 0.21336573714557938, 0.2237527294008108, 0.18532195645421135, 0.21489414791207306, 0.17617702449825157, 0.212865710303905, 0.18659669983393823, 0.20653020086666019, 0.21088069604508186, 0.2227900805064743, 0.18929102908647488, 0.20664445457488323, 0.2127902145792112, 0.1987929847199692, 0.19155162306010065, 0.20108492420642, 0.23483717267222293, 0.2133728779393853, 0.20826899300331947, 0.48375023880639223, 0.20240371225588105, 0.18665904253392018, 0.18583474644549658, 0.16486786865644898, 0.8730783298243457, 0.2004637509517848, 0.1623978748501289, 0.14310639224673471, 0.17627442657444148, 0.8501913887733992, 0.6127841311665909, 0.21055885203696334, 0.5781430640921932, 0.4839670414521039, 0.15326476236141062, 0.1492758758389935, 0.09456106753136684, 0.10465329172037585, 0.10389312293133424, 0.174329619284617, 0.17765309887652425, 0.19985926819807087, 0.17073734779983607, 0.18324293033493577, 0.17503482117728741, 0.1906436711967704, 0.17910038361194092, 0.1756336845581955, 0.08293246616808769, 0.0947182529284577, 0.08697611001627881, 0.07384161171377601, 0.08701288672756002, 0.0951682979205003, 0.089612698974327, 0.08664760597340959, 0.09662559966437201]}, "mutation_prompt": null}
{"id": "e6bd584d-0c73-49c0-88cf-85a17bbc3142", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improved exploration by adjusting the DE mutation formula with an additional weighted term.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.7566203348768141, 0.7608546750363588, 0.7519934712261429, 0.7532686947892656, 0.7665615431075251, 0.6958116354160906, 0.7666096226536291, 0.703553186098712, 0.7032397325353883, 0.48187593413258767, 0.46779985253876843, 0.4899828507068391, 0.4778355086306588, 0.5026300141661006, 0.4765108208632016, 0.4552232472956179, 0.47997420016617076, 0.5167830064387501, 0.11460002590769913, 0.11839797108098082, 0.126676574435299, 0.10850994450944584, 0.114747502616667, 0.12571232844296976, 0.11334519264875287, 0.1275093023703051, 0.12740238013930427, 0.11403374967625513, 0.11706921423423189, 0.10596679142233112, 0.10014770730759959, 0.0962543118428244, 0.1067213768062586, 0.10020936236602795, 0.09935882735757173, 0.09083255439324078, 0.9598516880956046, 0.9865817950209059, 0.9762795598659451, 0.9868962872351048, 0.9677014386220723, 0.9759110452446589, 0.9762313041334576, 0.9860511165050182, 0.9819095591692814, 0.37367343145469, 0.31834819510385226, 0.29447167909075533, 0.32204842884269824, 0.3244167570219445, 0.35207988575822835, 0.36976143456978183, 0.3743072473707384, 0.3645269461771422, 0.490737980553975, 0.3457857859507998, 0.5679787337543325, 0.7245980993519601, 0.35613599263705353, 0.8369140443283872, 0.23560913886793444, 0.22922156159577567, 0.870303155636157, 0.2506862736276163, 0.16086675865945144, 0.12614172146818914, 0.10027366451840625, 0.18951706535389645, 0.20320764791697754, 0.18697449197546612, 0.301047989290536, 0.1775352941737932, 0.12313242150023085, 0.18713327923734946, 0.13170491293284026, 0.1639428899840878, 0.20612450462214715, 0.20270280227412818, 0.10288990741814663, 0.22085615262664238, 0.21375868447808488, 0.01375125683377465, 0.031991288837665555, 0.05074480874056719, 9.999999999998899e-05, 0.008979186484652568, 9.999999999998899e-05, 0.024482562877482628, 9.999999999998899e-05, 0.008283495939916619, 0.08386549309755631, 0.06244903732840701, 0.0646932479206469, 0.027874348783105574, 0.04361602072826065, 0.08272455038843074, 0.04338093959414746, 0.09868799863701372, 0.06618063113113548, 0.04009474380540434, 0.1894747269425061, 0.027586132856966317, 0.05487828645495907, 0.08143025009749438, 0.05867521312128032, 0.04868820564114029, 0.06376035925001355, 0.07742472230046538, 0.19055876910308733, 0.08965747839073424, 0.1547922996593547, 0.11290675650919513, 0.1571104845319966, 0.12003080690682233, 0.1632662872308409, 0.12872917107362936, 0.20684284846921142, 0.49259507356281407, 0.476300969411497, 0.45750814352630276, 0.4874239757261246, 0.476937000317332, 0.4696398762243593, 0.49215343144324153, 0.482741617396773, 0.5406505644527952, 0.1415265382862364, 0.10440661680574881, 0.08975983118921371, 0.09661486899582328, 0.09573396213559138, 0.15041029874283174, 0.08827597385336317, 0.10565390534713626, 0.10621122885967904, 0.3292102926939533, 0.36891801610502073, 0.20783557861531676, 0.1583473420032696, 0.14789042383267348, 0.22458654719261173, 0.14296787922242638, 0.18886111906548586, 0.16979564756730325, 0.32250518266366546, 0.32118501940100597, 0.39336045409827447, 0.4057827537020653, 0.2894455578498609, 0.34760459524862297, 0.4394473524985497, 0.37195459050797286, 0.25742546845600833, 0.23757148213024704, 0.2506562583081119, 0.25929684782794193, 0.19920046055249108, 0.3896433138646779, 0.3153475500805396, 0.21336573714557938, 0.2237527294008108, 0.18532195645421135, 0.21489414791207306, 0.17617702449825157, 0.212865710303905, 0.18659669983393823, 0.20653020086666019, 0.21088069604508186, 0.2227900805064743, 0.18929102908647488, 0.20664445457488323, 0.2127902145792112, 0.1987929847199692, 0.19155162306010065, 0.20108492420642, 0.23483717267222293, 0.2133728779393853, 0.20826899300331947, 0.48375023880639223, 0.20240371225588105, 0.18665904253392018, 0.18583474644549658, 0.16486786865644898, 0.8730783298243457, 0.2004637509517848, 0.1623978748501289, 0.14310639224673471, 0.17627442657444148, 0.8501913887733992, 0.6127841311665909, 0.21055885203696334, 0.5781430640921932, 0.4839670414521039, 0.15326476236141062, 0.1492758758389935, 0.09456106753136684, 0.10465329172037585, 0.10389312293133424, 0.174329619284617, 0.17765309887652425, 0.19985926819807087, 0.17073734779983607, 0.18324293033493577, 0.17503482117728741, 0.1906436711967704, 0.17910038361194092, 0.1756336845581955, 0.08293246616808769, 0.0947182529284577, 0.08697611001627881, 0.07384161171377601, 0.08701288672756002, 0.0951682979205003, 0.089612698974327, 0.08664760597340959, 0.09662559966437201]}, "mutation_prompt": null}
{"id": "7402f5b7-dfd0-4d75-b621-301f5e9de32e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim) + np.random.normal(0, 0.05, self.dim), self.lower_bound, self.upper_bound) # Added adaptive noise\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced exploration by introducing a novel adaptive noise factor in the DE mutation process for diverse search.", "configspace": "", "generation": 83, "fitness": 0.271957361375542, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.7574678060525454, 0.7499283779743702, 0.7420439607666784, 0.7404855147211398, 0.7743655731623312, 0.7317003835500329, 0.7554663001930055, 0.7596722190055395, 0.7448268672815648, 0.3964351866505549, 0.4623712756991307, 0.47643152346191686, 0.4776355354476798, 0.4763145955418182, 0.48723939316959686, 0.3766694114177075, 0.27999801982131556, 0.39269047775596, 0.1111872969458676, 0.12893627724259382, 0.1295618898750237, 0.1408011123894859, 0.2707822126539302, 0.19511337596151102, 0.1168710449934528, 0.33592066106906227, 0.10330481858431595, 0.09404807061075404, 0.11441918485837121, 0.11550795831440863, 0.12918246578874482, 0.10849215600116335, 0.10260891229168934, 0.14111053881528046, 0.06464169414241516, 0.10553721540418559, 0.9841238546484584, 0.9871295908008674, 0.9809437405740702, 0.9868041370466026, 0.9693080555063028, 0.9818122128915754, 0.9545498203509516, 0.9730231134073736, 0.9897851934783476, 0.3276091331980351, 0.3290018150912244, 0.3732482044258494, 0.435450097620082, 0.35108863310424254, 0.3415743187747917, 0.3804622510189398, 0.3342301564553557, 0.3527843901439578, 0.6491021799462282, 0.2275172134599821, 0.5719794207558967, 0.3659173222797142, 0.2123674431127892, 0.24840019522311518, 0.6937479546669606, 0.2765400848704016, 0.7346996732132707, 0.17554834738409242, 0.16402647222755973, 0.15240223170998157, 0.1275296653003667, 0.1310963916306781, 0.16440285028762924, 0.15358805151188082, 0.2096530698321586, 0.16760296928167606, 0.20272030642964567, 0.12833368111699328, 0.20288826696812667, 0.18893100205209634, 0.20029069333124294, 0.1175174569260733, 0.18673091010408538, 0.12938024096010192, 0.20712761978197702, 0.03719672771572802, 0.0007510686685061607, 0.0338588908509635, 0.0014830063929197612, 0.019300434574750724, 0.07334903788508895, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402559506370366, 0.07575619321909599, 0.06761491689896049, 0.10491292375999872, 0.06113507446806965, 0.02294963666375638, 0.05531709628327974, 0.061510793139879394, 0.07582536899343872, 0.05165792822354853, 0.13346150036878135, 0.26124675959416455, 0.03641042133165118, 0.06770988869963679, 0.0989504123623759, 0.07870930185883152, 0.054863561073886014, 0.07901502378608782, 0.08739873627510808, 0.10212595086998122, 0.15303140294690165, 0.14125434949846927, 0.07946078617706842, 0.0658918109800678, 0.10901792415014866, 0.12424887083724356, 0.19938748931085526, 0.16773493482800517, 0.4980421100044701, 0.48228421795034127, 0.45560158994803357, 0.47217226612863616, 0.4731190417082274, 0.4659730283787129, 0.5291076418933351, 0.5003649386881202, 0.5022518769421478, 0.12336800539786197, 0.12029204511302538, 0.083212078250121, 0.1386685773480424, 0.10602621291558878, 0.09210047549563227, 0.1247433920606199, 0.09965291538556253, 0.1178940979420271, 0.19952971780207918, 0.21106976134690492, 0.16911608029505787, 0.16719711603627552, 0.13363149823437248, 0.2349871277436536, 0.19090068707112773, 0.14228898060858886, 0.2180769146107523, 0.3345109910634796, 0.17822995749748027, 0.3399131885479024, 0.2265803820022595, 0.40993140438004094, 0.3275661237533365, 0.3441799260232613, 0.379003672059005, 0.34500724775521685, 0.3032347580092122, 0.2671796620079294, 0.2723411283928331, 0.2447168336640032, 0.22797166163592053, 0.2063464496810724, 0.234690357544044, 0.2419143495708489, 0.2559788899811992, 0.20115579011979223, 0.21105306024038295, 0.19767315188301093, 0.17728970104565867, 0.20766440546270537, 0.21298903668887648, 0.24545635617313954, 0.1958132630719639, 0.19559044680030024, 0.1859407806066381, 0.21460611990831635, 0.19014428271933037, 0.18419361776916177, 0.21692199951942115, 0.20239926328187263, 0.21472929727071555, 0.22245797146680912, 0.19947434249041596, 0.1881065054283676, 0.16757015915425877, 0.1713863089790919, 0.877256139065598, 0.19985313114601444, 0.8045436599093096, 0.1429647501081992, 0.14202271426113766, 0.20870424756387207, 0.5088107383373064, 0.2092274706906776, 0.5058780807678649, 0.1689197385627884, 0.21021675146320995, 0.15385013947407, 0.1614997770836617, 0.2119226200069636, 0.5342020965317913, 0.1889157201655366, 0.17704955705238223, 0.19102687411498864, 0.17977066318042, 0.17698975698530306, 0.19089306960253494, 0.1877401405926945, 0.19658178883195032, 0.17421516549182847, 0.08577299437952446, 0.07524051118028363, 0.07875589060198995, 0.0934289410634227, 0.07850429280831162, 0.09260205536339294, 0.08307925948588579, 0.0756443430065894, 0.07924121657846972]}, "mutation_prompt": null}
{"id": "6ad82053-a48e-44c2-955a-bd4b4f44ea4d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improved exploration by adjusting the DE mutation formula with an additional weighted term.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.7566203348768141, 0.7608546750363588, 0.7519934712261429, 0.7532686947892656, 0.7665615431075251, 0.6958116354160906, 0.7666096226536291, 0.703553186098712, 0.7032397325353883, 0.48187593413258767, 0.46779985253876843, 0.4899828507068391, 0.4778355086306588, 0.5026300141661006, 0.4765108208632016, 0.4552232472956179, 0.47997420016617076, 0.5167830064387501, 0.11460002590769913, 0.11839797108098082, 0.126676574435299, 0.10850994450944584, 0.114747502616667, 0.12571232844296976, 0.11334519264875287, 0.1275093023703051, 0.12740238013930427, 0.11403374967625513, 0.11706921423423189, 0.10596679142233112, 0.10014770730759959, 0.0962543118428244, 0.1067213768062586, 0.10020936236602795, 0.09935882735757173, 0.09083255439324078, 0.9598516880956046, 0.9865817950209059, 0.9762795598659451, 0.9868962872351048, 0.9677014386220723, 0.9759110452446589, 0.9762313041334576, 0.9860511165050182, 0.9819095591692814, 0.37367343145469, 0.31834819510385226, 0.29447167909075533, 0.32204842884269824, 0.3244167570219445, 0.35207988575822835, 0.36976143456978183, 0.3743072473707384, 0.3645269461771422, 0.490737980553975, 0.3457857859507998, 0.5679787337543325, 0.7245980993519601, 0.35613599263705353, 0.8369140443283872, 0.23560913886793444, 0.22922156159577567, 0.870303155636157, 0.2506862736276163, 0.16086675865945144, 0.12614172146818914, 0.10027366451840625, 0.18951706535389645, 0.20320764791697754, 0.18697449197546612, 0.301047989290536, 0.1775352941737932, 0.12313242150023085, 0.18713327923734946, 0.13170491293284026, 0.1639428899840878, 0.20612450462214715, 0.20270280227412818, 0.10288990741814663, 0.22085615262664238, 0.21375868447808488, 0.01375125683377465, 0.031991288837665555, 0.05074480874056719, 9.999999999998899e-05, 0.008979186484652568, 9.999999999998899e-05, 0.024482562877482628, 9.999999999998899e-05, 0.008283495939916619, 0.08386549309755631, 0.06244903732840701, 0.0646932479206469, 0.027874348783105574, 0.04361602072826065, 0.08272455038843074, 0.04338093959414746, 0.09868799863701372, 0.06618063113113548, 0.04009474380540434, 0.1894747269425061, 0.027586132856966317, 0.05487828645495907, 0.08143025009749438, 0.05867521312128032, 0.04868820564114029, 0.06376035925001355, 0.07742472230046538, 0.19055876910308733, 0.08965747839073424, 0.1547922996593547, 0.11290675650919513, 0.1571104845319966, 0.12003080690682233, 0.1632662872308409, 0.12872917107362936, 0.20684284846921142, 0.49259507356281407, 0.476300969411497, 0.45750814352630276, 0.4874239757261246, 0.476937000317332, 0.4696398762243593, 0.49215343144324153, 0.482741617396773, 0.5406505644527952, 0.1415265382862364, 0.10440661680574881, 0.08975983118921371, 0.09661486899582328, 0.09573396213559138, 0.15041029874283174, 0.08827597385336317, 0.10565390534713626, 0.10621122885967904, 0.3292102926939533, 0.36891801610502073, 0.20783557861531676, 0.1583473420032696, 0.14789042383267348, 0.22458654719261173, 0.14296787922242638, 0.18886111906548586, 0.16979564756730325, 0.32250518266366546, 0.32118501940100597, 0.39336045409827447, 0.4057827537020653, 0.2894455578498609, 0.34760459524862297, 0.4394473524985497, 0.37195459050797286, 0.25742546845600833, 0.23757148213024704, 0.2506562583081119, 0.25929684782794193, 0.19920046055249108, 0.3896433138646779, 0.3153475500805396, 0.21336573714557938, 0.2237527294008108, 0.18532195645421135, 0.21489414791207306, 0.17617702449825157, 0.212865710303905, 0.18659669983393823, 0.20653020086666019, 0.21088069604508186, 0.2227900805064743, 0.18929102908647488, 0.20664445457488323, 0.2127902145792112, 0.1987929847199692, 0.19155162306010065, 0.20108492420642, 0.23483717267222293, 0.2133728779393853, 0.20826899300331947, 0.48375023880639223, 0.20240371225588105, 0.18665904253392018, 0.18583474644549658, 0.16486786865644898, 0.8730783298243457, 0.2004637509517848, 0.1623978748501289, 0.14310639224673471, 0.17627442657444148, 0.8501913887733992, 0.6127841311665909, 0.21055885203696334, 0.5781430640921932, 0.4839670414521039, 0.15326476236141062, 0.1492758758389935, 0.09456106753136684, 0.10465329172037585, 0.10389312293133424, 0.174329619284617, 0.17765309887652425, 0.19985926819807087, 0.17073734779983607, 0.18324293033493577, 0.17503482117728741, 0.1906436711967704, 0.17910038361194092, 0.1756336845581955, 0.08293246616808769, 0.0947182529284577, 0.08697611001627881, 0.07384161171377601, 0.08701288672756002, 0.0951682979205003, 0.089612698974327, 0.08664760597340959, 0.09662559966437201]}, "mutation_prompt": null}
{"id": "b77cd13e-44f7-4774-ad08-0cf53c4a8a34", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improved exploration by adjusting the DE mutation formula with an additional weighted term.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.7566203348768141, 0.7608546750363588, 0.7519934712261429, 0.7532686947892656, 0.7665615431075251, 0.6958116354160906, 0.7666096226536291, 0.703553186098712, 0.7032397325353883, 0.48187593413258767, 0.46779985253876843, 0.4899828507068391, 0.4778355086306588, 0.5026300141661006, 0.4765108208632016, 0.4552232472956179, 0.47997420016617076, 0.5167830064387501, 0.11460002590769913, 0.11839797108098082, 0.126676574435299, 0.10850994450944584, 0.114747502616667, 0.12571232844296976, 0.11334519264875287, 0.1275093023703051, 0.12740238013930427, 0.11403374967625513, 0.11706921423423189, 0.10596679142233112, 0.10014770730759959, 0.0962543118428244, 0.1067213768062586, 0.10020936236602795, 0.09935882735757173, 0.09083255439324078, 0.9598516880956046, 0.9865817950209059, 0.9762795598659451, 0.9868962872351048, 0.9677014386220723, 0.9759110452446589, 0.9762313041334576, 0.9860511165050182, 0.9819095591692814, 0.37367343145469, 0.31834819510385226, 0.29447167909075533, 0.32204842884269824, 0.3244167570219445, 0.35207988575822835, 0.36976143456978183, 0.3743072473707384, 0.3645269461771422, 0.490737980553975, 0.3457857859507998, 0.5679787337543325, 0.7245980993519601, 0.35613599263705353, 0.8369140443283872, 0.23560913886793444, 0.22922156159577567, 0.870303155636157, 0.2506862736276163, 0.16086675865945144, 0.12614172146818914, 0.10027366451840625, 0.18951706535389645, 0.20320764791697754, 0.18697449197546612, 0.301047989290536, 0.1775352941737932, 0.12313242150023085, 0.18713327923734946, 0.13170491293284026, 0.1639428899840878, 0.20612450462214715, 0.20270280227412818, 0.10288990741814663, 0.22085615262664238, 0.21375868447808488, 0.01375125683377465, 0.031991288837665555, 0.05074480874056719, 9.999999999998899e-05, 0.008979186484652568, 9.999999999998899e-05, 0.024482562877482628, 9.999999999998899e-05, 0.008283495939916619, 0.08386549309755631, 0.06244903732840701, 0.0646932479206469, 0.027874348783105574, 0.04361602072826065, 0.08272455038843074, 0.04338093959414746, 0.09868799863701372, 0.06618063113113548, 0.04009474380540434, 0.1894747269425061, 0.027586132856966317, 0.05487828645495907, 0.08143025009749438, 0.05867521312128032, 0.04868820564114029, 0.06376035925001355, 0.07742472230046538, 0.19055876910308733, 0.08965747839073424, 0.1547922996593547, 0.11290675650919513, 0.1571104845319966, 0.12003080690682233, 0.1632662872308409, 0.12872917107362936, 0.20684284846921142, 0.49259507356281407, 0.476300969411497, 0.45750814352630276, 0.4874239757261246, 0.476937000317332, 0.4696398762243593, 0.49215343144324153, 0.482741617396773, 0.5406505644527952, 0.1415265382862364, 0.10440661680574881, 0.08975983118921371, 0.09661486899582328, 0.09573396213559138, 0.15041029874283174, 0.08827597385336317, 0.10565390534713626, 0.10621122885967904, 0.3292102926939533, 0.36891801610502073, 0.20783557861531676, 0.1583473420032696, 0.14789042383267348, 0.22458654719261173, 0.14296787922242638, 0.18886111906548586, 0.16979564756730325, 0.32250518266366546, 0.32118501940100597, 0.39336045409827447, 0.4057827537020653, 0.2894455578498609, 0.34760459524862297, 0.4394473524985497, 0.37195459050797286, 0.25742546845600833, 0.23757148213024704, 0.2506562583081119, 0.25929684782794193, 0.19920046055249108, 0.3896433138646779, 0.3153475500805396, 0.21336573714557938, 0.2237527294008108, 0.18532195645421135, 0.21489414791207306, 0.17617702449825157, 0.212865710303905, 0.18659669983393823, 0.20653020086666019, 0.21088069604508186, 0.2227900805064743, 0.18929102908647488, 0.20664445457488323, 0.2127902145792112, 0.1987929847199692, 0.19155162306010065, 0.20108492420642, 0.23483717267222293, 0.2133728779393853, 0.20826899300331947, 0.48375023880639223, 0.20240371225588105, 0.18665904253392018, 0.18583474644549658, 0.16486786865644898, 0.8730783298243457, 0.2004637509517848, 0.1623978748501289, 0.14310639224673471, 0.17627442657444148, 0.8501913887733992, 0.6127841311665909, 0.21055885203696334, 0.5781430640921932, 0.4839670414521039, 0.15326476236141062, 0.1492758758389935, 0.09456106753136684, 0.10465329172037585, 0.10389312293133424, 0.174329619284617, 0.17765309887652425, 0.19985926819807087, 0.17073734779983607, 0.18324293033493577, 0.17503482117728741, 0.1906436711967704, 0.17910038361194092, 0.1756336845581955, 0.08293246616808769, 0.0947182529284577, 0.08697611001627881, 0.07384161171377601, 0.08701288672756002, 0.0951682979205003, 0.089612698974327, 0.08664760597340959, 0.09662559966437201]}, "mutation_prompt": null}
{"id": "8dc42110-27ce-4a4a-84ea-b21e10c7de5f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improved exploration by adjusting the DE mutation formula with an additional weighted term.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.7566203348768141, 0.7608546750363588, 0.7519934712261429, 0.7532686947892656, 0.7665615431075251, 0.6958116354160906, 0.7666096226536291, 0.703553186098712, 0.7032397325353883, 0.48187593413258767, 0.46779985253876843, 0.4899828507068391, 0.4778355086306588, 0.5026300141661006, 0.4765108208632016, 0.4552232472956179, 0.47997420016617076, 0.5167830064387501, 0.11460002590769913, 0.11839797108098082, 0.126676574435299, 0.10850994450944584, 0.114747502616667, 0.12571232844296976, 0.11334519264875287, 0.1275093023703051, 0.12740238013930427, 0.11403374967625513, 0.11706921423423189, 0.10596679142233112, 0.10014770730759959, 0.0962543118428244, 0.1067213768062586, 0.10020936236602795, 0.09935882735757173, 0.09083255439324078, 0.9598516880956046, 0.9865817950209059, 0.9762795598659451, 0.9868962872351048, 0.9677014386220723, 0.9759110452446589, 0.9762313041334576, 0.9860511165050182, 0.9819095591692814, 0.37367343145469, 0.31834819510385226, 0.29447167909075533, 0.32204842884269824, 0.3244167570219445, 0.35207988575822835, 0.36976143456978183, 0.3743072473707384, 0.3645269461771422, 0.490737980553975, 0.3457857859507998, 0.5679787337543325, 0.7245980993519601, 0.35613599263705353, 0.8369140443283872, 0.23560913886793444, 0.22922156159577567, 0.870303155636157, 0.2506862736276163, 0.16086675865945144, 0.12614172146818914, 0.10027366451840625, 0.18951706535389645, 0.20320764791697754, 0.18697449197546612, 0.301047989290536, 0.1775352941737932, 0.12313242150023085, 0.18713327923734946, 0.13170491293284026, 0.1639428899840878, 0.20612450462214715, 0.20270280227412818, 0.10288990741814663, 0.22085615262664238, 0.21375868447808488, 0.01375125683377465, 0.031991288837665555, 0.05074480874056719, 9.999999999998899e-05, 0.008979186484652568, 9.999999999998899e-05, 0.024482562877482628, 9.999999999998899e-05, 0.008283495939916619, 0.08386549309755631, 0.06244903732840701, 0.0646932479206469, 0.027874348783105574, 0.04361602072826065, 0.08272455038843074, 0.04338093959414746, 0.09868799863701372, 0.06618063113113548, 0.04009474380540434, 0.1894747269425061, 0.027586132856966317, 0.05487828645495907, 0.08143025009749438, 0.05867521312128032, 0.04868820564114029, 0.06376035925001355, 0.07742472230046538, 0.19055876910308733, 0.08965747839073424, 0.1547922996593547, 0.11290675650919513, 0.1571104845319966, 0.12003080690682233, 0.1632662872308409, 0.12872917107362936, 0.20684284846921142, 0.49259507356281407, 0.476300969411497, 0.45750814352630276, 0.4874239757261246, 0.476937000317332, 0.4696398762243593, 0.49215343144324153, 0.482741617396773, 0.5406505644527952, 0.1415265382862364, 0.10440661680574881, 0.08975983118921371, 0.09661486899582328, 0.09573396213559138, 0.15041029874283174, 0.08827597385336317, 0.10565390534713626, 0.10621122885967904, 0.3292102926939533, 0.36891801610502073, 0.20783557861531676, 0.1583473420032696, 0.14789042383267348, 0.22458654719261173, 0.14296787922242638, 0.18886111906548586, 0.16979564756730325, 0.32250518266366546, 0.32118501940100597, 0.39336045409827447, 0.4057827537020653, 0.2894455578498609, 0.34760459524862297, 0.4394473524985497, 0.37195459050797286, 0.25742546845600833, 0.23757148213024704, 0.2506562583081119, 0.25929684782794193, 0.19920046055249108, 0.3896433138646779, 0.3153475500805396, 0.21336573714557938, 0.2237527294008108, 0.18532195645421135, 0.21489414791207306, 0.17617702449825157, 0.212865710303905, 0.18659669983393823, 0.20653020086666019, 0.21088069604508186, 0.2227900805064743, 0.18929102908647488, 0.20664445457488323, 0.2127902145792112, 0.1987929847199692, 0.19155162306010065, 0.20108492420642, 0.23483717267222293, 0.2133728779393853, 0.20826899300331947, 0.48375023880639223, 0.20240371225588105, 0.18665904253392018, 0.18583474644549658, 0.16486786865644898, 0.8730783298243457, 0.2004637509517848, 0.1623978748501289, 0.14310639224673471, 0.17627442657444148, 0.8501913887733992, 0.6127841311665909, 0.21055885203696334, 0.5781430640921932, 0.4839670414521039, 0.15326476236141062, 0.1492758758389935, 0.09456106753136684, 0.10465329172037585, 0.10389312293133424, 0.174329619284617, 0.17765309887652425, 0.19985926819807087, 0.17073734779983607, 0.18324293033493577, 0.17503482117728741, 0.1906436711967704, 0.17910038361194092, 0.1756336845581955, 0.08293246616808769, 0.0947182529284577, 0.08697611001627881, 0.07384161171377601, 0.08701288672756002, 0.0951682979205003, 0.089612698974327, 0.08664760597340959, 0.09662559966437201]}, "mutation_prompt": null}
{"id": "5a02db7a-b526-4128-b934-f5b5f2aab47a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.4 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced adaptive scaling factor in DE mutation for improved exploitation.", "configspace": "", "generation": 87, "fitness": 0.27790240704081165, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.7512091371082896, 0.7185013381752298, 0.7711063244585536, 0.7341820618972581, 0.7846344655481938, 0.7335030845160411, 0.7361907756458497, 0.7496323629450162, 0.7507519074739821, 0.3783676191564881, 0.40802068027501803, 0.42819793684650775, 0.4898257675689319, 0.5556898019713872, 0.4431154797162047, 0.5067370482770657, 0.4497117136513662, 0.4287592179109483, 0.09875472266199303, 0.10666673231554358, 0.12787105361438533, 0.21555967225148154, 0.0816248530972502, 0.1212577313676918, 0.14198268557445548, 0.12766084231441732, 0.14646013864245233, 0.10486936617949127, 0.11417996577262512, 0.13129454856535472, 0.11483998597997813, 0.11146683443942251, 0.11286064289724951, 0.1069684887613106, 0.10240591057797077, 0.12417905812362862, 0.9598543142631221, 0.9865817950209059, 0.9762782380350574, 0.9868965322065799, 0.9677037906001369, 0.9759110555173364, 0.976231394341968, 0.9860512606345844, 0.9819135446404172, 0.39688249454529145, 0.3852883380849802, 0.31100656603754173, 0.3051438081461344, 0.41798568822839033, 0.37265116416458255, 0.32589140660648397, 0.36153144595946496, 0.33463397899864034, 0.2295738654809295, 0.7116640727940082, 0.682602639615896, 0.7949726986255049, 0.27869480698932525, 0.5533163656522436, 0.338384867070758, 0.2322884564907528, 0.6617765425768929, 0.2281411046841798, 0.19167830269077435, 0.12926982981041168, 0.0981152998946292, 0.18902852560237315, 0.1680576184934831, 0.183359083960992, 0.23268328558364837, 0.18383831712331944, 0.12131935967842677, 0.1994081499245841, 0.1176720976920258, 0.18040199889097108, 0.2023538813009047, 0.2078745515648036, 0.10958165623825045, 0.20909673951447405, 0.20078176696781147, 9.999999999998899e-05, 0.031271896408158084, 0.045043995164377515, 9.999999999998899e-05, 0.003800198487135309, 9.999999999998899e-05, 0.03139593646714134, 9.999999999998899e-05, 0.0139993581267156, 0.09773074890521927, 0.06976419487866148, 0.08654723132146269, 0.06490149113035182, 0.09990829967404102, 0.11035281028924415, 0.0559642808957278, 0.0789814170538693, 0.086609410407127, 0.038989790702243066, 0.16547028128813457, 0.03002968855364363, 0.06353443690234639, 0.079194928584992, 0.06672060057539819, 0.04940498531303383, 0.06136287212674474, 0.057556766179570173, 0.26254311430795274, 0.036663310253507, 0.24959037843744436, 0.1365663863660811, 0.1526702311051502, 0.12184572987200759, 0.13447898425427307, 0.1141521430550494, 0.18112631891883935, 0.522175075447357, 0.5376885842126766, 0.4898699016070014, 0.47136401970038055, 0.4967373099531678, 0.4810926955173409, 0.48386123408736736, 0.5012955372123061, 0.5500121539025834, 0.10108837688863537, 0.10547685603114643, 0.12424983414024537, 0.12161623151001244, 0.11794322479098951, 0.1068335975383028, 0.1114849612175185, 0.10426822329434604, 0.09727732448899806, 0.1873621776698764, 0.16782228197554483, 0.15557963960023935, 0.21144476939956292, 0.17573690759689886, 0.2270876460928144, 0.14818527740587362, 0.15786045671088977, 0.14690327617938548, 0.34430289467556674, 0.17106597200842755, 0.34004321719629227, 0.4387226700890835, 0.2570566868831018, 0.26488287083487383, 0.33974834148796473, 0.37320324143186867, 0.3473606910604824, 0.2739232081710531, 0.2897335713594016, 0.21471851895328276, 0.2106765592563149, 0.27767437587622257, 0.31672348978269316, 0.28029535066931033, 0.3323457106848331, 0.25109972453679275, 0.20225313995809702, 0.17851746142320113, 0.19689878159884344, 0.20199820453509587, 0.2112352569887035, 0.20299205784615415, 0.18608322788892906, 0.18358993283603886, 0.2503043951622089, 0.20333609044343215, 0.2104106634854953, 0.21517901140575246, 0.1896187968323838, 0.19920718757527067, 0.21793674716358413, 0.20584958456055924, 0.22598958617326104, 0.17853955325824722, 0.18676020848571784, 0.1857861984017115, 0.1647709796531568, 0.8943653881950513, 0.200435034906551, 0.16242773237785946, 0.5552103280501273, 0.17513976126934194, 0.8848894791800603, 0.5781794464841689, 0.20955387604376974, 0.6008568676844575, 0.5938591049639477, 0.19095207159572236, 0.1424874155420488, 0.0945418514163694, 0.10465904900888057, 0.10389879661600265, 0.18299251068637856, 0.17274175381050771, 0.19099665392543963, 0.17403819921201535, 0.1739857909450171, 0.17856607115296597, 0.2107082304310708, 0.18014191427028614, 0.19982252057200944, 0.07924981872583081, 0.07776476028354806, 0.07447610771646118, 0.07651186489626449, 0.07765592690572753, 0.08600172515027349, 0.08275735500352743, 0.08066633144761959, 0.08124957431247726]}, "mutation_prompt": null}
{"id": "4fe89b59-3b18-4ff2-9879-aaf1a9df6859", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.5 + 0.4 * (1 - self.func_evals / self.budget)  # Slightly modified time-varying inertia weight\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced velocity update with a time-varying inertia weight for improved convergence.", "configspace": "", "generation": 88, "fitness": 0.22565132127494958, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.5912290516744229, 0.5429510173885372, 0.5025423262310899, 0.5732901571625321, 0.5493159772046337, 0.5751793291915162, 0.5398031647831916, 0.5557307915206534, 0.5393877571978197, 0.1798238237670141, 0.14260178009951685, 0.20252321297427056, 0.16338188414443955, 0.15230295297562046, 0.1350208532638908, 0.1596705807692993, 0.16954055739192553, 0.183084359855065, 0.10871573494265252, 0.09640661680721319, 0.08648350959040596, 0.10055673647273433, 0.08190202185873019, 0.11249777210907141, 0.09404577629803212, 0.10142631818033754, 0.09258433257793364, 0.08532253471731965, 0.09427343345527117, 0.09361929532583946, 0.1034910915190228, 0.0742836533354061, 0.08198644298210345, 0.10415078174376668, 0.08776843935433387, 0.09374906491667911, 0.9604137730728101, 0.9865544760387067, 0.9796916740569075, 0.9920415642727798, 0.9694229555751808, 0.9765789696641326, 0.9603323719577889, 0.986643561709299, 0.986947975291465, 0.30407381229227604, 0.23278783739732423, 0.2668431103890875, 0.267011467258745, 0.2851084711595212, 0.26251665503923594, 0.2599723971618304, 0.28226518029664327, 0.25247273648935564, 0.3296546711838261, 0.3789508326517622, 0.3847952894965284, 0.44045225261482446, 0.34383426349386625, 0.2444790542231171, 0.18949654108264835, 0.477670096019026, 0.23027507792966528, 0.18371225864453333, 0.12266498819377047, 0.15062429989655557, 0.10782578324035985, 0.21243631934629792, 0.17226797965654173, 0.1665232306342065, 0.198906700333071, 0.1588099434052408, 0.13800075577947224, 0.1633886812133638, 0.16121748589269447, 0.16232231291675048, 0.12319678705884474, 0.12402384311883086, 0.11368174532995623, 0.18978222310779014, 0.1727822656898601, 9.999999999998899e-05, 0.005731791852074508, 9.999999999998899e-05, 0.008325933916827122, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001339018685408977, 9.999999999998899e-05, 0.01601740323023837, 0.08117006948193906, 0.09204706273428531, 0.09765947267617936, 0.08102860526469102, 0.07422684801347601, 0.030398844729667363, 0.032140121930193666, 0.07597151380287215, 0.08417747990322022, 0.014388768119549589, 0.03972932985819588, 0.01985752839681032, 0.04079356348277119, 0.027930809474174922, 0.013439431228099985, 0.02966015740685668, 0.046516813130577206, 0.042305063016006006, 0.15631101638839717, 0.0538676133732604, 0.1116762724359287, 0.11633796525694562, 0.0915513807481424, 0.13235167308392393, 0.11703255020009418, 0.10807011078004358, 0.06370928725900216, 0.4485923000666032, 0.4076061671781078, 0.42654118318189727, 0.4520250532088893, 0.40402173880483705, 0.42089093313175485, 0.45481887017456013, 0.41717355816853396, 0.4564494339640299, 0.09839198141827932, 0.08858555368086218, 0.0971624980964787, 0.09679405915630834, 0.08391452428928847, 0.09873787153294211, 0.07395422425572451, 0.11001981604622235, 0.1012739685803139, 0.14561220178933076, 0.1868815224187974, 0.19597710143710545, 0.14177576159841787, 0.17507772996894655, 0.15873516282585642, 0.13223569433989635, 0.12095607190276914, 0.16502976576811146, 0.287305265920494, 0.19042893022028562, 0.2674467619336738, 0.29930512249735164, 0.3215630524619393, 0.2938834567279186, 0.21469366974331194, 0.3165659932920619, 0.3023119018482726, 0.1926078272002405, 0.2052094396879366, 0.21390878883587383, 0.213408072492563, 0.20746640439653252, 0.1991317546030894, 0.21919483308725585, 0.22445084099835844, 0.18569720049731264, 0.1877560715546026, 0.19046972459954903, 0.1938100780420181, 0.24033099161139548, 0.18771556045879423, 0.19470339319158014, 0.22198303675455666, 0.20705752396847643, 0.20504497545819367, 0.17606528261771748, 0.1885832183223325, 0.17985577683495246, 0.21143425328304133, 0.23429655553524087, 0.21503801961568192, 0.1845321923665003, 0.18983365984656264, 0.19576298748065102, 0.1856018242673182, 0.185788170805247, 0.16404373797593652, 0.7446966109634839, 0.1985558324594512, 0.15923913882167928, 0.14256931274968554, 0.170868152889755, 0.7637323474815979, 0.422705473893365, 0.20982373404149268, 0.38359172211022763, 0.4960340805375222, 0.1546197930849338, 0.14978902504185176, 0.09435248013593445, 0.34383746558468686, 0.16074688656908453, 0.18128631759799108, 0.16941301358841587, 0.18105874202449757, 0.18068141377738645, 0.20353722784691786, 0.1808379646096494, 0.19373283961359944, 0.17864160794714357, 0.17925474065212688, 0.09074049990369293, 0.08399100666246107, 0.0780822428544874, 0.06576030141156097, 0.08207764056256206, 0.07689566637049228, 0.07849984418780709, 0.08243226327276476, 0.09592272001933855]}, "mutation_prompt": null}
{"id": "d4034d81-939b-4404-b436-3666d54cbf17", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.9 - (0.2 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improved exploration by adjusting the DE mutation formula with an additional weighted term.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.7566203348768141, 0.7608546750363588, 0.7519934712261429, 0.7532686947892656, 0.7665615431075251, 0.6958116354160906, 0.7666096226536291, 0.703553186098712, 0.7032397325353883, 0.48187593413258767, 0.46779985253876843, 0.4899828507068391, 0.4778355086306588, 0.5026300141661006, 0.4765108208632016, 0.4552232472956179, 0.47997420016617076, 0.5167830064387501, 0.11460002590769913, 0.11839797108098082, 0.126676574435299, 0.10850994450944584, 0.114747502616667, 0.12571232844296976, 0.11334519264875287, 0.1275093023703051, 0.12740238013930427, 0.11403374967625513, 0.11706921423423189, 0.10596679142233112, 0.10014770730759959, 0.0962543118428244, 0.1067213768062586, 0.10020936236602795, 0.09935882735757173, 0.09083255439324078, 0.9598516880956046, 0.9865817950209059, 0.9762795598659451, 0.9868962872351048, 0.9677014386220723, 0.9759110452446589, 0.9762313041334576, 0.9860511165050182, 0.9819095591692814, 0.37367343145469, 0.31834819510385226, 0.29447167909075533, 0.32204842884269824, 0.3244167570219445, 0.35207988575822835, 0.36976143456978183, 0.3743072473707384, 0.3645269461771422, 0.490737980553975, 0.3457857859507998, 0.5679787337543325, 0.7245980993519601, 0.35613599263705353, 0.8369140443283872, 0.23560913886793444, 0.22922156159577567, 0.870303155636157, 0.2506862736276163, 0.16086675865945144, 0.12614172146818914, 0.10027366451840625, 0.18951706535389645, 0.20320764791697754, 0.18697449197546612, 0.301047989290536, 0.1775352941737932, 0.12313242150023085, 0.18713327923734946, 0.13170491293284026, 0.1639428899840878, 0.20612450462214715, 0.20270280227412818, 0.10288990741814663, 0.22085615262664238, 0.21375868447808488, 0.01375125683377465, 0.031991288837665555, 0.05074480874056719, 9.999999999998899e-05, 0.008979186484652568, 9.999999999998899e-05, 0.024482562877482628, 9.999999999998899e-05, 0.008283495939916619, 0.08386549309755631, 0.06244903732840701, 0.0646932479206469, 0.027874348783105574, 0.04361602072826065, 0.08272455038843074, 0.04338093959414746, 0.09868799863701372, 0.06618063113113548, 0.04009474380540434, 0.1894747269425061, 0.027586132856966317, 0.05487828645495907, 0.08143025009749438, 0.05867521312128032, 0.04868820564114029, 0.06376035925001355, 0.07742472230046538, 0.19055876910308733, 0.08965747839073424, 0.1547922996593547, 0.11290675650919513, 0.1571104845319966, 0.12003080690682233, 0.1632662872308409, 0.12872917107362936, 0.20684284846921142, 0.49259507356281407, 0.476300969411497, 0.45750814352630276, 0.4874239757261246, 0.476937000317332, 0.4696398762243593, 0.49215343144324153, 0.482741617396773, 0.5406505644527952, 0.1415265382862364, 0.10440661680574881, 0.08975983118921371, 0.09661486899582328, 0.09573396213559138, 0.15041029874283174, 0.08827597385336317, 0.10565390534713626, 0.10621122885967904, 0.3292102926939533, 0.36891801610502073, 0.20783557861531676, 0.1583473420032696, 0.14789042383267348, 0.22458654719261173, 0.14296787922242638, 0.18886111906548586, 0.16979564756730325, 0.32250518266366546, 0.32118501940100597, 0.39336045409827447, 0.4057827537020653, 0.2894455578498609, 0.34760459524862297, 0.4394473524985497, 0.37195459050797286, 0.25742546845600833, 0.23757148213024704, 0.2506562583081119, 0.25929684782794193, 0.19920046055249108, 0.3896433138646779, 0.3153475500805396, 0.21336573714557938, 0.2237527294008108, 0.18532195645421135, 0.21489414791207306, 0.17617702449825157, 0.212865710303905, 0.18659669983393823, 0.20653020086666019, 0.21088069604508186, 0.2227900805064743, 0.18929102908647488, 0.20664445457488323, 0.2127902145792112, 0.1987929847199692, 0.19155162306010065, 0.20108492420642, 0.23483717267222293, 0.2133728779393853, 0.20826899300331947, 0.48375023880639223, 0.20240371225588105, 0.18665904253392018, 0.18583474644549658, 0.16486786865644898, 0.8730783298243457, 0.2004637509517848, 0.1623978748501289, 0.14310639224673471, 0.17627442657444148, 0.8501913887733992, 0.6127841311665909, 0.21055885203696334, 0.5781430640921932, 0.4839670414521039, 0.15326476236141062, 0.1492758758389935, 0.09456106753136684, 0.10465329172037585, 0.10389312293133424, 0.174329619284617, 0.17765309887652425, 0.19985926819807087, 0.17073734779983607, 0.18324293033493577, 0.17503482117728741, 0.1906436711967704, 0.17910038361194092, 0.1756336845581955, 0.08293246616808769, 0.0947182529284577, 0.08697611001627881, 0.07384161171377601, 0.08701288672756002, 0.0951682979205003, 0.089612698974327, 0.08664760597340959, 0.09662559966437201]}, "mutation_prompt": null}
{"id": "44e1580a-6fb2-445d-958c-54cea12f7dbc", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.92 - (0.3 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Further improved convergence by slightly refining the DE crossover strategy.", "configspace": "", "generation": 90, "fitness": 0.27802601560299045, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "ca441aff-4cb9-4485-9905-c69ea392d685", "metadata": {"aucs": [0.727936810672835, 0.7045908107441243, 0.7633986834723651, 0.7687012670993962, 0.7338157455592726, 0.7244829395228654, 0.7353877651567593, 0.7000333226756541, 0.7718060641181875, 0.4650068391556762, 0.4667979999209163, 0.49263171136562145, 0.4538066867825441, 0.4710061409352324, 0.4455023234598374, 0.37928823793230315, 0.42522598356399044, 0.48622523034124887, 0.10089390026929757, 0.10731509343334278, 0.11921459233954534, 0.11443667656049916, 0.09271915495751815, 0.14014381987738767, 0.1319484317550772, 0.14889317136785207, 0.46129173151930436, 0.1281790558483119, 0.09709414626121726, 0.10616811130012505, 0.06883634044740627, 0.11358559062315765, 0.13108129977548455, 0.10372755940981604, 0.1100012313129013, 0.10338339522982587, 0.9534411733629303, 0.986539637967206, 0.9756941178273625, 0.9868962872351048, 0.968218398914542, 0.9759110452446589, 0.9762313041334576, 0.9860511165050182, 0.9819095591692814, 0.34065005554739525, 0.4447020286343998, 0.3738284372367666, 0.36893261526674714, 0.3491027126726599, 0.3465517755505769, 0.34449145513962154, 0.3695021459179465, 0.3584072908643776, 0.3706739674043873, 0.22867239775906134, 0.5231408650742071, 0.7763811617316749, 0.6991345181951918, 0.6593540180755704, 0.31082506681390465, 0.7644494745966328, 0.23875518151713737, 0.28186101874152014, 0.12287015027368486, 0.30443825689079895, 0.11355922313357592, 0.15901782857028124, 0.182745068537997, 0.1936665999062509, 0.22085970764474827, 0.20154371985585684, 0.12749275408508798, 0.15167767924727815, 0.12319787336109689, 0.17574222356640856, 0.1916669957375916, 0.18848659332085538, 0.18936976546709816, 0.20736698908914475, 0.2184500430388533, 0.003025080858598317, 0.006788750980770808, 0.024372302625662257, 0.007207681010873657, 0.011670440068886845, 9.999999999998899e-05, 0.0003620758999035578, 9.999999999998899e-05, 0.017791424178353, 0.0856614204705356, 0.06231091892882845, 0.09161095932856911, 0.05004013390060191, 0.0181574228660647, 0.058096689014388025, 0.07811700592890136, 0.12197015776713438, 0.06902112997540244, 0.02845817267160078, 0.13583357358776937, 0.0320340618050573, 0.06424203340992773, 0.09712635889417365, 0.07312302934732229, 0.049256237674765946, 0.16605764462978678, 0.08437396954126763, 0.21809061524596063, 0.06818106985947436, 0.21822649639268998, 0.129446426490335, 0.154929382846145, 0.12062510010107963, 0.09228613132806984, 0.15018766758483904, 0.14838122123704012, 0.47047199687612407, 0.49173981693961644, 0.5070055164567518, 0.4777369206695693, 0.500255462731036, 0.5219801087676035, 0.5158898856880135, 0.49288340596939695, 0.474604133265944, 0.09995554774151039, 0.11578508809813448, 0.09699231638726902, 0.11502706714751365, 0.07073660551354155, 0.12039927591066713, 0.11774383322390569, 0.10154599607583148, 0.07965603553545275, 0.17113115482768948, 0.23855202363709804, 0.1883776634784936, 0.15983579060788344, 0.19575294123292108, 0.15523504420848966, 0.1320854777276267, 0.1846429209069872, 0.18478545054639794, 0.3144040901052606, 0.2862527258585057, 0.38699566558046894, 0.39524109099728544, 0.32816448908139495, 0.34759868623277357, 0.3134059207966403, 0.3766627737935401, 0.3365215807940719, 0.2645612642276529, 0.23689728206605354, 0.22476333199637877, 0.22604707418687797, 0.3010880321665328, 0.27225465412389316, 0.24672581499692947, 0.24543648725508815, 0.2360823179726187, 0.21849816695534774, 0.18827349001725702, 0.20652601606080945, 0.18916087241022173, 0.20646185036508147, 0.216942799728284, 0.2143333537779334, 0.19852533196575928, 0.19783017610929843, 0.23081850016204464, 0.20238794624464596, 0.2948471433610703, 0.20650406948674505, 0.21511163967219504, 0.2198663276456293, 0.1955312281254905, 0.22166637101471853, 0.3250179465442331, 0.18720082076283828, 0.18611681288961524, 0.16495014048756163, 0.88921147532475, 0.20030995964190468, 0.16241654036587883, 0.1427298777402639, 0.1755387386998425, 0.8956686911287828, 0.545389232845816, 0.21057817441753135, 0.4750169436269178, 0.703045319908542, 0.15545414628448795, 0.1608754285730316, 0.0946828803896691, 0.10465545940622756, 0.10388219059831627, 0.19064968844583496, 0.18004185636059578, 0.1726900974246771, 0.1746457822941968, 0.18866987853077688, 0.1878358833988425, 0.18378499766637246, 0.18235368436971555, 0.17213886174904824, 0.08813408068358908, 0.0787260193115118, 0.09360081443085055, 0.07384817802357335, 0.07965477178805447, 0.08365058381204848, 0.08549587502751965, 0.08350635399727724, 0.08397418774564436]}, "mutation_prompt": null}
{"id": "bd5e0b3a-4bb3-4486-ae24-ecadf1e9bcfa", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.5 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Added weighted term\n\n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.92 - (0.3 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Further improved convergence by slightly refining the DE crossover strategy.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44e1580a-6fb2-445d-958c-54cea12f7dbc", "metadata": {"aucs": [0.727936810672835, 0.7045908107441243, 0.7633986834723651, 0.7687012670993962, 0.7338157455592726, 0.7244829395228654, 0.7353877651567593, 0.7000333226756541, 0.7718060641181875, 0.4650068391556762, 0.4667979999209163, 0.49263171136562145, 0.4538066867825441, 0.4710061409352324, 0.4455023234598374, 0.37928823793230315, 0.42522598356399044, 0.48622523034124887, 0.10089390026929757, 0.10731509343334278, 0.11921459233954534, 0.11443667656049916, 0.09271915495751815, 0.14014381987738767, 0.1319484317550772, 0.14889317136785207, 0.46129173151930436, 0.1281790558483119, 0.09709414626121726, 0.10616811130012505, 0.06883634044740627, 0.11358559062315765, 0.13108129977548455, 0.10372755940981604, 0.1100012313129013, 0.10338339522982587, 0.9534411733629303, 0.986539637967206, 0.9756941178273625, 0.9868962872351048, 0.968218398914542, 0.9759110452446589, 0.9762313041334576, 0.9860511165050182, 0.9819095591692814, 0.34065005554739525, 0.4447020286343998, 0.3738284372367666, 0.36893261526674714, 0.3491027126726599, 0.3465517755505769, 0.34449145513962154, 0.3695021459179465, 0.3584072908643776, 0.3706739674043873, 0.22867239775906134, 0.5231408650742071, 0.7763811617316749, 0.6991345181951918, 0.6593540180755704, 0.31082506681390465, 0.7644494745966328, 0.23875518151713737, 0.28186101874152014, 0.12287015027368486, 0.30443825689079895, 0.11355922313357592, 0.15901782857028124, 0.182745068537997, 0.1936665999062509, 0.22085970764474827, 0.20154371985585684, 0.12749275408508798, 0.15167767924727815, 0.12319787336109689, 0.17574222356640856, 0.1916669957375916, 0.18848659332085538, 0.18936976546709816, 0.20736698908914475, 0.2184500430388533, 0.003025080858598317, 0.006788750980770808, 0.024372302625662257, 0.007207681010873657, 0.011670440068886845, 9.999999999998899e-05, 0.0003620758999035578, 9.999999999998899e-05, 0.017791424178353, 0.0856614204705356, 0.06231091892882845, 0.09161095932856911, 0.05004013390060191, 0.0181574228660647, 0.058096689014388025, 0.07811700592890136, 0.12197015776713438, 0.06902112997540244, 0.02845817267160078, 0.13583357358776937, 0.0320340618050573, 0.06424203340992773, 0.09712635889417365, 0.07312302934732229, 0.049256237674765946, 0.16605764462978678, 0.08437396954126763, 0.21809061524596063, 0.06818106985947436, 0.21822649639268998, 0.129446426490335, 0.154929382846145, 0.12062510010107963, 0.09228613132806984, 0.15018766758483904, 0.14838122123704012, 0.47047199687612407, 0.49173981693961644, 0.5070055164567518, 0.4777369206695693, 0.500255462731036, 0.5219801087676035, 0.5158898856880135, 0.49288340596939695, 0.474604133265944, 0.09995554774151039, 0.11578508809813448, 0.09699231638726902, 0.11502706714751365, 0.07073660551354155, 0.12039927591066713, 0.11774383322390569, 0.10154599607583148, 0.07965603553545275, 0.17113115482768948, 0.23855202363709804, 0.1883776634784936, 0.15983579060788344, 0.19575294123292108, 0.15523504420848966, 0.1320854777276267, 0.1846429209069872, 0.18478545054639794, 0.3144040901052606, 0.2862527258585057, 0.38699566558046894, 0.39524109099728544, 0.32816448908139495, 0.34759868623277357, 0.3134059207966403, 0.3766627737935401, 0.3365215807940719, 0.2645612642276529, 0.23689728206605354, 0.22476333199637877, 0.22604707418687797, 0.3010880321665328, 0.27225465412389316, 0.24672581499692947, 0.24543648725508815, 0.2360823179726187, 0.21849816695534774, 0.18827349001725702, 0.20652601606080945, 0.18916087241022173, 0.20646185036508147, 0.216942799728284, 0.2143333537779334, 0.19852533196575928, 0.19783017610929843, 0.23081850016204464, 0.20238794624464596, 0.2948471433610703, 0.20650406948674505, 0.21511163967219504, 0.2198663276456293, 0.1955312281254905, 0.22166637101471853, 0.3250179465442331, 0.18720082076283828, 0.18611681288961524, 0.16495014048756163, 0.88921147532475, 0.20030995964190468, 0.16241654036587883, 0.1427298777402639, 0.1755387386998425, 0.8956686911287828, 0.545389232845816, 0.21057817441753135, 0.4750169436269178, 0.703045319908542, 0.15545414628448795, 0.1608754285730316, 0.0946828803896691, 0.10465545940622756, 0.10388219059831627, 0.19064968844583496, 0.18004185636059578, 0.1726900974246771, 0.1746457822941968, 0.18866987853077688, 0.1878358833988425, 0.18378499766637246, 0.18235368436971555, 0.17213886174904824, 0.08813408068358908, 0.0787260193115118, 0.09360081443085055, 0.07384817802357335, 0.07965477178805447, 0.08365058381204848, 0.08549587502751965, 0.08350635399727724, 0.08397418774564436]}, "mutation_prompt": null}
{"id": "b1afe26a-7290-45f7-984d-dc0e87776752", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.55 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Adjusted weight\n                \n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.92 - (0.3 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Slightly refined DE mutation process by adjusting the weighting term to enhance convergence.", "configspace": "", "generation": 92, "fitness": 0.28572817632232983, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "44e1580a-6fb2-445d-958c-54cea12f7dbc", "metadata": {"aucs": [0.7727920888713514, 0.7545544561631119, 0.7374571784573659, 0.8156191697091104, 0.7824641649324803, 0.749221464722416, 0.7491728465227201, 0.78032960298951, 0.7913410315500811, 0.4040004079639311, 0.49620953509348675, 0.4555926114909974, 0.42371118716236766, 0.5126162644731491, 0.4139998635232153, 0.42791451568523553, 0.4475773974694882, 0.49684222649153376, 0.11747772319468563, 0.11320134542167837, 0.14376158503238035, 0.10388417544484096, 0.09963503607642377, 0.08837017778662071, 0.11948032771428696, 0.13953043200737558, 0.10503924092233974, 0.1108721576905185, 0.11755116233659413, 0.1030417543786516, 0.11020705569969846, 0.1254669990141074, 0.08628436217658364, 0.10145736480332268, 0.10607611085203916, 0.08777792113581184, 0.9517915808064267, 0.9865343830466096, 0.9756704210800695, 0.9875536174648624, 0.9693873764188247, 0.9759117723766242, 0.9762388584232526, 0.9860502422522699, 0.984114386469557, 0.4387805508380086, 0.3393799622081164, 0.3743200009458699, 0.30334703929972784, 0.33574223917601254, 0.3386748103552738, 0.3921005618864588, 0.35479900040185686, 0.41225975797383096, 0.22845091419948926, 0.5708167934748845, 0.41147595626223876, 0.6344702391801156, 0.6853159688812385, 0.27299351129697047, 0.5708432100216378, 0.21313876662349351, 0.8112662652512586, 0.21759827422246414, 0.23548870351710394, 0.4038600646689716, 0.19636721596750817, 0.21697529079412503, 0.1771762263031187, 0.22733759033066003, 0.1862490402937751, 0.17481052256096952, 0.12602391082859, 0.13200120456466136, 0.12094109705007217, 0.17949754605169477, 0.19291219653069225, 0.19882605729085756, 0.20412109570262005, 0.20674338828593508, 0.21265077203793925, 0.019251684297015292, 0.060375455131235545, 0.0827063568039148, 0.013132721699932293, 0.03084756360445795, 9.999999999998899e-05, 0.03485798542597618, 9.999999999998899e-05, 0.011353123860699976, 0.07408154229241115, 0.06724412251411171, 0.12729610089886623, 0.07409713740296897, 0.02402703716633736, 0.06240053899296072, 0.10548884436869443, 0.039208234219717086, 0.12164900573811288, 0.03982576243511049, 0.13861219097389077, 0.04872549248792113, 0.06283182213718175, 0.1584106756393947, 0.17201864980231163, 0.050715087921641366, 0.1815929727479244, 0.09781541559203599, 0.25090003111323145, 0.032424520578142824, 0.2067168584871606, 0.10829183195704806, 0.21639527747790377, 0.18395902502018946, 0.11573553883508447, 0.1319827505538106, 0.09831616423135148, 0.4994293048313616, 0.46955891935393046, 0.49854426767515236, 0.4998113966055695, 0.5659413642233592, 0.4466750262819157, 0.5267542116002452, 0.5209528351443069, 0.5257569943647379, 0.127702072556777, 0.11746047921475888, 0.10850667298616556, 0.10332108946598761, 0.11480119706059211, 0.10777773149058634, 0.09713452995495975, 0.12039364968392297, 0.09846813505959506, 0.14335624421751958, 0.3546338408734948, 0.16224853588991484, 0.15972770485568177, 0.17812225933154224, 0.1719875911258163, 0.14549801720069666, 0.18951592976605924, 0.2245105021282907, 0.32544598437970806, 0.286761941902835, 0.3013826152556981, 0.3434079063753527, 0.3986537027845648, 0.38686684747330247, 0.3970962264216319, 0.39874843185921904, 0.3474040898099232, 0.22649697587533257, 0.22302316517989773, 0.2636955590824661, 0.2476861216402778, 0.22963063110782933, 0.2787021753609532, 0.27741615006472053, 0.2684613439770155, 0.22647330849806124, 0.20792832425347418, 0.1821875692817171, 0.21490833470089143, 0.19643495736562955, 0.18136271817797556, 0.19183141890738553, 0.20694000100441834, 0.19123864314501648, 0.19804117872074833, 0.2145834089974512, 0.24344783900378075, 0.18255817667589413, 0.20268383506892884, 0.4217408258762023, 0.22346298735494652, 0.20086490723091632, 0.24432517483451355, 0.2380573188176658, 0.18714479863212652, 0.16464363800331827, 0.16458547307913773, 0.8959923947991435, 0.20050285652646527, 0.16245286293386707, 0.14289797709629715, 0.19484738298110482, 0.8262292712666667, 0.7424951844842441, 0.21036005391986412, 0.6171256316886609, 0.631340540157374, 0.15655680431651287, 0.15441231138421985, 0.09462143256781497, 0.6615825039003906, 0.16652306341585932, 0.17361836538072417, 0.1924564821440019, 0.17102875160121234, 0.18320684506054485, 0.18864799794666198, 0.17332514487982442, 0.1836001039262979, 0.18254122357939473, 0.18057973635477742, 0.08118955677570416, 0.07313909393323592, 0.09146654558161371, 0.09010668427303115, 0.08066262581463524, 0.07876988745491431, 0.08063930716243228, 0.08575251535660844, 0.07867288685027851]}, "mutation_prompt": null}
{"id": "2d520e5d-318a-40f4-a80f-ce205fb4132a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = self.chaotic_initialization(self.population_size, self.dim)\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def chaotic_initialization(self, population_size, dim):\n        chaotic_sequence = np.zeros((population_size, dim))\n        x = 0.7  # Logistic map initial value\n        for i in range(population_size):\n            for j in range(dim):\n                x = 4.0 * x * (1 - x)  # Logistic map equation\n                chaotic_sequence[i, j] = self.lower_bound + (self.upper_bound - self.lower_bound) * x\n        return chaotic_sequence\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.55 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Adjusted weight\n                \n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.92 - (0.3 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhance exploration by introducing chaotic initialization for particles.", "configspace": "", "generation": 93, "fitness": 0.26833245441286757, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "b1afe26a-7290-45f7-984d-dc0e87776752", "metadata": {"aucs": [0.7148116725805795, 0.7651419754781529, 0.7555477689183239, 0.7902105964618054, 0.7614168448151333, 0.7740481378538141, 0.7205556168560416, 0.7556237722470005, 0.7537240835499956, 0.5258193733729084, 0.4527789209266505, 0.5648090625958855, 0.4878586648317049, 0.48843344458074556, 0.5039421830752587, 0.38468788625297423, 0.4564584084070501, 0.45340458274643214, 0.1146262993807744, 0.16054270956777017, 0.12298864521576214, 0.09097363545571913, 0.1013703982239944, 0.10666281824602397, 0.09873904586669502, 0.12976618301695486, 0.12884746119866708, 0.1444500243778204, 0.14927677781216975, 0.09251647016947939, 0.11836311356813878, 0.13140229891818367, 0.05475292017745592, 0.12102242361097892, 0.12250740612701683, 0.11068397474849567, 0.9757452905564662, 0.9707619799403984, 0.9504491643414362, 0.9562411759807984, 0.9694308660941865, 0.9714142901813525, 0.9699124584917984, 0.9838830683332872, 0.9710197575660305, 0.3646459536418287, 0.3346504528182659, 0.36767290423350063, 0.3714895210049004, 0.3841167924477782, 0.3419540914398407, 0.3324883773647136, 0.31444996294697236, 0.3742029233291685, 0.748307792010434, 0.524362678686734, 0.21992773360478413, 0.7013845061753832, 0.27885983948035664, 0.8660441030752918, 0.5170027331942921, 0.23389057940072333, 0.28479172558142485, 0.12396584702639679, 0.11560505760195083, 0.12298229331285371, 0.10327930980475097, 0.10144396979078574, 0.144537802983437, 0.17965563339023594, 0.12609135326570375, 0.274635719921297, 0.20065102039660487, 0.19273162306110758, 0.16578842081299516, 0.1568587376805186, 0.18668286266493828, 0.15681495338471596, 0.20423502208703026, 0.19489527038467191, 0.18159927735292336, 9.999999999998899e-05, 0.04371151518197636, 0.03623591782469304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05271097447063566, 0.05372576938756868, 0.08640163952695967, 0.11430011307621246, 0.09595130003192953, 0.16212140492853233, 0.11778062813649426, 0.12161336325216343, 0.11431357300991407, 0.02983064384439671, 0.05693757364548768, 0.0936774689151414, 0.09881185684604477, 0.09381767273541375, 0.07692965696307652, 0.15393763146571304, 0.13815821184272714, 0.15377744422196615, 0.06253190167554734, 0.07469491938380945, 0.1092139193524645, 0.16406148947393162, 0.13639583885799655, 0.11945560705191893, 0.13369464541169052, 0.09840002787693936, 0.13971329266960786, 0.5428139913661532, 0.48132141294730546, 0.474342399155373, 0.47909792338942414, 0.49483967293478015, 0.48396391190276267, 0.46155806045763825, 0.4836594641328953, 0.5442942833071553, 0.1271672956242984, 0.10212979667669242, 0.09639201700090394, 0.07156224644945564, 0.11245474068074002, 0.1469857406374665, 0.11098604078577823, 0.10224148569142111, 0.11365405493133818, 0.20145915306376738, 0.1744816680226421, 0.2100078908097731, 0.1684359205717626, 0.14836775788984646, 0.16139049547904638, 0.17001815023756206, 0.16355475906546613, 0.16293979625455646, 0.26458777860294724, 0.3800093975876889, 0.35464052192760975, 0.36827652050558213, 0.3731170125291211, 0.3581113764576883, 0.3508557040287378, 0.48185784805118814, 0.47787148599501905, 0.27862395943324103, 0.24146771136199474, 0.2866193390026901, 0.21229372235615063, 0.25911251990388395, 0.26149292007433367, 0.2859915859451264, 0.30072676683522714, 0.2025525063994772, 0.1820992715636527, 0.20588872931186097, 0.2061419019341847, 0.1932336345043587, 0.1820386004126211, 0.18489699335828214, 0.19799843358429292, 0.19266529566745216, 0.19413493678978977, 0.2018293004782329, 0.22814299026052465, 0.20935490773369103, 0.20084587252875863, 0.22744094966700923, 0.19457275249640038, 0.2025799215385986, 0.20588400609760338, 0.23357795226434663, 0.17817406916972467, 0.18764727703165818, 0.18904175270079204, 0.17235340255755238, 0.16669639681946613, 0.7995729188912367, 0.17263940458635785, 0.17238787730214644, 0.17294636698508437, 0.16893518512645733, 0.20814622620722723, 0.15576811859139705, 0.1680008901907566, 0.16935364863113778, 0.1692121044857191, 0.15782676498771397, 0.15722770577795986, 0.15718348646790548, 0.18851506945499874, 0.18318888972640013, 0.18736784161846676, 0.18174176672012798, 0.21855889210196833, 0.1992157242326914, 0.18344567168868142, 0.17329986404718378, 0.20942214203623566, 0.07285067788748989, 0.08138284190351008, 0.08656984998475037, 0.08661269341034927, 0.07815417367821864, 0.08232472378880362, 0.09598567070816721, 0.09446332751188913, 0.10801498037522195]}, "mutation_prompt": null}
{"id": "21ffb9a6-d271-42db-9b63-9073e7e2135d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.55 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Adjusted weight\n                \n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.92 - (0.3 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Slightly refined DE mutation process by adjusting the weighting term to enhance convergence.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b1afe26a-7290-45f7-984d-dc0e87776752", "metadata": {"aucs": [0.7727920888713514, 0.7545544561631119, 0.7374571784573659, 0.8156191697091104, 0.7824641649324803, 0.749221464722416, 0.7491728465227201, 0.78032960298951, 0.7913410315500811, 0.4040004079639311, 0.49620953509348675, 0.4555926114909974, 0.42371118716236766, 0.5126162644731491, 0.4139998635232153, 0.42791451568523553, 0.4475773974694882, 0.49684222649153376, 0.11747772319468563, 0.11320134542167837, 0.14376158503238035, 0.10388417544484096, 0.09963503607642377, 0.08837017778662071, 0.11948032771428696, 0.13953043200737558, 0.10503924092233974, 0.1108721576905185, 0.11755116233659413, 0.1030417543786516, 0.11020705569969846, 0.1254669990141074, 0.08628436217658364, 0.10145736480332268, 0.10607611085203916, 0.08777792113581184, 0.9517915808064267, 0.9865343830466096, 0.9756704210800695, 0.9875536174648624, 0.9693873764188247, 0.9759117723766242, 0.9762388584232526, 0.9860502422522699, 0.984114386469557, 0.4387805508380086, 0.3393799622081164, 0.3743200009458699, 0.30334703929972784, 0.33574223917601254, 0.3386748103552738, 0.3921005618864588, 0.35479900040185686, 0.41225975797383096, 0.22845091419948926, 0.5708167934748845, 0.41147595626223876, 0.6344702391801156, 0.6853159688812385, 0.27299351129697047, 0.5708432100216378, 0.21313876662349351, 0.8112662652512586, 0.21759827422246414, 0.23548870351710394, 0.4038600646689716, 0.19636721596750817, 0.21697529079412503, 0.1771762263031187, 0.22733759033066003, 0.1862490402937751, 0.17481052256096952, 0.12602391082859, 0.13200120456466136, 0.12094109705007217, 0.17949754605169477, 0.19291219653069225, 0.19882605729085756, 0.20412109570262005, 0.20674338828593508, 0.21265077203793925, 0.019251684297015292, 0.060375455131235545, 0.0827063568039148, 0.013132721699932293, 0.03084756360445795, 9.999999999998899e-05, 0.03485798542597618, 9.999999999998899e-05, 0.011353123860699976, 0.07408154229241115, 0.06724412251411171, 0.12729610089886623, 0.07409713740296897, 0.02402703716633736, 0.06240053899296072, 0.10548884436869443, 0.039208234219717086, 0.12164900573811288, 0.03982576243511049, 0.13861219097389077, 0.04872549248792113, 0.06283182213718175, 0.1584106756393947, 0.17201864980231163, 0.050715087921641366, 0.1815929727479244, 0.09781541559203599, 0.25090003111323145, 0.032424520578142824, 0.2067168584871606, 0.10829183195704806, 0.21639527747790377, 0.18395902502018946, 0.11573553883508447, 0.1319827505538106, 0.09831616423135148, 0.4994293048313616, 0.46955891935393046, 0.49854426767515236, 0.4998113966055695, 0.5659413642233592, 0.4466750262819157, 0.5267542116002452, 0.5209528351443069, 0.5257569943647379, 0.127702072556777, 0.11746047921475888, 0.10850667298616556, 0.10332108946598761, 0.11480119706059211, 0.10777773149058634, 0.09713452995495975, 0.12039364968392297, 0.09846813505959506, 0.14335624421751958, 0.3546338408734948, 0.16224853588991484, 0.15972770485568177, 0.17812225933154224, 0.1719875911258163, 0.14549801720069666, 0.18951592976605924, 0.2245105021282907, 0.32544598437970806, 0.286761941902835, 0.3013826152556981, 0.3434079063753527, 0.3986537027845648, 0.38686684747330247, 0.3970962264216319, 0.39874843185921904, 0.3474040898099232, 0.22649697587533257, 0.22302316517989773, 0.2636955590824661, 0.2476861216402778, 0.22963063110782933, 0.2787021753609532, 0.27741615006472053, 0.2684613439770155, 0.22647330849806124, 0.20792832425347418, 0.1821875692817171, 0.21490833470089143, 0.19643495736562955, 0.18136271817797556, 0.19183141890738553, 0.20694000100441834, 0.19123864314501648, 0.19804117872074833, 0.2145834089974512, 0.24344783900378075, 0.18255817667589413, 0.20268383506892884, 0.4217408258762023, 0.22346298735494652, 0.20086490723091632, 0.24432517483451355, 0.2380573188176658, 0.18714479863212652, 0.16464363800331827, 0.16458547307913773, 0.8959923947991435, 0.20050285652646527, 0.16245286293386707, 0.14289797709629715, 0.19484738298110482, 0.8262292712666667, 0.7424951844842441, 0.21036005391986412, 0.6171256316886609, 0.631340540157374, 0.15655680431651287, 0.15441231138421985, 0.09462143256781497, 0.6615825039003906, 0.16652306341585932, 0.17361836538072417, 0.1924564821440019, 0.17102875160121234, 0.18320684506054485, 0.18864799794666198, 0.17332514487982442, 0.1836001039262979, 0.18254122357939473, 0.18057973635477742, 0.08118955677570416, 0.07313909393323592, 0.09146654558161371, 0.09010668427303115, 0.08066262581463524, 0.07876988745491431, 0.08063930716243228, 0.08575251535660844, 0.07867288685027851]}, "mutation_prompt": null}
{"id": "c8c54368-15a2-440c-ab79-53d70ddc75f1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.55 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Adjusted weight\n                \n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.92 - (0.3 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.85 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced the DE scaling factor's responsiveness to convergence by modifying its dynamic adjustment formula.", "configspace": "", "generation": 95, "fitness": 0.2707339794082361, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "b1afe26a-7290-45f7-984d-dc0e87776752", "metadata": {"aucs": [0.7769844276502361, 0.7037099389435559, 0.7607399586091288, 0.7137708356716188, 0.7195409155158676, 0.7417441336221324, 0.7337739373483101, 0.7557903012854592, 0.7280651484578401, 0.5070650026085942, 0.5275505340475197, 0.4608666396257908, 0.4628824826108363, 0.4971343670340821, 0.5142489978410014, 0.4115611638059953, 0.46918553678658503, 0.38646052291534405, 0.11837655406809466, 0.13236685766373013, 0.13132799692979902, 0.12719246883342783, 0.13105805589599206, 0.12247925421722572, 0.13112511779317648, 0.09400607361256841, 0.1328744930436072, 0.14528331936390382, 0.1061120458827488, 0.09893892255932879, 0.09041247524247153, 0.11476331039421328, 0.0942098236506006, 0.12901509604421768, 0.12481055820641684, 0.10285982477859268, 0.9540879587271205, 0.9865372590610058, 0.9756478525069934, 0.9874520971422142, 0.9678438586924484, 0.9760482668801747, 0.9762502694251756, 0.9804165026926267, 0.9841163423897675, 0.327276895576581, 0.3413800897903787, 0.3271692254158234, 0.36806789275573304, 0.3626918696982363, 0.4372097438600383, 0.31261169594151006, 0.3608643764551098, 0.3271346611253523, 0.5386704855938813, 0.3353864259566157, 0.36858675359965143, 0.7079495645756038, 0.2724222889068384, 0.7454678734832914, 0.38690843163475674, 0.38875170948319315, 0.2379258268029778, 0.2301029410451797, 0.31286471468020305, 0.29032194200773664, 0.15630048117912432, 0.16370174034115115, 0.1749277217096018, 0.17506480943100344, 0.17827816979533195, 0.1822476621853546, 0.2046945901957411, 0.17382734973659975, 0.12129452829185683, 0.17492226380747355, 0.19857117384016643, 0.13050727381476046, 0.2364484404715016, 0.1958161192548188, 0.1904930658403562, 0.0006953565764328262, 0.059462431618214184, 0.00268559671354196, 9.999999999998899e-05, 0.009019956627023706, 9.999999999998899e-05, 0.0292794994178166, 9.999999999998899e-05, 0.019977629929231244, 0.1451915962619571, 0.12004123981666648, 0.07538534267664543, 0.11822704703858322, 0.010737863667305447, 0.059297810444591814, 0.07615235216927341, 0.0508638108636047, 0.14691315104189795, 0.07324101173876929, 0.2175681367911403, 0.04119042239062187, 0.0660493599941474, 0.08078449477201288, 0.08924923401616047, 0.05971251317670645, 0.13817708664132, 0.05759116185782709, 0.2058350725964525, 0.056360199221342944, 0.3245267742915311, 0.09853436863475595, 0.13100243834872927, 0.12627007909440513, 0.10181582950282897, 0.10515099514403459, 0.1516034804523313, 0.4818608747307904, 0.5176354587454037, 0.5142246693730987, 0.5281223242471411, 0.5051500133826194, 0.4652366624485367, 0.48763674449606764, 0.5113130116136105, 0.496719544619848, 0.10400212982163337, 0.09957918555708511, 0.12166842262170308, 0.11925908149999398, 0.09948886933697432, 0.09625724127132274, 0.07791240576428149, 0.09511924788503456, 0.1071635280367833, 0.1614617902102775, 0.2965072981543959, 0.1900357882953616, 0.1382125734774199, 0.24587985245388355, 0.19279986223371015, 0.1584209003683138, 0.14603058966482363, 0.16971380346669396, 0.31331528093794736, 0.23204700852149251, 0.36411358707919494, 0.24658675364572924, 0.35062122198982093, 0.3414043169404587, 0.219699610875164, 0.3208421081733863, 0.33494270510319324, 0.19210742446270557, 0.24613135691354204, 0.3076053582678051, 0.22411360964414384, 0.29528002417225296, 0.2392787047085012, 0.2586576940031208, 0.24164953444000536, 0.2845360863846892, 0.20645664520998963, 0.20466339755025476, 0.180546275812696, 0.1929689413079655, 0.18888834408425126, 0.18814809390349618, 0.20667949329879898, 0.1836191540655453, 0.1909034804634374, 0.23269545944622516, 0.2296370194393884, 0.20727294512002192, 0.19580960345503629, 0.21563874251628135, 0.34515008895961563, 0.2039967300894111, 0.20169015334297047, 0.20714485064995458, 0.18678093385169114, 0.16623265193446202, 0.16441517951322826, 0.8631464254781287, 0.20065973387277758, 0.16163721524528996, 0.1428340781766574, 0.17478502270815766, 0.21143431720149986, 0.6246837416513842, 0.21276581858973032, 0.4798176574260089, 0.49590339778761716, 0.15535671327891765, 0.15517400708594709, 0.09393054147970037, 0.10490643058753468, 0.16459384408604583, 0.17571337946543297, 0.19286443748958615, 0.17585787521537677, 0.18085023881347728, 0.1826148282857627, 0.17417474812908218, 0.17982735765943814, 0.1899461873514342, 0.1699868849258448, 0.08305368005573166, 0.07579315931781017, 0.07751138129903579, 0.07140308981864818, 0.07816932020754297, 0.08763363410202385, 0.07742536716480464, 0.07691355123860233, 0.07504740104031626]}, "mutation_prompt": null}
{"id": "e66968b9-461e-4d9a-b15b-0ee261291db2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                perturbation = np.random.normal(0, 0.05, self.dim)  # New perturbation factor\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.55 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + perturbation, self.lower_bound, self.upper_bound)\n                \n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.92 - (0.3 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Further enhance convergence by introducing a randomized perturbation factor in DE mutation.", "configspace": "", "generation": 96, "fitness": 0.2836422777718614, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "b1afe26a-7290-45f7-984d-dc0e87776752", "metadata": {"aucs": [0.7747950901331069, 0.7797480330854406, 0.7963958828565193, 0.8173046660857861, 0.7515108091626473, 0.795630672613915, 0.7827505095055172, 0.7642390306666478, 0.8110660427449454, 0.5719255560813323, 0.43810846674407455, 0.5095515165405291, 0.4456797258462749, 0.5105517883142936, 0.5028502200327272, 0.46681707084351975, 0.3862835240183, 0.48113524098667815, 0.15424164288030429, 0.14913618511313254, 0.14250457944199446, 0.08071453367596737, 0.13008407933917965, 0.14529731591805972, 0.08682612992389149, 0.1150638546216014, 0.12295957670040136, 0.1068071241487829, 0.11393995881764096, 0.07887715269360651, 0.11608166401720066, 0.10776730701698856, 0.10713996444545992, 0.09302754163624194, 0.0960480964324435, 0.08453728243815384, 0.9522355259704547, 0.9865386803683882, 0.9756622640463827, 0.9875352429446198, 0.9693926032178455, 0.9759117005315602, 0.9762365001874208, 0.9860527435853141, 0.984115111658955, 0.40233718632989235, 0.39378283041485296, 0.3686344637737222, 0.3653784008600355, 0.39065923250028656, 0.36983419540056517, 0.3665966577680443, 0.33460283545692915, 0.4023930944584677, 0.7009963208763214, 0.2246800346058948, 0.7796019076328498, 0.8976304218442719, 0.6055694450060234, 0.21407195534563928, 0.4736913809862682, 0.6676496215227321, 0.5233696007981317, 0.2795648146867894, 0.20573650410250155, 0.230655046164721, 0.17906170387945952, 0.32849560626365626, 0.1818724870032563, 0.19192705613440086, 0.18829417879525467, 0.17924060967276767, 0.1334936846482737, 0.13203608757813867, 0.12435252179395861, 0.13336383320868772, 0.1630812758583282, 0.19313907666521324, 0.2537231269131526, 0.21746931009970238, 0.18805917799947913, 0.017399078849717253, 0.01722556681400944, 0.022136083595943767, 0.030919355060460507, 0.015343291055644248, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03714372583877068, 0.08925975734313074, 0.12821466103658163, 0.08184128895334197, 0.09496165053679617, 0.027916322624863876, 0.059689363154763475, 0.08474643117877878, 0.0238218253826612, 0.1622275563501182, 0.04552504314326611, 0.29094393697458387, 0.05071024008401526, 0.07182284803179773, 0.09253324144046726, 0.09565472019561838, 0.056886781310598544, 0.25940437153544715, 0.09710855567013899, 0.1748251192819078, 0.05907516423086523, 0.15670726904653087, 0.061554507220032195, 0.10884935881173696, 0.07912947729910902, 0.09737335127480129, 0.1421016666271835, 0.05653722727048194, 0.5100292959408179, 0.521395303542006, 0.5117932659432398, 0.51789552030001, 0.5241106472792798, 0.5058645330106257, 0.5145760695619837, 0.5274389452504278, 0.5214949136363071, 0.21592192376393737, 0.1025679648434723, 0.08898469415885446, 0.1390871439697816, 0.09364086959510953, 0.10570193219677437, 0.07835120662639161, 0.11512647146973753, 0.10872260624979901, 0.16294754371380915, 0.20980544020173797, 0.19230589239895712, 0.13776212717740854, 0.15081268258885994, 0.26103152005229135, 0.18484571800036165, 0.1376756886651168, 0.18255059985487054, 0.32009661119012733, 0.17474143991530622, 0.2580538890178157, 0.3542430804771832, 0.25203115781687047, 0.2863076800397456, 0.3553710825625339, 0.4812183499371129, 0.26539090638266494, 0.29804178987315355, 0.2594503542117236, 0.2165976252801738, 0.3000848965910452, 0.195952680009982, 0.31227932010564596, 0.2066990731921955, 0.3112239009665134, 0.22451217087890185, 0.25487669595685336, 0.2212743797399367, 0.18417523860781104, 0.21662660504592746, 0.22244951750501196, 0.19477508741759397, 0.20003555585046506, 0.20277979757040587, 0.1972665946754516, 0.20319940012102056, 0.20915860784406226, 0.22189459742508066, 0.18230122523976688, 0.22022029940169396, 0.23665548101985845, 0.21809676926445754, 0.20422767625515692, 0.20607950504586792, 0.18721191914438595, 0.16672809839824554, 0.1662317033230052, 0.8832948428649421, 0.2000935217035461, 0.16264553402327364, 0.14296117340276981, 0.17499554824739538, 0.8553188321726458, 0.7166553510692446, 0.2106569864290787, 0.5938258137905025, 0.16829178238576992, 0.15431113176785527, 0.15400099722747584, 0.09387289833843138, 0.444197383437537, 0.10335194914062795, 0.17561994303538653, 0.1822594150964898, 0.18266091201379187, 0.18157184876496213, 0.19607389865194536, 0.1972580493321796, 0.17875749730638213, 0.1824648647717818, 0.17554793977387328, 0.08215961881168021, 0.09421810843989009, 0.07267238388291952, 0.08000159323224654, 0.08728121087121976, 0.08342030833622815, 0.08865187223073012, 0.08836780893507734, 0.08225696363437873]}, "mutation_prompt": null}
{"id": "506829b5-e8f0-4fda-a54b-6366657f5071", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.55 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) * np.sin(self.func_evals * np.pi / self.budget)  # Added sinusoidal term for dynamic adjustment\n                \n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.92 - (0.3 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhanced DE mutation by adding a sinusoidal term for dynamic adjustment, improving exploration.", "configspace": "", "generation": 97, "fitness": 0.24191681467959028, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "b1afe26a-7290-45f7-984d-dc0e87776752", "metadata": {"aucs": [0.5893976854377749, 0.6101862116329502, 0.6699613703902935, 0.6652657755173241, 0.583235656311571, 0.5980635491014714, 0.5799152359022504, 0.6104926926130494, 0.6328311709184515, 0.39852719474452636, 0.367514130498967, 0.2910505543588773, 0.4041186701598194, 0.4560222381716674, 0.33791932024319393, 0.3391091971970852, 0.48846950381445753, 0.44461933540493204, 0.07473782440199228, 0.10458005566682882, 0.0955688451409602, 0.15218602213262944, 0.10142124250374074, 0.0882580075792615, 0.1138413510480284, 0.11217221138504796, 0.1335740565202892, 0.07660167404444873, 0.07488522774573791, 0.07790481907040481, 0.06611431947524993, 0.093303315470457, 0.06230927460753244, 0.09284168100218593, 0.0909888766216791, 0.061196711681706484, 0.9839509620812765, 0.9865817950209059, 0.9545387044151051, 0.9919915836030898, 0.9551603798153641, 0.9759417416099403, 0.7740083859363514, 0.9804165026926267, 0.9841506974704771, 0.2871697176571536, 0.22003787174385092, 0.26426232457116317, 0.236035979795428, 0.2164680182838059, 0.21441085017441797, 0.3324956575780842, 0.26345914122419545, 0.3286402597350234, 0.13840879352041835, 0.5263394281137711, 0.2033463624034313, 0.20664067878246395, 0.1546884128390812, 0.2056776516116302, 0.1605077400524073, 0.6125734582816668, 0.2984111458750761, 0.20879992433666916, 0.21078458584926651, 0.19007321778636488, 0.16920280838216695, 0.13736279296236154, 0.14108886184518, 0.15647573692411276, 0.19470154519232086, 0.15547840968239013, 0.19117681248258322, 0.21217447496564135, 0.23932146521516906, 0.2115850744826584, 0.17593217512657433, 0.21784101672327005, 0.2441422192653424, 0.24551012054803456, 0.20588188491473625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009514572581167391, 9.999999999998899e-05, 0.004321364920589432, 0.00833708967764546, 0.06552429786024472, 0.11986822102525496, 0.036573137705239955, 0.0753319591842534, 0.02756430035691848, 0.02574156419017437, 0.05315463536263376, 0.06989215669778537, 0.053365532345236, 0.07335383098233106, 0.03144051095396827, 0.1503870189074865, 0.030053203961376895, 0.048402755545367326, 0.05964598100196761, 0.0672540004635035, 0.050872779622013864, 0.05790473023860865, 0.11030882253809537, 0.04881564371423208, 0.037579386821113836, 0.03724608296247789, 0.005357475136869461, 0.04155796013291313, 0.08183829895737815, 0.04074085973576835, 0.04168886653838377, 0.07242663215303369, 0.4010420182114519, 0.3974178164506522, 0.4480166360004546, 0.41337567776519346, 0.42325485166347976, 0.4234401700807561, 0.41368693228095366, 0.47059428804317616, 0.42281629373162, 0.09789849875760737, 0.07427408294638194, 0.09558689943399057, 0.08720819808297187, 0.09868428753531466, 0.10604784994781224, 0.07227057317673502, 0.09071561750022061, 0.08818697017991561, 0.2536055447550789, 0.1755038737927398, 0.14399020664374895, 0.13250505275518865, 0.13695148696617565, 0.18377877401598086, 0.17708606249098613, 0.16472159215176962, 0.2881710427420018, 0.24215096969487482, 0.28146655023628553, 0.2659837293022247, 0.30306539588356696, 0.36084502405117225, 0.2888938453614627, 0.32178294087269566, 0.35716897458335295, 0.35685109456813313, 0.1995300068006819, 0.15668340409186188, 0.23188207660798021, 0.23267682863893902, 0.29231763152903134, 0.2731170408090001, 0.1759407188014528, 0.22559127479342034, 0.2439966838669546, 0.29919987769679524, 0.23514869654258197, 0.3348641400668968, 0.34255033006349633, 0.35238518874746094, 0.27771472257409746, 0.3564394439822265, 0.2706560610047374, 0.35368920580368857, 0.18270627900304048, 0.16519036129284925, 0.17059175628808465, 0.16793398773565604, 0.17510187967823787, 0.1521417587396907, 0.18514266538162283, 0.18545359936374683, 0.18834796332752934, 0.17749017146156676, 0.1785063141441786, 0.15230511391924484, 0.6377603734406164, 0.19111182884844546, 0.11453574509657483, 0.5221676037502794, 0.16173299938626495, 0.2045065819880888, 0.38674953678462254, 0.20726010497104042, 0.6076919101647864, 0.48070475942358193, 0.1474441361537867, 0.13729370689940368, 0.1482183511003825, 0.10269949342063844, 0.5211194608643961, 0.2002991870909102, 0.18420144890243562, 0.17879379282356145, 0.18772698150167044, 0.17834033331781118, 0.1812462531250969, 0.1887558837498402, 0.17631611552316262, 0.17893329703979544, 0.07378381211343221, 0.07510511992535662, 0.07781434713576185, 0.08600790873148234, 0.07153807885205443, 0.07882123163314592, 0.09527922423675117, 0.0779444557557023, 0.06675996458687472]}, "mutation_prompt": null}
{"id": "ec9facc6-4bad-42ef-9b5b-12376e104608", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.55 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Adjusted weight\n                \n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.92 - (0.3 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.7 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Further refine the DE mutation by dynamically adjusting the scaling factor to balance exploration and exploitation better.", "configspace": "", "generation": 98, "fitness": 0.281400304944809, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "b1afe26a-7290-45f7-984d-dc0e87776752", "metadata": {"aucs": [0.7378244431967202, 0.7611913752657056, 0.7843923524736429, 0.7603586746118149, 0.768979967896894, 0.7152184576730185, 0.7753555906321357, 0.7372306187164028, 0.7756986553899792, 0.4560711927950726, 0.41410532652127274, 0.5266206665556723, 0.42456790757467067, 0.5240554703476545, 0.485683164952009, 0.43828791168717207, 0.4490497720265576, 0.40242611288305175, 0.1353370314357617, 0.13214622698966827, 0.1292368702185024, 0.11658000995134954, 0.07298722339554664, 0.11134116161283769, 0.10116841056825887, 0.1336335545055044, 0.11237506288717414, 0.07999122575747408, 0.12731299177970012, 0.12112827798469605, 0.11741197041952822, 0.10278450744455603, 0.12002955742062549, 0.09959510481435485, 0.11328372005440701, 0.08229130532301898, 0.9415966688345047, 0.9865390186388464, 0.9757167924368902, 0.9920079360616827, 0.9677539212815547, 0.9759330952075329, 0.8987886115503702, 0.9818750993480119, 0.981857166050868, 0.40603504792787193, 0.3529872735345161, 0.32360331480573745, 0.35419111808132486, 0.3314253150635791, 0.38151257751446366, 0.3609656676266252, 0.32501264502493776, 0.3540193958521597, 0.8092902829948858, 0.6105677466834352, 0.7444344881889617, 0.2208037372853886, 0.6882599446218083, 0.8140251591620833, 0.8360169126609462, 0.5869445260004502, 0.23589307061468123, 0.2645600576162568, 0.119054978789779, 0.1988260239490317, 0.1475012923769149, 0.22989782323639585, 0.18581114064578286, 0.1773404683180292, 0.22625172952941297, 0.17173586085759074, 0.12283932114117357, 0.21325515761314828, 0.12630902278740463, 0.16112793266218173, 0.19181582490580384, 0.13187273606131822, 0.1902200740381088, 0.2129034731659758, 0.2073431515251778, 0.0006714741733371277, 9.999999999998899e-05, 0.011540827012360588, 0.029679180094999924, 0.02056120778439563, 9.999999999998899e-05, 0.0023183022121867625, 9.999999999998899e-05, 0.039563484291932016, 0.08635801753484795, 0.06278869794018771, 0.07337321754911141, 0.021759831890330816, 0.05022264356933048, 0.08211407092808076, 0.06671152592791119, 0.09893425708325199, 0.13136028752020323, 0.04325020145019298, 0.19949696496277625, 0.10673087352056387, 0.07005439306559835, 0.1779570863269151, 0.05893390941512844, 0.06373466361048197, 0.09505924381859199, 0.055860630116446375, 0.18939094304192072, 0.030968256840524955, 0.18594963241989793, 0.07144420370509308, 0.1911721725657891, 0.10783793947321696, 0.146896096267072, 0.1264742147927389, 0.20402216930316996, 0.506565947942587, 0.5712269917648602, 0.481989351468609, 0.5520919186513282, 0.5126478622813662, 0.491116420192361, 0.5053393584133454, 0.5588763246968871, 0.5589858174976332, 0.11866423034723761, 0.1104735436458959, 0.11923439174527373, 0.10614985234891372, 0.06603556619866635, 0.1134237718388551, 0.08403087525572628, 0.13269610079088345, 0.08076300285766957, 0.1398368957913908, 0.23094853260436876, 0.15661639162603458, 0.17452350850597997, 0.17161577583542054, 0.3110500347904014, 0.19768329898578862, 0.18497465852603012, 0.18858324092076595, 0.30166301558592945, 0.176738832075643, 0.35199809840399887, 0.2818844665794207, 0.4013182093451454, 0.2655582524969694, 0.22527015475317358, 0.326111016717306, 0.26496276484299675, 0.24531964183798727, 0.25159054670402003, 0.31605516076345563, 0.23361618236557058, 0.1380805828861036, 0.24523642926737366, 0.22436778158356074, 0.3161729637191373, 0.18274253805980079, 0.18014128430555343, 0.21489483585247549, 0.19474361961506315, 0.196540554288398, 0.19435217833152396, 0.20069129427843313, 0.24881941633264104, 0.20018218709313185, 0.19658978971720065, 0.22912801858258713, 0.23561214935939068, 0.22264758393200568, 0.1914191110431971, 0.21946637087996457, 0.20111800705704996, 0.23366886962934663, 0.2201791684107396, 0.22791238703786787, 0.1675943142581917, 0.18604716906197694, 0.1661934495930507, 0.8151791243820399, 0.20029243750711057, 0.16183984135711837, 0.6444700416961522, 0.17245937047871807, 0.8364952891609987, 0.7117874078627873, 0.21227546885830495, 0.5973127476677165, 0.1676498915635395, 0.15588051662269242, 0.15590293658277954, 0.09455039047928115, 0.22386916535346446, 0.16469117266000066, 0.18753130694133047, 0.1762392748700009, 0.18185387391882157, 0.17761853023024776, 0.19412298512243198, 0.17731431737571768, 0.17016798061327953, 0.17783166332994738, 0.18560574152529996, 0.0755966097448747, 0.08518393492400445, 0.06922739585305315, 0.09081013728642062, 0.08506103610406157, 0.08584833161384198, 0.09842688313904979, 0.08377826314535974, 0.09685464169202607]}, "mutation_prompt": null}
{"id": "82c36dd4-60b4-4536-8bf8-ae9d34314461", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.c1 = 1.5  # cognitive component\n        self.c2 = 1.5  # social component\n        self.w = 0.7   # inertia weight\n        self.F = 0.9   # DE scaling factor (adjusted for better exploration)\n        self.CR = 0.9  # DE crossover rate\n        self.velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.personal_best = self.particles.copy()\n        self.personal_best_fitness = np.full(self.population_size, np.inf)\n        self.global_best = None\n        self.global_best_fitness = np.inf\n        self.func_evals = 0\n\n    def __call__(self, func):\n        while self.func_evals < self.budget:\n            # Evaluate current particles\n            fitness = np.array([func(p) for p in self.particles])\n            self.func_evals += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if fitness[i] < self.personal_best_fitness[i]:\n                    self.personal_best_fitness[i] = fitness[i]\n                    self.personal_best[i] = self.particles[i]\n                if fitness[i] < self.global_best_fitness:\n                    self.global_best_fitness = fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Hybrid Part: PSO velocity and DE mutation\n            for i in range(self.population_size):\n                # PSO Update\n                r1 = np.random.rand(self.dim)\n                r2 = np.random.rand(self.dim)\n                # Adaptive inertia weight adjustment\n                self.w = 0.7 - (0.3 * (self.func_evals / self.budget))\n                # Dynamic adaptation for cognitive component\n                self.c1 = 1.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)  # Adjusted line\n                self.velocity[i] = (self.w * self.velocity[i] +\n                                    self.c1 * r1 * (self.personal_best[i] - self.particles[i]) +\n                                    self.c2 * r2 * (self.global_best - self.particles[i]))\n\n                pso_candidate = np.clip(self.particles[i] + self.velocity[i], self.lower_bound, self.upper_bound)\n                \n                # DE Mutation and Crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.particles[np.random.choice(idxs, 3, replace=False)]\n                random_scaling = (0.5 + 0.5 * np.sin(self.func_evals * np.pi / self.budget)) * (1 + np.random.normal(0, 0.1))  # New adaptive scaling\n                mutant = np.clip(a + random_scaling * self.F * (b - c) + 0.55 * self.F * (self.global_best - a) + 0.4 * (self.personal_best[i] - a) + np.random.normal(0, 0.1, self.dim), self.lower_bound, self.upper_bound) # Adjusted weight\n                \n                # Dynamic DE crossover rate adjustment\n                self.CR = 0.92 - (0.3 * (self.func_evals / self.budget))  # Refined adjustment for better convergence\n                # Modify F for more effective DE scaling factor adjustment\n                self.F = 0.8 - (0.5 * (self.func_evals / self.budget))  # Slightly more aggressive DE scaling factor adjustment\n                \n                cross_points = np.random.rand(self.dim) < self.CR\n                de_candidate = np.where(cross_points, mutant, self.particles[i])\n\n                # Select the better candidate\n                pso_fitness = func(pso_candidate)\n                de_fitness = func(de_candidate)\n                self.func_evals += 2\n                \n                if pso_fitness < de_fitness:\n                    self.particles[i] = pso_candidate\n                else:\n                    self.particles[i] = de_candidate\n\n        return self.global_best", "name": "HybridPSODE", "description": "Introduce a dynamic adaptive learning rate for the cognitive component to enhance convergence.", "configspace": "", "generation": 99, "fitness": 0.26578275798218576, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "b1afe26a-7290-45f7-984d-dc0e87776752", "metadata": {"aucs": [0.7385914240378091, 0.6970597204334861, 0.6957707268489804, 0.6965911294749132, 0.7308758571307924, 0.7379526815555723, 0.7381573051473325, 0.6921559795599643, 0.6598382463222482, 0.45100417933473214, 0.4820102977908298, 0.4836780919791418, 0.4292360402306803, 0.40623870296158393, 0.3960228021188573, 0.43491754883981526, 0.4100787672330005, 0.4993522373121666, 0.11452500373895347, 0.10908538960238034, 0.4227358884515374, 0.14400758400846736, 0.10224249151555509, 0.1119329314319435, 0.13195691586499092, 0.11876315210437693, 0.09622550729460944, 0.10991134350015797, 0.11038579148406735, 0.10096597650683092, 0.10831264951785269, 0.09816997853236986, 0.09365810698734645, 0.10290540130977621, 0.12278085062574351, 0.10034748050941056, 0.9522364508738317, 0.9865343830466096, 0.9756695749476854, 0.9875536174648624, 0.9693873764188247, 0.9759117723766242, 0.9762388413999294, 0.9860502422522699, 0.984114386469557, 0.3120209224135697, 0.2887968909855585, 0.29899091361953634, 0.380909200805862, 0.3072467676077636, 0.31405945738971486, 0.3108376697670502, 0.30178272117826377, 0.33724630408092526, 0.22841775071305437, 0.39795117355016385, 0.30595646179340263, 0.2785945419279714, 0.520281344944634, 0.24749302597815737, 0.47831959283920045, 0.17683389125306892, 0.5452815057261172, 0.2072377753053889, 0.2540092644813452, 0.2934663634756287, 0.17441209792350543, 0.33445661091011214, 0.16378764188836326, 0.2104480537671619, 0.1850099797096958, 0.17264343295789408, 0.12799277633229034, 0.1667576374988996, 0.12036633094287374, 0.16694996834382836, 0.18183911410379128, 0.1960641227057628, 0.1767472687017153, 0.19491986332693734, 0.19547629633063002, 0.0028780157295330566, 0.04935979778249222, 0.05234708971033475, 0.004183591338145054, 0.053341584084895866, 9.999999999998899e-05, 0.024685350112017668, 9.999999999998899e-05, 0.01619136980099578, 0.07758894338812061, 0.05622180899740137, 0.12143381563425559, 0.08815413070337219, 0.03297502461268653, 0.05960839794606054, 0.06381774881052571, 0.017684819938487584, 0.12079921010277106, 0.04461592648246093, 0.12937017109092797, 0.038859637930462876, 0.07095807728541548, 0.10534356542772405, 0.11734456497600199, 0.052584671355718315, 0.09062553937062878, 0.08426484549943614, 0.22265724086679806, 0.04337904132706194, 0.15942339505240766, 0.07609761275421278, 0.10489196783786925, 0.15269828889905634, 0.12157276215075763, 0.12597572936948487, 0.09813781554087819, 0.4648481941333348, 0.44396126462857244, 0.48201366346707264, 0.5008227069940043, 0.4801883416922619, 0.4784205313604065, 0.5017768503560142, 0.5089882758643944, 0.5065469649465366, 0.09833859147693857, 0.10399127500572758, 0.09468188969577618, 0.11233369407629235, 0.10530921886993816, 0.0983324506508979, 0.07456631151183779, 0.10497401306763243, 0.08166291348569243, 0.1390396261235155, 0.1726712689211004, 0.218726757634902, 0.16162835028476552, 0.15908166275859348, 0.15477064135560648, 0.15598469760049316, 0.15129269535026502, 0.19380591037243677, 0.23081707429076725, 0.3914047416807982, 0.36183729761472216, 0.32667496319582734, 0.305716177008169, 0.3798825276059862, 0.31902615364623954, 0.3723330735615058, 0.36139794113663104, 0.23307307446878434, 0.29051130567742256, 0.2609524777861215, 0.21981553372916307, 0.2561979785069226, 0.2592020815084174, 0.2394686310281139, 0.301902139580254, 0.24226826015097702, 0.18924494690217097, 0.19669253794466612, 0.19353513182504734, 0.1888308826856948, 0.20120477000075676, 0.19822550248636495, 0.2013388868920608, 0.19820192042512774, 0.18710826197174146, 0.20525378005277117, 0.20895732790767851, 0.23512673094107905, 0.18946112448905184, 0.2191512229213446, 0.20175806499457227, 0.19571770422117163, 0.22395849458021233, 0.21728886890187982, 0.18687804755695003, 0.1657508352399012, 0.16514764900991974, 0.8619902576631739, 0.20026584889150312, 0.16263511172387857, 0.14291468596958434, 0.17360159352056093, 0.7901978288041605, 0.4940779321666773, 0.21019320401534036, 0.49408328251888, 0.4736953043327139, 0.15638132475953592, 0.15228464371778683, 0.09462824073489773, 0.49112487287912876, 0.16514783233474173, 0.18592172018910957, 0.1826654369218782, 0.1937531782388262, 0.1719872628314093, 0.18635731756052787, 0.18288786653836409, 0.19616355255116946, 0.21410769991979517, 0.17090478533725995, 0.080440909618678, 0.07333414996258836, 0.08246261291160173, 0.0719377684486171, 0.07257283666469505, 0.07916169346042645, 0.081152827002557, 0.0720628762897646, 0.07188926612258806]}, "mutation_prompt": null}
