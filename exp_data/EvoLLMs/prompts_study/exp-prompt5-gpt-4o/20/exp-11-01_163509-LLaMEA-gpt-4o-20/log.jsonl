{"id": "f35ca632-f8b8-4889-9cf6-83ddbd93f9ad", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = self.bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Harmony-inspired Stochastic Search (HISS) blends principles from harmony search and stochastic sampling to effectively explore diverse solution spaces in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.25062303664740665, "feedback": "The algorithm HISSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6688650202450614, 0.6166533145153763, 0.6381361861274313, 0.6217641507374323, 0.6296569068485676, 0.6233131248504409, 0.6185512891888266, 0.6241623347383776, 0.6278687471411102, 0.3687711981436178, 0.28081675685958374, 0.32828851105920653, 0.2564693794918238, 0.24465080664948846, 0.25585662487550775, 0.2920863300908294, 0.3465298759987361, 0.3039993777021336, 0.14382426776127, 0.1591057390425734, 0.15028596320212184, 0.17819818294997913, 0.17157062258390487, 0.1943792947036569, 0.1380505084501965, 0.3275511875571817, 0.17616644900643097, 0.18578823639919229, 0.14383037690400546, 0.15195839513590914, 0.13514582754603233, 0.17594409301314118, 0.16324202322983639, 0.15670312103070083, 0.1469471497647442, 0.13414825209647863, 0.912249455343679, 0.9158498184245839, 0.8510618321169525, 0.9386314926872181, 0.925308747005634, 0.8649077420920861, 0.8692192847720577, 0.944248654144821, 0.9008986692835871, 0.34874087157917777, 0.34371123423874383, 0.3614234984227064, 0.40333404086613245, 0.3650561641796082, 0.38473947580286594, 0.33448706511764326, 0.3219083680357867, 0.3684838364247255, 0.15862425973573357, 0.14730798046191518, 0.16991585596030578, 0.20463788401319993, 0.851235690298207, 0.19152890545069767, 0.16734826376833645, 0.221334859432874, 0.449072085092887, 0.323169232038062, 0.23411143592638595, 0.1510705629762653, 0.166510825156457, 0.15203449527161594, 0.15388405688222195, 0.18902104248624518, 0.15952331004291376, 0.16111079113316296, 0.1348084882168521, 0.13399920269906396, 0.36768665356695995, 0.13947668662958235, 0.14356168089469679, 0.14042686593357723, 0.18268234233195613, 0.12941895460791275, 0.1750346391255705, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003072651219690803, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038889313361318, 0.04062502836415949, 0.05244095570820795, 0.08004051165656423, 0.07189866611251639, 0.07460898943665073, 0.07563202240178912, 0.07151408706819007, 0.1069223100263571, 0.04320773234656772, 0.060948944720477294, 0.05514550221778991, 0.029735866764247665, 0.050358210245379786, 0.05984062036467219, 0.05817147912253695, 0.055935864218739306, 0.03899038809937316, 0.1265591945929171, 0.1401593558691675, 0.1173500792887735, 0.06967057937660992, 0.14184312209056393, 0.2039248810174752, 0.08619481478098823, 0.18243616512958727, 0.09148628410476756, 0.45419836368846267, 0.46235965282125313, 0.5021295046591352, 0.4754358355698056, 0.48126417617750017, 0.5001128279355646, 0.47374390629386254, 0.5304818749056784, 0.48509715778192797, 0.07981255708845347, 0.11917946231703114, 0.08190430431129148, 0.11379152831602679, 0.09196249324812411, 0.11267298481032917, 0.09193736526795071, 0.14067340584559807, 0.11416270202319234, 0.30467826287101396, 0.19897704192599464, 0.25333008752761355, 0.18899532323791823, 0.21780223285286082, 0.15572526976887935, 0.22851612975402957, 0.1901847695357214, 0.17886654568191407, 0.277459613049163, 0.2825563463192039, 0.28770957634547156, 0.2065729731103857, 0.28553250035918865, 0.24508839077440048, 0.36051479951356313, 0.21582512820816657, 0.20189877522527855, 0.23129552710899726, 0.2748584474588702, 0.19533481345377035, 0.21015525116366174, 0.25583240180938516, 0.24419043950537744, 0.19988892487100152, 0.22263554979497435, 0.17673183107089174, 0.2200770116757358, 0.20569906066550891, 0.250810354723339, 0.210196057805347, 0.2455145828190961, 0.23473151250320423, 0.21321145432939959, 0.22195066644703432, 0.23077327295640682, 0.2303777356668616, 0.22070723883806054, 0.22011083619372285, 0.2936520544121556, 0.46980791466333127, 0.20513927082406058, 0.18769993783059158, 0.242012657955065, 0.2273447284816109, 0.10718150496905288, 0.1866683686292948, 0.1869985071083865, 0.8460495397625747, 0.19941920473023866, 0.9204348667261114, 0.1410226608672327, 0.16369700007558063, 0.174263275111061, 0.47736072697210796, 0.21049120394498155, 0.3267458507578537, 0.11778241948750479, 0.17175541309168185, 0.16638038807292466, 0.10556978170363418, 0.10494018443879938, 0.3462391781253171, 0.173783760674169, 0.18939457353208922, 0.18212162417189715, 0.1980005029661539, 0.1887345055347771, 0.1823455160844809, 0.17622079552979064, 0.1861329822077038, 0.17898774306666887, 0.09151943584432642, 0.09220455315587484, 0.08928219682149097, 0.08586370170972657, 0.08389510608246675, 0.10728512894746622, 0.08959342209610821, 0.07826983596262249, 0.0840669269373211]}, "mutation_prompt": null}
{"id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Enhanced Harmony-inspired Stochastic Search (EHISS) introduces an adaptive pitch adjustment mechanism to dynamically adjust the search granularity based on solution diversity.", "configspace": "", "generation": 1, "fitness": 0.25757602700200566, "feedback": "The algorithm HISSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "f35ca632-f8b8-4889-9cf6-83ddbd93f9ad", "metadata": {"aucs": [0.688838515702231, 0.6449933277802109, 0.727402789970137, 0.682440851220973, 0.6790569963802482, 0.6774316632174111, 0.7172380112828347, 0.6641281351459136, 0.6574428013492246, 0.41076429586726326, 0.3832574719250512, 0.3110037146034448, 0.29131522835158563, 0.30863765440541846, 0.2715364735615382, 0.30745553744854437, 0.295110531625559, 0.2570658420788946, 0.19098766407398116, 0.15745523924770766, 0.19232892055145046, 0.17854888180819617, 0.2557356209124241, 0.200067141859682, 0.15434353336872464, 0.2926292137826203, 0.20174865073211945, 0.2902326061396123, 0.17245676769011276, 0.20392192234466633, 0.45234941900118564, 0.16670389901463245, 0.1876860291750042, 0.23006728756346806, 0.15733030605041387, 0.17708789155408577, 0.8890014202166397, 0.895415074323225, 0.8399602145192313, 0.8806206249920568, 0.9324074479137223, 0.8677218499498194, 0.8904696287842048, 0.9233130503944352, 0.8565506311820125, 0.35265019623179383, 0.2988562293098529, 0.34773440212712325, 0.3341604043812696, 0.35754532379336224, 0.3554566344731711, 0.37684585711542185, 0.3148439202555493, 0.29138302926765725, 0.18112009444022448, 0.14767809804173726, 0.16995759716130066, 0.16629951231629259, 0.1938748692796306, 0.2085586713571984, 0.1936229610737481, 0.22111290499812675, 0.13315359989410958, 0.17572115936394583, 0.18880238670682248, 0.09943035736221661, 0.15582067336034355, 0.13255023569994773, 0.18035188707279015, 0.34870008543944253, 0.18443416435031523, 0.3778578179574119, 0.13626546712309795, 0.15044676830559744, 0.13321018384996164, 0.13880169231055628, 0.13689182642290654, 0.13007317509156724, 0.1456259874547866, 0.137309131230007, 0.15488926096143463, 0.010796857335444332, 9.999999999998899e-05, 9.999999999998899e-05, 0.006044480910662009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038988489508158, 0.04676291380040598, 0.05519229670301962, 0.05605371967491668, 0.08875072035937825, 0.08215073587265975, 0.06367310823537298, 0.05413097429659941, 0.07386737593078285, 0.06518340082057461, 0.10804727810260506, 0.11438253120494901, 0.0711825042612052, 0.06335190995838746, 0.08644781847548255, 0.11653250237863433, 0.14124759209572002, 0.06110422194231491, 0.20673463405973957, 0.16045950237026185, 0.14154713212002257, 0.10378555348308638, 0.17251142358002614, 0.10007499559094535, 0.1065835030025879, 0.22050656109183941, 0.20866765005871724, 0.47816329476252184, 0.480009028883316, 0.48714600871700586, 0.4749501449250563, 0.5069571112769192, 0.4982918342381374, 0.46829055362386973, 0.4852689307250796, 0.4841886673977699, 0.0934250845950606, 0.118505688490528, 0.11735857555327489, 0.16022257769882564, 0.07772210655723633, 0.14164734905490872, 0.09557224720810975, 0.13286032638469447, 0.11065553250714733, 0.18397553797448374, 0.22815211991974083, 0.44798875996293375, 0.19247903499806118, 0.1559782390595299, 0.2586535086208174, 0.22779700427833727, 0.3003432935117728, 0.17430918952720675, 0.21160903650277207, 0.22534128076413518, 0.2230852140390519, 0.2339423188237102, 0.22698415731165356, 0.2534374042963674, 0.3883323427512809, 0.19705268989792513, 0.23194087465906987, 0.15612800747073485, 0.22680462122822453, 0.17797309551350515, 0.1334451258526408, 0.1950530820266625, 0.16380587207074349, 0.17603937329260444, 0.1773169214932706, 0.16015921283822554, 0.2291075143892064, 0.24604538578472435, 0.24104052190743652, 0.21255072307812184, 0.2270976819368825, 0.2244981051633934, 0.21258121443461864, 0.20100779393844947, 0.2730568772411238, 0.19556482205334036, 0.20894798890839716, 0.2290560817428704, 0.5680112714288654, 0.21607102325299488, 0.5041008970046392, 0.18403959406239, 0.21624287920138108, 0.20365116165932473, 0.8021730307356996, 0.18616404043852097, 0.18577708027440554, 0.8630294278878976, 0.19907921446040333, 0.8165756230309329, 0.6206461394280771, 0.17515028509505248, 0.15678233302680056, 0.395764241010498, 0.1686321094883193, 0.2981419821809492, 0.1513850268754655, 0.16525888626230445, 0.21134803445535066, 0.18140158808210738, 0.09501754997321532, 0.0938831450243024, 0.17671290529566996, 0.18259905743120097, 0.17728953691520588, 0.17796570451410332, 0.1949936308639869, 0.1812673906740211, 0.1834899736801605, 0.18706218684394327, 0.1869582469582487, 0.09272871124544779, 0.08729486143271481, 0.10642836060985483, 0.08321851659742041, 0.0884687659179677, 0.09415595754723727, 0.11001758198116185, 0.0949386697192598, 0.11142699074816498]}, "mutation_prompt": null}
{"id": "f50b72bb-fe46-4642-8596-9ec705341b54", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Enhanced Harmony-inspired Stochastic Search (EHISS) introduces an adaptive pitch adjustment mechanism to dynamically adjust the search granularity based on solution diversity.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "metadata": {"aucs": [0.688838515702231, 0.6449933277802109, 0.727402789970137, 0.682440851220973, 0.6790569963802482, 0.6774316632174111, 0.7172380112828347, 0.6641281351459136, 0.6574428013492246, 0.41076429586726326, 0.3832574719250512, 0.3110037146034448, 0.29131522835158563, 0.30863765440541846, 0.2715364735615382, 0.30745553744854437, 0.295110531625559, 0.2570658420788946, 0.19098766407398116, 0.15745523924770766, 0.19232892055145046, 0.17854888180819617, 0.2557356209124241, 0.200067141859682, 0.15434353336872464, 0.2926292137826203, 0.20174865073211945, 0.2902326061396123, 0.17245676769011276, 0.20392192234466633, 0.45234941900118564, 0.16670389901463245, 0.1876860291750042, 0.23006728756346806, 0.15733030605041387, 0.17708789155408577, 0.8890014202166397, 0.895415074323225, 0.8399602145192313, 0.8806206249920568, 0.9324074479137223, 0.8677218499498194, 0.8904696287842048, 0.9233130503944352, 0.8565506311820125, 0.35265019623179383, 0.2988562293098529, 0.34773440212712325, 0.3341604043812696, 0.35754532379336224, 0.3554566344731711, 0.37684585711542185, 0.3148439202555493, 0.29138302926765725, 0.18112009444022448, 0.14767809804173726, 0.16995759716130066, 0.16629951231629259, 0.1938748692796306, 0.2085586713571984, 0.1936229610737481, 0.22111290499812675, 0.13315359989410958, 0.17572115936394583, 0.18880238670682248, 0.09943035736221661, 0.15582067336034355, 0.13255023569994773, 0.18035188707279015, 0.34870008543944253, 0.18443416435031523, 0.3778578179574119, 0.13626546712309795, 0.15044676830559744, 0.13321018384996164, 0.13880169231055628, 0.13689182642290654, 0.13007317509156724, 0.1456259874547866, 0.137309131230007, 0.15488926096143463, 0.010796857335444332, 9.999999999998899e-05, 9.999999999998899e-05, 0.006044480910662009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038988489508158, 0.04676291380040598, 0.05519229670301962, 0.05605371967491668, 0.08875072035937825, 0.08215073587265975, 0.06367310823537298, 0.05413097429659941, 0.07386737593078285, 0.06518340082057461, 0.10804727810260506, 0.11438253120494901, 0.0711825042612052, 0.06335190995838746, 0.08644781847548255, 0.11653250237863433, 0.14124759209572002, 0.06110422194231491, 0.20673463405973957, 0.16045950237026185, 0.14154713212002257, 0.10378555348308638, 0.17251142358002614, 0.10007499559094535, 0.1065835030025879, 0.22050656109183941, 0.20866765005871724, 0.47816329476252184, 0.480009028883316, 0.48714600871700586, 0.4749501449250563, 0.5069571112769192, 0.4982918342381374, 0.46829055362386973, 0.4852689307250796, 0.4841886673977699, 0.0934250845950606, 0.118505688490528, 0.11735857555327489, 0.16022257769882564, 0.07772210655723633, 0.14164734905490872, 0.09557224720810975, 0.13286032638469447, 0.11065553250714733, 0.18397553797448374, 0.22815211991974083, 0.44798875996293375, 0.19247903499806118, 0.1559782390595299, 0.2586535086208174, 0.22779700427833727, 0.3003432935117728, 0.17430918952720675, 0.21160903650277207, 0.22534128076413518, 0.2230852140390519, 0.2339423188237102, 0.22698415731165356, 0.2534374042963674, 0.3883323427512809, 0.19705268989792513, 0.23194087465906987, 0.15612800747073485, 0.22680462122822453, 0.17797309551350515, 0.1334451258526408, 0.1950530820266625, 0.16380587207074349, 0.17603937329260444, 0.1773169214932706, 0.16015921283822554, 0.2291075143892064, 0.24604538578472435, 0.24104052190743652, 0.21255072307812184, 0.2270976819368825, 0.2244981051633934, 0.21258121443461864, 0.20100779393844947, 0.2730568772411238, 0.19556482205334036, 0.20894798890839716, 0.2290560817428704, 0.5680112714288654, 0.21607102325299488, 0.5041008970046392, 0.18403959406239, 0.21624287920138108, 0.20365116165932473, 0.8021730307356996, 0.18616404043852097, 0.18577708027440554, 0.8630294278878976, 0.19907921446040333, 0.8165756230309329, 0.6206461394280771, 0.17515028509505248, 0.15678233302680056, 0.395764241010498, 0.1686321094883193, 0.2981419821809492, 0.1513850268754655, 0.16525888626230445, 0.21134803445535066, 0.18140158808210738, 0.09501754997321532, 0.0938831450243024, 0.17671290529566996, 0.18259905743120097, 0.17728953691520588, 0.17796570451410332, 0.1949936308639869, 0.1812673906740211, 0.1834899736801605, 0.18706218684394327, 0.1869582469582487, 0.09272871124544779, 0.08729486143271481, 0.10642836060985483, 0.08321851659742041, 0.0884687659179677, 0.09415595754723727, 0.11001758198116185, 0.0949386697192598, 0.11142699074816498]}, "mutation_prompt": null}
{"id": "4e272d0d-8204-47ac-9b4c-d8c4488d2812", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Enhanced Harmony-inspired Stochastic Search (EHISS) introduces an adaptive pitch adjustment mechanism to dynamically adjust the search granularity based on solution diversity.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "metadata": {"aucs": [0.688838515702231, 0.6449933277802109, 0.727402789970137, 0.682440851220973, 0.6790569963802482, 0.6774316632174111, 0.7172380112828347, 0.6641281351459136, 0.6574428013492246, 0.41076429586726326, 0.3832574719250512, 0.3110037146034448, 0.29131522835158563, 0.30863765440541846, 0.2715364735615382, 0.30745553744854437, 0.295110531625559, 0.2570658420788946, 0.19098766407398116, 0.15745523924770766, 0.19232892055145046, 0.17854888180819617, 0.2557356209124241, 0.200067141859682, 0.15434353336872464, 0.2926292137826203, 0.20174865073211945, 0.2902326061396123, 0.17245676769011276, 0.20392192234466633, 0.45234941900118564, 0.16670389901463245, 0.1876860291750042, 0.23006728756346806, 0.15733030605041387, 0.17708789155408577, 0.8890014202166397, 0.895415074323225, 0.8399602145192313, 0.8806206249920568, 0.9324074479137223, 0.8677218499498194, 0.8904696287842048, 0.9233130503944352, 0.8565506311820125, 0.35265019623179383, 0.2988562293098529, 0.34773440212712325, 0.3341604043812696, 0.35754532379336224, 0.3554566344731711, 0.37684585711542185, 0.3148439202555493, 0.29138302926765725, 0.18112009444022448, 0.14767809804173726, 0.16995759716130066, 0.16629951231629259, 0.1938748692796306, 0.2085586713571984, 0.1936229610737481, 0.22111290499812675, 0.13315359989410958, 0.17572115936394583, 0.18880238670682248, 0.09943035736221661, 0.15582067336034355, 0.13255023569994773, 0.18035188707279015, 0.34870008543944253, 0.18443416435031523, 0.3778578179574119, 0.13626546712309795, 0.15044676830559744, 0.13321018384996164, 0.13880169231055628, 0.13689182642290654, 0.13007317509156724, 0.1456259874547866, 0.137309131230007, 0.15488926096143463, 0.010796857335444332, 9.999999999998899e-05, 9.999999999998899e-05, 0.006044480910662009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038988489508158, 0.04676291380040598, 0.05519229670301962, 0.05605371967491668, 0.08875072035937825, 0.08215073587265975, 0.06367310823537298, 0.05413097429659941, 0.07386737593078285, 0.06518340082057461, 0.10804727810260506, 0.11438253120494901, 0.0711825042612052, 0.06335190995838746, 0.08644781847548255, 0.11653250237863433, 0.14124759209572002, 0.06110422194231491, 0.20673463405973957, 0.16045950237026185, 0.14154713212002257, 0.10378555348308638, 0.17251142358002614, 0.10007499559094535, 0.1065835030025879, 0.22050656109183941, 0.20866765005871724, 0.47816329476252184, 0.480009028883316, 0.48714600871700586, 0.4749501449250563, 0.5069571112769192, 0.4982918342381374, 0.46829055362386973, 0.4852689307250796, 0.4841886673977699, 0.0934250845950606, 0.118505688490528, 0.11735857555327489, 0.16022257769882564, 0.07772210655723633, 0.14164734905490872, 0.09557224720810975, 0.13286032638469447, 0.11065553250714733, 0.18397553797448374, 0.22815211991974083, 0.44798875996293375, 0.19247903499806118, 0.1559782390595299, 0.2586535086208174, 0.22779700427833727, 0.3003432935117728, 0.17430918952720675, 0.21160903650277207, 0.22534128076413518, 0.2230852140390519, 0.2339423188237102, 0.22698415731165356, 0.2534374042963674, 0.3883323427512809, 0.19705268989792513, 0.23194087465906987, 0.15612800747073485, 0.22680462122822453, 0.17797309551350515, 0.1334451258526408, 0.1950530820266625, 0.16380587207074349, 0.17603937329260444, 0.1773169214932706, 0.16015921283822554, 0.2291075143892064, 0.24604538578472435, 0.24104052190743652, 0.21255072307812184, 0.2270976819368825, 0.2244981051633934, 0.21258121443461864, 0.20100779393844947, 0.2730568772411238, 0.19556482205334036, 0.20894798890839716, 0.2290560817428704, 0.5680112714288654, 0.21607102325299488, 0.5041008970046392, 0.18403959406239, 0.21624287920138108, 0.20365116165932473, 0.8021730307356996, 0.18616404043852097, 0.18577708027440554, 0.8630294278878976, 0.19907921446040333, 0.8165756230309329, 0.6206461394280771, 0.17515028509505248, 0.15678233302680056, 0.395764241010498, 0.1686321094883193, 0.2981419821809492, 0.1513850268754655, 0.16525888626230445, 0.21134803445535066, 0.18140158808210738, 0.09501754997321532, 0.0938831450243024, 0.17671290529566996, 0.18259905743120097, 0.17728953691520588, 0.17796570451410332, 0.1949936308639869, 0.1812673906740211, 0.1834899736801605, 0.18706218684394327, 0.1869582469582487, 0.09272871124544779, 0.08729486143271481, 0.10642836060985483, 0.08321851659742041, 0.0884687659179677, 0.09415595754723727, 0.11001758198116185, 0.0949386697192598, 0.11142699074816498]}, "mutation_prompt": null}
{"id": "609f680f-7b85-4bd0-9111-bfb40d2ebbe2", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Enhanced Harmony-inspired Stochastic Search (EHISS) introduces an adaptive pitch adjustment mechanism to dynamically adjust the search granularity based on solution diversity.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "metadata": {"aucs": [0.688838515702231, 0.6449933277802109, 0.727402789970137, 0.682440851220973, 0.6790569963802482, 0.6774316632174111, 0.7172380112828347, 0.6641281351459136, 0.6574428013492246, 0.41076429586726326, 0.3832574719250512, 0.3110037146034448, 0.29131522835158563, 0.30863765440541846, 0.2715364735615382, 0.30745553744854437, 0.295110531625559, 0.2570658420788946, 0.19098766407398116, 0.15745523924770766, 0.19232892055145046, 0.17854888180819617, 0.2557356209124241, 0.200067141859682, 0.15434353336872464, 0.2926292137826203, 0.20174865073211945, 0.2902326061396123, 0.17245676769011276, 0.20392192234466633, 0.45234941900118564, 0.16670389901463245, 0.1876860291750042, 0.23006728756346806, 0.15733030605041387, 0.17708789155408577, 0.8890014202166397, 0.895415074323225, 0.8399602145192313, 0.8806206249920568, 0.9324074479137223, 0.8677218499498194, 0.8904696287842048, 0.9233130503944352, 0.8565506311820125, 0.35265019623179383, 0.2988562293098529, 0.34773440212712325, 0.3341604043812696, 0.35754532379336224, 0.3554566344731711, 0.37684585711542185, 0.3148439202555493, 0.29138302926765725, 0.18112009444022448, 0.14767809804173726, 0.16995759716130066, 0.16629951231629259, 0.1938748692796306, 0.2085586713571984, 0.1936229610737481, 0.22111290499812675, 0.13315359989410958, 0.17572115936394583, 0.18880238670682248, 0.09943035736221661, 0.15582067336034355, 0.13255023569994773, 0.18035188707279015, 0.34870008543944253, 0.18443416435031523, 0.3778578179574119, 0.13626546712309795, 0.15044676830559744, 0.13321018384996164, 0.13880169231055628, 0.13689182642290654, 0.13007317509156724, 0.1456259874547866, 0.137309131230007, 0.15488926096143463, 0.010796857335444332, 9.999999999998899e-05, 9.999999999998899e-05, 0.006044480910662009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038988489508158, 0.04676291380040598, 0.05519229670301962, 0.05605371967491668, 0.08875072035937825, 0.08215073587265975, 0.06367310823537298, 0.05413097429659941, 0.07386737593078285, 0.06518340082057461, 0.10804727810260506, 0.11438253120494901, 0.0711825042612052, 0.06335190995838746, 0.08644781847548255, 0.11653250237863433, 0.14124759209572002, 0.06110422194231491, 0.20673463405973957, 0.16045950237026185, 0.14154713212002257, 0.10378555348308638, 0.17251142358002614, 0.10007499559094535, 0.1065835030025879, 0.22050656109183941, 0.20866765005871724, 0.47816329476252184, 0.480009028883316, 0.48714600871700586, 0.4749501449250563, 0.5069571112769192, 0.4982918342381374, 0.46829055362386973, 0.4852689307250796, 0.4841886673977699, 0.0934250845950606, 0.118505688490528, 0.11735857555327489, 0.16022257769882564, 0.07772210655723633, 0.14164734905490872, 0.09557224720810975, 0.13286032638469447, 0.11065553250714733, 0.18397553797448374, 0.22815211991974083, 0.44798875996293375, 0.19247903499806118, 0.1559782390595299, 0.2586535086208174, 0.22779700427833727, 0.3003432935117728, 0.17430918952720675, 0.21160903650277207, 0.22534128076413518, 0.2230852140390519, 0.2339423188237102, 0.22698415731165356, 0.2534374042963674, 0.3883323427512809, 0.19705268989792513, 0.23194087465906987, 0.15612800747073485, 0.22680462122822453, 0.17797309551350515, 0.1334451258526408, 0.1950530820266625, 0.16380587207074349, 0.17603937329260444, 0.1773169214932706, 0.16015921283822554, 0.2291075143892064, 0.24604538578472435, 0.24104052190743652, 0.21255072307812184, 0.2270976819368825, 0.2244981051633934, 0.21258121443461864, 0.20100779393844947, 0.2730568772411238, 0.19556482205334036, 0.20894798890839716, 0.2290560817428704, 0.5680112714288654, 0.21607102325299488, 0.5041008970046392, 0.18403959406239, 0.21624287920138108, 0.20365116165932473, 0.8021730307356996, 0.18616404043852097, 0.18577708027440554, 0.8630294278878976, 0.19907921446040333, 0.8165756230309329, 0.6206461394280771, 0.17515028509505248, 0.15678233302680056, 0.395764241010498, 0.1686321094883193, 0.2981419821809492, 0.1513850268754655, 0.16525888626230445, 0.21134803445535066, 0.18140158808210738, 0.09501754997321532, 0.0938831450243024, 0.17671290529566996, 0.18259905743120097, 0.17728953691520588, 0.17796570451410332, 0.1949936308639869, 0.1812673906740211, 0.1834899736801605, 0.18706218684394327, 0.1869582469582487, 0.09272871124544779, 0.08729486143271481, 0.10642836060985483, 0.08321851659742041, 0.0884687659179677, 0.09415595754723727, 0.11001758198116185, 0.0949386697192598, 0.11142699074816498]}, "mutation_prompt": null}
{"id": "05ed6a9f-e46c-4df9-8308-70be9173be2c", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Enhanced Harmony-inspired Stochastic Search (EHISS) introduces an adaptive pitch adjustment mechanism to dynamically adjust the search granularity based on solution diversity.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "metadata": {"aucs": [0.688838515702231, 0.6449933277802109, 0.727402789970137, 0.682440851220973, 0.6790569963802482, 0.6774316632174111, 0.7172380112828347, 0.6641281351459136, 0.6574428013492246, 0.41076429586726326, 0.3832574719250512, 0.3110037146034448, 0.29131522835158563, 0.30863765440541846, 0.2715364735615382, 0.30745553744854437, 0.295110531625559, 0.2570658420788946, 0.19098766407398116, 0.15745523924770766, 0.19232892055145046, 0.17854888180819617, 0.2557356209124241, 0.200067141859682, 0.15434353336872464, 0.2926292137826203, 0.20174865073211945, 0.2902326061396123, 0.17245676769011276, 0.20392192234466633, 0.45234941900118564, 0.16670389901463245, 0.1876860291750042, 0.23006728756346806, 0.15733030605041387, 0.17708789155408577, 0.8890014202166397, 0.895415074323225, 0.8399602145192313, 0.8806206249920568, 0.9324074479137223, 0.8677218499498194, 0.8904696287842048, 0.9233130503944352, 0.8565506311820125, 0.35265019623179383, 0.2988562293098529, 0.34773440212712325, 0.3341604043812696, 0.35754532379336224, 0.3554566344731711, 0.37684585711542185, 0.3148439202555493, 0.29138302926765725, 0.18112009444022448, 0.14767809804173726, 0.16995759716130066, 0.16629951231629259, 0.1938748692796306, 0.2085586713571984, 0.1936229610737481, 0.22111290499812675, 0.13315359989410958, 0.17572115936394583, 0.18880238670682248, 0.09943035736221661, 0.15582067336034355, 0.13255023569994773, 0.18035188707279015, 0.34870008543944253, 0.18443416435031523, 0.3778578179574119, 0.13626546712309795, 0.15044676830559744, 0.13321018384996164, 0.13880169231055628, 0.13689182642290654, 0.13007317509156724, 0.1456259874547866, 0.137309131230007, 0.15488926096143463, 0.010796857335444332, 9.999999999998899e-05, 9.999999999998899e-05, 0.006044480910662009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038988489508158, 0.04676291380040598, 0.05519229670301962, 0.05605371967491668, 0.08875072035937825, 0.08215073587265975, 0.06367310823537298, 0.05413097429659941, 0.07386737593078285, 0.06518340082057461, 0.10804727810260506, 0.11438253120494901, 0.0711825042612052, 0.06335190995838746, 0.08644781847548255, 0.11653250237863433, 0.14124759209572002, 0.06110422194231491, 0.20673463405973957, 0.16045950237026185, 0.14154713212002257, 0.10378555348308638, 0.17251142358002614, 0.10007499559094535, 0.1065835030025879, 0.22050656109183941, 0.20866765005871724, 0.47816329476252184, 0.480009028883316, 0.48714600871700586, 0.4749501449250563, 0.5069571112769192, 0.4982918342381374, 0.46829055362386973, 0.4852689307250796, 0.4841886673977699, 0.0934250845950606, 0.118505688490528, 0.11735857555327489, 0.16022257769882564, 0.07772210655723633, 0.14164734905490872, 0.09557224720810975, 0.13286032638469447, 0.11065553250714733, 0.18397553797448374, 0.22815211991974083, 0.44798875996293375, 0.19247903499806118, 0.1559782390595299, 0.2586535086208174, 0.22779700427833727, 0.3003432935117728, 0.17430918952720675, 0.21160903650277207, 0.22534128076413518, 0.2230852140390519, 0.2339423188237102, 0.22698415731165356, 0.2534374042963674, 0.3883323427512809, 0.19705268989792513, 0.23194087465906987, 0.15612800747073485, 0.22680462122822453, 0.17797309551350515, 0.1334451258526408, 0.1950530820266625, 0.16380587207074349, 0.17603937329260444, 0.1773169214932706, 0.16015921283822554, 0.2291075143892064, 0.24604538578472435, 0.24104052190743652, 0.21255072307812184, 0.2270976819368825, 0.2244981051633934, 0.21258121443461864, 0.20100779393844947, 0.2730568772411238, 0.19556482205334036, 0.20894798890839716, 0.2290560817428704, 0.5680112714288654, 0.21607102325299488, 0.5041008970046392, 0.18403959406239, 0.21624287920138108, 0.20365116165932473, 0.8021730307356996, 0.18616404043852097, 0.18577708027440554, 0.8630294278878976, 0.19907921446040333, 0.8165756230309329, 0.6206461394280771, 0.17515028509505248, 0.15678233302680056, 0.395764241010498, 0.1686321094883193, 0.2981419821809492, 0.1513850268754655, 0.16525888626230445, 0.21134803445535066, 0.18140158808210738, 0.09501754997321532, 0.0938831450243024, 0.17671290529566996, 0.18259905743120097, 0.17728953691520588, 0.17796570451410332, 0.1949936308639869, 0.1812673906740211, 0.1834899736801605, 0.18706218684394327, 0.1869582469582487, 0.09272871124544779, 0.08729486143271481, 0.10642836060985483, 0.08321851659742041, 0.0884687659179677, 0.09415595754723727, 0.11001758198116185, 0.0949386697192598, 0.11142699074816498]}, "mutation_prompt": null}
{"id": "85b32e4d-edec-42b2-8487-70aeb45e04ca", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Enhanced Harmony-inspired Stochastic Search (EHISS) introduces an adaptive pitch adjustment mechanism to dynamically adjust the search granularity based on solution diversity.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "metadata": {"aucs": [0.688838515702231, 0.6449933277802109, 0.727402789970137, 0.682440851220973, 0.6790569963802482, 0.6774316632174111, 0.7172380112828347, 0.6641281351459136, 0.6574428013492246, 0.41076429586726326, 0.3832574719250512, 0.3110037146034448, 0.29131522835158563, 0.30863765440541846, 0.2715364735615382, 0.30745553744854437, 0.295110531625559, 0.2570658420788946, 0.19098766407398116, 0.15745523924770766, 0.19232892055145046, 0.17854888180819617, 0.2557356209124241, 0.200067141859682, 0.15434353336872464, 0.2926292137826203, 0.20174865073211945, 0.2902326061396123, 0.17245676769011276, 0.20392192234466633, 0.45234941900118564, 0.16670389901463245, 0.1876860291750042, 0.23006728756346806, 0.15733030605041387, 0.17708789155408577, 0.8890014202166397, 0.895415074323225, 0.8399602145192313, 0.8806206249920568, 0.9324074479137223, 0.8677218499498194, 0.8904696287842048, 0.9233130503944352, 0.8565506311820125, 0.35265019623179383, 0.2988562293098529, 0.34773440212712325, 0.3341604043812696, 0.35754532379336224, 0.3554566344731711, 0.37684585711542185, 0.3148439202555493, 0.29138302926765725, 0.18112009444022448, 0.14767809804173726, 0.16995759716130066, 0.16629951231629259, 0.1938748692796306, 0.2085586713571984, 0.1936229610737481, 0.22111290499812675, 0.13315359989410958, 0.17572115936394583, 0.18880238670682248, 0.09943035736221661, 0.15582067336034355, 0.13255023569994773, 0.18035188707279015, 0.34870008543944253, 0.18443416435031523, 0.3778578179574119, 0.13626546712309795, 0.15044676830559744, 0.13321018384996164, 0.13880169231055628, 0.13689182642290654, 0.13007317509156724, 0.1456259874547866, 0.137309131230007, 0.15488926096143463, 0.010796857335444332, 9.999999999998899e-05, 9.999999999998899e-05, 0.006044480910662009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038988489508158, 0.04676291380040598, 0.05519229670301962, 0.05605371967491668, 0.08875072035937825, 0.08215073587265975, 0.06367310823537298, 0.05413097429659941, 0.07386737593078285, 0.06518340082057461, 0.10804727810260506, 0.11438253120494901, 0.0711825042612052, 0.06335190995838746, 0.08644781847548255, 0.11653250237863433, 0.14124759209572002, 0.06110422194231491, 0.20673463405973957, 0.16045950237026185, 0.14154713212002257, 0.10378555348308638, 0.17251142358002614, 0.10007499559094535, 0.1065835030025879, 0.22050656109183941, 0.20866765005871724, 0.47816329476252184, 0.480009028883316, 0.48714600871700586, 0.4749501449250563, 0.5069571112769192, 0.4982918342381374, 0.46829055362386973, 0.4852689307250796, 0.4841886673977699, 0.0934250845950606, 0.118505688490528, 0.11735857555327489, 0.16022257769882564, 0.07772210655723633, 0.14164734905490872, 0.09557224720810975, 0.13286032638469447, 0.11065553250714733, 0.18397553797448374, 0.22815211991974083, 0.44798875996293375, 0.19247903499806118, 0.1559782390595299, 0.2586535086208174, 0.22779700427833727, 0.3003432935117728, 0.17430918952720675, 0.21160903650277207, 0.22534128076413518, 0.2230852140390519, 0.2339423188237102, 0.22698415731165356, 0.2534374042963674, 0.3883323427512809, 0.19705268989792513, 0.23194087465906987, 0.15612800747073485, 0.22680462122822453, 0.17797309551350515, 0.1334451258526408, 0.1950530820266625, 0.16380587207074349, 0.17603937329260444, 0.1773169214932706, 0.16015921283822554, 0.2291075143892064, 0.24604538578472435, 0.24104052190743652, 0.21255072307812184, 0.2270976819368825, 0.2244981051633934, 0.21258121443461864, 0.20100779393844947, 0.2730568772411238, 0.19556482205334036, 0.20894798890839716, 0.2290560817428704, 0.5680112714288654, 0.21607102325299488, 0.5041008970046392, 0.18403959406239, 0.21624287920138108, 0.20365116165932473, 0.8021730307356996, 0.18616404043852097, 0.18577708027440554, 0.8630294278878976, 0.19907921446040333, 0.8165756230309329, 0.6206461394280771, 0.17515028509505248, 0.15678233302680056, 0.395764241010498, 0.1686321094883193, 0.2981419821809492, 0.1513850268754655, 0.16525888626230445, 0.21134803445535066, 0.18140158808210738, 0.09501754997321532, 0.0938831450243024, 0.17671290529566996, 0.18259905743120097, 0.17728953691520588, 0.17796570451410332, 0.1949936308639869, 0.1812673906740211, 0.1834899736801605, 0.18706218684394327, 0.1869582469582487, 0.09272871124544779, 0.08729486143271481, 0.10642836060985483, 0.08321851659742041, 0.0884687659179677, 0.09415595754723727, 0.11001758198116185, 0.0949386697192598, 0.11142699074816498]}, "mutation_prompt": null}
{"id": "dececcfa-bcee-4cbf-9e44-061fe09ec2ea", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Enhanced Harmony-inspired Stochastic Search (EHISS) introduces an adaptive pitch adjustment mechanism to dynamically adjust the search granularity based on solution diversity.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "metadata": {"aucs": [0.688838515702231, 0.6449933277802109, 0.727402789970137, 0.682440851220973, 0.6790569963802482, 0.6774316632174111, 0.7172380112828347, 0.6641281351459136, 0.6574428013492246, 0.41076429586726326, 0.3832574719250512, 0.3110037146034448, 0.29131522835158563, 0.30863765440541846, 0.2715364735615382, 0.30745553744854437, 0.295110531625559, 0.2570658420788946, 0.19098766407398116, 0.15745523924770766, 0.19232892055145046, 0.17854888180819617, 0.2557356209124241, 0.200067141859682, 0.15434353336872464, 0.2926292137826203, 0.20174865073211945, 0.2902326061396123, 0.17245676769011276, 0.20392192234466633, 0.45234941900118564, 0.16670389901463245, 0.1876860291750042, 0.23006728756346806, 0.15733030605041387, 0.17708789155408577, 0.8890014202166397, 0.895415074323225, 0.8399602145192313, 0.8806206249920568, 0.9324074479137223, 0.8677218499498194, 0.8904696287842048, 0.9233130503944352, 0.8565506311820125, 0.35265019623179383, 0.2988562293098529, 0.34773440212712325, 0.3341604043812696, 0.35754532379336224, 0.3554566344731711, 0.37684585711542185, 0.3148439202555493, 0.29138302926765725, 0.18112009444022448, 0.14767809804173726, 0.16995759716130066, 0.16629951231629259, 0.1938748692796306, 0.2085586713571984, 0.1936229610737481, 0.22111290499812675, 0.13315359989410958, 0.17572115936394583, 0.18880238670682248, 0.09943035736221661, 0.15582067336034355, 0.13255023569994773, 0.18035188707279015, 0.34870008543944253, 0.18443416435031523, 0.3778578179574119, 0.13626546712309795, 0.15044676830559744, 0.13321018384996164, 0.13880169231055628, 0.13689182642290654, 0.13007317509156724, 0.1456259874547866, 0.137309131230007, 0.15488926096143463, 0.010796857335444332, 9.999999999998899e-05, 9.999999999998899e-05, 0.006044480910662009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038988489508158, 0.04676291380040598, 0.05519229670301962, 0.05605371967491668, 0.08875072035937825, 0.08215073587265975, 0.06367310823537298, 0.05413097429659941, 0.07386737593078285, 0.06518340082057461, 0.10804727810260506, 0.11438253120494901, 0.0711825042612052, 0.06335190995838746, 0.08644781847548255, 0.11653250237863433, 0.14124759209572002, 0.06110422194231491, 0.20673463405973957, 0.16045950237026185, 0.14154713212002257, 0.10378555348308638, 0.17251142358002614, 0.10007499559094535, 0.1065835030025879, 0.22050656109183941, 0.20866765005871724, 0.47816329476252184, 0.480009028883316, 0.48714600871700586, 0.4749501449250563, 0.5069571112769192, 0.4982918342381374, 0.46829055362386973, 0.4852689307250796, 0.4841886673977699, 0.0934250845950606, 0.118505688490528, 0.11735857555327489, 0.16022257769882564, 0.07772210655723633, 0.14164734905490872, 0.09557224720810975, 0.13286032638469447, 0.11065553250714733, 0.18397553797448374, 0.22815211991974083, 0.44798875996293375, 0.19247903499806118, 0.1559782390595299, 0.2586535086208174, 0.22779700427833727, 0.3003432935117728, 0.17430918952720675, 0.21160903650277207, 0.22534128076413518, 0.2230852140390519, 0.2339423188237102, 0.22698415731165356, 0.2534374042963674, 0.3883323427512809, 0.19705268989792513, 0.23194087465906987, 0.15612800747073485, 0.22680462122822453, 0.17797309551350515, 0.1334451258526408, 0.1950530820266625, 0.16380587207074349, 0.17603937329260444, 0.1773169214932706, 0.16015921283822554, 0.2291075143892064, 0.24604538578472435, 0.24104052190743652, 0.21255072307812184, 0.2270976819368825, 0.2244981051633934, 0.21258121443461864, 0.20100779393844947, 0.2730568772411238, 0.19556482205334036, 0.20894798890839716, 0.2290560817428704, 0.5680112714288654, 0.21607102325299488, 0.5041008970046392, 0.18403959406239, 0.21624287920138108, 0.20365116165932473, 0.8021730307356996, 0.18616404043852097, 0.18577708027440554, 0.8630294278878976, 0.19907921446040333, 0.8165756230309329, 0.6206461394280771, 0.17515028509505248, 0.15678233302680056, 0.395764241010498, 0.1686321094883193, 0.2981419821809492, 0.1513850268754655, 0.16525888626230445, 0.21134803445535066, 0.18140158808210738, 0.09501754997321532, 0.0938831450243024, 0.17671290529566996, 0.18259905743120097, 0.17728953691520588, 0.17796570451410332, 0.1949936308639869, 0.1812673906740211, 0.1834899736801605, 0.18706218684394327, 0.1869582469582487, 0.09272871124544779, 0.08729486143271481, 0.10642836060985483, 0.08321851659742041, 0.0884687659179677, 0.09415595754723727, 0.11001758198116185, 0.0949386697192598, 0.11142699074816498]}, "mutation_prompt": null}
{"id": "81dfa810-4adc-440a-b6a3-f1e2315c068a", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Enhanced Harmony-inspired Stochastic Search (EHISS) introduces an adaptive pitch adjustment mechanism to dynamically adjust the search granularity based on solution diversity.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "metadata": {"aucs": [0.688838515702231, 0.6449933277802109, 0.727402789970137, 0.682440851220973, 0.6790569963802482, 0.6774316632174111, 0.7172380112828347, 0.6641281351459136, 0.6574428013492246, 0.41076429586726326, 0.3832574719250512, 0.3110037146034448, 0.29131522835158563, 0.30863765440541846, 0.2715364735615382, 0.30745553744854437, 0.295110531625559, 0.2570658420788946, 0.19098766407398116, 0.15745523924770766, 0.19232892055145046, 0.17854888180819617, 0.2557356209124241, 0.200067141859682, 0.15434353336872464, 0.2926292137826203, 0.20174865073211945, 0.2902326061396123, 0.17245676769011276, 0.20392192234466633, 0.45234941900118564, 0.16670389901463245, 0.1876860291750042, 0.23006728756346806, 0.15733030605041387, 0.17708789155408577, 0.8890014202166397, 0.895415074323225, 0.8399602145192313, 0.8806206249920568, 0.9324074479137223, 0.8677218499498194, 0.8904696287842048, 0.9233130503944352, 0.8565506311820125, 0.35265019623179383, 0.2988562293098529, 0.34773440212712325, 0.3341604043812696, 0.35754532379336224, 0.3554566344731711, 0.37684585711542185, 0.3148439202555493, 0.29138302926765725, 0.18112009444022448, 0.14767809804173726, 0.16995759716130066, 0.16629951231629259, 0.1938748692796306, 0.2085586713571984, 0.1936229610737481, 0.22111290499812675, 0.13315359989410958, 0.17572115936394583, 0.18880238670682248, 0.09943035736221661, 0.15582067336034355, 0.13255023569994773, 0.18035188707279015, 0.34870008543944253, 0.18443416435031523, 0.3778578179574119, 0.13626546712309795, 0.15044676830559744, 0.13321018384996164, 0.13880169231055628, 0.13689182642290654, 0.13007317509156724, 0.1456259874547866, 0.137309131230007, 0.15488926096143463, 0.010796857335444332, 9.999999999998899e-05, 9.999999999998899e-05, 0.006044480910662009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038988489508158, 0.04676291380040598, 0.05519229670301962, 0.05605371967491668, 0.08875072035937825, 0.08215073587265975, 0.06367310823537298, 0.05413097429659941, 0.07386737593078285, 0.06518340082057461, 0.10804727810260506, 0.11438253120494901, 0.0711825042612052, 0.06335190995838746, 0.08644781847548255, 0.11653250237863433, 0.14124759209572002, 0.06110422194231491, 0.20673463405973957, 0.16045950237026185, 0.14154713212002257, 0.10378555348308638, 0.17251142358002614, 0.10007499559094535, 0.1065835030025879, 0.22050656109183941, 0.20866765005871724, 0.47816329476252184, 0.480009028883316, 0.48714600871700586, 0.4749501449250563, 0.5069571112769192, 0.4982918342381374, 0.46829055362386973, 0.4852689307250796, 0.4841886673977699, 0.0934250845950606, 0.118505688490528, 0.11735857555327489, 0.16022257769882564, 0.07772210655723633, 0.14164734905490872, 0.09557224720810975, 0.13286032638469447, 0.11065553250714733, 0.18397553797448374, 0.22815211991974083, 0.44798875996293375, 0.19247903499806118, 0.1559782390595299, 0.2586535086208174, 0.22779700427833727, 0.3003432935117728, 0.17430918952720675, 0.21160903650277207, 0.22534128076413518, 0.2230852140390519, 0.2339423188237102, 0.22698415731165356, 0.2534374042963674, 0.3883323427512809, 0.19705268989792513, 0.23194087465906987, 0.15612800747073485, 0.22680462122822453, 0.17797309551350515, 0.1334451258526408, 0.1950530820266625, 0.16380587207074349, 0.17603937329260444, 0.1773169214932706, 0.16015921283822554, 0.2291075143892064, 0.24604538578472435, 0.24104052190743652, 0.21255072307812184, 0.2270976819368825, 0.2244981051633934, 0.21258121443461864, 0.20100779393844947, 0.2730568772411238, 0.19556482205334036, 0.20894798890839716, 0.2290560817428704, 0.5680112714288654, 0.21607102325299488, 0.5041008970046392, 0.18403959406239, 0.21624287920138108, 0.20365116165932473, 0.8021730307356996, 0.18616404043852097, 0.18577708027440554, 0.8630294278878976, 0.19907921446040333, 0.8165756230309329, 0.6206461394280771, 0.17515028509505248, 0.15678233302680056, 0.395764241010498, 0.1686321094883193, 0.2981419821809492, 0.1513850268754655, 0.16525888626230445, 0.21134803445535066, 0.18140158808210738, 0.09501754997321532, 0.0938831450243024, 0.17671290529566996, 0.18259905743120097, 0.17728953691520588, 0.17796570451410332, 0.1949936308639869, 0.1812673906740211, 0.1834899736801605, 0.18706218684394327, 0.1869582469582487, 0.09272871124544779, 0.08729486143271481, 0.10642836060985483, 0.08321851659742041, 0.0884687659179677, 0.09415595754723727, 0.11001758198116185, 0.0949386697192598, 0.11142699074816498]}, "mutation_prompt": null}
{"id": "475a20e4-109d-4371-b82e-90fdfd54fdee", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Enhanced Harmony-inspired Stochastic Search (EHISS) introduces an adaptive pitch adjustment mechanism to dynamically adjust the search granularity based on solution diversity.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "metadata": {"aucs": [0.688838515702231, 0.6449933277802109, 0.727402789970137, 0.682440851220973, 0.6790569963802482, 0.6774316632174111, 0.7172380112828347, 0.6641281351459136, 0.6574428013492246, 0.41076429586726326, 0.3832574719250512, 0.3110037146034448, 0.29131522835158563, 0.30863765440541846, 0.2715364735615382, 0.30745553744854437, 0.295110531625559, 0.2570658420788946, 0.19098766407398116, 0.15745523924770766, 0.19232892055145046, 0.17854888180819617, 0.2557356209124241, 0.200067141859682, 0.15434353336872464, 0.2926292137826203, 0.20174865073211945, 0.2902326061396123, 0.17245676769011276, 0.20392192234466633, 0.45234941900118564, 0.16670389901463245, 0.1876860291750042, 0.23006728756346806, 0.15733030605041387, 0.17708789155408577, 0.8890014202166397, 0.895415074323225, 0.8399602145192313, 0.8806206249920568, 0.9324074479137223, 0.8677218499498194, 0.8904696287842048, 0.9233130503944352, 0.8565506311820125, 0.35265019623179383, 0.2988562293098529, 0.34773440212712325, 0.3341604043812696, 0.35754532379336224, 0.3554566344731711, 0.37684585711542185, 0.3148439202555493, 0.29138302926765725, 0.18112009444022448, 0.14767809804173726, 0.16995759716130066, 0.16629951231629259, 0.1938748692796306, 0.2085586713571984, 0.1936229610737481, 0.22111290499812675, 0.13315359989410958, 0.17572115936394583, 0.18880238670682248, 0.09943035736221661, 0.15582067336034355, 0.13255023569994773, 0.18035188707279015, 0.34870008543944253, 0.18443416435031523, 0.3778578179574119, 0.13626546712309795, 0.15044676830559744, 0.13321018384996164, 0.13880169231055628, 0.13689182642290654, 0.13007317509156724, 0.1456259874547866, 0.137309131230007, 0.15488926096143463, 0.010796857335444332, 9.999999999998899e-05, 9.999999999998899e-05, 0.006044480910662009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038988489508158, 0.04676291380040598, 0.05519229670301962, 0.05605371967491668, 0.08875072035937825, 0.08215073587265975, 0.06367310823537298, 0.05413097429659941, 0.07386737593078285, 0.06518340082057461, 0.10804727810260506, 0.11438253120494901, 0.0711825042612052, 0.06335190995838746, 0.08644781847548255, 0.11653250237863433, 0.14124759209572002, 0.06110422194231491, 0.20673463405973957, 0.16045950237026185, 0.14154713212002257, 0.10378555348308638, 0.17251142358002614, 0.10007499559094535, 0.1065835030025879, 0.22050656109183941, 0.20866765005871724, 0.47816329476252184, 0.480009028883316, 0.48714600871700586, 0.4749501449250563, 0.5069571112769192, 0.4982918342381374, 0.46829055362386973, 0.4852689307250796, 0.4841886673977699, 0.0934250845950606, 0.118505688490528, 0.11735857555327489, 0.16022257769882564, 0.07772210655723633, 0.14164734905490872, 0.09557224720810975, 0.13286032638469447, 0.11065553250714733, 0.18397553797448374, 0.22815211991974083, 0.44798875996293375, 0.19247903499806118, 0.1559782390595299, 0.2586535086208174, 0.22779700427833727, 0.3003432935117728, 0.17430918952720675, 0.21160903650277207, 0.22534128076413518, 0.2230852140390519, 0.2339423188237102, 0.22698415731165356, 0.2534374042963674, 0.3883323427512809, 0.19705268989792513, 0.23194087465906987, 0.15612800747073485, 0.22680462122822453, 0.17797309551350515, 0.1334451258526408, 0.1950530820266625, 0.16380587207074349, 0.17603937329260444, 0.1773169214932706, 0.16015921283822554, 0.2291075143892064, 0.24604538578472435, 0.24104052190743652, 0.21255072307812184, 0.2270976819368825, 0.2244981051633934, 0.21258121443461864, 0.20100779393844947, 0.2730568772411238, 0.19556482205334036, 0.20894798890839716, 0.2290560817428704, 0.5680112714288654, 0.21607102325299488, 0.5041008970046392, 0.18403959406239, 0.21624287920138108, 0.20365116165932473, 0.8021730307356996, 0.18616404043852097, 0.18577708027440554, 0.8630294278878976, 0.19907921446040333, 0.8165756230309329, 0.6206461394280771, 0.17515028509505248, 0.15678233302680056, 0.395764241010498, 0.1686321094883193, 0.2981419821809492, 0.1513850268754655, 0.16525888626230445, 0.21134803445535066, 0.18140158808210738, 0.09501754997321532, 0.0938831450243024, 0.17671290529566996, 0.18259905743120097, 0.17728953691520588, 0.17796570451410332, 0.1949936308639869, 0.1812673906740211, 0.1834899736801605, 0.18706218684394327, 0.1869582469582487, 0.09272871124544779, 0.08729486143271481, 0.10642836060985483, 0.08321851659742041, 0.0884687659179677, 0.09415595754723727, 0.11001758198116185, 0.0949386697192598, 0.11142699074816498]}, "mutation_prompt": null}
{"id": "a0f565d5-f905-4cd8-bdb2-ae95af5a37da", "solution": "import numpy as np\n\nclass HISSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def __call__(self, func):\n        # Initialize harmony memory with random solutions\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            # Generate new solution based on harmony memory\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            # Pitch adjustment\n            new_solution = self.pitch_adjustment(new_solution)\n\n            # Evaluate new solution\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            # Update harmony memory if the new solution is better\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                # Update the best solution found so far\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution\n\n# Example usage:\n# optimizer = HISSOptimizer(budget=1000, dim=10)\n# best_solution = optimizer(some_black_box_function)", "name": "HISSOptimizer", "description": "Enhanced Harmony-inspired Stochastic Search (EHISS) introduces an adaptive pitch adjustment mechanism to dynamically adjust the search granularity based on solution diversity.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "metadata": {"aucs": [0.688838515702231, 0.6449933277802109, 0.727402789970137, 0.682440851220973, 0.6790569963802482, 0.6774316632174111, 0.7172380112828347, 0.6641281351459136, 0.6574428013492246, 0.41076429586726326, 0.3832574719250512, 0.3110037146034448, 0.29131522835158563, 0.30863765440541846, 0.2715364735615382, 0.30745553744854437, 0.295110531625559, 0.2570658420788946, 0.19098766407398116, 0.15745523924770766, 0.19232892055145046, 0.17854888180819617, 0.2557356209124241, 0.200067141859682, 0.15434353336872464, 0.2926292137826203, 0.20174865073211945, 0.2902326061396123, 0.17245676769011276, 0.20392192234466633, 0.45234941900118564, 0.16670389901463245, 0.1876860291750042, 0.23006728756346806, 0.15733030605041387, 0.17708789155408577, 0.8890014202166397, 0.895415074323225, 0.8399602145192313, 0.8806206249920568, 0.9324074479137223, 0.8677218499498194, 0.8904696287842048, 0.9233130503944352, 0.8565506311820125, 0.35265019623179383, 0.2988562293098529, 0.34773440212712325, 0.3341604043812696, 0.35754532379336224, 0.3554566344731711, 0.37684585711542185, 0.3148439202555493, 0.29138302926765725, 0.18112009444022448, 0.14767809804173726, 0.16995759716130066, 0.16629951231629259, 0.1938748692796306, 0.2085586713571984, 0.1936229610737481, 0.22111290499812675, 0.13315359989410958, 0.17572115936394583, 0.18880238670682248, 0.09943035736221661, 0.15582067336034355, 0.13255023569994773, 0.18035188707279015, 0.34870008543944253, 0.18443416435031523, 0.3778578179574119, 0.13626546712309795, 0.15044676830559744, 0.13321018384996164, 0.13880169231055628, 0.13689182642290654, 0.13007317509156724, 0.1456259874547866, 0.137309131230007, 0.15488926096143463, 0.010796857335444332, 9.999999999998899e-05, 9.999999999998899e-05, 0.006044480910662009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07038988489508158, 0.04676291380040598, 0.05519229670301962, 0.05605371967491668, 0.08875072035937825, 0.08215073587265975, 0.06367310823537298, 0.05413097429659941, 0.07386737593078285, 0.06518340082057461, 0.10804727810260506, 0.11438253120494901, 0.0711825042612052, 0.06335190995838746, 0.08644781847548255, 0.11653250237863433, 0.14124759209572002, 0.06110422194231491, 0.20673463405973957, 0.16045950237026185, 0.14154713212002257, 0.10378555348308638, 0.17251142358002614, 0.10007499559094535, 0.1065835030025879, 0.22050656109183941, 0.20866765005871724, 0.47816329476252184, 0.480009028883316, 0.48714600871700586, 0.4749501449250563, 0.5069571112769192, 0.4982918342381374, 0.46829055362386973, 0.4852689307250796, 0.4841886673977699, 0.0934250845950606, 0.118505688490528, 0.11735857555327489, 0.16022257769882564, 0.07772210655723633, 0.14164734905490872, 0.09557224720810975, 0.13286032638469447, 0.11065553250714733, 0.18397553797448374, 0.22815211991974083, 0.44798875996293375, 0.19247903499806118, 0.1559782390595299, 0.2586535086208174, 0.22779700427833727, 0.3003432935117728, 0.17430918952720675, 0.21160903650277207, 0.22534128076413518, 0.2230852140390519, 0.2339423188237102, 0.22698415731165356, 0.2534374042963674, 0.3883323427512809, 0.19705268989792513, 0.23194087465906987, 0.15612800747073485, 0.22680462122822453, 0.17797309551350515, 0.1334451258526408, 0.1950530820266625, 0.16380587207074349, 0.17603937329260444, 0.1773169214932706, 0.16015921283822554, 0.2291075143892064, 0.24604538578472435, 0.24104052190743652, 0.21255072307812184, 0.2270976819368825, 0.2244981051633934, 0.21258121443461864, 0.20100779393844947, 0.2730568772411238, 0.19556482205334036, 0.20894798890839716, 0.2290560817428704, 0.5680112714288654, 0.21607102325299488, 0.5041008970046392, 0.18403959406239, 0.21624287920138108, 0.20365116165932473, 0.8021730307356996, 0.18616404043852097, 0.18577708027440554, 0.8630294278878976, 0.19907921446040333, 0.8165756230309329, 0.6206461394280771, 0.17515028509505248, 0.15678233302680056, 0.395764241010498, 0.1686321094883193, 0.2981419821809492, 0.1513850268754655, 0.16525888626230445, 0.21134803445535066, 0.18140158808210738, 0.09501754997321532, 0.0938831450243024, 0.17671290529566996, 0.18259905743120097, 0.17728953691520588, 0.17796570451410332, 0.1949936308639869, 0.1812673906740211, 0.1834899736801605, 0.18706218684394327, 0.1869582469582487, 0.09272871124544779, 0.08729486143271481, 0.10642836060985483, 0.08321851659742041, 0.0884687659179677, 0.09415595754723727, 0.11001758198116185, 0.0949386697192598, 0.11142699074816498]}, "mutation_prompt": null}
{"id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 11, "fitness": 0.3830290100503345, "feedback": "The algorithm ADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.28.", "error": "", "parent_id": "50cb43dc-6adc-44f1-9f1b-ef8fdf32b381", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "93487071-14a4-4707-9c8b-92c4c9ef43d3", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "453d415f-8ad8-4a38-9d11-177268e09df3", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "cfd3cf44-5ca9-4051-acf3-7086bc8810d4", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "3f0d98e5-1054-4ec5-afa1-043d4a626b5c", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "008165c6-a70d-4d72-b0c1-93bd35aad04b", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "8a802c78-1cc7-47ab-bbe4-a54e249e8f66", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "42df310e-410f-4761-b7ad-df01b8dcba3d", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "33e19cd6-61cb-40c5-ad4f-19b01a9b184e", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "602b6cbb-16b5-4599-bf95-6fa5b96c9bc8", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "50dc49f7-b5c7-46c5-ab4b-d8aeb7572e52", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "5cf8a3a7-0d60-4ab4-b1f5-fb02d4909dfd", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Initial Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.dynamic_hms_factor = 0.2  # New factor for dynamic memory size\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(len(harmony_memory)))  # Changed for dynamic memory size\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n            # Adjust harmony memory size dynamically\n            self.hms = int(self.hms + self.dynamic_hms_factor * np.sin(np.pi * self.evaluations / self.budget))\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(len(harmony_memory))]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Enhanced ADHS with dynamic memory size adjustment for improved exploration and convergence.", "configspace": "", "generation": 22, "fitness": 0.3830290100503345, "feedback": "The algorithm ADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.28.", "error": "", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "aa7b87b5-7122-4b6e-b1fd-71f93ec269f8", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "1f904c09-4652-4ac8-870a-502b668bedd6", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "dc6e219c-5a8c-415f-891c-4317b85763b2", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "54a043c6-ccd2-49c0-a581-2625bf64021e", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "c595bcfb-e8fd-4c0f-8251-cb97f32dd83b", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "dc33a701-f3c7-4718-82f1-896c19cc573d", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "fb4eb192-3946-4f6f-955a-0723f071e1ef", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "f9a64c24-abf4-42b4-9926-c7dc1203e80b", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "22a5f687-e17a-4255-bad8-f72a43d12072", "solution": "import numpy as np\n\nclass ADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.95  # Harmony Memory Considering Rate\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "ADHSOptimizer", "description": "Adaptive Differential Harmony Search (ADHS) introduces differential mutation strategy with adaptive bandwidth for enhanced exploration and exploitation.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8176370533042089, 0.8266248542651959, 0.8233331269209578, 0.8305075253177396, 0.8307275277324487, 0.8285360603674987, 0.8374397116208487, 0.8191884029470886, 0.827741028761009, 0.708971050121171, 0.7055793233899796, 0.7001858936879908, 0.7193953303896716, 0.7029120454505293, 0.7128269220401806, 0.7358064945504477, 0.7036219405188394, 0.7113798272645881, 0.08145579078855802, 0.08304696099324116, 0.11147332965684331, 0.09259377759630227, 0.10834334305335347, 0.09779210259049664, 0.11278426613991344, 0.08736362725398084, 0.09908690004545584, 0.0945279726204018, 0.11157891812211196, 0.09999096770723859, 0.08103797850633732, 0.09568785243162725, 0.09553351955211897, 0.10493312237353836, 0.08937781277147916, 0.06631500071277352, 0.0985888492271153, 0.090207936989116, 0.09737366876866194, 0.08786394030084088, 0.1006325613366762, 0.07269734901405811, 0.09679940625148198, 0.07186851941506756, 0.09811915913742864, 0.19705289951001792, 0.1395469709888666, 0.140584783245001, 0.1302511372138604, 0.20518814684474374, 0.21050516216147752, 0.16849842482626687, 0.19455157086946406, 0.22464467409131572, 0.8371147252501323, 0.8214306111050282, 0.80694273964746, 0.8571497872920208, 0.8317237854820902, 0.12447634698714649, 0.8711769221407986, 0.7980271459961363, 0.8284357514284734, 0.6566376392957258, 0.42441641141230935, 0.611666039459685, 0.6707960844685967, 0.2705699766784644, 0.6748096161541837, 0.6631636333736466, 0.23716365817211404, 0.6495739204152097, 0.09161611117201796, 0.036423081363990195, 0.015104907883312757, 0.2267780885440035, 0.6738081664021681, 0.5023403561727782, 0.6219862992592422, 0.6118502897276339, 0.6357654584824257, 0.6852421823622017, 0.6909729698350227, 0.7079888950583048, 0.679123857043028, 0.6694494803548183, 0.7112821774927233, 0.7097135692424715, 0.7027938537784189, 0.6766209127676361, 0.7734800825498743, 0.7880903556161496, 0.7806005928791541, 0.7776843570871969, 0.7649067615404206, 0.764690328501758, 0.7744263127799474, 0.7733541680401999, 0.7684759079094649, 0.17520856810535756, 0.17743101549751772, 0.3548853741620097, 0.5454855073065782, 0.49256080358657106, 0.5508800262683832, 0.2052170813461197, 0.3437111590851675, 0.36897235986306054, 0.5495696463758959, 0.560191165343928, 0.5588876307620252, 0.5506374397010367, 0.5605521159775808, 0.542987924712936, 0.5107631557306893, 0.5265785350623633, 0.5281881735228486, 0.7753335802903123, 0.7903516449483029, 0.7936607759851471, 0.8098035294522914, 0.77797452165696, 0.8003487680639298, 0.7951535376266778, 0.8023851417210686, 0.7925119480207283, 0.09623632193907616, 0.08823323241675884, 0.09895072247724745, 0.07794280926379993, 0.08950150290818204, 0.0977289460683356, 0.06941377489692568, 0.08733208225847044, 0.09832662669643655, 0.1832859745154749, 0.2176625445213043, 0.13398454936690996, 0.15101915747037087, 0.18120518298041666, 0.16773528832386586, 0.17025401820185015, 0.280587967624209, 0.18681805087508996, 0.42086437628109574, 0.3993543201373272, 0.44027821462335426, 0.4326112684873875, 0.41807786909348166, 0.4044009057454173, 0.4157000666195183, 0.43844438947951536, 0.4424923911905515, 0.37362528464045275, 0.37261975594313335, 0.37749416745740605, 0.32372350395193794, 0.3441826485034135, 0.38279016936865595, 0.3798033836534517, 0.38004859148837256, 0.39757005030787473, 0.22382496914444305, 0.1926034974680918, 0.21760017105476703, 0.18419010075357267, 0.1982021767558233, 0.18904033086069427, 0.1880459350024768, 0.1766322454398358, 0.17602072934119584, 0.18778970452405008, 0.17244577927550941, 0.1645912270018396, 0.170847469313416, 0.1739201808340668, 0.19335505984035162, 0.1942122327290784, 0.18235124896406452, 0.17552942337825495, 0.8316583004980874, 0.8278892788844054, 0.17062509453747388, 0.183938804852951, 0.18517951232272112, 0.18234866330103372, 0.17358724385493718, 0.1649459147678748, 0.7101463029561104, 0.8717691671468835, 0.17577355326223754, 0.3049617407613098, 0.16856179106724778, 0.20169618429399894, 0.20020035893405774, 0.21026969645425742, 0.1982838368037647, 0.20971920801741073, 0.16893269715414627, 0.18934407628526595, 0.17339341443745637, 0.1641392124529577, 0.2054084412513546, 0.20031750547306915, 0.16856628470922042, 0.19058191785992495, 0.19026218959738073, 0.06888200851134585, 0.06860097203404891, 0.06717607065264142, 0.06719072998445041, 0.08441542226417553, 0.07915814419657563, 0.07432186997484602, 0.07262029488089206, 0.07750970443843674]}, "mutation_prompt": null}
{"id": "81db2eaa-1087-41ea-84a9-c891ec4ae113", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Enhanced ADHS with adaptive crossover probability and elitism-based selection to improve convergence speed and accuracy.", "configspace": "", "generation": 32, "fitness": 0.4658904307510702, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.28.", "error": "", "parent_id": "df5076a3-0b45-464d-9b98-35bb731b4b15", "metadata": {"aucs": [0.8760681258721768, 0.8760007285562506, 0.8810631490900115, 0.8865380502891747, 0.9046372538252885, 0.8798173316238911, 0.8714066487489134, 0.8956448074357046, 0.8863964702518567, 0.8106056112959258, 0.8069706143214483, 0.820649931334505, 0.798694736841502, 0.8132543180222311, 0.8164569091805902, 0.7812725768375517, 0.8075249467904537, 0.7999509018957143, 0.5011826838049712, 0.1762357495316279, 0.16903013360926522, 0.5662449891676343, 0.5345257088716808, 0.16674693469024227, 0.5857383294862496, 0.15967847742900354, 0.1679827127864204, 0.16935648000543957, 0.14503003677541215, 0.14210388422904363, 0.14580818269046025, 0.4843207369196346, 0.5920147309945312, 0.16411014547705893, 0.16702732543504284, 0.6443717983299342, 0.9716696964577817, 0.969814485166815, 0.977893043389875, 0.9363773742438521, 0.960067029843308, 0.9604673920985101, 0.9832040344509256, 0.9595097436965795, 0.9623856960989781, 0.6949829593563883, 0.6967213479755193, 0.6707159010720827, 0.6958848633058733, 0.673250721250227, 0.6905486909121414, 0.6967259100686649, 0.6898422969043623, 0.08903580374820053, 0.786521592647067, 0.8167957495298211, 0.8028725671436845, 0.8087754261601827, 0.8454416381504903, 0.8635926959269808, 0.8372772388778562, 0.861047888276284, 0.8273204993749854, 0.6409199466786597, 0.5697105833554698, 0.569145501017762, 0.5911485813141073, 0.4356554243876559, 0.6171893049011494, 0.5049482853914468, 0.648041309996199, 0.5766180161786336, 0.12307745216395027, 0.5874215909319886, 0.638401672059844, 0.610472188822679, 0.6385082843284822, 0.6087429437810554, 0.6178283635092113, 0.3832109773381781, 0.4798357665245526, 0.49356488968281487, 0.5177604657399251, 0.5049724608952781, 0.4954019216403329, 0.4579016387713597, 0.4670868435685599, 0.44578936340481556, 0.48755919229815203, 0.5138894620852288, 0.6327906771756656, 0.605450084228852, 0.5617174325667507, 0.5546814721181017, 0.6361131733856247, 0.6014819225793804, 0.660335186239573, 0.6577157318571407, 0.6715633123540233, 0.11426928065808639, 0.3490090418034564, 0.09258530640127227, 0.38220541239134087, 0.27574259876929863, 0.28529244349903216, 0.1482020748933257, 0.24042462154338062, 0.19940649947115519, 0.36503779813272563, 0.40098247492159145, 0.4280254279905825, 0.4159753297492226, 0.44198560565277223, 0.4288768280206041, 0.40469862502682485, 0.42611368776297154, 0.37355444961777096, 0.7944596633935843, 0.7789105082634827, 0.7732882525976638, 0.7905498351757886, 0.7854135284067423, 0.7728567383674022, 0.7940714995110745, 0.7801369588604545, 0.7711249500787012, 0.09851882249681787, 0.10785628871533026, 0.11503490080528722, 0.09529496068262866, 0.10474096695535973, 0.10618506693579821, 0.0965628157627807, 0.11551916583325006, 0.1811526485126035, 0.16130147401987815, 0.1645486640639694, 0.17063514886326026, 0.14314415369112643, 0.17023542051370277, 0.11806528335110489, 0.28390231125368415, 0.11703921534013384, 0.15661186585588927, 0.5328026929858207, 0.49356177184415406, 0.5757553603922254, 0.575311871020561, 0.5262130669625908, 0.46495853706344514, 0.5731272532129112, 0.5620993177003346, 0.6136740417219525, 0.34134535337469507, 0.3528043302368429, 0.3383245631374088, 0.32163904990737824, 0.3749949418794566, 0.4005322114689056, 0.3946372687821429, 0.3715017896726105, 0.4979443146908492, 0.18371697434329726, 0.2119429579098725, 0.19100178938040968, 0.19708898650495954, 0.20252874870346238, 0.17849826193269547, 0.17713856270855544, 0.1912294172506951, 0.17657655024406282, 0.5909538712590526, 0.5708350651994138, 0.2113924014554055, 0.5715049310008993, 0.621493323380294, 0.5030937238262891, 0.20138700027842715, 0.2375431558681731, 0.537653913865308, 0.1708806837764334, 0.8781740075417335, 0.899077468002129, 0.19378902471257786, 0.17429767154898368, 0.19176558024376034, 0.1682873655564472, 0.1442460554613001, 0.16622725874737587, 0.7815502311717576, 0.2057953554080213, 0.7820724954606367, 0.16517871672077888, 0.20291288767935778, 0.762743638071689, 0.20289197910040535, 0.20916192737337358, 0.21203923812026038, 0.17157442665000977, 0.16973467058584013, 0.20020816000908592, 0.17020606592172038, 0.17368335055244055, 0.18101905274090602, 0.17357785798417735, 0.17902557563663135, 0.17349393711716365, 0.07948346602942236, 0.08348380111728515, 0.07148413639137363, 0.07357189098720796, 0.07956856977895255, 0.07691049615853518, 0.07640218826181777, 0.09689492067801442, 0.07470704330818878]}, "mutation_prompt": null}
{"id": "678558af-b99a-4721-8459-7d3fd138c4b0", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.learning_rate = 0.05  # Learning rate for parameter adjustment\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        self.par = np.clip(self.par + self.learning_rate * np.random.rand(), 0.1, 0.9)  # Adjusting PAR dynamically\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        self.f = np.clip(self.f + self.learning_rate * (best_solution - mutant).mean(), 0.4, 1.2)  # Dynamic adjustment of 'f'\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer by introducing a learning rate for dynamic parameter adjustment based on exploitation-exploration balance.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'best_solution' is not defined\").", "error": "NameError(\"name 'best_solution' is not defined\")", "parent_id": "81db2eaa-1087-41ea-84a9-c891ec4ae113", "metadata": {}, "mutation_prompt": null}
{"id": "575ad391-0666-49f7-bf28-ddebccf62b35", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Enhanced ADHS with adaptive crossover probability and elitism-based selection to improve convergence speed and accuracy.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81db2eaa-1087-41ea-84a9-c891ec4ae113", "metadata": {"aucs": [0.8760681258721768, 0.8760007285562506, 0.8810631490900115, 0.8865380502891747, 0.9046372538252885, 0.8798173316238911, 0.8714066487489134, 0.8956448074357046, 0.8863964702518567, 0.8106056112959258, 0.8069706143214483, 0.820649931334505, 0.798694736841502, 0.8132543180222311, 0.8164569091805902, 0.7812725768375517, 0.8075249467904537, 0.7999509018957143, 0.5011826838049712, 0.1762357495316279, 0.16903013360926522, 0.5662449891676343, 0.5345257088716808, 0.16674693469024227, 0.5857383294862496, 0.15967847742900354, 0.1679827127864204, 0.16935648000543957, 0.14503003677541215, 0.14210388422904363, 0.14580818269046025, 0.4843207369196346, 0.5920147309945312, 0.16411014547705893, 0.16702732543504284, 0.6443717983299342, 0.9716696964577817, 0.969814485166815, 0.977893043389875, 0.9363773742438521, 0.960067029843308, 0.9604673920985101, 0.9832040344509256, 0.9595097436965795, 0.9623856960989781, 0.6949829593563883, 0.6967213479755193, 0.6707159010720827, 0.6958848633058733, 0.673250721250227, 0.6905486909121414, 0.6967259100686649, 0.6898422969043623, 0.08903580374820053, 0.786521592647067, 0.8167957495298211, 0.8028725671436845, 0.8087754261601827, 0.8454416381504903, 0.8635926959269808, 0.8372772388778562, 0.861047888276284, 0.8273204993749854, 0.6409199466786597, 0.5697105833554698, 0.569145501017762, 0.5911485813141073, 0.4356554243876559, 0.6171893049011494, 0.5049482853914468, 0.648041309996199, 0.5766180161786336, 0.12307745216395027, 0.5874215909319886, 0.638401672059844, 0.610472188822679, 0.6385082843284822, 0.6087429437810554, 0.6178283635092113, 0.3832109773381781, 0.4798357665245526, 0.49356488968281487, 0.5177604657399251, 0.5049724608952781, 0.4954019216403329, 0.4579016387713597, 0.4670868435685599, 0.44578936340481556, 0.48755919229815203, 0.5138894620852288, 0.6327906771756656, 0.605450084228852, 0.5617174325667507, 0.5546814721181017, 0.6361131733856247, 0.6014819225793804, 0.660335186239573, 0.6577157318571407, 0.6715633123540233, 0.11426928065808639, 0.3490090418034564, 0.09258530640127227, 0.38220541239134087, 0.27574259876929863, 0.28529244349903216, 0.1482020748933257, 0.24042462154338062, 0.19940649947115519, 0.36503779813272563, 0.40098247492159145, 0.4280254279905825, 0.4159753297492226, 0.44198560565277223, 0.4288768280206041, 0.40469862502682485, 0.42611368776297154, 0.37355444961777096, 0.7944596633935843, 0.7789105082634827, 0.7732882525976638, 0.7905498351757886, 0.7854135284067423, 0.7728567383674022, 0.7940714995110745, 0.7801369588604545, 0.7711249500787012, 0.09851882249681787, 0.10785628871533026, 0.11503490080528722, 0.09529496068262866, 0.10474096695535973, 0.10618506693579821, 0.0965628157627807, 0.11551916583325006, 0.1811526485126035, 0.16130147401987815, 0.1645486640639694, 0.17063514886326026, 0.14314415369112643, 0.17023542051370277, 0.11806528335110489, 0.28390231125368415, 0.11703921534013384, 0.15661186585588927, 0.5328026929858207, 0.49356177184415406, 0.5757553603922254, 0.575311871020561, 0.5262130669625908, 0.46495853706344514, 0.5731272532129112, 0.5620993177003346, 0.6136740417219525, 0.34134535337469507, 0.3528043302368429, 0.3383245631374088, 0.32163904990737824, 0.3749949418794566, 0.4005322114689056, 0.3946372687821429, 0.3715017896726105, 0.4979443146908492, 0.18371697434329726, 0.2119429579098725, 0.19100178938040968, 0.19708898650495954, 0.20252874870346238, 0.17849826193269547, 0.17713856270855544, 0.1912294172506951, 0.17657655024406282, 0.5909538712590526, 0.5708350651994138, 0.2113924014554055, 0.5715049310008993, 0.621493323380294, 0.5030937238262891, 0.20138700027842715, 0.2375431558681731, 0.537653913865308, 0.1708806837764334, 0.8781740075417335, 0.899077468002129, 0.19378902471257786, 0.17429767154898368, 0.19176558024376034, 0.1682873655564472, 0.1442460554613001, 0.16622725874737587, 0.7815502311717576, 0.2057953554080213, 0.7820724954606367, 0.16517871672077888, 0.20291288767935778, 0.762743638071689, 0.20289197910040535, 0.20916192737337358, 0.21203923812026038, 0.17157442665000977, 0.16973467058584013, 0.20020816000908592, 0.17020606592172038, 0.17368335055244055, 0.18101905274090602, 0.17357785798417735, 0.17902557563663135, 0.17349393711716365, 0.07948346602942236, 0.08348380111728515, 0.07148413639137363, 0.07357189098720796, 0.07956856977895255, 0.07691049615853518, 0.07640218826181777, 0.09689492067801442, 0.07470704330818878]}, "mutation_prompt": null}
{"id": "83ba1b1a-ebb9-4b89-9caa-3cd4fdf44ad8", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Enhanced ADHS with adaptive crossover probability and elitism-based selection to improve convergence speed and accuracy.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81db2eaa-1087-41ea-84a9-c891ec4ae113", "metadata": {"aucs": [0.8760681258721768, 0.8760007285562506, 0.8810631490900115, 0.8865380502891747, 0.9046372538252885, 0.8798173316238911, 0.8714066487489134, 0.8956448074357046, 0.8863964702518567, 0.8106056112959258, 0.8069706143214483, 0.820649931334505, 0.798694736841502, 0.8132543180222311, 0.8164569091805902, 0.7812725768375517, 0.8075249467904537, 0.7999509018957143, 0.5011826838049712, 0.1762357495316279, 0.16903013360926522, 0.5662449891676343, 0.5345257088716808, 0.16674693469024227, 0.5857383294862496, 0.15967847742900354, 0.1679827127864204, 0.16935648000543957, 0.14503003677541215, 0.14210388422904363, 0.14580818269046025, 0.4843207369196346, 0.5920147309945312, 0.16411014547705893, 0.16702732543504284, 0.6443717983299342, 0.9716696964577817, 0.969814485166815, 0.977893043389875, 0.9363773742438521, 0.960067029843308, 0.9604673920985101, 0.9832040344509256, 0.9595097436965795, 0.9623856960989781, 0.6949829593563883, 0.6967213479755193, 0.6707159010720827, 0.6958848633058733, 0.673250721250227, 0.6905486909121414, 0.6967259100686649, 0.6898422969043623, 0.08903580374820053, 0.786521592647067, 0.8167957495298211, 0.8028725671436845, 0.8087754261601827, 0.8454416381504903, 0.8635926959269808, 0.8372772388778562, 0.861047888276284, 0.8273204993749854, 0.6409199466786597, 0.5697105833554698, 0.569145501017762, 0.5911485813141073, 0.4356554243876559, 0.6171893049011494, 0.5049482853914468, 0.648041309996199, 0.5766180161786336, 0.12307745216395027, 0.5874215909319886, 0.638401672059844, 0.610472188822679, 0.6385082843284822, 0.6087429437810554, 0.6178283635092113, 0.3832109773381781, 0.4798357665245526, 0.49356488968281487, 0.5177604657399251, 0.5049724608952781, 0.4954019216403329, 0.4579016387713597, 0.4670868435685599, 0.44578936340481556, 0.48755919229815203, 0.5138894620852288, 0.6327906771756656, 0.605450084228852, 0.5617174325667507, 0.5546814721181017, 0.6361131733856247, 0.6014819225793804, 0.660335186239573, 0.6577157318571407, 0.6715633123540233, 0.11426928065808639, 0.3490090418034564, 0.09258530640127227, 0.38220541239134087, 0.27574259876929863, 0.28529244349903216, 0.1482020748933257, 0.24042462154338062, 0.19940649947115519, 0.36503779813272563, 0.40098247492159145, 0.4280254279905825, 0.4159753297492226, 0.44198560565277223, 0.4288768280206041, 0.40469862502682485, 0.42611368776297154, 0.37355444961777096, 0.7944596633935843, 0.7789105082634827, 0.7732882525976638, 0.7905498351757886, 0.7854135284067423, 0.7728567383674022, 0.7940714995110745, 0.7801369588604545, 0.7711249500787012, 0.09851882249681787, 0.10785628871533026, 0.11503490080528722, 0.09529496068262866, 0.10474096695535973, 0.10618506693579821, 0.0965628157627807, 0.11551916583325006, 0.1811526485126035, 0.16130147401987815, 0.1645486640639694, 0.17063514886326026, 0.14314415369112643, 0.17023542051370277, 0.11806528335110489, 0.28390231125368415, 0.11703921534013384, 0.15661186585588927, 0.5328026929858207, 0.49356177184415406, 0.5757553603922254, 0.575311871020561, 0.5262130669625908, 0.46495853706344514, 0.5731272532129112, 0.5620993177003346, 0.6136740417219525, 0.34134535337469507, 0.3528043302368429, 0.3383245631374088, 0.32163904990737824, 0.3749949418794566, 0.4005322114689056, 0.3946372687821429, 0.3715017896726105, 0.4979443146908492, 0.18371697434329726, 0.2119429579098725, 0.19100178938040968, 0.19708898650495954, 0.20252874870346238, 0.17849826193269547, 0.17713856270855544, 0.1912294172506951, 0.17657655024406282, 0.5909538712590526, 0.5708350651994138, 0.2113924014554055, 0.5715049310008993, 0.621493323380294, 0.5030937238262891, 0.20138700027842715, 0.2375431558681731, 0.537653913865308, 0.1708806837764334, 0.8781740075417335, 0.899077468002129, 0.19378902471257786, 0.17429767154898368, 0.19176558024376034, 0.1682873655564472, 0.1442460554613001, 0.16622725874737587, 0.7815502311717576, 0.2057953554080213, 0.7820724954606367, 0.16517871672077888, 0.20291288767935778, 0.762743638071689, 0.20289197910040535, 0.20916192737337358, 0.21203923812026038, 0.17157442665000977, 0.16973467058584013, 0.20020816000908592, 0.17020606592172038, 0.17368335055244055, 0.18101905274090602, 0.17357785798417735, 0.17902557563663135, 0.17349393711716365, 0.07948346602942236, 0.08348380111728515, 0.07148413639137363, 0.07357189098720796, 0.07956856977895255, 0.07691049615853518, 0.07640218826181777, 0.09689492067801442, 0.07470704330818878]}, "mutation_prompt": null}
{"id": "c9201816-b459-45e9-bffe-568fc1ee97e3", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Enhanced ADHS with adaptive crossover probability and elitism-based selection to improve convergence speed and accuracy.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81db2eaa-1087-41ea-84a9-c891ec4ae113", "metadata": {"aucs": [0.8760681258721768, 0.8760007285562506, 0.8810631490900115, 0.8865380502891747, 0.9046372538252885, 0.8798173316238911, 0.8714066487489134, 0.8956448074357046, 0.8863964702518567, 0.8106056112959258, 0.8069706143214483, 0.820649931334505, 0.798694736841502, 0.8132543180222311, 0.8164569091805902, 0.7812725768375517, 0.8075249467904537, 0.7999509018957143, 0.5011826838049712, 0.1762357495316279, 0.16903013360926522, 0.5662449891676343, 0.5345257088716808, 0.16674693469024227, 0.5857383294862496, 0.15967847742900354, 0.1679827127864204, 0.16935648000543957, 0.14503003677541215, 0.14210388422904363, 0.14580818269046025, 0.4843207369196346, 0.5920147309945312, 0.16411014547705893, 0.16702732543504284, 0.6443717983299342, 0.9716696964577817, 0.969814485166815, 0.977893043389875, 0.9363773742438521, 0.960067029843308, 0.9604673920985101, 0.9832040344509256, 0.9595097436965795, 0.9623856960989781, 0.6949829593563883, 0.6967213479755193, 0.6707159010720827, 0.6958848633058733, 0.673250721250227, 0.6905486909121414, 0.6967259100686649, 0.6898422969043623, 0.08903580374820053, 0.786521592647067, 0.8167957495298211, 0.8028725671436845, 0.8087754261601827, 0.8454416381504903, 0.8635926959269808, 0.8372772388778562, 0.861047888276284, 0.8273204993749854, 0.6409199466786597, 0.5697105833554698, 0.569145501017762, 0.5911485813141073, 0.4356554243876559, 0.6171893049011494, 0.5049482853914468, 0.648041309996199, 0.5766180161786336, 0.12307745216395027, 0.5874215909319886, 0.638401672059844, 0.610472188822679, 0.6385082843284822, 0.6087429437810554, 0.6178283635092113, 0.3832109773381781, 0.4798357665245526, 0.49356488968281487, 0.5177604657399251, 0.5049724608952781, 0.4954019216403329, 0.4579016387713597, 0.4670868435685599, 0.44578936340481556, 0.48755919229815203, 0.5138894620852288, 0.6327906771756656, 0.605450084228852, 0.5617174325667507, 0.5546814721181017, 0.6361131733856247, 0.6014819225793804, 0.660335186239573, 0.6577157318571407, 0.6715633123540233, 0.11426928065808639, 0.3490090418034564, 0.09258530640127227, 0.38220541239134087, 0.27574259876929863, 0.28529244349903216, 0.1482020748933257, 0.24042462154338062, 0.19940649947115519, 0.36503779813272563, 0.40098247492159145, 0.4280254279905825, 0.4159753297492226, 0.44198560565277223, 0.4288768280206041, 0.40469862502682485, 0.42611368776297154, 0.37355444961777096, 0.7944596633935843, 0.7789105082634827, 0.7732882525976638, 0.7905498351757886, 0.7854135284067423, 0.7728567383674022, 0.7940714995110745, 0.7801369588604545, 0.7711249500787012, 0.09851882249681787, 0.10785628871533026, 0.11503490080528722, 0.09529496068262866, 0.10474096695535973, 0.10618506693579821, 0.0965628157627807, 0.11551916583325006, 0.1811526485126035, 0.16130147401987815, 0.1645486640639694, 0.17063514886326026, 0.14314415369112643, 0.17023542051370277, 0.11806528335110489, 0.28390231125368415, 0.11703921534013384, 0.15661186585588927, 0.5328026929858207, 0.49356177184415406, 0.5757553603922254, 0.575311871020561, 0.5262130669625908, 0.46495853706344514, 0.5731272532129112, 0.5620993177003346, 0.6136740417219525, 0.34134535337469507, 0.3528043302368429, 0.3383245631374088, 0.32163904990737824, 0.3749949418794566, 0.4005322114689056, 0.3946372687821429, 0.3715017896726105, 0.4979443146908492, 0.18371697434329726, 0.2119429579098725, 0.19100178938040968, 0.19708898650495954, 0.20252874870346238, 0.17849826193269547, 0.17713856270855544, 0.1912294172506951, 0.17657655024406282, 0.5909538712590526, 0.5708350651994138, 0.2113924014554055, 0.5715049310008993, 0.621493323380294, 0.5030937238262891, 0.20138700027842715, 0.2375431558681731, 0.537653913865308, 0.1708806837764334, 0.8781740075417335, 0.899077468002129, 0.19378902471257786, 0.17429767154898368, 0.19176558024376034, 0.1682873655564472, 0.1442460554613001, 0.16622725874737587, 0.7815502311717576, 0.2057953554080213, 0.7820724954606367, 0.16517871672077888, 0.20291288767935778, 0.762743638071689, 0.20289197910040535, 0.20916192737337358, 0.21203923812026038, 0.17157442665000977, 0.16973467058584013, 0.20020816000908592, 0.17020606592172038, 0.17368335055244055, 0.18101905274090602, 0.17357785798417735, 0.17902557563663135, 0.17349393711716365, 0.07948346602942236, 0.08348380111728515, 0.07148413639137363, 0.07357189098720796, 0.07956856977895255, 0.07691049615853518, 0.07640218826181777, 0.09689492067801442, 0.07470704330818878]}, "mutation_prompt": null}
{"id": "1dbd5e34-09e1-4db7-bb77-92c91632717d", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Enhanced ADHS with adaptive crossover probability and elitism-based selection to improve convergence speed and accuracy.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81db2eaa-1087-41ea-84a9-c891ec4ae113", "metadata": {"aucs": [0.8760681258721768, 0.8760007285562506, 0.8810631490900115, 0.8865380502891747, 0.9046372538252885, 0.8798173316238911, 0.8714066487489134, 0.8956448074357046, 0.8863964702518567, 0.8106056112959258, 0.8069706143214483, 0.820649931334505, 0.798694736841502, 0.8132543180222311, 0.8164569091805902, 0.7812725768375517, 0.8075249467904537, 0.7999509018957143, 0.5011826838049712, 0.1762357495316279, 0.16903013360926522, 0.5662449891676343, 0.5345257088716808, 0.16674693469024227, 0.5857383294862496, 0.15967847742900354, 0.1679827127864204, 0.16935648000543957, 0.14503003677541215, 0.14210388422904363, 0.14580818269046025, 0.4843207369196346, 0.5920147309945312, 0.16411014547705893, 0.16702732543504284, 0.6443717983299342, 0.9716696964577817, 0.969814485166815, 0.977893043389875, 0.9363773742438521, 0.960067029843308, 0.9604673920985101, 0.9832040344509256, 0.9595097436965795, 0.9623856960989781, 0.6949829593563883, 0.6967213479755193, 0.6707159010720827, 0.6958848633058733, 0.673250721250227, 0.6905486909121414, 0.6967259100686649, 0.6898422969043623, 0.08903580374820053, 0.786521592647067, 0.8167957495298211, 0.8028725671436845, 0.8087754261601827, 0.8454416381504903, 0.8635926959269808, 0.8372772388778562, 0.861047888276284, 0.8273204993749854, 0.6409199466786597, 0.5697105833554698, 0.569145501017762, 0.5911485813141073, 0.4356554243876559, 0.6171893049011494, 0.5049482853914468, 0.648041309996199, 0.5766180161786336, 0.12307745216395027, 0.5874215909319886, 0.638401672059844, 0.610472188822679, 0.6385082843284822, 0.6087429437810554, 0.6178283635092113, 0.3832109773381781, 0.4798357665245526, 0.49356488968281487, 0.5177604657399251, 0.5049724608952781, 0.4954019216403329, 0.4579016387713597, 0.4670868435685599, 0.44578936340481556, 0.48755919229815203, 0.5138894620852288, 0.6327906771756656, 0.605450084228852, 0.5617174325667507, 0.5546814721181017, 0.6361131733856247, 0.6014819225793804, 0.660335186239573, 0.6577157318571407, 0.6715633123540233, 0.11426928065808639, 0.3490090418034564, 0.09258530640127227, 0.38220541239134087, 0.27574259876929863, 0.28529244349903216, 0.1482020748933257, 0.24042462154338062, 0.19940649947115519, 0.36503779813272563, 0.40098247492159145, 0.4280254279905825, 0.4159753297492226, 0.44198560565277223, 0.4288768280206041, 0.40469862502682485, 0.42611368776297154, 0.37355444961777096, 0.7944596633935843, 0.7789105082634827, 0.7732882525976638, 0.7905498351757886, 0.7854135284067423, 0.7728567383674022, 0.7940714995110745, 0.7801369588604545, 0.7711249500787012, 0.09851882249681787, 0.10785628871533026, 0.11503490080528722, 0.09529496068262866, 0.10474096695535973, 0.10618506693579821, 0.0965628157627807, 0.11551916583325006, 0.1811526485126035, 0.16130147401987815, 0.1645486640639694, 0.17063514886326026, 0.14314415369112643, 0.17023542051370277, 0.11806528335110489, 0.28390231125368415, 0.11703921534013384, 0.15661186585588927, 0.5328026929858207, 0.49356177184415406, 0.5757553603922254, 0.575311871020561, 0.5262130669625908, 0.46495853706344514, 0.5731272532129112, 0.5620993177003346, 0.6136740417219525, 0.34134535337469507, 0.3528043302368429, 0.3383245631374088, 0.32163904990737824, 0.3749949418794566, 0.4005322114689056, 0.3946372687821429, 0.3715017896726105, 0.4979443146908492, 0.18371697434329726, 0.2119429579098725, 0.19100178938040968, 0.19708898650495954, 0.20252874870346238, 0.17849826193269547, 0.17713856270855544, 0.1912294172506951, 0.17657655024406282, 0.5909538712590526, 0.5708350651994138, 0.2113924014554055, 0.5715049310008993, 0.621493323380294, 0.5030937238262891, 0.20138700027842715, 0.2375431558681731, 0.537653913865308, 0.1708806837764334, 0.8781740075417335, 0.899077468002129, 0.19378902471257786, 0.17429767154898368, 0.19176558024376034, 0.1682873655564472, 0.1442460554613001, 0.16622725874737587, 0.7815502311717576, 0.2057953554080213, 0.7820724954606367, 0.16517871672077888, 0.20291288767935778, 0.762743638071689, 0.20289197910040535, 0.20916192737337358, 0.21203923812026038, 0.17157442665000977, 0.16973467058584013, 0.20020816000908592, 0.17020606592172038, 0.17368335055244055, 0.18101905274090602, 0.17357785798417735, 0.17902557563663135, 0.17349393711716365, 0.07948346602942236, 0.08348380111728515, 0.07148413639137363, 0.07357189098720796, 0.07956856977895255, 0.07691049615853518, 0.07640218826181777, 0.09689492067801442, 0.07470704330818878]}, "mutation_prompt": null}
{"id": "aea74d93-50a8-45b1-93a0-0bd2ddc37a38", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def local_search(self, solution, best_solution):\n        step_size = 0.1 * np.random.rand(self.dim)\n        return np.clip(solution + step_size * (best_solution - solution), self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n            new_solution = self.local_search(new_solution, best_solution)  # Added local search\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Introducing dynamic parameters and hybridization with local search to enhance exploration and exploitation balance.", "configspace": "", "generation": 38, "fitness": 0.42180135290126086, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.29.", "error": "", "parent_id": "81db2eaa-1087-41ea-84a9-c891ec4ae113", "metadata": {"aucs": [0.8931335406044997, 0.9123178383389151, 0.902844313975681, 0.9035994515110806, 0.9001009808728273, 0.9006692352645862, 0.8948757198190961, 0.9022960145721242, 0.9049591965149084, 0.8339776780000671, 0.830738678194577, 0.8421342597313413, 0.8246609971016563, 0.8266028391226904, 0.8511161909787516, 0.8542377253294496, 0.8516103568602498, 0.846651018861643, 0.14917815347236463, 0.17091567114135575, 0.14555936833587801, 0.5511314917181609, 0.17677048357464542, 0.1793504578545313, 0.14281552062887182, 0.13716313021550053, 0.18075116653100398, 0.15755473425188282, 0.15125678483577487, 0.16195617883518898, 0.1357336764094652, 0.13522248907786938, 0.16877922321062555, 0.1347854937810563, 0.12910705872557393, 0.1647790930452696, 0.9318463245000022, 0.9222613384138908, 0.9250298419115668, 0.9042754019287536, 0.9265156779764778, 0.8882831153528137, 0.9026006222251419, 0.924509504112205, 0.92718772170892, 0.7251288053845837, 0.7145310511189962, 0.759318784071864, 0.704723819185523, 0.6043940112865409, 0.665416608755458, 0.7322588214690601, 0.6854102536323332, 0.7027562448700746, 0.9016520831097464, 0.8499585972716894, 0.8715828332665877, 0.8997404877719148, 0.8716965405532813, 0.8826648206270191, 0.890058993382491, 0.8595412403354769, 0.8722908980071493, 0.7328531294906961, 0.5284363268263624, 0.22148132135819398, 0.6850681958183911, 0.6656885750108263, 0.19350063650899096, 0.22152631423809166, 0.21254869889890537, 0.1951142353388149, 0.3338735889208515, 0.6435731318703248, 0.23903211793206003, 0.5737026443461417, 0.19482135298281833, 0.7039328373770507, 0.5834469536269384, 0.595573331267739, 0.2921723108338, 0.2099476417206897, 0.16889465198403053, 0.34337869835778734, 0.27793018557163596, 0.271871430382122, 0.21278073692839494, 0.3755392497737945, 0.3136911013831284, 0.3668254459514555, 0.19701587892700068, 0.21274842396571314, 0.22685473672183276, 0.17655124379695575, 0.17506103353927316, 0.19334056490781582, 0.3064311914344501, 0.25788189462554334, 0.25292616535234647, 0.09184532051399708, 0.17618877045305203, 0.17160261060915472, 0.1742529840726822, 0.21980388264985984, 0.20399304572742627, 0.11425353398778137, 0.14677412658825684, 0.25070009285198946, 0.38096333145429084, 0.31350722170791245, 0.3665138803115461, 0.36645337478544693, 0.3657531424785049, 0.332886635019048, 0.32328758205275354, 0.35034992900287854, 0.32493030516627264, 0.7213192331801854, 0.6925777356273917, 0.6943639344501769, 0.7080862387832969, 0.7148835151708682, 0.7041627421913704, 0.7103502031930305, 0.7325672147306345, 0.7308453933061592, 0.10304579535919534, 0.1466422699123694, 0.13430691004725703, 0.1091995514462264, 0.11436608169824847, 0.11095552135143738, 0.11748122019924945, 0.10392480853610575, 0.10642442348250225, 0.18328659593472518, 0.2615726850069936, 0.15712265942516046, 0.13062696702746512, 0.14811630944464882, 0.21252271243790077, 0.1998935611779059, 0.1370741501330589, 0.17245738883712292, 0.6084983049937889, 0.6607652564238176, 0.6402084870149352, 0.5340174932777109, 0.5753265103323525, 0.6363194680884499, 0.6492344393258016, 0.6918299251439488, 0.6864121891907979, 0.3746665586594198, 0.33838179217610864, 0.4242888215488114, 0.4378663443768601, 0.39764007578447347, 0.40172920143333024, 0.4985611268561665, 0.5051825153063612, 0.5400108519314721, 0.18827483247968757, 0.18845006684789312, 0.2032163674129167, 0.19310942964116484, 0.19293632802467253, 0.19494410457921363, 0.2294864716566355, 0.18608310668474104, 0.18796690996694532, 0.7528059039181649, 0.23400627616637926, 0.24528017370292032, 0.2310768339127165, 0.23619889893203028, 0.24421134460971483, 0.20506149527129258, 0.7049395857589362, 0.2039517203980672, 0.8470855130854903, 0.9089385416799811, 0.15116803933636924, 0.19611298237642527, 0.1949911288924968, 0.1703594107305566, 0.8422125201852213, 0.17512574856641494, 0.203613310213419, 0.8814552679799019, 0.16935468901116746, 0.2110448067880918, 0.2007995325574522, 0.1644299613435234, 0.21071696516819827, 0.21257605525505607, 0.21328789528188952, 0.9110662364241198, 0.18517918664770072, 0.18799440810019974, 0.19879072633169692, 0.20257062821461502, 0.19611465663591865, 0.18815343095271464, 0.18076854352653882, 0.18626815174717992, 0.17928051511056708, 0.07687208955284464, 0.07988073821003017, 0.08047497903489553, 0.07286605221656572, 0.0808836884177434, 0.07682773042222701, 0.0934194743978265, 0.08502653037672148, 0.08722065704865001]}, "mutation_prompt": null}
{"id": "89c68715-598b-4fcd-b4c1-0d8bfd40721b", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * diversity_factor\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        mutant = harmony_memory[a] + self.f * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Enhanced ADHS with adaptive crossover probability and elitism-based selection to improve convergence speed and accuracy.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "81db2eaa-1087-41ea-84a9-c891ec4ae113", "metadata": {"aucs": [0.8760681258721768, 0.8760007285562506, 0.8810631490900115, 0.8865380502891747, 0.9046372538252885, 0.8798173316238911, 0.8714066487489134, 0.8956448074357046, 0.8863964702518567, 0.8106056112959258, 0.8069706143214483, 0.820649931334505, 0.798694736841502, 0.8132543180222311, 0.8164569091805902, 0.7812725768375517, 0.8075249467904537, 0.7999509018957143, 0.5011826838049712, 0.1762357495316279, 0.16903013360926522, 0.5662449891676343, 0.5345257088716808, 0.16674693469024227, 0.5857383294862496, 0.15967847742900354, 0.1679827127864204, 0.16935648000543957, 0.14503003677541215, 0.14210388422904363, 0.14580818269046025, 0.4843207369196346, 0.5920147309945312, 0.16411014547705893, 0.16702732543504284, 0.6443717983299342, 0.9716696964577817, 0.969814485166815, 0.977893043389875, 0.9363773742438521, 0.960067029843308, 0.9604673920985101, 0.9832040344509256, 0.9595097436965795, 0.9623856960989781, 0.6949829593563883, 0.6967213479755193, 0.6707159010720827, 0.6958848633058733, 0.673250721250227, 0.6905486909121414, 0.6967259100686649, 0.6898422969043623, 0.08903580374820053, 0.786521592647067, 0.8167957495298211, 0.8028725671436845, 0.8087754261601827, 0.8454416381504903, 0.8635926959269808, 0.8372772388778562, 0.861047888276284, 0.8273204993749854, 0.6409199466786597, 0.5697105833554698, 0.569145501017762, 0.5911485813141073, 0.4356554243876559, 0.6171893049011494, 0.5049482853914468, 0.648041309996199, 0.5766180161786336, 0.12307745216395027, 0.5874215909319886, 0.638401672059844, 0.610472188822679, 0.6385082843284822, 0.6087429437810554, 0.6178283635092113, 0.3832109773381781, 0.4798357665245526, 0.49356488968281487, 0.5177604657399251, 0.5049724608952781, 0.4954019216403329, 0.4579016387713597, 0.4670868435685599, 0.44578936340481556, 0.48755919229815203, 0.5138894620852288, 0.6327906771756656, 0.605450084228852, 0.5617174325667507, 0.5546814721181017, 0.6361131733856247, 0.6014819225793804, 0.660335186239573, 0.6577157318571407, 0.6715633123540233, 0.11426928065808639, 0.3490090418034564, 0.09258530640127227, 0.38220541239134087, 0.27574259876929863, 0.28529244349903216, 0.1482020748933257, 0.24042462154338062, 0.19940649947115519, 0.36503779813272563, 0.40098247492159145, 0.4280254279905825, 0.4159753297492226, 0.44198560565277223, 0.4288768280206041, 0.40469862502682485, 0.42611368776297154, 0.37355444961777096, 0.7944596633935843, 0.7789105082634827, 0.7732882525976638, 0.7905498351757886, 0.7854135284067423, 0.7728567383674022, 0.7940714995110745, 0.7801369588604545, 0.7711249500787012, 0.09851882249681787, 0.10785628871533026, 0.11503490080528722, 0.09529496068262866, 0.10474096695535973, 0.10618506693579821, 0.0965628157627807, 0.11551916583325006, 0.1811526485126035, 0.16130147401987815, 0.1645486640639694, 0.17063514886326026, 0.14314415369112643, 0.17023542051370277, 0.11806528335110489, 0.28390231125368415, 0.11703921534013384, 0.15661186585588927, 0.5328026929858207, 0.49356177184415406, 0.5757553603922254, 0.575311871020561, 0.5262130669625908, 0.46495853706344514, 0.5731272532129112, 0.5620993177003346, 0.6136740417219525, 0.34134535337469507, 0.3528043302368429, 0.3383245631374088, 0.32163904990737824, 0.3749949418794566, 0.4005322114689056, 0.3946372687821429, 0.3715017896726105, 0.4979443146908492, 0.18371697434329726, 0.2119429579098725, 0.19100178938040968, 0.19708898650495954, 0.20252874870346238, 0.17849826193269547, 0.17713856270855544, 0.1912294172506951, 0.17657655024406282, 0.5909538712590526, 0.5708350651994138, 0.2113924014554055, 0.5715049310008993, 0.621493323380294, 0.5030937238262891, 0.20138700027842715, 0.2375431558681731, 0.537653913865308, 0.1708806837764334, 0.8781740075417335, 0.899077468002129, 0.19378902471257786, 0.17429767154898368, 0.19176558024376034, 0.1682873655564472, 0.1442460554613001, 0.16622725874737587, 0.7815502311717576, 0.2057953554080213, 0.7820724954606367, 0.16517871672077888, 0.20291288767935778, 0.762743638071689, 0.20289197910040535, 0.20916192737337358, 0.21203923812026038, 0.17157442665000977, 0.16973467058584013, 0.20020816000908592, 0.17020606592172038, 0.17368335055244055, 0.18101905274090602, 0.17357785798417735, 0.17902557563663135, 0.17349393711716365, 0.07948346602942236, 0.08348380111728515, 0.07148413639137363, 0.07357189098720796, 0.07956856977895255, 0.07691049615853518, 0.07640218826181777, 0.09689492067801442, 0.07470704330818878]}, "mutation_prompt": null}
{"id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 40, "fitness": 0.49582994548405446, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.29.", "error": "", "parent_id": "81db2eaa-1087-41ea-84a9-c891ec4ae113", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "2ea6826b-bec7-4215-8145-129178693a1c", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "40469d43-10ac-4f7d-be11-9f01d3ef8808", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "49975972-a44a-4f72-8c9b-05277e1bed77", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "ec714a55-f837-40bf-9a17-d73f4ceb91f8", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30\n        self.hmcr = 0.9 + 0.1 * np.random.rand()\n        self.par = 0.5\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)\n        self.evaluations = 0\n        self.f = 0.8\n        self.cr = 0.9\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        adaptive_par = min(1.0, self.par + 0.1 * diversity_factor)  # Adaptive PAR\n        for i in range(self.dim):\n            if np.random.rand() < adaptive_par:  # Use adaptive PAR\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        adaptive_f = self.f * (1 + 0.1 * np.random.rand())  # Adaptive differential weight\n        mutant = harmony_memory[a] + adaptive_f * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHSOptimizer with synergy between global and local search through adaptive boundary exploration and refined mutation scheme.", "configspace": "", "generation": 44, "fitness": 0.4472967944771941, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8697880170574307, 0.8638879719469726, 0.8848506776880795, 0.8763159288474883, 0.8812421003312427, 0.8861860788668563, 0.8827246698458988, 0.8822513883133194, 0.8749471605223273, 0.8000495097015982, 0.7947118063094548, 0.8031019177628427, 0.7949861374937054, 0.8191113278662793, 0.7830837014745367, 0.7720469574996531, 0.8031780342670714, 0.805665150418295, 0.1713357142745603, 0.6478164492080241, 0.17699148712586688, 0.5778245406204526, 0.15931485703308845, 0.15896761333057507, 0.4567669397633617, 0.5670094326116222, 0.13451405185322396, 0.1420982142896713, 0.16105494351053473, 0.14698984715749797, 0.16906330899836008, 0.48763185165017964, 0.15944627030039626, 0.15858965605645858, 0.16480507371091357, 0.1255898950331681, 0.9631376292243857, 0.9763550928858455, 0.9424072866105776, 0.9760492566970892, 0.9661379390017767, 0.9644914088884395, 0.9690656371672739, 0.9535931987266658, 0.9608831609488174, 0.6641253379707759, 0.6866336625211982, 0.6818612679051875, 0.658559526766541, 0.7149858650436038, 0.6711161345593819, 0.6716127951489401, 0.633889466555765, 0.707803690025256, 0.7779132141603025, 0.779485389061802, 0.8197525388961207, 0.8439566067883676, 0.5609025509071827, 0.8400925525585285, 0.817716528342781, 0.8073486518731862, 0.8326403676737177, 0.6604115320971, 0.4762016785759249, 0.6093885048973304, 0.6255687193890395, 0.5694574763675337, 0.5867768975456148, 0.5538984576434403, 0.6540908212737625, 0.5896248900062608, 0.022302894467501, 0.12992417513701948, 0.13174332486724705, 0.5940789878138016, 0.6476869783732669, 0.5964372067430783, 0.5586870358809293, 0.5899480182752366, 0.42465315400342996, 0.46247317141711586, 0.4655580678964627, 0.44830667806125013, 0.43715364561591197, 0.4457487075190304, 0.45245462791474844, 0.4368510978042114, 0.3729607022575039, 0.4803348428929065, 0.5433509693462528, 0.5801244205935439, 0.5743374119989579, 0.6039766441625554, 0.5411743180810615, 0.5135683536866693, 0.645880600757553, 0.5980381451910523, 0.6465548120677849, 0.2485226862148372, 0.20725322864640316, 0.20953239859587525, 0.3464653964182658, 0.27295439073665984, 0.2687736926003471, 0.21416895124927682, 0.1858398271198084, 0.18173546807754692, 0.3504068944244918, 0.41181867551029194, 0.32808281446632814, 0.3539658408828439, 0.373521636506834, 0.37650303097117843, 0.34189871655513826, 0.35673702150234465, 0.3538340187850938, 0.768612085106681, 0.7588083628875675, 0.7823148804050313, 0.7566691801523109, 0.7557088353598583, 0.7505549429387597, 0.7450501324404635, 0.7641824207934095, 0.7779330461257506, 0.1041733335375562, 0.10533768165919066, 0.1534810117427431, 0.10858020832001625, 0.11899775998227835, 0.09474901522290569, 0.1014648172146031, 0.09256015414417029, 0.1175404976354183, 0.17192814115273647, 0.14397941074175014, 0.13153220553331468, 0.11550830619519781, 0.12737125719097453, 0.1571321443028313, 0.226365181748317, 0.14804749673760653, 0.1498006709390729, 0.4451316416425445, 0.45665049392110035, 0.5106477066375307, 0.508685288777738, 0.4260459474240955, 0.5240346524029227, 0.535831014488092, 0.5256412601881844, 0.4834235158067459, 0.3360671401109192, 0.34792161297528756, 0.3567425660627358, 0.3630573845313584, 0.35279875456428567, 0.37803965898130576, 0.40333690442918446, 0.3697714403127079, 0.3818269700923278, 0.19724423618397247, 0.182151889233917, 0.1858887633164794, 0.17856313081826924, 0.18632774101959104, 0.1788764460456188, 0.20529954190433086, 0.19368778193791092, 0.19441970541375908, 0.24727160797087633, 0.24709619756563395, 0.23961165443156118, 0.6126792351797696, 0.4698428844337049, 0.5747157465439889, 0.2366082621675608, 0.19531177638973796, 0.23920700649124682, 0.8743465219744169, 0.873414494659082, 0.1696098919021688, 0.1951094166536953, 0.8770590660804076, 0.7263203709157912, 0.7502914452497449, 0.17281259156543305, 0.20933481393799713, 0.20817999030154877, 0.1688849939169621, 0.20784599277959281, 0.1651532879623706, 0.8104743616249424, 0.16785325698508802, 0.21313706316459213, 0.20959703929221918, 0.21358796770297472, 0.18189582325163078, 0.19352305191481278, 0.1761593067562489, 0.17136591361235043, 0.1909554518284019, 0.1750993543513918, 0.19619590432741474, 0.16652448308335155, 0.20500286883848307, 0.0950037489063521, 0.07090508073744117, 0.08340901438857984, 0.07145416437699881, 0.07258686089130129, 0.08623318070303354, 0.0894846573143222, 0.07163428555565476, 0.06862304942344422]}, "mutation_prompt": null}
{"id": "eee4a285-8709-44a1-a8be-0c5a2795670f", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "53e86ec7-98ca-4436-9855-0cec534078a6", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "e961cbbf-8662-4245-893b-09e7902965fd", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "6feddfd1-ccf3-4aed-9ec6-56197ffa0aaf", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (1.0 + diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  \n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n            elif np.random.rand() < 0.1:  # Exploration strategy\n                alternative_idx = np.random.randint(self.hms)\n                harmony_memory[alternative_idx] = new_solution\n                harmony_memory_fitness[alternative_idx] = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHSOptimizer with improved selection strategy and adaptive bandwidth scaling to refine search efficiency.", "configspace": "", "generation": 48, "fitness": 0.42916409456906796, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.28.", "error": "", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8826931318208767, 0.8850029088912866, 0.8967138201834589, 0.8850821976324015, 0.8966881089940554, 0.8961472437592912, 0.8794194973866811, 0.8928994326931616, 0.9062637779801631, 0.8297871477315908, 0.8322228057427972, 0.8069074883461202, 0.8054884114217934, 0.799950253357977, 0.8220607707074663, 0.8017336011583813, 0.8365569766901402, 0.824709192787815, 0.12724812557814058, 0.13644367862484852, 0.13198679449328543, 0.11263181235889863, 0.13255271128479706, 0.27737676825540536, 0.12983039197019675, 0.11217522511030642, 0.1499756103761134, 0.12263364844780134, 0.11529184367862688, 0.11140030400463596, 0.15072861047934416, 0.12901359709342575, 0.145233998208404, 0.10557394871512282, 0.24266117804935972, 0.13186239406574896, 0.939733759996095, 0.960246226010349, 0.96428894355924, 0.9656527552701328, 0.9464254454382846, 0.9546165487450479, 0.9736270921136146, 0.9849159207263047, 0.9794407623658737, 0.6679065297794126, 0.691353662737416, 0.6452562936678861, 0.6437858849766422, 0.6839353295108748, 0.6474798602241745, 0.6575824658360535, 0.67355486106203, 0.6553581006203286, 0.7746619543442943, 0.7644003963403082, 0.8239353665190953, 0.8419190820221509, 0.8607783019575699, 0.8532953405717407, 0.8163789618467754, 0.8319979725005285, 0.7991923518475179, 0.19895608651745167, 0.6111572792411842, 0.6697790626793905, 0.5526104714184312, 0.5298328737909523, 0.24784159390794247, 0.5926288355713623, 0.5828765905790723, 0.2538934827235686, 0.010050474287279898, 0.23966242148671912, 0.2191917266684601, 0.5986264979323684, 0.5627505297604992, 0.22143860196415377, 0.3070678027109869, 0.5955131080867759, 0.5827003376181987, 0.46755139317223393, 0.38362888765940784, 0.39741068180720496, 0.39759444350500384, 0.42593633042698165, 0.4129774444838067, 0.39406535301739387, 0.4070654763798769, 0.43035059614875004, 0.5204364386704206, 0.526802601924375, 0.5369048754200689, 0.5854908881355667, 0.5663753957576775, 0.5383596267288857, 0.6862224513373931, 0.5950669945968755, 0.6141911329232322, 0.25775070462214933, 0.17001269549964748, 0.12343676672217008, 0.20892635637510848, 0.3800021179788182, 0.4135978477830654, 0.16357345883374474, 0.16052214399892295, 0.14985822324331477, 0.3696316110799135, 0.3619774394503079, 0.3258484255089842, 0.40313624063126474, 0.39438300642046653, 0.40109238499054023, 0.3550154599362454, 0.3749375906614768, 0.3741733911695424, 0.7877665022823159, 0.7902184961882064, 0.7786563284727993, 0.7553626601470732, 0.7819778789444979, 0.7814552722808161, 0.7634557955133734, 0.8069026546328661, 0.7674654312352669, 0.0962265780965299, 0.0908050430470907, 0.10014029253690682, 0.0929747440515084, 0.1162191156126623, 0.09108241469149692, 0.09989111978791265, 0.08603097198214305, 0.08774433532866766, 0.20642707306481456, 0.16737154061936088, 0.37567619172957145, 0.1783032614153791, 0.14106473811087872, 0.2183059828972328, 0.14193640415317565, 0.1218958665237182, 0.2210131176037814, 0.5340754307735709, 0.5704981877644232, 0.5194779503914007, 0.5521498012736475, 0.4714932256190013, 0.5348812967830792, 0.643994843093652, 0.591308657095704, 0.5702163149416565, 0.29088591638143124, 0.3389496850915297, 0.3985111401386876, 0.34211780065663144, 0.34035656541015746, 0.33874595631588367, 0.3655942801464759, 0.3462868292972825, 0.3879666180888668, 0.18701177789641088, 0.17112303170910326, 0.21352469032418886, 0.17785477933621618, 0.1822779735017691, 0.19095499891597423, 0.206196498126769, 0.1936904988458803, 0.19820853424858365, 0.33568032391410607, 0.30041297697711833, 0.3670108405381116, 0.3930648583012696, 0.2945616176587047, 0.3337734155095169, 0.6991998438834005, 0.20093344149743653, 0.7073914159159376, 0.8928624220187485, 0.8638296692385041, 0.15278310589456245, 0.16689991339741483, 0.18490502903778339, 0.17146893765516757, 0.16249191999338675, 0.16983949474818494, 0.17560271048173237, 0.17370085239710986, 0.2684870900248081, 0.16798588447691687, 0.1666561729316458, 0.17092419758702926, 0.8190482126828745, 0.19921646223011158, 0.21329668843512684, 0.19739341789371045, 0.17604379866241615, 0.1876023488450307, 0.20376899281412064, 0.18539788033615567, 0.17092189094742316, 0.1868635932723406, 0.19329717121021384, 0.18613430651307472, 0.19801181697067827, 0.0735156399911917, 0.08389911068834821, 0.08433310857050691, 0.07988302138946402, 0.08437086159588558, 0.07387467683771898, 0.09746180973791418, 0.10795783468360409, 0.07441032279884663]}, "mutation_prompt": null}
{"id": "5ea94a50-79b6-4744-9254-ae78fb3994b0", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "c6caec66-4c84-4915-bd85-092f310616e7", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "1be5389f-041a-4e7a-840d-5976a4da2ec1", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "db3b323b-fdfb-4b12-90ea-e4ed8326ae48", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30\n        self.hmcr = 0.9 + 0.1 * np.random.rand()\n        self.par = 0.5\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)\n        self.evaluations = 0\n        self.f = 0.8\n        self.cr = 0.9\n        self.learning_rate = 0.5  # New adaptive learning rate\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def update_learning_rate(self, best_fitness, harmony_memory_fitness):\n        # Adaptive learning rate based on fitness improvement\n        self.learning_rate = 0.5 * (1 - best_fitness / max(harmony_memory_fitness))\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.update_learning_rate(best_fitness, harmony_memory_fitness)\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Introduced adaptive learning rate and elitism mechanism to enhance convergence and solution diversity.", "configspace": "", "generation": 52, "fitness": 0.49582994548405446, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.29.", "error": "", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "ac0c63e9-8f74-43af-b5a4-07d3ae765381", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "345f6111-b2c1-4506-b3fb-d0b4f855a8b3", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "babbb8c7-ea6a-4419-a669-e10e1a0d7dd2", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "1941d8a1-f36d-42c5-aba9-7e77da142639", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.4 + np.random.rand() * 0.6  # More adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n        dynamic_hms = self.hms  # Dynamic population size\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(dynamic_hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Refined EnhancedADHSOptimizer with adaptive parameter tuning and dynamic population size for improved convergence and exploration.", "configspace": "", "generation": 56, "fitness": 0.48677983190588525, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.30.", "error": "", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.9084252948083622, 0.8997920761431595, 0.9089190803823928, 0.9142468363144903, 0.9121240629536949, 0.904155194062317, 0.9096777467014946, 0.9104618105453217, 0.916325811159482, 0.8445628291772951, 0.8646673019434675, 0.8496745123770674, 0.8600261954660315, 0.8566965031961433, 0.8486447882103703, 0.8567777279725738, 0.8488024754436723, 0.8379359511260722, 0.5642743734040424, 0.17282209167617002, 0.1771860598721996, 0.14237935963819348, 0.6327125055534439, 0.1588618125687461, 0.61119497842987, 0.6330760116791215, 0.17900529762835282, 0.6682447848096015, 0.15220412951376017, 0.7023670930713712, 0.16609424054139965, 0.1752120614659458, 0.1812303470808606, 0.14858425117328256, 0.7060144514453046, 0.5396359988648021, 0.9506155778240164, 0.9696671188557118, 0.9719477826500666, 0.9281009893922036, 0.9530151517997874, 0.9562109509031309, 0.9587458711754308, 0.9157147281064315, 0.9642352781741237, 0.7618186003819166, 0.6594646422145233, 0.6585101815375396, 0.6163621237186248, 0.6514253301812603, 0.7234701393669538, 0.397369238284087, 0.11857547621265807, 0.7204845465712595, 0.8714078527290531, 0.8667886449523682, 0.8527816947211793, 0.8772170982703771, 0.874026617600968, 0.783554704351882, 0.8697311797945715, 0.8769601485537253, 0.8957911384053986, 0.27963652905334935, 0.23594350756882643, 0.16020382325278892, 0.6670297615589613, 0.128784319573078, 0.15401483936026505, 0.4636815095961544, 0.2226340700182674, 0.6682405586154432, 0.20934599460345193, 0.12197545897536644, 0.18983881117334933, 0.17741016294858436, 0.23641335116209417, 0.7261254369105918, 0.2601048760442498, 0.6875596043625554, 0.2993582686479497, 0.34159291393435454, 0.11924547593951285, 0.6256549983826347, 0.6276355492929638, 0.5766936785122003, 0.6376844426843977, 0.643305951168079, 0.5814720910294862, 0.6109731410831607, 0.24880871395566728, 0.7189897157513349, 0.7156623330541838, 0.7118908624889821, 0.703732058802836, 0.7143133387851941, 0.7332654692526851, 0.7538800131635904, 0.7484930231857749, 0.07255078429044204, 0.11761247346837989, 0.18469899843308013, 0.5650114628623873, 0.3134688030579772, 0.255778681109027, 0.17251543108700085, 0.1294104281518348, 0.18841659828918556, 0.5194408973200297, 0.5612256645704584, 0.5227859052672872, 0.5391756881583766, 0.5679019605348548, 0.5708382714262508, 0.5073733285628853, 0.5432205090262436, 0.5486078389860294, 0.8534053550146865, 0.82155503855724, 0.8174058603132659, 0.8265919545441649, 0.8274768620028434, 0.7458720995412675, 0.8323888409236795, 0.8207566848744482, 0.8394619874527738, 0.13358063027896405, 0.1234782042889292, 0.12320581851630863, 0.11722393626353078, 0.21757673334914884, 0.15117778306803553, 0.13030496881087728, 0.12764123303528963, 0.1076110817230056, 0.23278299058330254, 0.16864208725662355, 0.1618117621620504, 0.22730718967984365, 0.2165811474995658, 0.2501090312957003, 0.18079656158180712, 0.3944242826516049, 0.22042213321877024, 0.6367438172850473, 0.6702098636284539, 0.6676648279672558, 0.7158555471301302, 0.6759919730795185, 0.7067665079007889, 0.6717200468679592, 0.7043250895735382, 0.7064756264897731, 0.4823844971098671, 0.42576734109469305, 0.4527236770168086, 0.5154935543894927, 0.5524911270491142, 0.4827448458752307, 0.5544194016276032, 0.5932956620656673, 0.4815531745829269, 0.20710390537843615, 0.20380815809622932, 0.19103111086893143, 0.21319553263636826, 0.17833979909122266, 0.20548371332955317, 0.20761230511782558, 0.1868319822143888, 0.2077329076577591, 0.23839522382338807, 0.22097576676181196, 0.6938647884773879, 0.23800071232507458, 0.22216891599211186, 0.6260941137543304, 0.7748934583598988, 0.7031661406495167, 0.24259826224214176, 0.8539589166186508, 0.16413379810395512, 0.16281430316863899, 0.8864638809282325, 0.16558013597358734, 0.19491582836088162, 0.8354253143252829, 0.8449157953042581, 0.21021701763229694, 0.4380345360202025, 0.8695025723818725, 0.2099301299048435, 0.2030373232787248, 0.8703478183349451, 0.20871249685694593, 0.21241463798976878, 0.22612899549050358, 0.21281517403594497, 0.21128550002596158, 0.1671628636671023, 0.18365290624282948, 0.19569071686703632, 0.1967699868298194, 0.17780150214904022, 0.1875260106148413, 0.19920309550852233, 0.17946680035912776, 0.08417686458515328, 0.08011469207116295, 0.08378182114851984, 0.08201530571393578, 0.08496749630174949, 0.08546422411798849, 0.10750951303072964, 0.07847984316521106, 0.07387300694174848]}, "mutation_prompt": null}
{"id": "0719ed46-4a3a-401f-bb06-11fdb6c4ae6b", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "551bd4d8-dc2d-42c3-b527-6a8d1300414f", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "4e6dc920-1799-43fa-88ef-37582c35db0a", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "b34e3e67-63ca-4839-854b-c86e881ada37", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory, best_solution):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = best_solution + scaler * (harmony_memory[b] - harmony_memory[c])  # Seeding by best solution\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory, best_solution)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHSOptimizer with adaptive bandwidth and differential mutation seeded by best solution for improved exploration-exploitation balance.", "configspace": "", "generation": 60, "fitness": 0.4541443428622961, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.35.", "error": "", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.9558126718664994, 0.9570902780584595, 0.9548591083619672, 0.9589866107778321, 0.9560764304655791, 0.9536517914611715, 0.9549371371095086, 0.9583478400597469, 0.17626349524440776, 9.999999999998899e-05, 0.932854230352803, 0.9283116358520624, 0.9188595113112781, 0.9144333286265487, 0.933145337745875, 0.9158190981378386, 0.9256784586416557, 0.01982283999447232, 0.11726530198324703, 0.14937841337827484, 0.12631200638322337, 0.1268694261098342, 0.1491506938751418, 0.11958483198475, 0.06864380156811112, 0.10286111430998413, 0.07348695599961552, 0.14889963020133468, 0.09788452011190019, 0.07312760777592231, 0.07307324344826516, 0.13567827585908088, 0.12766031575148884, 0.08072180717059962, 0.1191021932502796, 0.14763108618619225, 0.9900598313820542, 0.989460287804206, 0.9875775787097868, 0.9936693723390132, 0.9896639062679348, 0.9926159562050623, 0.9933722117477064, 0.9913525189287122, 0.9854563779319437, 0.9011385933770575, 0.9003377766669286, 0.9054041400059274, 0.9010059834293693, 0.8978597152257062, 0.897788093419424, 0.8943753603551499, 0.8833070737746032, 0.9021158725063839, 0.9241268145906383, 0.14028208630062744, 0.959842148132519, 0.3913404854561945, 0.16210978399051312, 0.1620272823372586, 0.3724495323055983, 0.24903440042152647, 0.23977117766707157, 0.8635305712951891, 0.8561401908779147, 0.8656732981313695, 0.8600140861145515, 9.999999999998899e-05, 0.13746825993984313, 0.8753812876377424, 0.8748126371211327, 0.8314438599655695, 0.12512487995521004, 0.8460407525616052, 0.8581343162149999, 0.1570470170771039, 0.13666238342343817, 0.833248400725037, 0.8680309855337777, 0.8668291259960926, 0.9084293249577098, 9.999999999998899e-05, 0.07679988330853227, 9.999999999998899e-05, 0.6073548272654242, 0.7662943427303397, 0.000762540285867308, 0.7143113105850876, 0.0041718868055588, 0.8435225147982696, 0.8544238164864016, 0.662752932408908, 0.5399093437318763, 0.7310620307565894, 0.12366902154672754, 0.8814769021066264, 0.8796429063461305, 0.8961952821976424, 0.809052114755141, 0.4556121178526914, 0.3921699204348692, 0.5026835024207659, 0.7687596649711591, 0.7500429520670975, 0.08725467253001096, 9.999999999998899e-05, 0.28714752617304307, 0.5572531807282004, 0.8156002334766781, 0.6307840253425834, 0.7643844692914685, 0.8288128407010238, 0.7644796137961439, 0.7928927063926279, 0.778026734290786, 0.8085366636864437, 0.7889102732708964, 0.9302270883720586, 0.9251690781916377, 0.9313098492653645, 0.9213795742508939, 0.9301808647206692, 0.9252610092102389, 0.9266874114239867, 0.9280519160752038, 0.9352178977825095, 0.07101696629234666, 0.07568224805280355, 0.1019713530790326, 0.15728448930075012, 0.10087239046579377, 0.09795843152109118, 0.1637034813785314, 0.1245598158238097, 0.190257234996295, 0.6174264163150106, 0.1731066157052461, 0.2642575614497549, 0.17190628695580346, 0.10617209580185971, 0.23754628739275618, 0.17544477803142744, 0.1694324661005192, 0.2315586527879756, 0.49593652435088453, 0.1557717632767941, 0.2570516836801988, 0.3153785744755503, 0.22675876220440294, 0.5594636066616909, 0.27056881354406814, 0.3407369934344603, 0.29751386399883495, 0.19942434538754605, 0.23632922631573716, 0.31613551082218205, 0.4374511732204448, 0.3158613488295646, 0.45639372366662345, 0.17427333112826415, 0.23048029599501296, 0.31003691088168184, 0.22873342873746483, 0.26532529429785134, 0.23085299811886684, 0.2074060399691332, 0.2043879909729348, 0.20351257268905243, 0.2051835845067933, 0.19754592873662635, 0.2017416243924015, 0.22809451243706913, 0.21126251159428788, 0.2148768126562789, 0.21330211345935335, 0.191511480256513, 0.21187098266156434, 0.21157560042411694, 0.20534695117227286, 0.19719943712492072, 0.16654188943128434, 0.9690053581663655, 0.15751119831238425, 0.1485384237022841, 0.1167959557929793, 0.1484705597759166, 0.16810888074585129, 0.1789827435932151, 0.17027332072706247, 0.9636672122930486, 0.9544606732861314, 0.21324922052293827, 0.16939213455351287, 0.16917815545573323, 0.1696974600293608, 0.20044829998070968, 0.20470478275344772, 0.199943324985406, 0.2223662624978272, 0.19738841659049733, 0.2441009761981363, 0.19149522853304757, 0.1865395346990415, 0.21418804787169432, 0.19805409015244868, 0.18982919699861622, 0.18605204075169868, 0.09540717844770519, 0.0886444889040251, 0.09458864275367995, 0.14455809276008535, 0.09236241486247732, 0.09229326490724343, 0.10842376307309365, 0.10716964047179844, 0.08471908508662696]}, "mutation_prompt": null}
{"id": "05e84324-81f4-4889-9303-f7fb05d84ea6", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.4 + 0.2 * np.random.rand()  # Adaptively tuned PAR\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.7 + 0.3 * np.random.rand()  # Adaptive crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Introduced dynamic parameters and elite solution preservation to enhance exploration and convergence in EnhancedADHSOptimizer.", "configspace": "", "generation": 61, "fitness": 0.40889721862741524, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.30.", "error": "", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8999433019542844, 0.9531757250606178, 0.9098351863444141, 0.9133026220996732, 0.9493265829761501, 0.9028289282566141, 0.9004496875228477, 0.9424663373110698, 0.9016947467196531, 0.8402226306156374, 0.9179901350770187, 0.845044486875241, 0.8241866218958999, 0.9063409715832881, 0.8537396406454852, 0.8422079518211238, 0.019933217594429897, 0.8617450692850673, 0.6239995888090585, 0.8721558363096591, 0.6674132752045895, 0.17068024091649137, 0.1919646086263701, 0.6780958929266039, 0.17630947423884458, 0.19271458550027498, 0.16997423114224353, 0.17543070759792667, 0.14607085383431495, 0.2853308746654646, 0.14913379517055947, 0.11036628011590399, 0.17258657970574365, 0.5224249198528701, 0.109592620471889, 0.1434466913998098, 0.9746204602958205, 0.9871239292005897, 0.9691793823095488, 0.9456079741776366, 0.986984960442729, 0.9659440430395693, 0.9623475992235336, 0.9864858620132774, 0.9569444113912645, 0.7181901389881331, 0.11217651617841928, 0.7366235627728613, 0.6760423615709958, 0.47404803681742747, 0.7262557684165201, 0.7629544891674864, 0.24790260808795672, 0.6721730321319161, 0.8972019397379412, 0.218174046464244, 0.8235402187523576, 0.8643669553350923, 0.21361596918953552, 0.8727939262896685, 0.8498629991558491, 0.16141882478820702, 0.8791619011614591, 0.19781204128895968, 0.1653240538184746, 0.2546772113902597, 0.2150435723153732, 0.19013485270859742, 0.22311411998866038, 0.5178633210605254, 0.18096421457715062, 0.5178190834869631, 0.1223864829095519, 0.13879231809710768, 0.6961904134832508, 0.25789604792417786, 0.1460531951369931, 0.6783553857674709, 0.7214892932753403, 0.14040736485671534, 0.3160381115977061, 0.5679343671403463, 0.16855662171175156, 0.5027077817946912, 0.5656589322598917, 0.25555507515363585, 0.48980771800868317, 0.5847534580182887, 9.999999999998899e-05, 0.5019645234185055, 0.6923845391903135, 0.15533361636900478, 0.5923731715912898, 0.6451274641997577, 0.3761200739189733, 0.6031090657391618, 0.6468960560634112, 0.3838397091857292, 0.6514183253883211, 0.1637049070405685, 0.05405587003435974, 0.2201874643807865, 0.41134228421995744, 0.09170498314409214, 0.37912861413260357, 0.3073310884002912, 0.11843545111773834, 0.11835865046623406, 0.4430320539787401, 0.1421201050658798, 0.412854490173305, 0.45329902750832085, 0.2188844269386745, 0.4311912907278763, 0.45322114026624516, 0.25658758479334287, 0.08441289715716815, 0.8057745761671553, 0.551173034762948, 0.8047308159041302, 0.8113195876206281, 0.7403913336872237, 0.8134269837199354, 0.8289132539278691, 0.6271462060294599, 0.8037157424234653, 0.0867094704866388, 0.0909823900724539, 0.12229472814294584, 0.1264169658298282, 0.07921243874338835, 0.15041356487032886, 0.30356320539455917, 0.08461316860176449, 0.12376621649450792, 0.2048450938090487, 0.1266664366619159, 0.1287981966448125, 0.20542529169866253, 0.13689754444469693, 0.13491613052289764, 0.20028647669986566, 0.15045629602273747, 0.14601817251179494, 0.6689714993543503, 0.20164417422850278, 0.6421252486332654, 0.6579328355757674, 0.29605573278028996, 0.6743904095271762, 0.692679179908774, 0.2344041462790336, 0.7185643583117571, 0.45436544400586976, 0.20440521568489134, 0.4283480122278035, 0.45427004967799467, 0.2449446163910658, 0.3906991158118175, 0.6110274192071734, 0.3001694528293978, 0.5280020096219779, 0.18613983969131764, 0.20898146869874978, 0.2053751064875634, 0.20316451875434427, 0.1938973269712454, 0.19743093705919945, 0.16435945427617404, 0.19766840850462453, 0.2023164601395835, 0.2319332766533777, 0.2099634496970063, 0.7053455631130818, 0.23843181701436422, 0.2216424299272829, 0.24646140831647767, 0.25231406674228307, 0.24397508659772849, 0.7344070184879485, 0.16542767286000148, 0.188863654548585, 0.8374272327804467, 0.19935272705304397, 0.16269426618932248, 0.1677300700022124, 0.17078978140520717, 0.18418687752617857, 0.1842017572129373, 0.167984672702154, 0.44108376598791443, 0.2114368608227798, 0.2089393875184441, 0.08286548394249826, 0.11212100404368908, 0.21003527032108826, 0.21371135121423135, 0.1562073928815093, 0.1860159111413061, 0.19148329092679506, 0.19441517048906765, 0.16092582479111495, 0.16347927066056345, 0.18989374339338305, 0.18817900932089504, 0.17961445679419807, 0.1797283325623048, 0.08291594111165645, 0.10095745534254874, 0.07936627507733318, 0.08594208556988348, 0.07942452573476566, 0.09125211031721847, 0.07616975951152927, 0.103430166306554, 0.08014605676501974]}, "mutation_prompt": null}
{"id": "3d36cc22-147f-4ac7-8849-1115795463b5", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "a5a4586f-3ac1-4071-b2a1-398e029cbbf2", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "f084375d-20fb-4c38-88ed-73b99beb1f5c", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "39529db4-a599-4704-bb0d-dd45c2c5ecdc", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "6f92caa8-c34e-429c-8717-7acb1e7663fa", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "e0a99b49-d899-4071-a42e-b828b2cdf925", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5 + np.random.rand() * 0.5  # Adjusted adaptive PAR\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (1 + 0.5 * diversity_factor)  # Further refined adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.6 + np.random.rand() * 0.4  # More fine-tuned adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.hmcr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Optimized EnhancedADHSOptimizer with dynamically adaptive parameters and a refined mutation strategy for improved performance.", "configspace": "", "generation": 67, "fitness": 0.4753818667475321, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.27.", "error": "", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8565786181221626, 0.8366644018242895, 0.8578094518689521, 0.8576439616242927, 0.8710614351922985, 0.8616752272800188, 0.866476995153451, 0.8578094993036469, 0.8487599317027131, 0.7549796950458592, 0.8164493806615143, 0.786830489434363, 0.7497683010957417, 0.7807341136140875, 0.7813647406274704, 0.7575890754866228, 0.7659046054977953, 0.7959409687827209, 0.12203104461287184, 0.20546069062136962, 0.4281342751555016, 0.2745762744372745, 0.4013379357918877, 0.3711419853961262, 0.14892952724902675, 0.1383157184975191, 0.30337532336182793, 0.24027035314626177, 0.15004906528229034, 0.27234331736480644, 0.15474338700388157, 0.14581719315489539, 0.1122230088531807, 0.12250738530908711, 0.13950570886453606, 0.21086442767957136, 0.8017676368901191, 0.8950211914500094, 0.9520256405851226, 0.9463732142850176, 0.9339678940081817, 0.9433163930717114, 0.7826059730709136, 0.8955211340155298, 0.9307560541061343, 0.5777890863329301, 0.6366195205334724, 0.5878613574088797, 0.5690555856661081, 0.5994949516637218, 0.5566285202993575, 0.6208938944807, 0.6195193887880016, 0.6343208404745099, 0.8367400595032175, 0.8138083674096067, 0.8180240440938821, 0.8419601082363892, 0.8329521480506682, 0.8501061011110724, 0.8538047511079528, 0.822551220713703, 0.8152686009767014, 0.5621281256999495, 0.6098331906322467, 0.5625862970519213, 0.5939054200985205, 0.6318346985811754, 0.41405689519313094, 0.5894936452398032, 0.6057409588748535, 0.6493170639640287, 0.5970308118618203, 0.5426614064356162, 0.3684275349738998, 0.5941554360610539, 0.18781542715714838, 0.609740073186028, 0.466224440052574, 0.6535462374085177, 0.5792054711491389, 0.6053968395773139, 0.6196503719065947, 0.6030492381000133, 0.6163419501799883, 0.5999691785330646, 0.6004847076916138, 0.6101349200018336, 0.6607906860820236, 0.5821124781836636, 0.6895580271043809, 0.6574031527683672, 0.7363048483327157, 0.7308091231817126, 0.7035623464844449, 0.7129127040256511, 0.7334764995269678, 0.7198615263043795, 0.752692803926925, 0.31437288541527364, 0.13004841358680164, 0.34825070786994006, 0.17541966656323182, 0.5155661866698719, 0.23778698036856083, 0.34223482476990663, 0.2726384947880006, 0.27587620804004787, 0.5345431073711869, 0.47836016607163934, 0.4812389078010513, 0.48812850267555274, 0.49961634979464975, 0.5185579396836297, 0.5178859074306349, 0.4776895955937722, 0.4925379793329203, 0.7962249842076985, 0.8000445842333511, 0.7732939997388003, 0.7973760867881002, 0.7842985365425236, 0.7906653438795992, 0.7929376689751095, 0.7801834137954133, 0.8089147956132097, 0.14314641096147696, 0.1135384475118495, 0.09624393224615668, 0.10401859769348432, 0.11035225322211462, 0.1037739615857296, 0.09338253999829227, 0.08938549758699099, 0.11470906592107932, 0.2010676881893234, 0.21012298233126347, 0.2877873711387723, 0.7612567352669588, 0.2208493351096502, 0.21435564174204536, 0.3120160121865715, 0.18342343211386136, 0.20611676875080065, 0.48190056502904255, 0.48168696371468034, 0.49593617812642643, 0.48620625191639744, 0.5186195325283217, 0.5115546209296788, 0.47530147656606414, 0.49658390637488903, 0.5641491236073972, 0.36450448627882337, 0.3533744763472523, 0.3320076465015521, 0.3114739386245554, 0.3733233006478419, 0.38395447930490956, 0.4305947254135353, 0.37621696055567777, 0.3914300604206915, 0.2096278019226141, 0.18496218503043793, 0.18427977082612135, 0.19780157937588616, 0.1809662045492162, 0.20681814293117518, 0.191302854006567, 0.19576293455628024, 0.1924709747358475, 0.33543915714164363, 0.6585481352043328, 0.4522940576775655, 0.3420659673859261, 0.6851963761774844, 0.5913595788290813, 0.20420741118628738, 0.41540884202128703, 0.2278110888347724, 0.81895404577469, 0.8866859514993178, 0.1521457030178055, 0.1856080266993858, 0.18272468174664813, 0.7711833283216165, 0.7753564963212622, 0.18986347497050515, 0.2010784239470491, 0.16769467449798592, 0.8392618546206218, 0.20832626765308726, 0.16387452829175653, 0.20569497558691086, 0.1941996126742641, 0.2006335337277675, 0.7501564365489074, 0.8503718615944841, 0.18110243269564885, 0.1990878734189061, 0.18323010637569903, 0.17271011510727696, 0.18823867748996537, 0.17648384502776948, 0.17570037628293356, 0.15111418512642116, 0.183687130745524, 0.07203974765835486, 0.080408766134615, 0.0763753667096222, 0.07393377459941364, 0.08086831857633747, 0.07503108267008862, 0.07140961889554243, 0.07003059397210176, 0.08520093408285434]}, "mutation_prompt": null}
{"id": "d704a750-2338-4c6d-a73d-dd361acbe0e5", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "e880ae02-3373-4a11-874f-e114007ce0dc", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "cfd57538-e54b-4a91-94e8-bcd4e82665ee", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9 + 0.1 * np.random.rand()  # Adaptive HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)  # Modified adaptive bandwidth\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])  # Modified differential mutation\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with adaptive mutation and diversity preservation for better exploration-exploitation balance.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.8879145431268909, 0.8979539504240008, 0.8928585675415617, 0.8976857080025168, 0.8965410523907895, 0.9057476204358862, 0.889067345530202, 0.9055915388382759, 0.9069505857186436, 0.8398725684759908, 0.8230951629249201, 0.833748243658862, 0.830507445046301, 0.846193248082511, 0.8396127942140346, 0.8201099725458431, 0.8295841533906667, 0.8397111558257111, 0.6698066115909923, 0.1491853954502822, 0.694411975636294, 0.16460012372725452, 0.15319724610904373, 0.5786615083642077, 0.6430010208729849, 0.14549232165926607, 0.16550757049476195, 0.14334839784986086, 0.16041922236971728, 0.15379223061747982, 0.16743176643609092, 0.1689706469665514, 0.1522327821754883, 0.17141206508434192, 0.15152473596976124, 0.16316242330289643, 0.9369287468004504, 0.9650372473510435, 0.9415238907797122, 0.9665911253734155, 0.9413852120685905, 0.9092275403147034, 0.9751343256810712, 0.928115435180152, 0.9673785318595349, 0.7143310650773109, 0.7086807977623202, 0.4815663224728399, 0.5948792364513749, 0.697125883575624, 0.7380480319417733, 0.7178630805796926, 0.7388780195472614, 0.6785872342368897, 0.8665827800588106, 0.8694114165837541, 0.8871505644347129, 0.8745300754948799, 0.8582571084699158, 0.8572516782731732, 0.884692023434719, 0.8860408094495876, 0.89127288809002, 0.6718658090616714, 0.26296304252221414, 0.6962540016679772, 0.25473701040182006, 0.5941079586579963, 0.6761037776818672, 0.5667762126969924, 0.2609587684461375, 0.6101471818948632, 0.2296833946467849, 0.2856793879431082, 0.2085908244235789, 0.22239009873446813, 0.6646397956525709, 0.671656670254781, 0.238881883871509, 0.2355471433771208, 0.4663883834394784, 0.5655813192917973, 0.5875885772617874, 0.5813723381938631, 0.568585443881159, 0.5742653185176922, 0.5942603299352445, 0.5953821407446487, 0.5831453924858788, 0.5517917443570819, 0.6671271955730331, 0.6630307829389885, 0.668761962670205, 0.6744323455675756, 0.6230407569907541, 0.645807162269703, 0.7128564243195645, 0.6758602170864396, 0.6976185307683179, 0.20740620398318033, 0.18116288148492854, 0.29743845044937145, 0.26242592469454007, 0.4649685613022939, 0.5157802334844371, 0.21112190703546163, 0.23029846839336632, 0.19446686558110726, 0.48397525128230834, 0.4505933487363786, 0.4684360555324626, 0.5142918891042764, 0.49847666577733274, 0.49390614232169505, 0.500893558430737, 0.5064803239051425, 0.4611108389528257, 0.8236205650886937, 0.8260803266585601, 0.8118344157880601, 0.7999928778079466, 0.819247152558346, 0.827890362184899, 0.8104664804523252, 0.8347063908582029, 0.811340022239768, 0.1402242442175855, 0.2801998920723726, 0.1349198468780869, 0.10919747599703533, 0.12870945799618583, 0.13994041052874395, 0.09064436834207967, 0.1407183885380413, 0.09645704486654305, 0.181696240471801, 0.2542630392268206, 0.1718615470358723, 0.17937124482597955, 0.1439080191365827, 0.2515889795656955, 0.34274579040674424, 0.1814245589942981, 0.2880491013471226, 0.4081083481736135, 0.5560867550699404, 0.6930281889915257, 0.6469810892006449, 0.6210429444688735, 0.671424617458078, 0.6706090435776706, 0.6766077994730108, 0.5485706638411056, 0.4481908616790744, 0.4338086603009482, 0.43355086521189823, 0.4091404951893618, 0.39843044569763064, 0.45965004976224766, 0.5321889213596791, 0.44938197334296703, 0.47529548624523277, 0.19242822992419994, 0.18075940678282154, 0.18382979687860934, 0.18957892440390012, 0.176038690322585, 0.2087382948619475, 0.1856315273343454, 0.17750026615461378, 0.20516644159802722, 0.6645489750710114, 0.641810742093802, 0.8046532595849771, 0.22079530746035747, 0.738452335380028, 0.7006904087536263, 0.644865133136631, 0.24077616928096357, 0.6677816250072228, 0.15514910934208015, 0.1658848964538936, 0.8945492478088306, 0.1993422431231443, 0.8855113782974091, 0.8310889904530495, 0.8349717957414827, 0.8472007644647236, 0.8319998059361841, 0.8155242339473902, 0.21002987161739062, 0.8279058003983182, 0.1655340290919568, 0.2090096172282465, 0.16770603305067744, 0.21344736565467448, 0.21363786546533559, 0.2138100174794999, 0.18792287302695776, 0.1723793893104475, 0.19945724924339592, 0.17110091773672886, 0.21276997931086494, 0.14972526905933814, 0.2058057978840031, 0.17012109366359385, 0.18583755521924872, 0.0897136551106541, 0.08808291529337597, 0.07937181758521383, 0.0865913625412883, 0.09171447128416499, 0.07836533282615432, 0.07120390580712532, 0.07525167160322399, 0.07782124446338745]}, "mutation_prompt": null}
{"id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 71, "fitness": 0.49882976848626764, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.29.", "error": "", "parent_id": "59746019-8d02-4fef-9b55-f5e78993b7ae", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "4c2f7575-0bc1-48fe-a83d-a738a54ae387", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "eb34ae63-12b0-40a7-ab25-b67a0d35f662", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "5f778077-1bda-4572-adb0-b3174d21b662", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "a00d5a29-2bfb-46a3-9450-fcd2f368cffa", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "6710d2d4-62db-4c20-99f8-275b5172fdc5", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "0ee7d554-4bd1-4595-969d-a995d8809962", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "e8d4ce03-3452-46b1-89bf-390c0ac464fa", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def levy_flight(self, lam=1.5):\n        u = np.random.normal(0, 1, self.dim) * (0.1 ** (1 / lam))\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (abs(v) ** (1 / lam))\n        return step\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        adaptive_par = self.par + 0.2 * (self.budget - self.evaluations) / self.budget\n        for i in range(self.dim):\n            if np.random.rand() < adaptive_par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            if np.random.rand() < 0.1:  # Introduce some Levy Flight-based exploration\n                new_solution += self.levy_flight()\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Introducing Levy Flight and adaptive PAR to enhance global exploration and convergence diversity.", "configspace": "", "generation": 78, "fitness": 0.4827371060039204, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.8907656681178235, 0.9008923445542726, 0.9007937515809903, 0.8856738880007801, 0.9040937153986239, 0.8886464008649045, 0.8873725674513906, 0.9030920171342609, 0.8907627282441779, 0.8438535554012857, 0.8255140314536182, 0.8420489657583214, 0.8287716367498765, 0.8509829402139084, 0.8308736710586466, 0.8190039062256962, 0.838050200416832, 0.8268212898901303, 0.5226241407024448, 0.6031802827485147, 0.17038496162380834, 0.5129142396210621, 0.6414370051237603, 0.1618328288283254, 0.5672858301013868, 0.17541652705140842, 0.5901412900938487, 0.15242058874445752, 0.3742869809610596, 0.15529754775016713, 0.1544474257796279, 0.5630569298976975, 0.15355390763586163, 0.14874059254216132, 0.15910982025440445, 0.15635356027663272, 0.9855360634796584, 0.9735303782861697, 0.9610089206063828, 0.9286598223932891, 0.9781273084847092, 0.9609759606896324, 0.9743906291139337, 0.9527125409894794, 0.9374778372363436, 0.714292288317106, 0.6969876839308222, 0.7253564858275019, 0.6598564466794841, 0.7128562425991058, 0.6676273991482754, 0.5570212170283557, 0.724233741672059, 0.6855680942551935, 0.8922160916509756, 0.8656346364363984, 0.8260482467570666, 0.8765178173548782, 0.8619605981367895, 0.8490325836500652, 0.8895057189300566, 0.8924531134057062, 0.8768332952735373, 0.5750788195488796, 0.6553417206632641, 0.22206569793880393, 0.6957444263725965, 0.22832439551608286, 0.7099471195157617, 0.27123228627195484, 0.6559699015812108, 0.23350212431222495, 0.02316088331766586, 0.7002693449498285, 0.13133672908763128, 0.6211774636853089, 0.4889314320947282, 0.2814135588377772, 0.2604672165025561, 0.23512790525648442, 0.22395886784514307, 0.6362153315380281, 0.5740122861047334, 0.597340098085647, 0.660076834088741, 0.590874681240336, 0.5788845332327264, 0.572140241076402, 0.5741710382103642, 0.602043218976432, 0.6635998741162461, 0.7032856271833277, 0.6539873306920847, 0.6920884246317051, 0.6372749093289842, 0.5421020576659179, 0.7022562549011012, 0.7057380339470167, 0.7019646249160472, 9.999999999998899e-05, 0.17075722741725818, 0.15166967258142972, 0.3994585466533733, 0.3411949115825176, 0.4448974584954104, 0.33286228602079493, 0.11478140105189794, 0.23939324719167865, 0.4519103382980896, 0.4964956974915873, 0.3979739941629876, 0.45448458915011336, 0.46942951734362415, 0.5060222782297259, 0.47345651205498573, 0.42836890265782135, 0.4811252539508616, 0.8224275209485434, 0.8328620586645681, 0.8220489050516528, 0.8151282503593463, 0.8037117372673621, 0.8013005632003967, 0.8237929149701037, 0.8210378195115448, 0.8079839381681642, 0.11567858283643895, 0.15345842715684088, 0.11467703521033146, 0.12155280458715001, 0.11439645820112132, 0.3742929294601781, 0.10060800880298304, 0.09678770285436711, 0.10930008588737306, 0.13768127622602877, 0.1400546377542512, 0.16000601649671553, 0.19834386445887742, 0.23611278330615737, 0.21419720069082404, 0.5562777304064459, 0.7019847068566947, 0.25299295229558316, 0.5847095679991978, 0.6637048690791862, 0.627816297201004, 0.5930084163053283, 0.5383607709852484, 0.5612648183877598, 0.6575637547413805, 0.7055919654607081, 0.6514920391226107, 0.3821673751768978, 0.39710956851202506, 0.4375591102004279, 0.3517768136047178, 0.38156303823454973, 0.3962428821908207, 0.468364499611979, 0.41058465663239996, 0.45404182168728735, 0.19013720808615386, 0.20130160488850513, 0.1902473107341789, 0.208205694560483, 0.18963033573864208, 0.179171323194933, 0.20456142220888496, 0.22161472116520864, 0.18936503033163277, 0.20120852401825728, 0.6924454569047793, 0.22609507457748435, 0.2434459928592987, 0.7094099688663851, 0.23935882584405066, 0.7774010834572216, 0.656764226598016, 0.2471259866495501, 0.6436994336692672, 0.1235065659337492, 0.9051293873909431, 0.17848028291275675, 0.19607082253165342, 0.1309141926172417, 0.827377635509398, 0.16318048649036077, 0.16489847435907745, 0.8543420706150447, 0.2613574471571669, 0.16630311732183, 0.20466832622288134, 0.20455665565058112, 0.8238437180882302, 0.213270626324632, 0.21205564383705322, 0.2136409441622693, 0.1868854946118811, 0.18729213665164013, 0.18184312639507327, 0.20554508796802917, 0.17224888568489005, 0.1778070995233757, 0.18721806881139424, 0.18783201644266123, 0.1876933651794871, 0.07695454925877876, 0.08402301198768058, 0.07842313576738047, 0.0788360187416356, 0.0883036470704276, 0.07248026259118345, 0.07360528511852515, 0.09128602020148935, 0.08412685844685508]}, "mutation_prompt": null}
{"id": "3b2f3988-1ede-4606-a28c-e0780a749c9e", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            self.par = 0.4 + 0.6 * (best_fitness / (best_fitness + np.mean(harmony_memory_fitness)))  # Dynamic PAR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution \n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Introducing adaptive differential mutation and dynamic pitch adjustment to enhance exploration while maintaining convergence in the EnhancedADHSOptimizer.", "configspace": "", "generation": 79, "fitness": 0.49438238240309607, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.29.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9074382164665691, 0.8966054502905146, 0.8882507353657403, 0.8762389424173946, 0.9023828104865657, 0.8963017697053532, 0.8876701229004998, 0.8904920335165752, 0.8917623800453938, 0.8264702246787181, 0.8461174454397824, 0.832568140710814, 0.813795796526825, 0.8394274689561643, 0.8455641081001968, 0.8252501474237038, 0.8324793657681293, 0.8433004874412244, 0.5980042644921799, 0.5005294336422437, 0.44710049493003556, 0.16976887924077655, 0.5556068525291135, 0.16721929438622885, 0.7001063089462282, 0.4651387692140001, 0.18113070208846493, 0.17084957941133438, 0.1516073609609364, 0.5518311846990431, 0.1717556049435489, 0.14437121317276902, 0.1721042196809236, 0.1716574954759057, 0.1687775647984998, 0.1462177971781341, 0.9463979784761126, 0.9361091201132554, 0.9469351760016255, 0.9557420529581386, 0.9808616514826489, 0.9317538888363083, 0.957994126885208, 0.9644427086306606, 0.9719640118445257, 0.6996261921571729, 0.5800894036715638, 0.6912200849219059, 0.6829046019345559, 0.7093936554088869, 0.6763214333517735, 0.6047208648539186, 0.6562471466041715, 0.7467411226215327, 0.24524235615095635, 0.851087223760894, 0.867428557324943, 0.8521014363769179, 0.8846276044317974, 0.8676866447497787, 0.8490974163458537, 0.836163092906681, 0.8658601377939461, 0.5575390024949209, 0.5427691901925247, 0.6003669243217671, 0.2206333060492056, 0.2070815651964043, 0.18761158961366764, 0.6657520454661563, 0.17453325409649478, 0.22306073600254728, 0.25543304195256333, 0.05524896830512882, 0.2110280556074966, 0.19392267332444602, 0.6054510024303, 0.2888659340819336, 0.5354337289919936, 0.3418886011960487, 0.6665914370174697, 0.5818648829197159, 0.5901180562340336, 0.554144168838989, 0.5613454887740577, 0.6036866623531478, 0.5491325599043478, 0.5681124472640035, 0.5504395698899632, 0.5464874506108448, 0.6855881842267275, 0.6741284973079811, 0.681658846968453, 0.648208339933208, 0.657012961167365, 0.662656451191366, 0.6899270653641126, 0.7074884943961903, 0.7346189725155506, 0.20997379255705617, 0.1848770460399738, 0.29966309207010977, 0.4182210628291644, 0.47011010528973196, 0.4744921338576652, 0.32090447150035295, 0.3062317901097429, 0.1368976340885769, 0.4412463862912748, 0.4999675357743508, 0.42922758117637627, 0.5419070543280136, 0.4987219218293373, 0.49762841216358344, 0.5115675373834587, 0.49172844213545475, 0.4955346711828308, 0.8059973176943587, 0.8242454765650495, 0.8276080165487455, 0.8111437565836188, 0.8187558571239641, 0.8141108876460303, 0.8106542919074533, 0.8220423840703219, 0.8247833083087168, 0.13008742962256237, 0.11221329094231802, 0.11919316544362524, 0.13014876864572522, 0.1468139843186438, 0.13871423674878702, 0.13153309411632785, 0.09922770983455576, 0.10577149414962606, 0.24703756210583094, 0.2742493904684177, 0.24775813412409564, 0.24178065002140203, 0.23642186410866417, 0.22222164792869104, 0.14741932421718484, 0.36893866296763533, 0.20169786855084149, 0.5854752467161827, 0.45327782286862417, 0.5854149121746355, 0.6198527563519024, 0.6076141233582129, 0.6160455884194266, 0.658496844453742, 0.6650845755216916, 0.6754224266212052, 0.4014753636073405, 0.40366441155054167, 0.4259728412744658, 0.4119215963708631, 0.43836303791924225, 0.43668855975961496, 0.46598314608298297, 0.49879753624410283, 0.5358514670686648, 0.19357725304785256, 0.17949677564432442, 0.20694829593632214, 0.21448817955493804, 0.20344461950308224, 0.18266412241669228, 0.2259810377320709, 0.19898414457886227, 0.18789064685743817, 0.5621927162526289, 0.24333627540434577, 0.22653096882491985, 0.738874216090831, 0.7506307451797423, 0.6672479132340352, 0.24215900317286077, 0.226585932750051, 0.24179302319601825, 0.1645339892877744, 0.1677853974467547, 0.8812384298587137, 0.9068823006850001, 0.8681083354970125, 0.19483979398158424, 0.18431823259810276, 0.16618507686474127, 0.16602935468041558, 0.8433042474847378, 0.8309771405513755, 0.8760954729934515, 0.8110039855809694, 0.7975938940431189, 0.8356062935871207, 0.854686633450837, 0.8483559365495089, 0.1559465817464043, 0.1776765914334526, 0.1915153306877413, 0.19056098303012736, 0.21591350566353662, 0.16197740248452774, 0.22396426954769244, 0.19624159494101012, 0.19525798181819398, 0.17086342738173865, 0.07926197861681505, 0.07705828305993223, 0.07271534145471215, 0.08145832781544182, 0.10881529545863289, 0.08342162005215692, 0.07585525737597254, 0.07686047817588693, 0.07150494924545714]}, "mutation_prompt": null}
{"id": "16c9d742-c837-47d9-ba33-303437b09c28", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "ea1f31ba-150d-41a1-bb22-c7bf31077b64", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "d8ccda66-8009-4d38-8d11-3dd9b4339022", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "15350052-de17-438b-aac2-4a4accecef49", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        adaptive_cr = self.cr * (0.5 + 0.5 * (self.budget - self.evaluations) / self.budget)\n        mutant = np.where(np.random.rand(self.dim) < adaptive_cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Enhanced adaptive differentiation and mutation strategy for better convergence and diversity.", "configspace": "", "generation": 83, "fitness": 0.4257539633225683, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.30.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9131676421833199, 0.9048179793516928, 0.9155923010786405, 0.9059457156929135, 0.9161952284649187, 0.9193316370691453, 0.913455469191349, 0.9142370101793023, 0.9044553450499853, 0.8601587773277724, 0.8604563551989501, 0.8641287754070225, 0.851742056205026, 0.8593297997661875, 0.8703318301655261, 0.8553222953137953, 0.8607266301027247, 0.8576440100564782, 0.1784321453378943, 0.18320689933119572, 0.1749249139926835, 0.18024917456462974, 0.8166788381782131, 0.7673078618586497, 0.7913789036766932, 0.749585378261379, 0.17555712204168028, 0.7816164433711515, 0.17418139068813265, 0.17977853824328327, 0.7508896020241227, 0.15525211324049892, 0.14954255758276136, 0.14241373860908246, 0.12023292924999673, 0.14916562493344843, 0.9554163613248454, 0.9893314732274522, 0.9789326591722497, 0.9594704817659642, 0.9648855168489463, 0.9756197545123206, 0.9596947094136227, 0.9414960259457149, 0.9639830413369764, 0.7951602139845424, 0.7706638440858491, 0.7944866659587837, 0.7819533555955355, 0.5436816189408455, 0.15149809915553647, 0.7871713210183031, 0.4336028264681562, 0.6456707229010752, 0.8527471467326331, 0.8146326607873251, 0.8410635681771299, 0.3723705512762562, 0.8848292629943706, 0.8843073998007414, 0.8137211581837134, 0.8599423971297914, 0.6455696269140189, 0.21378732892670638, 0.1594153255570112, 0.25859207542913243, 0.16351185716537353, 0.636100398854814, 0.227724081217349, 0.19255576874651548, 0.17386662139634224, 0.1909294069444809, 0.245845209826128, 0.11459431665805841, 0.1817697475182507, 0.16794630392264154, 0.1860308454233056, 0.22528697276860443, 0.26036404336466834, 0.18688144984988753, 0.2080643886165261, 0.2711485380556963, 0.25442231598547427, 0.2558392826021174, 0.2753797400797158, 0.29895133920546646, 0.2739311851841262, 0.28202495337712463, 0.1842836552772562, 0.27671390486229197, 0.43411734669566393, 0.32774171661169205, 0.4528377328097133, 0.3845425817266942, 0.3521091848585097, 0.34814425111191216, 0.49256882703324967, 0.526537066043424, 0.421038554133359, 0.2183290260488988, 0.12641612003089142, 0.1641317923013963, 0.13488185569274969, 0.13298283004185973, 0.07446771528980423, 0.15603863497898185, 0.16313082550139568, 0.23052367916752592, 0.2767285661861515, 0.3136414041276423, 0.45286572993599084, 0.36680101581445923, 0.4074698306093777, 0.3822917312638301, 0.29486801451193134, 0.27952859007308906, 0.33909762564713086, 0.7395531455660778, 0.7242257824922183, 0.7655699254279105, 0.7098019579898198, 0.7436092378527651, 0.7687611889457415, 0.7024638429700871, 0.6804021019709077, 0.7485201052382788, 0.13025181773256478, 0.13732166264156187, 0.14400624182450106, 0.11031600124318319, 0.13184656545305606, 0.1450244010431344, 0.12885019530842723, 0.12830253625761712, 0.12180837249939092, 0.2473798559454321, 0.13783482490871646, 0.18504052919773217, 0.16307642190931748, 0.28908673724018585, 0.20008443245668261, 0.17153456999104022, 0.27489951806223245, 0.1393844078896178, 0.5339097731142473, 0.5171264854981723, 0.4806211126278257, 0.5622792151435397, 0.45161780312131194, 0.2295404696385458, 0.7164201486259747, 0.6060128799591264, 0.7531244214436597, 0.5022822186688005, 0.5121389823815469, 0.3792351107540227, 0.3390283497620197, 0.36252799213999043, 0.40543897559092934, 0.4005309137269294, 0.34840428143781554, 0.4074464440657616, 0.2017912975003362, 0.19247924739595768, 0.1796970207996592, 0.19813689698050962, 0.19862355985235725, 0.215008366626388, 0.17445282230732972, 0.17695964649919038, 0.18942496266777975, 0.7055994614948372, 0.24235392750022, 0.20436648738420982, 0.20982818828868832, 0.21478221548319598, 0.243698039706018, 0.8173124218160507, 0.23816354750272162, 0.24120289388884675, 0.8302182620781652, 0.8658904581897704, 0.8756730253252722, 0.8855076832317096, 0.18534295922277078, 0.18595458905801976, 0.8673958637954606, 0.8484203380953159, 0.19597741439213878, 0.8467922713229333, 0.15554051154317217, 0.1541300240769966, 0.2094242429500679, 0.16483503328325622, 0.20650215682945705, 0.20840494261136255, 0.1984421695757449, 0.2097066817364499, 0.18937626788144069, 0.18865467588018714, 0.18001765540208436, 0.16768121682104975, 0.1980287807296942, 0.1865626838626343, 0.19762642891465554, 0.17837378725600517, 0.17587258430301733, 0.0806339240351921, 0.08012657250937227, 0.08820125687421021, 0.08171377270325231, 0.0768565292869352, 0.07993562498097129, 0.08094707424883851, 0.08200987519799985, 0.0864269763111033]}, "mutation_prompt": null}
{"id": "d8ce13ea-546b-43bc-86c8-2a3301b33b36", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n        self.memory_decay = 0.95  # Memory decay factor\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = np.random.rand() * (1.2 - 0.5 * (self.budget - self.evaluations) / self.budget)\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n            \n            harmony_memory_fitness = [f * self.memory_decay for f in harmony_memory_fitness]\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHS with adaptive differential mutation and memory retention to boost exploration and convergence.", "configspace": "", "generation": 84, "fitness": 0.1076925246272129, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.16490875315866083, 0.14476713310611833, 0.1627355486656994, 0.1727748387205844, 0.1495217603217025, 0.15529538499152584, 0.21191973737477043, 0.2062658975381535, 0.1955105632065296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05694269351427139, 0.06187934446605936, 0.068699094641406, 0.049519707184095374, 0.04413167476573432, 0.07877700714423974, 0.04975939199329771, 0.04398270833316287, 0.03858732093254513, 0.05262138427169505, 0.050926627539831903, 0.04437829297983675, 0.060688297967230076, 0.033821557203479236, 0.019275280812416362, 0.028057230149687862, 0.023369712945099708, 0.03850319460334273, 0.23408188429905774, 0.407319872106515, 0.09246852588894894, 0.11221757433661661, 0.3246904971915645, 0.11896342538501015, 0.10615237923193088, 0.0924501965794925, 0.11411339802069564, 0.05720356610095456, 0.05567611263803096, 0.060422625227088744, 0.08603250713338717, 0.09432725515009643, 0.13157771305548882, 0.08860663017195292, 0.10338589144327037, 0.10174952346039312, 0.15735890421927068, 0.15479690968434312, 0.1010791997253111, 0.17474614053976345, 0.15043010986890826, 0.10609580601602142, 0.13395108418533186, 0.14527151891525558, 0.11219792410508256, 9.999999999998899e-05, 0.04637198004398435, 9.999999999998899e-05, 0.12663379002895436, 0.1228313995592083, 0.13844212751170726, 0.04375695856972539, 9.999999999998899e-05, 0.030643137005535004, 0.03776308872011247, 0.012920809870284766, 0.04982789066691695, 0.04173218438196946, 9.999999999998899e-05, 9.999999999998899e-05, 0.020923982864835988, 9.999999999998899e-05, 0.06193015560968229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017498248212297618, 9.999999999998899e-05, 9.999999999998899e-05, 0.10975561691187918, 0.08364717063016047, 0.03342117833270963, 0.15392650749581993, 0.03792896356529252, 0.10554002552515285, 0.10736379659177597, 0.07089005710910146, 0.18389731344449078, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010948567503260564, 9.999999999998899e-05, 0.01623208229915185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05563800350428172, 0.06498727787957137, 0.057952167706362356, 0.22589400365414491, 0.23575777647896334, 0.22153096334048472, 0.18836796441855608, 0.19931708198430165, 0.1981164391812883, 0.2571756623108812, 0.17799484449615288, 0.210764397960003, 0.04146002424936501, 0.025987374714598666, 0.02381896087066382, 0.05669923347742878, 0.04542608390706482, 0.0752579251132911, 0.11588494926555959, 0.11947881411201211, 0.13551591839254995, 0.15525987661710006, 0.1368387936271327, 0.14813950122270758, 0.15809548384839678, 0.1534029629962963, 0.1506849930076909, 0.14927956625696093, 0.14143650006058872, 0.13089073318851008, 0.20554654260104221, 0.20310771184628706, 0.21028315250287033, 0.1577887831685817, 0.17270857208757606, 0.18047964645801007, 0.18471262235567498, 0.19049897189045284, 0.15241961588822583, 0.19519377041999675, 0.19444454067461825, 0.17753472908402723, 0.12271097550371723, 0.09653281596377805, 0.11913090995825681, 0.11115811115346752, 0.13689017642017554, 0.11120895905730321, 0.19358116328809472, 0.1677019195297409, 0.1905474475542518, 0.1739175623982384, 0.21029912586024813, 0.16396975378136813, 0.16590649645999567, 0.15772774071229922, 0.16376818859228082, 0.17477102100913766, 0.18778181633382607, 0.18363911024864887, 0.15362978825142748, 0.16379221276929634, 0.14950501858108933, 0.17503010932807517, 0.15667557913188734, 0.14677312101669415, 0.19807200462299457, 0.16157569513417003, 0.1672998535613739, 0.17026266501836074, 0.303633801408857, 0.3587425201622182, 0.15976147604585245, 0.22596043541489386, 0.1618057071475929, 0.11612484365630993, 0.15087785470187087, 0.18077823032558005, 0.16679203048561808, 0.12990906345950026, 0.23491799535840763, 0.12484798827526733, 0.12344117219120421, 0.20156910127825245, 0.1906488742940946, 0.19287099036706012, 0.1885186396095211, 0.18717776861150826, 0.18851091771533834, 0.18818307937834322, 0.19011535777339994, 0.18855663034976422, 0.18516103878966328, 0.050804725108327564, 0.06416227247698825, 0.04770359362776999, 0.05593682335804029, 0.0488633114743563, 0.05256006979267036, 0.06710619266200268, 0.058596518424833266, 0.053501806171441624]}, "mutation_prompt": null}
{"id": "712d4545-3c11-424c-983d-061815603c1a", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.7 * diversity_factor)  # Adjusted constant for bandwidth scaling\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        if np.random.rand() < 0.2:  # Added selective mutation to improve convergence\n            mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHSOptimizer with adaptive bandwidth scaling and selective mutation to improve exploration-exploitation balance.", "configspace": "", "generation": 85, "fitness": 0.4622661008916458, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.8663806506755121, 0.8667817647366336, 0.8518137827464289, 0.8650439868476661, 0.854393422912211, 0.8592864810657005, 0.8576242797621036, 0.8593931115347296, 0.8638310357280635, 0.7875680812088518, 0.7823156761229776, 0.7682668066324101, 0.7556165863196878, 0.7943610585486997, 0.7749918460107037, 0.7763639494723934, 0.7757763898386643, 0.7947294204082291, 0.15644984192579559, 0.3024490366630388, 0.2645813796260129, 0.28709934645391766, 0.13960966729357094, 0.3091742334210732, 0.2545659877488642, 0.21865401132379225, 0.1310717255521171, 0.11059726673651515, 0.1253096992416255, 0.11509976506919029, 0.13511763595977044, 0.1168608149486956, 0.12211825188876502, 0.2905235517987641, 0.1540264113449461, 0.12569857174563281, 0.7590285250046671, 0.800673186200215, 0.7187821355228455, 0.7501903708594891, 0.6244752341036715, 0.6806080224405515, 0.9808168270928115, 0.9473623212466121, 0.7080880893688838, 0.4644563227819699, 0.47719501884013593, 0.49391926094040395, 0.4862842809843083, 0.3340676195725115, 0.48586587324727926, 0.46119161637911377, 0.46453722286765486, 0.5289234344834441, 0.8908934570129953, 0.8508194816414424, 0.8678454720505433, 0.9007168172581537, 0.8563700227112047, 0.878788399717331, 0.8652387470720119, 0.8748964506779193, 0.8636819893363155, 0.22501480258865314, 0.6298993668921318, 0.29770005021563284, 0.5309826632498535, 0.22026783902106595, 0.18040836359806722, 0.16790175065492474, 0.13021450333483375, 0.7049533054574815, 0.30328216022057786, 0.0148916800630714, 0.2552944663701201, 0.21423620021100742, 0.3412272913623158, 0.22895470403546558, 0.5270633699307337, 0.17501866650718967, 0.6955222727027908, 0.701509683080429, 0.6983116264295156, 0.7144774877952101, 0.7328800704301643, 0.7144398826584093, 0.7431794433382829, 0.691758505220321, 0.6999598848361439, 0.7268539531577889, 0.7612000254353788, 0.7770338311384051, 0.789243216519391, 0.8027981669537576, 0.7604059190211606, 0.7878948580238567, 0.8031713488323423, 0.7856861002227686, 0.792920619184062, 0.4237503930798906, 0.1359286998090825, 0.31159074097434913, 0.6502518040736356, 0.23375863368333827, 0.2899806395931145, 0.33615346738781315, 0.211183728484709, 0.36585147233267346, 0.5878687963787003, 0.5848198071977404, 0.5904284412953997, 0.6240179548103301, 0.6199899240248081, 0.6044895372687038, 0.5975595349548379, 0.5920108803301913, 0.6110053937688535, 0.827069076109586, 0.8384231785444474, 0.840883177695538, 0.8348276421390266, 0.825633687785318, 0.8359518515061622, 0.8509528077350218, 0.8201712240828144, 0.8382644519726341, 0.13579964517338816, 0.11530349986095534, 0.12315361199818131, 0.12099250474635215, 0.12852972533165596, 0.11277165748804496, 0.1108571314717266, 0.10596711684119597, 0.11868901686905808, 0.1471686451784734, 0.14880485091938567, 0.18475496511655165, 0.5932558962504874, 0.6097057672329609, 0.2535780169012791, 0.5525550272379814, 0.4236878764658635, 0.16753461739709907, 0.49424789309168027, 0.5339144920537342, 0.5222659428968484, 0.529618028837626, 0.5380603094657412, 0.5225228613649873, 0.5726923635376817, 0.580851532486875, 0.5343572763011877, 0.44596649240725683, 0.4308582978932274, 0.42499638474537194, 0.4220476379330116, 0.4221025971216723, 0.43405844212385525, 0.47144277356149034, 0.4424301423233815, 0.435593126490064, 0.1793650381482248, 0.21251608183285364, 0.1941532036241067, 0.20537935329907264, 0.18395196635483857, 0.1971686231269114, 0.20334672750602034, 0.20129517642124528, 0.2043680774758705, 0.46087251067232626, 0.6175631886824695, 0.5816952793640582, 0.19599815243736074, 0.2981493003244805, 0.32896825354091874, 0.5528886881067949, 0.2085593866202572, 0.3795653976901886, 0.18506123658151785, 0.8414273761031175, 0.18466551049310165, 0.1957966826615508, 0.20475288467725072, 0.18581940238450312, 0.17757604318678966, 0.8517231431286543, 0.8361270430505288, 0.8362736383289278, 0.20720592203554056, 0.21146411551293065, 0.20159674104657999, 0.8454967504125616, 0.20912282929677772, 0.21090007711615066, 0.20903183415645477, 0.21158496698144136, 0.20401214863985273, 0.16120325372339317, 0.1807022988257957, 0.18667980648661586, 0.20240189898593997, 0.18852884742033416, 0.17285188106457794, 0.18649131835682897, 0.18556878566994062, 0.07138211292735652, 0.08353015774599393, 0.08136286320673758, 0.08168673934339565, 0.07941360560910449, 0.07624311707067832, 0.07811708586261934, 0.08079131201650558, 0.08730703570084519]}, "mutation_prompt": null}
{"id": "408c9cc5-76a1-446f-aef5-d76e1e661ded", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.3 + np.random.rand() * 0.7  # Adaptive scaling factor\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHSOptimizer with adaptive differential mutation control and memory-based parameter tuning.", "configspace": "", "generation": 86, "fitness": 0.4592592814672711, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.30.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9157404341967402, 0.9094000872657674, 0.917238312020612, 0.9205313270844204, 0.9081043791595824, 0.9266691060913385, 0.9064226489681158, 0.9125144906786509, 0.9170749571834557, 0.8554804118144902, 0.8585550755291762, 0.8657003891548148, 0.8548923235350089, 0.8132230514439329, 0.8796020823372998, 0.8739881351672611, 0.8622946475454046, 0.8601266499907849, 0.15223638802471684, 0.7305652247988025, 0.1728975994154347, 0.1599312074628091, 0.17385997912917428, 0.1809380307429993, 0.16247871761231347, 0.4858796866132935, 0.1740480133143203, 0.1549206946668379, 0.13744504557755077, 0.1806530887269373, 0.14902614132358316, 0.17004586926005127, 0.14496727546601285, 0.16279161044994594, 0.17406304763730618, 0.14239724014951172, 0.9035976288764218, 0.954290924667077, 0.9337913416327438, 0.957357386848402, 0.9656600181030172, 0.9236968670500969, 0.9547563263208461, 0.9560192440529917, 0.925539794291359, 0.44329669553132367, 0.5996294538610335, 0.5407741810096656, 0.41684833740764604, 0.4002714825722048, 0.3073929423812115, 0.49172327420077233, 0.36718694661562723, 0.42373411116244974, 0.8875816421519045, 0.8950608245320826, 0.8735280791064198, 0.8914720870676138, 0.8735305761385499, 0.8512605234812255, 0.8620013305938539, 0.8962079612159861, 0.913844826151864, 0.1822854687410258, 0.39160107018710455, 0.13370281857714894, 0.19437993853566216, 0.18515410188212444, 0.15361566278085415, 0.18544577785714933, 0.21246012421009441, 0.15864161024077716, 0.145601177231666, 0.02255781865201356, 0.19268997482292627, 0.15741468024634764, 0.12980143126702914, 0.14408110512158678, 0.201927889228822, 0.27363072050378645, 0.24266269020248976, 0.6653566988151105, 0.6746372323231489, 0.6119646043525466, 0.5428869859478315, 0.7021734149306329, 0.584346391397756, 0.6558045476384347, 0.6758663695735682, 0.6620866936361969, 0.7329387727368728, 0.7542892214945348, 0.7543677427351988, 0.729738105675839, 0.22402525346886937, 0.7252970929607145, 0.7857533822787477, 0.7940769051671461, 0.7544401228327177, 0.32746067609407126, 0.38758616704007176, 0.4063078635548901, 0.13756651386989016, 0.42453984316490834, 0.13159158201508603, 0.2752077829707418, 0.18099896776721192, 0.18446930988421706, 0.5925207070831153, 0.44493496974668034, 0.26585035161657355, 0.5826322835264586, 0.6023460185050158, 0.540065628314423, 0.5684455773783958, 0.562685528776208, 0.5939304816542194, 0.8442892976014017, 0.8656274590100085, 0.8561636403754227, 0.5927531775060082, 0.7268996752247611, 0.7490135043752695, 0.8456405592261593, 0.8461565618901672, 0.869481647476715, 0.15154958721656198, 0.5438048539311315, 0.1189658497721715, 0.11590242427951813, 0.13798521445587808, 0.1540828849209227, 0.10745231534810151, 0.5020684008312151, 0.16439831476892208, 0.17974001253905802, 0.1460509124050302, 0.24706287010979544, 0.7832027212058102, 0.18871361510635976, 0.19851547358155863, 0.3649237922799714, 0.22053700874810223, 0.2424731341210259, 0.6943319595967157, 0.7174145087393671, 0.7041518642815234, 0.6204302795720898, 0.6615532886606976, 0.5597499131384465, 0.7187905678171592, 0.706599325098034, 0.7382128665590509, 0.4959236396548946, 0.5052300156112831, 0.5439511295989239, 0.5208643350109415, 0.43906040320470907, 0.4663957263081022, 0.5154342533725793, 0.6546853906457643, 0.6402348349881014, 0.19918172927231037, 0.1920341935025235, 0.18649427405610086, 0.21847087979419466, 0.19673688933253297, 0.1962887029602257, 0.24920007543609257, 0.1908436329716272, 0.19798239233924997, 0.24204011469405506, 0.2493930926094765, 0.7536035203446427, 0.822070242367193, 0.7565994832251692, 0.22412857133037323, 0.759368503312767, 0.24421428705633974, 0.22208739047233106, 0.14534955063855448, 0.17154008998294779, 0.16887803852680405, 0.17734787039291078, 0.19958337577527607, 0.1861139362981209, 0.16433394440383509, 0.6235751934044456, 0.15313777359291547, 0.8744057391193764, 0.1679962817354852, 0.1534010082966759, 0.2097232105928315, 0.39920456553611516, 0.8550196107963779, 0.21158069656509493, 0.2089005698481764, 0.21200092961113215, 0.19957399008584842, 0.18175283118052765, 0.1864562975283034, 0.17629665809504003, 0.1826957715703159, 0.1736067984177525, 0.17067365861916295, 0.2160945975531957, 0.1928998334383234, 0.08566043235411891, 0.07642768630966201, 0.07977492122569696, 0.08315733718684493, 0.09102656422421018, 0.08412425117653566, 0.08375060335320161, 0.08749656188697175, 0.07563440458562276]}, "mutation_prompt": null}
{"id": "c27bece4-03df-455e-af7e-98b9f643942c", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def adaptive_learning(self, fitness_history):\n        if len(fitness_history) > 1 and fitness_history[-1] < fitness_history[-2]:\n            self.hmcr = min(1.0, self.hmcr + 0.05)\n            self.par = max(0.1, self.par - 0.05)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        fitness_history = [best_fitness]  # Track best fitness history\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n            fitness_history.append(best_fitness)\n            self.adaptive_learning(fitness_history)  # Adaptive learning applied here\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHSOptimizer with adaptive learning and diversity preservation to improve exploration-exploitation balance.", "configspace": "", "generation": 87, "fitness": 0.4984836513451373, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.29.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.8872309194805932, 0.8893537776449539, 0.898462054483685, 0.8967196411711987, 0.8903289819137625, 0.8910943540877427, 0.9010425715854997, 0.8807437903689503, 0.9020318686198865, 0.826065619549013, 0.8463722873827118, 0.8374828340680659, 0.8307086167467551, 0.8523034207642717, 0.8293986631163601, 0.8269448044136247, 0.8336044742476316, 0.8447846200993503, 0.17847694633561806, 0.5553248032818858, 0.5886279570480575, 0.6351852299697418, 0.6038293939624861, 0.7111476683658928, 0.1668725303327938, 0.4242448761871016, 0.1680056368636882, 0.13295701895683454, 0.1585612353431063, 0.1307579294119069, 0.15921628392339537, 0.16853028062266528, 0.1741596662839222, 0.14865259893903549, 0.1629310663349015, 0.6527595442931393, 0.9594666854742845, 0.9490994147052857, 0.9726060853406305, 0.9626567487223239, 0.9611238338076686, 0.9334363064379427, 0.9595720500125126, 0.9652997194482715, 0.9597169600440344, 0.7337347233890876, 0.6469254052888557, 0.7147031793295369, 0.7121025534421497, 0.6993919693733579, 0.7189665496588511, 0.08817127606312536, 0.6162549959159362, 0.7071981002265227, 0.8645058017924603, 0.8723241917553779, 0.8415869037547488, 0.8498803730497506, 0.8324859273312784, 0.8271067971984825, 0.8863126962357806, 0.8712215248838954, 0.872082585134798, 0.35838647013662217, 0.31635366053880576, 0.6052677886744668, 0.29432866084063025, 0.691027388432919, 0.29202074334237793, 0.6179750363842753, 0.20909990589782623, 0.24042980055827934, 0.6826867546623026, 0.010003713501387623, 0.23419716861264583, 0.22267181808114223, 0.48601221036854647, 0.7253526670067014, 0.7086887026625948, 0.6248617665586629, 0.6532982848931742, 0.5728632100931688, 0.6182865992722584, 0.5640228701085073, 0.605704778784661, 0.5913888662525508, 0.5971806748725897, 0.5571113369399099, 0.5846487329855287, 0.6185234544928062, 0.6727871662306742, 0.6860877138854393, 0.6728476133725172, 0.6791892228870279, 0.6862547550910065, 0.6327254789138343, 0.7000874189582427, 0.6937309104746177, 0.7028579445285661, 0.13449487357985712, 0.12543007564274644, 0.31832711244745604, 0.4929857523146305, 0.286674977473491, 0.22559437827182016, 0.18502193311237947, 0.241922655969806, 0.18822573511333096, 0.4494260343056463, 0.46942585318762065, 0.48989579250472515, 0.45532651130267476, 0.4906256195187385, 0.5521432885673406, 0.4592774597131225, 0.4650634930571751, 0.49244550693085554, 0.8089621331096918, 0.8287294553135162, 0.8252058230008861, 0.845761606263971, 0.7868216719632988, 0.8185209856120901, 0.7993047134761073, 0.8273926624980203, 0.8225287747053842, 0.1210258375455574, 0.14514697627298778, 0.09632264210315866, 0.16033970571189604, 0.10095349555366373, 0.12547080512955766, 0.11056444685589317, 0.10041790505674508, 0.12000171257094083, 0.17692927229401956, 0.5920512454311093, 0.49524033333273376, 0.18274905583103818, 0.19818577105765967, 0.20448998088906323, 0.17687211362224864, 0.2405180422165476, 0.21887475709598636, 0.6665060054575003, 0.6332798200178213, 0.5853670084322393, 0.6424377501175351, 0.5850229437787455, 0.6547445206165758, 0.714112040611246, 0.6628475859673164, 0.6657983506526839, 0.43381515754161815, 0.4303559375767012, 0.44098597181269295, 0.4221457249644135, 0.3800555037476102, 0.5122183045333826, 0.49454676277723264, 0.4893166022143929, 0.5049289744369406, 0.18036296422163267, 0.17993449574521259, 0.18623439820710574, 0.1984477104237734, 0.17756054352189443, 0.21202259973620896, 0.19583179558003638, 0.19038587677103613, 0.20126291132569252, 0.24131277643765947, 0.6645563485447947, 0.23516713003263168, 0.2279286967045755, 0.7027448001061071, 0.23528778274681494, 0.23895702406621477, 0.7336770587939214, 0.23697413702412573, 0.1556983127751298, 0.16413969107871107, 0.17196758503227005, 0.7745202687636666, 0.8623945786822997, 0.8961287956573184, 0.8445222280197007, 0.8807938588720123, 0.8455382482688205, 0.7530388530605756, 0.20788473181096356, 0.1291671821044461, 0.8579688422626316, 0.8678837488779836, 0.8202936378924939, 0.21161207581717212, 0.12822557322467165, 0.15349332698818563, 0.24435901453970232, 0.1827337579634386, 0.17665077609713808, 0.19734958751244625, 0.1553581912770422, 0.2429033070167378, 0.17955928629904916, 0.18455951946234495, 0.17348689771407566, 0.0925817892215669, 0.07714723523269817, 0.07408718895613398, 0.08333257772413216, 0.09639516225337519, 0.07024358725846835, 0.07971028930847146, 0.07433563835347157, 0.08177173908259361]}, "mutation_prompt": null}
{"id": "8a75b9bd-e06e-4e52-b2f5-56d885d3c951", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def diversity_based_local_search(self, solution):\n        diversity_factor = np.std(solution)\n        if diversity_factor > 0.01:\n            perturbation = np.random.normal(0, self.bw * diversity_factor, self.dim)\n            solution += perturbation\n        return np.clip(solution, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n            new_solution = self.diversity_based_local_search(new_solution)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHSOptimizer with adaptive bandwidth and diversity-based local search for improved global exploration and convergence.", "configspace": "", "generation": 88, "fitness": 0.2213909019749557, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.4263159512668152, 0.42384825466414267, 0.4323364941535909, 0.40488613594455647, 0.3701957529622635, 0.4203317075161782, 0.41485041332774997, 0.4093813037808959, 0.4337227765404945, 0.06018187427597155, 0.07966877534159744, 0.08998534057301188, 0.037909870615160934, 0.0546326275626412, 0.08726966957278148, 0.017209774139183898, 0.007093337500661989, 0.028703820560928017, 0.1125804952062659, 0.11333061362651187, 0.1077017283304651, 0.10907588416682157, 0.0957692152001477, 0.10542248064748949, 0.09868255319857266, 0.0854503093585417, 0.11059792439090232, 0.11142909159493919, 0.10522383861748097, 0.12285705268246105, 0.096956679281614, 0.10273974776552586, 0.10716958526683706, 0.1143188700127783, 0.1200780146528907, 0.10706929353607664, 0.9179929738732198, 0.9590054918708555, 0.9662573061669781, 0.9430381499815049, 0.9504174990838379, 0.9583307551591906, 0.9273742092338924, 0.9437065237177112, 0.9245336514044089, 0.27111090993033116, 0.26680418252989535, 0.26254282318503464, 0.251690006981131, 0.26456186151295047, 0.2683955125206581, 0.2493546025591714, 0.24005715112318493, 0.2722178386300852, 0.34109937687498537, 0.35414778307050776, 0.37638512003035096, 0.31421939009207867, 0.323239184969779, 0.32757632792666236, 0.3386678069592832, 0.3233773776923321, 0.31806215558242523, 0.16628723564417214, 0.1648904081194451, 0.17116101449343024, 0.17400132800594637, 0.17878287626969303, 0.15649410613439818, 0.17924296012324625, 0.16950069125950817, 0.1628416044485126, 0.23968178516316208, 0.245961780157139, 0.25164306168055606, 0.26390937564228334, 0.2507357597316927, 0.2441043434992204, 0.25230331140163764, 0.2417601474622434, 0.2577456068681415, 9.999999999998899e-05, 0.022380589661590955, 0.006754224350188132, 0.01016784306717422, 0.018375201293225674, 0.0011052782428356833, 0.047918072646599086, 0.030668518495464703, 0.0315666762367246, 0.11176084663825347, 0.11004877236522448, 0.11020192136502371, 0.11681539105971184, 0.061756137442695036, 0.09275244443345942, 0.11532084161302703, 0.12884918315770522, 0.09975036267045378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08408699979617484, 0.09305451971147671, 0.11374827554055322, 0.07612634819914332, 0.0945366927551804, 0.08336493370218045, 0.07101741910808435, 0.09551119946364361, 0.11032159372548556, 0.40375784382573443, 0.40665735185204577, 0.3944355655216719, 0.35835713006690006, 0.3666747918413523, 0.38662657189860394, 0.3950158096766305, 0.3983052292107532, 0.39681696137682665, 0.09102961781778907, 0.09389813292915883, 0.10149094051883534, 0.10274340242971391, 0.09959641777770134, 0.11073436166138217, 0.09231203174569469, 0.09977686002354147, 0.09261696919704732, 0.1842244153685827, 0.1755197614281302, 0.1273125460785699, 0.19175116348571997, 0.15401918265016334, 0.14537937889981423, 0.13331953810729613, 0.1974054473049216, 0.14774100260884893, 0.2711639977515746, 0.28031512909225764, 0.2841459397970578, 0.2900164898310039, 0.29034628424018594, 0.29169568608032614, 0.2654315078810793, 0.2644180696457098, 0.2754319596981222, 0.2229162558115806, 0.2071346096587502, 0.22527678161389886, 0.239430178855778, 0.24971230220377105, 0.23319632133368573, 0.20513723347522017, 0.19721349982364478, 0.19704622252962112, 0.17817009816944696, 0.22360804237911458, 0.19061623915224535, 0.21486287167804485, 0.20117517269681862, 0.18789638407155085, 0.1982768495156111, 0.18855917342378958, 0.18720330400124974, 0.1811984632152095, 0.183182130057844, 0.21208673710960013, 0.23462980656345478, 0.22762173472348968, 0.19467548941727386, 0.23553108344734153, 0.18848687287664267, 0.23400568035320857, 0.518769463823515, 0.4543469358490967, 0.16991940358342106, 0.5560997737905016, 0.17471691163012215, 0.18337219940178318, 0.17857101935381803, 0.5215933148051051, 0.19960115835596282, 0.5200463506275527, 0.16899008850716057, 0.20518401569475486, 0.16692901541780625, 0.5244715036730381, 0.20706081430671852, 0.20612656919092487, 0.5927662538177112, 0.20815457804560922, 0.18042361463110135, 0.1863019857980739, 0.17708742406749933, 0.1754366621965051, 0.18701460901805544, 0.18343100132216295, 0.20520752001781983, 0.18775329994970757, 0.17720711594979255, 0.07967856859084643, 0.07632542088661665, 0.08108216632828902, 0.07973612650043127, 0.08111079450519865, 0.08728297066789059, 0.07636284382591674, 0.07822758869899804, 0.07556180293918491]}, "mutation_prompt": null}
{"id": "ee073a60-a320-4886-8886-578d3e3ac77a", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "e07af9b1-d38d-420e-b077-e53297fe708b", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.6 + 0.4 * (self.budget - self.evaluations) / self.budget  # Adaptive mutation scaling\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Introducing adaptive mutation scaling and memory consideration to improve convergence and solution quality.", "configspace": "", "generation": 90, "fitness": 0.4456408981255566, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.26.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.8474651864515409, 0.8335410797576347, 0.8322545993389772, 0.8596364750422336, 0.8507807825022572, 0.8287715828884603, 0.8492087514801777, 0.8346310365148647, 0.8380912261003532, 0.7413406830369782, 0.7417740783315319, 0.7649181049074105, 0.7272652337766262, 0.7388378701694449, 0.7377618731051718, 0.7533500741534083, 0.7635385379008283, 0.7431567503902179, 0.5926570066490451, 0.5588709315415542, 0.14057513409763378, 0.578275300714093, 0.6180143040483572, 0.564069105180786, 0.16697805323027148, 0.6084470462454658, 0.5982151007689267, 0.15623300327499368, 0.1585582163860807, 0.14011210039400923, 0.14836311700269889, 0.5199261896484852, 0.15878143179003912, 0.5457292568591404, 0.2815225964559731, 0.13907733006574907, 0.9640807916983366, 0.9539709120606584, 0.9471487621530279, 0.9607947943536705, 0.9746045323678894, 0.9630268651482543, 0.9840582187123809, 0.9810202701241771, 0.9736243420642753, 0.6415698415594503, 0.6732377940599583, 0.6257709966134801, 0.629655328197434, 0.6427740608415586, 0.6461839175784398, 0.6190178494856495, 0.6484052915524736, 0.5958997103159528, 0.7116881927591077, 0.7302142225942505, 0.7716125563845484, 0.8080109054909346, 0.7657675207035101, 0.7754474341213026, 0.7500596925042636, 0.7763424108106991, 0.7555086437922509, 0.5121916028597076, 0.5685889753803477, 0.5273482823607345, 0.6009493951411938, 0.5763000171506532, 0.531602656178328, 0.5413278860406596, 0.598542464537476, 0.555153990030816, 0.01659279232209543, 0.5444928386978982, 0.016624405544385823, 0.5747196806738064, 0.5761280750363731, 0.5041804312374057, 0.5703584729228801, 0.12398086863977409, 0.547956030569732, 0.43154783538127883, 0.0830731101083878, 0.4339502811229722, 0.4674520983708901, 0.40439246824309927, 0.3959676976731843, 0.4058256463397255, 0.4359307167223888, 0.404642071860681, 0.5413218042616034, 0.549037959526056, 0.5364785160253197, 0.5364130766548163, 0.4900984553623787, 0.5333059037366491, 0.5763207570824807, 0.5475376547845008, 0.554795376274648, 0.20971232590831812, 0.09770875817452529, 0.1895626689136285, 0.18214766987923192, 0.24246480556026195, 0.26373746165626044, 0.16323791957094314, 9.999999999998899e-05, 0.19625227511850718, 0.3174062341324526, 0.36598192953857456, 0.34895008365044067, 0.39061862200776987, 0.3622548478896461, 0.3836090577632091, 0.34723804526802104, 0.3448239372958012, 0.3378217204038133, 0.7259282210136591, 0.7090056241438268, 0.7179987492094191, 0.7187948961715351, 0.7455111979528537, 0.7223638127860271, 0.7367882066216918, 0.7376566629516086, 0.7107752295010312, 0.09739945646494474, 0.09241912050774337, 0.09832828346597966, 0.09362805974918598, 0.12037415765759907, 0.11828825878318383, 0.21709154331546754, 0.12073016445699236, 0.08733504117810209, 0.3882015674316692, 0.329294322506111, 0.1520224479575818, 0.2199318417983962, 0.21152010530427412, 0.13919679911078275, 0.5580625721634764, 0.17870193626950492, 0.1933030290520772, 0.4623965491197759, 0.4692816502325673, 0.5254752319314047, 0.49928104905584747, 0.46911557972293627, 0.47157099058750607, 0.5459293476629061, 0.5262090662507444, 0.5146091685303622, 0.2843669397444597, 0.32350095978996185, 0.3690343302282064, 0.3663261425007883, 0.3177605859444891, 0.34221846065755257, 0.3489292216163954, 0.37876172303225353, 0.35402729283116763, 0.17948814179428152, 0.20097133873376682, 0.1881925418485988, 0.21950746711561275, 0.16168442678450068, 0.17118783001226512, 0.1786109528334613, 0.18080914114743196, 0.188245947418353, 0.5399177777274998, 0.22694363113338178, 0.6827255598703512, 0.235777630109547, 0.6973864315933538, 0.5594183391638172, 0.663767466343065, 0.5878219457107043, 0.6187431634664333, 0.16973964371153638, 0.17008438346858024, 0.16729207798357149, 0.767869643455626, 0.19448106793931041, 0.205528435983806, 0.18494783899568867, 0.2036110027128698, 0.1829617212729393, 0.7744345226068481, 0.7424725386191706, 0.7553989121497088, 0.7289802536523546, 0.20036991741314725, 0.20085911245385168, 0.1539192335951407, 0.12722920409743943, 0.2088589267115183, 0.17329425958301303, 0.1710787154077139, 0.19591384062538453, 0.18548561213433012, 0.168183657156045, 0.17205046783559752, 0.18959126636060952, 0.18891717640682226, 0.21923154786706867, 0.07948773809109932, 0.07032016060950441, 0.0780958957025557, 0.06407512480578603, 0.07701084731839003, 0.07458824832232147, 0.07322093643080207, 0.08183656362058422, 0.07738450441291078]}, "mutation_prompt": null}
{"id": "ed48b1aa-26c2-44ec-ba94-b88df9fcb373", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def probabilistic_acceptance(self, new_fitness, worst_fitness):\n        probability = np.exp(-abs(new_fitness - worst_fitness))\n        return np.random.rand() < probability\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            worst_index = np.argmax(harmony_memory_fitness)\n            worst_fitness = harmony_memory_fitness[worst_index]\n\n            if new_solution_fitness < worst_fitness or self.probabilistic_acceptance(new_solution_fitness, worst_fitness):\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Adaptive EnhancedADHSOptimizer with dynamic bandwidth and probabilistic acceptance to improve exploration and exploitation balance.", "configspace": "", "generation": 91, "fitness": 0.4893343952845593, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.29.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9011553719346316, 0.8842078627441827, 0.8840310477520964, 0.9035813545285568, 0.9024656699942043, 0.8996075776246932, 0.9007506397335778, 0.9048490301324507, 0.9040780154935438, 0.8141229061224368, 0.8402965326563596, 0.8251715549106848, 0.8242063652760752, 0.8187145093071181, 0.8353359270749396, 0.8267656740135042, 0.8341032599587731, 0.8391468202305716, 0.5800760752675646, 0.560097447627139, 0.14924753822300496, 0.5022819054631761, 0.6006387674756541, 0.15179786247719806, 0.1637373486858119, 0.476271373141954, 0.5356406504475377, 0.5054663608255691, 0.15896484759740637, 0.15813172738830727, 0.5678907429201517, 0.4938385776894826, 0.16456486827865935, 0.16716916431400874, 0.15300223086205933, 0.1487015202667521, 0.9477688865314212, 0.9830864342701633, 0.9565760420214424, 0.9464401662227898, 0.9733987783035913, 0.9658319663664596, 0.9390282184606745, 0.9430583608668068, 0.9850869682076542, 0.7732087818642216, 0.7495331083536796, 0.7198095103037947, 0.6889675480135017, 0.6899791209144829, 0.6119164307008329, 0.7154776745380388, 0.7312230504736137, 0.05178963201056175, 0.8410214844101248, 0.8483532391222193, 0.8565611878207564, 0.8507084196925468, 0.8881973850903297, 0.8502692107271408, 0.8431508058879865, 0.834590813047187, 0.8519153649769745, 0.2892186243780508, 0.3465922380619949, 0.205381332465, 0.4439007787032079, 0.6788207772596796, 0.27626711243479696, 0.22962510192778685, 0.6868875517668491, 0.4620732010191636, 0.23945163948648762, 0.652943862392173, 0.12214336014022775, 0.17469989894534355, 0.5406465118082346, 0.21073524642382768, 0.2551864246646671, 0.40925271117174233, 0.5749860269399644, 0.5609524109530017, 0.5422032291669047, 0.5947844021345998, 0.5933490267126841, 0.5633927959987785, 0.5858417005244694, 0.5216643590744217, 0.5646389812387325, 0.5616177389505579, 0.6716939178194155, 0.6530611999593149, 0.7048094240776944, 0.6687295781462094, 0.6441729555605191, 0.6671716778216359, 0.716648410924057, 0.6861987813963065, 0.7040389556673974, 0.33602934678066554, 0.11450439171459803, 9.999999999998899e-05, 0.1996738375362137, 0.1905204900831594, 0.46142727515206505, 0.3625897975022885, 0.11056347488854046, 0.3174365728871389, 0.43454567943384614, 0.5102944499507447, 0.47853839693646383, 0.47692740746307505, 0.5083163060078522, 0.5028813196090117, 0.47052498155876366, 0.4307459265549163, 0.48074877299179086, 0.8128308286141971, 0.8112877140392357, 0.8278264661673961, 0.8051378668178993, 0.8071158381571315, 0.8307863548242157, 0.8276495432357736, 0.8169933357725616, 0.846688820485017, 0.11410818019080593, 0.11735876613840523, 0.10251145314599908, 0.11803941327121159, 0.1100433349467641, 0.16086334999703233, 0.5167113772971859, 0.10493117821685372, 0.13003941540899655, 0.24765237214920421, 0.20847774692047705, 0.1361914328286422, 0.28711007447129266, 0.1720421835315743, 0.14430667784691997, 0.20814445179219465, 0.34219268221415, 0.4863898110021716, 0.5723050292778676, 0.6232294509847789, 0.6223269455018836, 0.5399482255223227, 0.5955733584638101, 0.5867089067390234, 0.687292725911415, 0.6784702221631236, 0.6387060224706558, 0.38888657258627257, 0.390712546046479, 0.38830686893656474, 0.45120753921637347, 0.21152938971323354, 0.4326774973452788, 0.47262366028789105, 0.47830298030100027, 0.448726026847889, 0.22479126177937747, 0.23982691029612446, 0.20257452383768104, 0.1908672946806903, 0.1877569333272887, 0.22588338399902896, 0.19692672008390377, 0.18892945250052762, 0.1696529187921042, 0.7586502737773538, 0.5489081513929969, 0.22248182650653736, 0.611410775596315, 0.21892559813504764, 0.6239504373249684, 0.24040978212604425, 0.6523583635689378, 0.2439591120486807, 0.8672264237083076, 0.176177159365714, 0.18427750284270783, 0.9160220803509644, 0.18584208594092522, 0.879697007602671, 0.20277635519119475, 0.1970081931412565, 0.8313790840028481, 0.8684872122725994, 0.8158767197681355, 0.08266208999182656, 0.20845716843179884, 0.8470568650801511, 0.20752018771924918, 0.213244478216295, 0.9126902000845498, 0.21211417583634762, 0.1837010880346145, 0.16944827636253834, 0.1811498194111083, 0.18477282431347986, 0.1825462820987136, 0.2015234833281877, 0.18409886296032685, 0.1860881359645027, 0.17624236641224944, 0.0821721087757924, 0.08341250742806694, 0.08191117452026264, 0.08147871396225181, 0.0750465799624852, 0.09930049090135928, 0.11076436676259582, 0.0884351293865302, 0.07918573295355413]}, "mutation_prompt": null}
{"id": "f12e5e36-3791-4706-828a-392509c4e36a", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "0b471920-abeb-4b6b-aab8-d4106bd85d9f", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        adaptive_par = self.par * (0.5 + 0.5 * (self.budget - self.evaluations) / self.budget)  # Adaptive PAR\n        for i in range(self.dim):\n            if np.random.rand() < adaptive_par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        adaptive_f = self.f * (0.5 + 0.5 * (self.budget - self.evaluations) / self.budget)  # Adaptive mutation scale\n        mutant = harmony_memory[a] + adaptive_f * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Integrate adaptive par and mutation scale for enhanced diversity and convergence in EnhancedADHSOptimizer.", "configspace": "", "generation": 93, "fitness": 0.46013592157029126, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.29.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.8987174313943311, 0.8942703025257622, 0.8990017581247265, 0.890885006071781, 0.8815897282512891, 0.9018445145177408, 0.9009852162460656, 0.8838609003178975, 0.8926804864157797, 0.8219043460071441, 0.8360172809732246, 0.8353698872453024, 0.8219045093191055, 0.825578411965715, 0.8353050191295814, 0.8153408553478291, 0.8373479387474778, 0.8191398316811789, 0.14103914039373522, 0.6404796063898341, 0.15460888172144482, 0.14185379645836949, 0.13473881641062457, 0.6151897894931284, 0.7253924689060918, 0.628158406405738, 0.5906536318601757, 0.7036361006387244, 0.14809029388782824, 0.12739711877159188, 0.13798504505913933, 0.15041849619014447, 0.13176517446090297, 0.13128927839519422, 0.13448845824131317, 0.1689477913139077, 0.9035261982354824, 0.946176180665103, 0.9262502130565785, 0.977207789970054, 0.9827454316012295, 0.9725164461743923, 0.9764600458220938, 0.9613076497940503, 0.9723891857391604, 0.6641531970667739, 0.6003836937145347, 0.609214093361454, 0.4379200087645607, 0.5114294435169857, 0.5905616578583484, 0.5414948417240518, 0.45092302178884736, 0.5434430096865156, 0.8791088962639922, 0.8275517113833515, 0.8096381941662549, 0.8525018849648156, 0.8389015361546133, 0.8573585003411649, 0.8850212301002395, 0.8594474695077535, 0.857792859690721, 0.19375902781945398, 0.437270298946009, 0.1773791411835558, 0.6644300472564797, 0.24724848265931987, 0.3496186107130399, 0.32988498899494967, 0.4000588948153544, 0.3303296951860528, 0.009836459953741383, 0.12285238146942956, 0.15429994435335137, 0.3032137774493189, 0.7335693490408718, 0.1867490408975877, 0.6621398400161058, 0.23920822574442524, 0.17938155583875037, 0.6351254849375672, 0.6455039452741471, 0.6073507309114178, 0.5810416672757919, 0.5914000135147305, 0.6171604274231635, 0.627423724784847, 0.6397868802718512, 0.5957580502917111, 0.6991992581157628, 0.6725325374223141, 0.678850206185666, 0.6806527071087481, 0.66029586919039, 0.6573039927873473, 0.6960371834416812, 0.7137826150944109, 0.6982813920962092, 0.12844684052183053, 0.07478157401527219, 0.10737056159638592, 0.28048360022374785, 0.26043740119813474, 0.35009763242973035, 0.30394106176463787, 0.1871506732443291, 0.3342392275815793, 0.5226223315525299, 0.4810833651195542, 0.504156939814878, 0.47881649698345785, 0.5499044063522982, 0.573218748814465, 0.45083284126281675, 0.5408911764767149, 0.46358733524715967, 0.8145828263021535, 0.8208636190574261, 0.8184117380449523, 0.8201482631993748, 0.8138264134699336, 0.8189858987166974, 0.8352894199403821, 0.8178344291636098, 0.8233618268539541, 0.09645953158365794, 0.12177493685840324, 0.11091189732023488, 0.12707191583322341, 0.1111127055215484, 0.10458721774898128, 0.12259416431936987, 0.14531150079260746, 0.10631552281358092, 0.18924302218870814, 0.253758274420653, 0.10292740170475823, 0.2586849814675575, 0.1972444564083602, 0.14165563292131667, 0.15656415321078387, 0.1226374814138892, 0.14431509450346802, 0.6148207211781442, 0.5665840801903563, 0.6410623251790579, 0.6165793869851528, 0.6484606367980192, 0.6454136403528273, 0.7484930039574272, 0.7457355735389679, 0.6668479322931677, 0.49237887869559593, 0.46795496158206895, 0.4884829939171258, 0.4755829667472413, 0.4328359561617159, 0.49596529241195253, 0.4654677131614602, 0.5271016967617494, 0.5335913450272041, 0.20787474127607952, 0.20639659601151317, 0.1860128464958558, 0.22029993288151006, 0.1897293312756262, 0.1896175312974816, 0.19513436764024483, 0.19152743543089557, 0.1918843159914001, 0.21496594068760055, 0.2423394124977475, 0.2405336927945163, 0.7128771435333305, 0.20328324473666748, 0.22516517982623374, 0.21673601671493148, 0.22747054187201654, 0.22330418200666013, 0.16979107836687568, 0.1709906176704692, 0.17069176515532913, 0.8297139821927273, 0.18467106651323106, 0.8737054311891804, 0.8065931773855173, 0.16353684269055535, 0.8249718897563717, 0.16612317809934996, 0.20885738705852752, 0.20730408771216247, 0.20785483381171244, 0.20469159048532315, 0.2070520426329755, 0.20975698179086644, 0.21234444338313685, 0.2173979530358643, 0.18348209595712184, 0.19346285166296273, 0.18762040134237323, 0.18305824938574555, 0.2007567269399435, 0.18764840624835633, 0.1792456392063747, 0.19122636206938737, 0.19009260879524936, 0.08435749924366664, 0.07468523503686719, 0.09484207792104249, 0.08220169186401671, 0.08902801669195037, 0.07949439451314921, 0.08966629929808567, 0.08070441202050693, 0.08267308530878148]}, "mutation_prompt": null}
{"id": "47ca826e-6a82-4dd2-9484-9ad93aa0357e", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "5966e881-1891-421c-80be-f41a7b660965", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        # Chaotic initialization with logistic map\n        x = np.random.rand(self.dim)\n        r = 4.0  # Logistic map parameter\n        for _ in range(100):\n            x = r * x * (1 - x)\n        return self.lower_bound + (self.upper_bound - self.lower_bound) * x\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        par_dynamic = self.par * (1 + diversity_factor)  # Adaptive PAR\n        for i in range(self.dim):\n            if np.random.rand() < par_dynamic:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHSOptimizer with chaotic initialization and adaptive pitch adjustment for improved exploration and exploitation.", "configspace": "", "generation": 95, "fitness": 0.48885396516791574, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.49 with standard deviation 0.29.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.8880030793659263, 0.908545908397627, 0.8891320828376584, 0.8995048252939488, 0.8916642412004093, 0.8961122650902121, 0.8880387435276887, 0.9079973271730065, 0.9090105867658176, 0.834254253601201, 0.8487138723836807, 0.8196077034402232, 0.8341379843336642, 0.8264941095309577, 0.8287032326190247, 0.8293987516846777, 0.8435952275590228, 0.825751070463308, 0.16187757664423075, 0.5384699448582457, 0.6657604472012209, 0.17017757811587453, 0.5097110684373081, 0.6821575375297722, 0.7019794435218634, 0.16541298764571744, 0.611868421973496, 0.16566493200805832, 0.17312424665128168, 0.15091231046961706, 0.13804621862962396, 0.15050314432623013, 0.1237273441189658, 0.17535095414381885, 0.6157282952053194, 0.1251869591348055, 0.9678367735017828, 0.9691566752105585, 0.8972046891671397, 0.936881736643141, 0.9818288282504558, 0.9841890975070764, 0.9579004410447378, 0.982528486733902, 0.9493783344677809, 0.6656930871451295, 0.6586429715270001, 0.708627549695608, 0.685485660123724, 0.631169503145331, 0.7106071523450463, 0.6867653026014455, 0.587050586225077, 0.7035069773132492, 0.860280629444691, 0.8638069746441377, 0.9050023369864469, 0.8574026597235316, 0.8685185729890058, 0.874193037292552, 0.8627565806827499, 0.8282012637718947, 0.8571650264990655, 0.19462086876392037, 0.18429530791024562, 0.23982181506782518, 0.6036900312858036, 0.2758172585646188, 0.24416177788169957, 0.20928926405560477, 0.19003980028276268, 0.6943551574470415, 0.614495296122231, 0.23737853233934536, 0.0169325838295179, 0.3991311480278188, 0.6830535215463069, 0.17784499566245793, 0.21855173652321147, 0.2259462171203258, 0.6947486992305589, 0.5571491058502003, 0.6139837896256005, 0.5614618606721149, 0.5693315948911908, 0.5714089449842983, 0.5983771412106469, 0.5710548649622607, 0.6335233707028627, 0.5757884208461512, 0.6736880207236311, 0.6761393424565103, 0.6683181404386195, 0.6948600343309219, 0.6426078692931638, 0.6657456916609661, 0.6938665235358794, 0.7095784196372941, 0.7312841651535927, 0.31188894339918594, 0.09923479411703862, 0.3145975207650995, 0.2101920744960396, 0.11562210030931053, 0.47159601999572154, 0.32346269456820076, 0.14380062578015573, 0.2850983190890575, 0.49893579038202807, 0.48913698090789315, 0.44797424865156443, 0.5151031259304487, 0.5331669069638731, 0.5019968132387712, 0.44450965845973245, 0.46152085744546034, 0.5165759680067499, 0.8282252036948454, 0.7924056967410955, 0.812571552494469, 0.7805628600712418, 0.8121570835511698, 0.8191587847669837, 0.8022399533991043, 0.8105951279062148, 0.8043322039399592, 0.13250366028038008, 0.12360405726936519, 0.14083235221402612, 0.12506435727168996, 0.12420006033382724, 0.14936582311381685, 0.1006229433117678, 0.26478785534273297, 0.1370958336813657, 0.17517488447216634, 0.6475005206159135, 0.22199436546842755, 0.3121033973984497, 0.5266880204326521, 0.12851229926632202, 0.2870399846040418, 0.2127084011858027, 0.4961097137883852, 0.5933720076729054, 0.6536899256322831, 0.5930406836177431, 0.6103027267847071, 0.6186343306922537, 0.6560783292374768, 0.6224393375429043, 0.6404655744572907, 0.652688460056088, 0.4094627032952136, 0.42078050494380215, 0.4690304263294722, 0.41029680839068616, 0.38515815541710596, 0.500217004820634, 0.502499976280518, 0.46289430834574385, 0.4506565489792034, 0.18993782426455785, 0.2061544453622527, 0.2194541953511795, 0.18604604982743633, 0.1836519420857219, 0.19400214112246816, 0.194835789626998, 0.20251080629924723, 0.19913838336819056, 0.26490306897557947, 0.24566430936626593, 0.607225573354161, 0.2370908927374138, 0.24272658337098563, 0.5975313287687077, 0.6143754526488667, 0.801767293801291, 0.7055654324198142, 0.8347521572897789, 0.8840275930907043, 0.9299358375825503, 0.18832981316692754, 0.1635007942804234, 0.7782571337913344, 0.8859560008733453, 0.1812802720577975, 0.18382839139541307, 0.16843407536021038, 0.15505281767663381, 0.20678131050589987, 0.16532626287715813, 0.1639393632624344, 0.2064496803411936, 0.5266349461525897, 0.8641898207855062, 0.12789753970673756, 0.16872381106547962, 0.1935197679365671, 0.1787922285522041, 0.17844479943715874, 0.19293668472142445, 0.17993128126323044, 0.19248234752684668, 0.20609876719877163, 0.19475822496122508, 0.08239062893467997, 0.08910310731207449, 0.0791412550436913, 0.08154413142443606, 0.0808597570293016, 0.08356838695410318, 0.08055151734435295, 0.08550821875176973, 0.08422106304317589]}, "mutation_prompt": null}
{"id": "3fea7db3-8fcd-4333-8e92-15b154830466", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "e544c208-b7b3-4960-b0c4-513f30a86db4", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory, mutation_scaling):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = mutation_scaling\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def adaptive_mutation_scaling(self):\n        return 0.3 + 0.7 * (self.budget - self.evaluations) / self.budget\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            mutation_scaling = self.adaptive_mutation_scaling()\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory, mutation_scaling)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHSOptimizer with dynamic mutation scaling and adaptive memory consideration to further improve convergence performance.", "configspace": "", "generation": 97, "fitness": 0.4392448401723204, "feedback": "The algorithm EnhancedADHSOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.8530610809226546, 0.8347191019461166, 0.8569499274598011, 0.8718308800845643, 0.8533918705249466, 0.8579382258235926, 0.8642404649225559, 0.8512318005057126, 0.8356144163480467, 0.777926828345829, 0.7723798514597462, 0.7737890315739905, 0.7735436493133421, 0.7825982978968143, 0.7711373106116889, 0.7803134627962173, 0.7798346157735118, 0.7798514317774596, 0.1535825776788271, 0.480920309767771, 0.17367407536362556, 0.16723682536539453, 0.12526862953462115, 0.4330062959140394, 0.171197334547321, 0.16564724601167768, 0.48929141266995535, 0.16016486384770012, 0.14056618700143042, 0.15546788447622406, 0.1680354730999739, 0.13412567825064636, 0.13768011094290666, 0.17238722998825484, 0.15972842168198553, 0.12273114592652312, 0.9765315708771616, 0.9752675103380626, 0.9714976039990926, 0.973480109650703, 0.9807974061792413, 0.9792031058711297, 0.9462406428887392, 0.9716866023140848, 0.9839643278510849, 0.5490956753384348, 0.6492855077896901, 0.5314143112602443, 0.5942020598681399, 0.6251723616208015, 0.5622612521824961, 0.5848142385566506, 0.6345485225423735, 0.686393372073361, 0.7346704253982369, 0.7751441766591497, 0.746291953929503, 0.8191447222508726, 0.7797992404983964, 0.8289911717994568, 0.8033600763206966, 0.7919270621543284, 0.7752535212995323, 0.26024443581298895, 0.6159313016645982, 0.4217248838647063, 0.2957989075150509, 0.6133720736915518, 0.6192309659746619, 0.5731790808449861, 0.6254314621593702, 0.6261341341144577, 0.02212850790121068, 0.022124215100124855, 0.12224383495637825, 0.6514762509317369, 0.5946429425634403, 0.6100960478972484, 0.21665321248178038, 0.3684978268857714, 0.21628179343243914, 0.5391584740604378, 0.5846082342698541, 0.5325214257215466, 0.5437882354031001, 0.5172628872033668, 0.4745567794641282, 0.5482519960972411, 0.4888082387075674, 0.5292263647475242, 0.6084169511937362, 0.5871303060043436, 0.6028168362816037, 0.6169257777700146, 0.6168787299151781, 0.583506119198966, 0.6120025296603941, 0.6410836492953734, 0.6018869602590076, 0.11689413227894807, 0.1083419807065733, 0.2557427782234647, 0.42977761963857974, 0.32107190362845817, 0.2253397429585925, 0.17121578376465896, 0.13459186534823098, 0.27964040819388136, 0.4060574343083374, 0.4108514267528445, 0.4392460901855302, 0.40149406865871073, 0.45490938274828485, 0.44453172473180513, 0.3792305982243279, 0.42811660003835417, 0.4201200981487283, 0.7329598053142231, 0.7644302365746957, 0.762322489338894, 0.7342345494221238, 0.7756778118854615, 0.7637502527808353, 0.764460683997217, 0.7519523122735755, 0.7582560350820381, 0.12960515813596563, 0.08609651031309606, 0.10631821157686994, 0.09362518350521554, 0.09972467734323887, 0.10404343716849018, 0.13071905559344943, 0.08878469073911843, 0.10260359495465377, 0.17449139155728366, 0.14127726168911814, 0.26157240988814046, 0.21956783266847302, 0.1425517267305073, 0.1990509838778165, 0.11941999193460107, 0.14567878059801842, 0.24066030025212626, 0.5700591294415378, 0.5618076757430926, 0.5302209147439343, 0.5893104526187605, 0.6035537043430212, 0.5587314761514108, 0.6545221767418514, 0.6074779642757486, 0.6025760533672858, 0.376417423322421, 0.4040658567179024, 0.41367943665063833, 0.42566104867551846, 0.40800782119592593, 0.36889297221050543, 0.4642500658757466, 0.38382768042668025, 0.35627129787534106, 0.17669538056845502, 0.18558956860842168, 0.2104105159855003, 0.2208919482643239, 0.19901534162552492, 0.18434048538811743, 0.18619450723374975, 0.23270433543331936, 0.18804570068767967, 0.1974362257565767, 0.6774357896530594, 0.20662943421110103, 0.19653618533474615, 0.6595972257058732, 0.6273213847078278, 0.7358048253815026, 0.22786631788220257, 0.6693772924206725, 0.1699635380099791, 0.17005757901564755, 0.15172444175773048, 0.7909164963438639, 0.19589163437297608, 0.18636045604680407, 0.1787344789284656, 0.18779707868760775, 0.18492496073618414, 0.780019689816145, 0.20890861372318614, 0.2025024098938124, 0.20590084878616755, 0.20411290952127392, 0.7808017166813888, 0.20750230149571536, 0.12774307881993863, 0.21160474976785737, 0.1808199687870804, 0.19856480879659744, 0.161947946062598, 0.1979657850607992, 0.17900264976902946, 0.1748865120227482, 0.19349052586966387, 0.17978693394456546, 0.173774422485505, 0.0857999555428236, 0.08152212564682992, 0.07724235939958757, 0.07447029391243465, 0.0786776981498486, 0.07620066074595833, 0.07553622047704323, 0.06944679668187614, 0.07452334778892511]}, "mutation_prompt": null}
{"id": "f61a7c4d-c996-4c0f-b55c-84949eb3e84d", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (0.5 + 0.5 * diversity_factor)\n        for i in range(self.dim):\n            if np.random.rand() < self.par:\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.5 + np.random.rand() * 0.5\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.7 + 0.3 * (self.budget - self.evaluations) / self.budget  # Dynamic HMCR\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "Improved EnhancedADHSOptimizer with dynamic HMCR and elitism to enhance convergence speed and solution quality.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {"aucs": [0.9022840193485938, 0.8926708671654301, 0.9064192766888151, 0.8864677793262099, 0.9063086887645098, 0.9010309189390155, 0.9027587815258924, 0.9000604869154838, 0.8998169927503806, 0.8309479711751343, 0.8561567273467399, 0.8224747512355178, 0.8502293757967605, 0.8206074896602839, 0.8439059059011216, 0.8198236194368911, 0.8269885458081057, 0.8398350460955067, 0.6104327329849387, 0.6182093761593785, 0.5693324430247679, 0.4281977791149798, 0.16988963010471125, 0.1732208808949206, 0.5288152049043132, 0.6134169805279838, 0.5557494144242363, 0.6416617137250595, 0.15915075959655767, 0.13565013122563563, 0.15069519343798687, 0.1492851949080658, 0.16491550060319782, 0.576760842697698, 0.1562223833774713, 0.6318925674412947, 0.9459378900702903, 0.9671403759268613, 0.9282252394432595, 0.9629989057014923, 0.9584184730728521, 0.9390526582151583, 0.9913392604952264, 0.9705068187477988, 0.9296864728750525, 0.7330175553368948, 0.7304405031932774, 0.7503287442880404, 0.720952749613081, 0.6990433540332774, 0.7101258522501543, 0.677167609182193, 0.7146772686128682, 0.6293717044558926, 0.8461781323313515, 0.8508914325312427, 0.8393994852553815, 0.8993385692246438, 0.855846387021948, 0.8364701143714608, 0.8662607118326846, 0.8831713652319995, 0.8207364828355944, 0.38258834983876044, 0.2251669716743725, 0.21862252471743093, 0.627526344820476, 0.2294520561126303, 0.23084218290664726, 0.14782318173076214, 0.4378528250625766, 0.6257237350662397, 0.6795544627376484, 0.017076033261941292, 0.24858795830924163, 0.646086613840865, 0.2016879520889434, 0.6136137428413682, 0.2579005075337344, 0.21696500514886907, 0.22630139652902792, 0.5304908581307373, 0.5489696850679774, 0.5551561452921275, 0.5377513331037211, 0.5896023283369342, 0.577191460446211, 0.6050916442417608, 0.5800653421238597, 0.5883819775730328, 0.6807183411509621, 0.6973418379381165, 0.6796777760657703, 0.6450155835344995, 0.6451970248588079, 0.6543880642785493, 0.7226251349093604, 0.7074526506292615, 0.7307944338625219, 0.13697046986468964, 0.0921137833712965, 0.263393882184061, 0.4436578054091539, 0.20906465471219748, 0.47534891859586936, 0.23663098518257675, 0.32233209772086846, 0.29614881997671405, 0.4863686323138777, 0.44407386752197053, 0.46954904755039084, 0.4853133414939319, 0.5022068817196164, 0.5317357235240348, 0.45108904908632586, 0.45190599728065095, 0.4734047895414265, 0.8341014273139475, 0.8142572384132776, 0.8206375093052752, 0.8211800652467811, 0.8331171041750325, 0.8009643799867272, 0.8421392675962229, 0.8396508654747932, 0.8138214892564111, 0.12265415234406174, 0.1451370187374882, 0.12320067193650053, 0.12011239577520938, 0.44438506111384557, 0.10956650674803825, 0.10297461197450009, 0.11724191293502662, 0.11397348763684745, 0.3036478564492573, 0.14457369716795399, 0.18237317389625007, 0.5674362108218627, 0.22356751635664396, 0.13828200608976293, 0.21234212379986395, 0.2557527396266728, 0.1774178496584936, 0.5624589846857561, 0.6330736519169866, 0.5982755710342014, 0.6289348341640433, 0.5488713150061826, 0.529511835144028, 0.6915410274011854, 0.7283768531564581, 0.6598585414917413, 0.3761531877925769, 0.39433005866661686, 0.39779295107145896, 0.41981310071678213, 0.5138743753588153, 0.4463125394697486, 0.45175392938232783, 0.4620093863955159, 0.48697400437351557, 0.2409992150878435, 0.20924204558818404, 0.18545660562013544, 0.19018250252322255, 0.2034652295725332, 0.22664611725131478, 0.20319637350912667, 0.20332448946129433, 0.20600532167739027, 0.7125550239712775, 0.561562593406125, 0.6073662075640798, 0.690192095842578, 0.22360358382595147, 0.6083216661526909, 0.582620278347572, 0.6218310533476963, 0.22250188167317642, 0.8570046647273404, 0.9090066190411108, 0.9017947195354657, 0.18750306491041424, 0.8364325233085785, 0.847443048203337, 0.8963080374123037, 0.20860377939408103, 0.7305819995799379, 0.1684135960806603, 0.20852226266440566, 0.08261575756780148, 0.20494059305950119, 0.8217112962128296, 0.12791125276404802, 0.20774055941890346, 0.21304657999801935, 0.1556251266621006, 0.20126060361133835, 0.18380469909669794, 0.16565146088858362, 0.16492718495594327, 0.18698252404060245, 0.19002672210592986, 0.18379290992405917, 0.18159454983090684, 0.1727439657732912, 0.0745604847441873, 0.08203237585635648, 0.09906652241813896, 0.07006460004845272, 0.0731708667238068, 0.07447136619771588, 0.0832956895457364, 0.082134371917303, 0.07934454132807311]}, "mutation_prompt": null}
{"id": "61b9d2b7-54bb-4ef7-9d0c-d3e6feacc2a1", "solution": "import numpy as np\n\nclass EnhancedADHSOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hms = 30  # Harmony Memory Size\n        self.hmcr = 0.9  # Base HMCR\n        self.par = 0.5  # Pitch Adjusting Rate\n        self.bw = 0.01 * (self.upper_bound - self.lower_bound)  # Bandwidth\n        self.evaluations = 0\n        self.f = 0.8  # Differential weight\n        self.cr = 0.9  # Crossover probability\n\n    def random_solution(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n    def pitch_adjustment(self, solution, best_solution):\n        diversity_factor = np.std(solution) / self.dim\n        adaptive_bw = self.bw * (1.0 + diversity_factor)  # Changed 1 line\n        for i in range(self.dim):\n            if np.random.rand() < self.par * (1.0 + diversity_factor):  # Changed 1 line\n                adjustment = adaptive_bw * (2 * np.random.rand() - 1)\n                solution[i] = np.clip(solution[i] + adjustment, self.lower_bound, self.upper_bound)\n        return solution\n\n    def differential_mutation(self, target_idx, harmony_memory):\n        idxs = list(range(self.hms))\n        idxs.remove(target_idx)\n        a, b, c = np.random.choice(idxs, 3, replace=False)\n        scaler = 0.6 + np.random.rand() * 0.4  # Changed 1 line\n        mutant = harmony_memory[a] + scaler * (harmony_memory[b] - harmony_memory[c])\n        mutant = np.where(np.random.rand(self.dim) < self.cr, mutant, harmony_memory[target_idx])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        harmony_memory = [self.random_solution() for _ in range(self.hms)]\n        harmony_memory_fitness = [func(sol) for sol in harmony_memory]\n        self.evaluations += self.hms\n\n        best_solution = harmony_memory[np.argmin(harmony_memory_fitness)]\n        best_fitness = min(harmony_memory_fitness)\n\n        while self.evaluations < self.budget:\n            self.hmcr = 0.6 + 0.4 * np.exp(-5 * self.evaluations / self.budget)  # Changed 1 line\n            new_solution = np.zeros(self.dim)\n\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    selected_harmony = harmony_memory[np.random.randint(self.hms)]\n                    new_solution[i] = selected_harmony[i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_solution = self.pitch_adjustment(new_solution, best_solution)\n            new_solution = self.differential_mutation(np.argmin(harmony_memory_fitness), harmony_memory)\n\n            # Multi-dimensional learning based on the top solutions\n            top_indices = np.argsort(harmony_memory_fitness)[:3]  # Changed 2 lines\n            top_solutions = np.mean(harmony_memory[top_indices], axis=0)  # Changed 1 line\n            new_solution = 0.5 * new_solution + 0.5 * top_solutions  # Changed 1 line\n\n            new_solution_fitness = func(new_solution)\n            self.evaluations += 1\n\n            if new_solution_fitness < max(harmony_memory_fitness):\n                worst_index = np.argmax(harmony_memory_fitness)\n                harmony_memory[worst_index] = new_solution\n                harmony_memory_fitness[worst_index] = new_solution_fitness\n\n                if new_solution_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_solution_fitness\n\n            if new_solution_fitness < best_fitness:  # Elitism\n                harmony_memory[np.argmax(harmony_memory_fitness)] = best_solution\n                harmony_memory_fitness[np.argmax(harmony_memory_fitness)] = best_fitness\n\n        return best_solution", "name": "EnhancedADHSOptimizer", "description": "EnhancedADHSOptimizer with adaptive parameters and multi-dimensional learning to improve convergence.", "configspace": "", "generation": 99, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('only integer scalar arrays can be converted to a scalar index').", "error": "TypeError('only integer scalar arrays can be converted to a scalar index')", "parent_id": "5d4039f6-4b84-4e76-b589-a0925c873a52", "metadata": {}, "mutation_prompt": null}
