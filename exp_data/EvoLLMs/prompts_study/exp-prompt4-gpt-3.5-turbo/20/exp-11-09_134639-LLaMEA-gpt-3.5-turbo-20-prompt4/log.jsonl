{"id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 0, "fitness": 0.09144843562834938, "feedback": "The algorithm GreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "58e21788-f692-45b7-8d4d-eafa42d485d1", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e471d312-df64-401e-af00-fa19ac802794", "solution": "import numpy as np\n\nclass ImprovedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        def opposition_based_learning(individual, lb, ub):\n            return lb + ub - individual\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(opposition_based_learning(X1, self.lb, self.ub), self.lb, self.ub)  # Utilize opposition-based learning\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "ImprovedGreyWolfOptimization", "description": "Refining Grey Wolf Optimization by incorporating opposition-based learning for improved exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "dd156a88-5b43-4371-bced-364c50bec8b8", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "eae0c576-d546-4903-8c63-471aa5743f92", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "4d4d9aa4-3af1-4b55-8b86-4ff2e3f9b230", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "af424e7b-7317-4fde-94fa-3eb39711518e", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "02ca7155-d09c-4760-a705-3fc07cf91e60", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "fa309673-1726-4f7b-8e65-b82424ccdf80", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            def chaotic_map(x, r=3.9):\n                return r * x * (1 - x)\n\n            x = np.random.rand(self.budget, self.dim)\n            for _ in range(100):\n                x = chaotic_map(x)\n            return self.lb + (self.ub - self.lb) * x\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "Enhancing population diversity by introducing a chaotic map for initialization and updating population.", "configspace": "", "generation": 8, "fitness": 0.08513657111369216, "feedback": "The algorithm GreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1862704457447505, 0.16650596928993489, 0.16602454984963533, 0.21128931426192565, 0.16049552782838294, 0.1630736858511127, 0.1725280487859665, 0.20461346469956054, 0.16071801395394358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024945112234962097, 0.034799347927639834, 0.03873606416686437, 0.05129106474272904, 0.04359752728762489, 0.040676863723310475, 0.04141187449491757, 0.041133866477012226, 0.0386608610859388, 0.022160256555767255, 0.022134827473774155, 0.022137554573879226, 0.02096511795998668, 0.04198494931767727, 0.01834508661278722, 0.03686353925231056, 0.04113621734545758, 0.04169369686551816, 0.07756547099386968, 0.07940424763776677, 0.08198597654942552, 0.0720237323460009, 0.06332145916037157, 0.06666625703018214, 0.0626149653432061, 0.06601457741821282, 0.05718505774327187, 0.060874284919543276, 0.05689479115566387, 0.0519887931277222, 0.051482283910276094, 0.05084230304420412, 0.03969627120914743, 0.09500492273888339, 0.07406808740920401, 0.07380474960139272, 0.12410693245663584, 0.12301910215294665, 0.10548583845720516, 0.11456073337003747, 0.10828165991136052, 0.11802406956697231, 0.1253712844461532, 0.118107751323004, 0.1333098210975171, 0.03282338045781985, 9.999999999998899e-05, 0.021678235143171465, 9.999999999998899e-05, 9.999999999998899e-05, 0.06392601530876363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029776298844776616, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020682815124706266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03272094385338897, 0.0461975777116882, 0.028551786327403406, 0.03716896318419527, 0.04259925098830131, 0.041025895061537865, 0.06706397644081064, 0.06092260034501085, 0.05033896472972432, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009166363804292477, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013978804198931938, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025326599692764296, 0.21475786591085388, 0.19241947753733912, 0.20403233093300144, 0.18649224823321042, 0.18611896750168377, 0.18452826757160923, 0.18020890291864766, 0.19145435331359772, 0.18179331455785186, 0.066427947513228, 0.04282880526539956, 0.047049116825892856, 0.03431996422095762, 0.040157980928913095, 0.045142537548052086, 0.04049382299354043, 0.05414788488551381, 0.04941538723202232, 0.12917998926939833, 0.14456213470055568, 0.12278001664550542, 0.12823950198116896, 0.16950091459775485, 0.18547334176876906, 0.13899126009919727, 0.1306311799470583, 0.12969914946831562, 0.15988910559225156, 0.15171845257729988, 0.19317117467116096, 0.15466101527487985, 0.1648073142112917, 0.1603500536802046, 0.1524203396889836, 0.17075019509070022, 0.16809103604847242, 0.08961857277695562, 0.0908860409847625, 0.11468674328976236, 0.1110892520304636, 0.10460497564899196, 0.11167076857935787, 0.10767345506923442, 0.11117819475030244, 0.10564638661291026, 0.14362676398115237, 0.146664140159658, 0.14981497170716485, 0.15278397838772284, 0.15247757593675892, 0.14925283054284955, 0.16078483329235882, 0.14331720304124118, 0.1392778181103913, 0.12437250791305765, 0.13982066128802018, 0.09020363664432063, 0.13171062434901504, 0.14120022095869467, 0.1449878008565687, 0.09546998639470772, 0.0960972628676996, 0.06532655756251637, 0.15917794947855868, 0.22808499913290026, 0.16804914309976426, 0.14785376794056815, 0.14356122761605816, 0.16179848433483146, 0.15524582102413387, 0.21985753949395714, 0.1790183365027862, 0.15513625454980717, 0.15202647451173856, 0.135627386376184, 0.13254124011482238, 0.11765721133955775, 0.22241506301318736, 0.20423080948435568, 0.15773718260023484, 0.21941262744166756, 0.18021751999461355, 0.17788100125841466, 0.17220533034766472, 0.18145222352409862, 0.20798671925545253, 0.18921070279221053, 0.18717000864476097, 0.18695562725590897, 0.18531234200130797, 0.04338678266939111, 0.057318371918499755, 0.04292053864486656, 0.04646528179370102, 0.041065934866183484, 0.04346932751637256, 0.04569760514481591, 0.04197301726782876, 0.0498344994405332]}, "mutation_prompt": null}
{"id": "a8f2fb55-6f00-472f-a576-ffde66b21dac", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0dd62ac6-295b-4f0b-b337-715bd205cc4b", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "70924ef8-dd9a-492f-939c-e7992d2ec5e0", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "646818d5-5ffa-4399-a7b2-a00cae25fe94", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight(step_size):\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = step_size * u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        step_size = 0.01\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                step_size = 0.01 + 0.99 * (_ / self.budget)  # Dynamic step size adaptation\n\n                if P.any() < 0.5:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(step_size), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization by incorporating a dynamic adaptation of step size and exploration probability for better exploration-exploitation balance.", "configspace": "", "generation": 12, "fitness": 0.09144843562834938, "feedback": "The algorithm GreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "954b4312-dd73-4209-92a1-fd60e43c5853", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "1ff10607-e1cc-40ea-a6b7-0d4b3e2ced97", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "a07f4273-3bd5-44a2-84d1-70cce722dbe8", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        def opposite_individual(individual):\n            return self.lb + self.ub - individual\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n                if func(population[i]) < func(opposite_individual(population[i])):\n                    population[i] = opposite_individual(population[i])\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing diversity and exploration by incorporating opposition-based learning in Grey Wolf Optimization.", "configspace": "", "generation": 15, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f5d0c594-fbab-4df0-9f8a-4caeac1d5ab8", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8e08db51-ddda-4464-8908-67bb2c3ad216", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7b5c37bb-cae0-442f-b0d1-0e65d9cbadef", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def chaotic_map(x):\n            return 3.9 * x * (1 - x)\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "Enhancing diversity in population by introducing chaotic maps for exploration.", "configspace": "", "generation": 18, "fitness": 0.09144843562834938, "feedback": "The algorithm GreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "a2f91d32-f20f-4495-8c4a-f441ee3d7138", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "ea8ca751-f328-480b-bd77-07deecf841e7", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7e67cd52-3a51-4c80-ba01-8043e4365b98", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8d6612a8-a9b6-41b5-aa24-b95d8bbb1d88", "solution": "import numpy as np\n\nclass GreyWolfOptimizationDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            ### Differential Evolution\n            for i in range(self.budget):\n                idxs = [idx for idx in range(self.budget) if idx != i]\n                p1, p2, p3 = np.random.choice(idxs, 3, replace=False)\n                mutant = population[p1] + 0.5 * (population[p2] - population[p3])\n                trial = np.where(np.random.rand(self.dim) < P, mutant, population[i])\n                if func(trial) < func(population[i]):\n                    population[i] = trial\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimizationDE", "description": "Enhancing Grey Wolf Optimization with Differential Evolution to introduce diversity and improve exploration capability.", "configspace": "", "generation": 22, "fitness": 0.09144843562834938, "feedback": "The algorithm GreyWolfOptimizationDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "2f6dd289-a0e1-4cee-bd27-dcdf950c8be4", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                # Dynamic adaptation of parameter based on individual fitness\n                alpha = 0.1 + 0.9 * (fitness[best_index] - fitness[i]) / (fitness[best_index] + 1e-10)\n                a = np.clip(alpha, 0.1, 0.9)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Introducing a dynamic parameter adaptation mechanism based on individual fitness to enhance exploration and exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c87679ce-3d23-4a42-9ee6-573dc7dbffcf", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "277ec865-e60b-48e7-b8de-381289d76afa", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "4c8535f3-447e-437a-9d8d-128a0da61bd5", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6b2dcbb7-012b-40ab-87f6-7334f48b46ed", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "2a4c8142-cde2-41c3-bca2-681abdbf8884", "solution": "import numpy as np\n\nclass ImprovedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight(beta, dim):\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for it in range(self.budget - self.budget):\n            a = 2 - 2 * it / self.budget\n            alpha = 0.5 * (1 - np.exp(-it / self.budget))\n\n            for i in range(self.budget):\n                A = 2 * alpha * np.random.rand(self.dim) - alpha\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(alpha, self.dim), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "ImprovedGreyWolfOptimization", "description": "Improved Grey Wolf Optimization algorithm with dynamic alpha scaling and adaptive levy flight step size.", "configspace": "", "generation": 28, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "97985664-22a0-4fa4-a3f9-0fa10afaece3", "solution": "import numpy as np\n\nclass ImprovedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def adaptive_levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta\n            )\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step * np.sqrt(self.budget / 1000)\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + adaptive_levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "ImprovedGreyWolfOptimization", "description": "Improved Grey Wolf Optimization algorithm with adaptive step size modification for better exploration-exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "03bb4b96-eb0d-42c0-876d-84eb4434a73f", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight(beta):\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            beta = 1.5 * np.exp(-10 * _ / self.budget)  # Dynamic adaptation of levy flight parameter\n\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(beta), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "Introducing dynamic parameter adaptation for better convergence and exploration in Grey Wolf Optimization.", "configspace": "", "generation": 30, "fitness": 0.09144843562834938, "feedback": "The algorithm GreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "011f6d5b-2c5b-4daf-b7d9-8fb45bc8a106", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(pop_size):\n            return np.random.uniform(self.lb, self.ub, (pop_size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 2 * self.budget\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment based on fitness evaluation\n            if (_ + 1) % 10 == 0:\n                if fitness[new_best_index] < fitness[best_index]:\n                    population_size += 5\n                    population = np.concatenate((population, initialize_population(5)), axis=0)\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Introducing dynamic population size adjustment based on fitness evaluation to enhance exploration and exploitation.", "configspace": "", "generation": 31, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "96387549-32e5-4c36-a626-d1447ebc4695", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "3fe59ce9-290e-4a8e-a692-6c8e40d4aca5", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "Improving the exploration and exploitation balance by enhancing the diversity through a dynamic population size adjustment mechanism.", "configspace": "", "generation": 33, "fitness": 0.09144843562834938, "feedback": "The algorithm GreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "7100ae30-f3ee-4667-a335-a0dc7d1dc7bc", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        def opposition_based_learning(x, lb, ub):\n            return lb + ub - x\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(opposition_based_learning(X1, self.lb, self.ub) + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhance the diversity maintenance of the Grey Wolf Optimization algorithm by introducing a new mechanism that incorporates opposition-based learning to improve exploration.", "configspace": "", "generation": 34, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b7cfc474-88e8-413f-991b-2f2b998d09ff", "solution": "import numpy as np\n\nclass GreyWolfOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimizationImproved", "description": "Improved Grey Wolf Optimization algorithm with dynamic exploration and exploitation balance.", "configspace": "", "generation": 35, "fitness": 0.09144843562834938, "feedback": "The algorithm GreyWolfOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "f5cd6939-ff61-46ff-a80b-a15a58d7f685", "solution": "import numpy as np\n\nclass ImprovedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta\n            scale_factor = 0.01\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = scale_factor * u / np.abs(v) ** (1 / beta)\n            return step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "ImprovedGreyWolfOptimization", "description": "Incorporating a dynamic scaling factor for the levy flight step size to enhance exploration capability.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 17, 13, '            scale_factor = 0.01\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 17, 13, '            scale_factor = 0.01\\n'))", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {}, "mutation_prompt": null}
{"id": "6a68bde6-22bb-405f-a8bf-e9f99491ec51", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "6e5a59c1-37fc-4e8b-abf8-188055d0b2ba", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "0adf30f8-aa4d-4e1a-897a-fc76c37b19a1", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "b5bfefb9-1f8c-47ba-9762-fb8937694413", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "28f266dd-24bf-4ad3-a86e-579af0cbac85", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        def opposition_based_learning(individual, lb, ub):\n            return lb + ub - individual\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n                # Apply opposition-based learning\n                population[i] = opposition_based_learning(population[i], self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with Opposition-Based Learning to improve exploration and exploitation balance.", "configspace": "", "generation": 41, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "07c7f4b2-05a2-4d84-b883-a6cb9e8d1ceb", "solution": "import numpy as np\n\nclass ImprovedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight(beta):\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n        beta = 1.5\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            beta = 1.5 - 1.45 * _ / self.budget  # Dynamic adaptation of beta\n\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(beta), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "ImprovedGreyWolfOptimization", "description": "Improved Grey Wolf Optimization algorithm by introducing a dynamic parameter adaptation strategy to enhance exploration-exploitation balance.", "configspace": "", "generation": 42, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "271eb074-b126-475d-8174-2457ee68cb76", "solution": "import numpy as np\n\nclass GreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(self.lb, self.ub, (self.budget, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "GreyWolfOptimization", "description": "A novel metaheuristic algorithm based on Grey Wolf Optimization inspired by the hunting behavior of grey wolves in nature.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "dc5e3470-f0f0-4e14-913f-aec48cb19f6a", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization(GreyWolfOptimization):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def dynamic_search_space():\n            lb = self.lb - np.sqrt(np.mean((population - np.mean(population, axis=0)) ** 2, axis=0))\n            ub = self.ub + np.sqrt(np.mean((population - np.mean(population, axis=0)) ** 2, axis=0))\n            return lb, ub\n\n        population = initialize_population()\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - self.budget):\n            a = 2 - 2 * _ / self.budget\n            lb, ub = dynamic_search_space()\n\n            for i in range(self.budget):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < self.budget / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, lb, ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), lb, ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Refining Grey Wolf Optimization by incorporating a dynamic search space adaptation mechanism based on the population spread.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {}, "mutation_prompt": null}
{"id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 45, "fitness": 0.14651811920432695, "feedback": "The algorithm EnhancedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "17b8a0fa-1f6c-4bb1-afd8-fe9472c687b5", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "bc918aef-4cfa-435f-85d3-397b82357203", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "12753df9-7f47-4822-ad47-ff978e516a09", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "6953566b-cff7-4f88-b31c-339e1a26d12f", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "c35146ab-478c-423e-8739-cf2fb39233c0", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "d9b8720c-d0f1-44c8-a1ab-de3c5dc56679", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "72b85be4-8e46-4611-9e68-74108e2a4336", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "c0739cfc-b218-4150-8886-6e7f86624fe8", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "911fd056-7788-4017-8da6-cae2ed66ea94", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "5e96c32b-b0f6-424d-aa95-5111bcd45a14", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n            # Opposition-based learning\n            opp_population = self.lb + self.ub - population\n            opp_fitness = [func(individual) for individual in opp_population]\n            opp_best_index = np.argmin(opp_fitness)\n            if opp_fitness[opp_best_index] < fitness[best_index]:\n                population[best_index] = opp_population[opp_best_index]\n        \n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Improving convergence diversity by incorporating opposition-based learning to diversify the search space exploration.", "configspace": "", "generation": 54, "fitness": 0.13799347208754112, "feedback": "The algorithm EnhancedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22336903964708243, 0.24565130468176133, 0.22889172134305724, 0.20248332952224735, 0.20760014218800837, 0.18655492712044874, 0.2011245388607188, 0.18894566845564198, 0.21397949235238434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04842326624282123, 0.04744528603516451, 0.04390963575817464, 0.06391413800294488, 0.04566631792876197, 0.06983563982830998, 0.049590924336382014, 0.05859484690443206, 0.06191344676390964, 0.05135303607045649, 0.03607168761086377, 0.05669896118160633, 0.04439173187079182, 0.037507040217449994, 0.03626968592607971, 0.031016707841675317, 0.057964605333339914, 0.04290237325840185, 0.9611358881041161, 0.9817541200274524, 0.9985738232884901, 0.9610681703233434, 0.9301919621168536, 0.9596686482320768, 0.9776893531673375, 0.9902402613519076, 0.9879114054440903, 0.07780423326060515, 0.07240590790569024, 0.07456015207940858, 0.09508936440557658, 0.08895025692812342, 0.09288208983517177, 0.10108626612923, 0.08194778148139825, 0.09816247432751601, 0.1593835111768236, 0.14513317519909774, 0.15805626152230812, 0.14899360224945213, 0.166826049797011, 0.13230909308477767, 0.12657979885117254, 0.11940743940319298, 0.13362780500888094, 0.021718726930981758, 0.0424405901602638, 0.05399890544894992, 0.03689264025497674, 0.018429098430440494, 0.004358967844644401, 0.006268617234036489, 0.05186167678162523, 0.008936113874320473, 0.10882542874196421, 0.08816042269384416, 0.12601787345677018, 0.09256433344388237, 0.15872437056604505, 0.10385116228351887, 0.06774375906854402, 0.12147476201454899, 0.13014179498905976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05659556976426283, 0.045540666207093294, 0.04501705686603641, 0.04947211432878229, 0.050628970006504126, 0.04829617455519053, 0.03827727922562263, 0.03997267589363507, 0.030246344883893328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030636811885565995, 9.999999999998899e-05, 0.0009687796640881485, 0.19208000869007558, 0.20775508176293156, 0.21015361825505097, 0.22750385237822335, 0.20498009245276383, 0.2240753198241111, 0.22124960685679596, 0.22535324980994087, 0.23134250313137306, 0.04599345944434352, 0.04854079913776421, 0.058194523302767864, 0.040142664718337384, 0.04704743136865397, 0.04637526230628064, 0.05678324145809288, 0.0745870459526421, 0.05999432764281154, 0.13851999210132648, 0.14400675020513332, 0.12894081536374147, 0.13991809990766801, 0.15947692511531442, 0.16139544081342794, 0.13655396227303396, 0.15873306824978062, 0.1335040403747978, 0.1660217177030019, 0.19159554106573495, 0.1771636866637929, 0.18265518592451024, 0.18093183923655842, 0.1979587997135921, 0.1702890562210818, 0.16247210041983018, 0.1834155536844716, 0.13643145506618626, 0.10867222719957736, 0.10555186118031379, 0.11736880152135165, 0.11917052901623448, 0.1277463963942852, 0.11712380400460565, 0.12366786686673492, 0.10960931567376497, 0.15797284996814942, 0.1734830807644301, 0.1734316411254646, 0.16132900626997093, 0.1733013177821071, 0.15964346171773036, 0.17186113274973336, 0.1645831060352817, 0.1724720957446545, 0.15261050179670854, 0.12999749187579068, 0.15197293926646327, 0.15704516248276867, 0.1483250719377176, 0.15445062227457296, 0.15629704954871249, 0.15504931098266583, 0.14717536255352281, 0.20360129838542573, 0.14732281126209457, 0.16478874936230037, 0.15529038069306422, 0.155713634359107, 0.1557449857377292, 0.2543485100658902, 0.16742588200581654, 0.16815747178929685, 0.16246271155719028, 0.1604387259661686, 0.1447013734662711, 0.1541226086514602, 0.16613289485170457, 0.17618775557376865, 0.17112655056684856, 0.1849285116072168, 0.188209845823884, 0.18766467531999942, 0.1925667934664136, 0.19248150345561565, 0.1787435977051155, 0.1759868290125065, 0.1880093380687341, 0.20772906479609088, 0.19584203579331194, 0.19126123533432104, 0.06346378100301608, 0.056963759459276675, 0.06169946732271181, 0.0628733166962151, 0.0463923451995335, 0.06137226842415222, 0.05134661141372221, 0.04692231591590079, 0.04512125868164607]}, "mutation_prompt": null}
{"id": "52b1a05e-b858-4544-a2e3-58b74f11d4c3", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "8fb61c65-c466-490d-816d-cff75eeeaa96", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "5e466ea1-7f84-4800-8841-169bdb2a892e", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "b316384a-0d6b-4685-91bc-eb0cbcf29cf8", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "c9b01ee4-14f6-41de-8c45-33de6d4ecfb7", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def chaotic_map(x, a=3.999):\n            return (a * x) * (1 - x)\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight() + chaotic_map(P), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Improving the diversity maintenance by introducing a chaotic map to enhance exploration capability.", "configspace": "", "generation": 59, "fitness": 0.14110184529252018, "feedback": "The algorithm EnhancedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.2139949437965205, 0.21416713679042554, 0.21880485236890845, 0.20175615980871275, 0.20045699836272612, 0.19898797145363256, 0.20881149114379538, 0.2101934727835264, 0.21356452259709668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055386211862664125, 0.05894135878585205, 0.05617261623913383, 0.05938852913932968, 0.058163874929119785, 0.05372412009920968, 0.052550499034461406, 0.05050247253293272, 0.059179208436258124, 0.050982073298794006, 0.04947846817238366, 0.03685837742092446, 0.042542678374004717, 0.03638611956271165, 0.049350569617552686, 0.05659395905073583, 0.03697105402979828, 0.04483605364080556, 0.974433940948353, 0.990690919286889, 0.9968727385388046, 0.9818404865878727, 0.9629687370870487, 0.9867306812070583, 0.9948960879081608, 0.9948412516394126, 0.9227000998055456, 0.08573472025522111, 0.07974894738679683, 0.11054657288092762, 0.10052594012336835, 0.10138208491768341, 0.0979740532226997, 0.10060031988223328, 0.08399839948177756, 0.08761284063700492, 0.20971444854064902, 0.1721049143012835, 0.20015453688844487, 0.1792441551242704, 0.16352931331478282, 0.13485174747417727, 0.1332459009194632, 0.12527237432812577, 0.12562157365572113, 0.034875425117439574, 0.03950141700898835, 0.01451281458365139, 0.010703566971510203, 0.03354854985558031, 0.01301777730373177, 0.010959908112930128, 0.02561704527616926, 0.023126610589974783, 0.11111329196881836, 0.06686678714440075, 0.11164979335272351, 0.05738574051374434, 0.11281449198756366, 0.11925498857207806, 0.1226190136727664, 0.08399910960306733, 0.17792465087005493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037443995769579796, 0.08322934228465562, 0.042946132025902806, 0.03736200515888288, 0.05407536198737073, 0.018374125309098432, 0.01656504701153061, 0.08205352550459033, 0.027904992711440535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005922152882918974, 0.0001465711265437042, 0.0015721807629229811, 0.009108722226370047, 0.004325165742485315, 9.999999999998899e-05, 0.008800638970064889, 0.0049986698633814886, 0.0016081255180000475, 0.21743930312802684, 0.22359438200606097, 0.20722623465644774, 0.22794102573937758, 0.2390888490088453, 0.23520336990560686, 0.22783175638689412, 0.2480671445872651, 0.2127916459427821, 0.07618956312425307, 0.06088740619092459, 0.07518921425896274, 0.05984901172322865, 0.05111782311230595, 0.05634673934536005, 0.05559692670412697, 0.05619003905166997, 0.051385839897785224, 0.14989724612180366, 0.15467275257831858, 0.13610382757932216, 0.14681626128650893, 0.16189620956239992, 0.13526682143178004, 0.13586051730093163, 0.17329110607729303, 0.1620763711527643, 0.1995201887345358, 0.1772100176596667, 0.19033554661444474, 0.19360533713718953, 0.18434294673088958, 0.1838079665214717, 0.18371611421849332, 0.17341136940309299, 0.17192812500988552, 0.12551988657129665, 0.1375487317195837, 0.12310241362014951, 0.10392359081039615, 0.14633936396803893, 0.12917621524765366, 0.10681280568929397, 0.11297322782477492, 0.12400866173705893, 0.16935811068653095, 0.16039810376238417, 0.14986358914096676, 0.1800060752615027, 0.1779011613579301, 0.1467550093843476, 0.17519365737639203, 0.17343905371757495, 0.16503478093103985, 0.16259066731620442, 0.15411280088438017, 0.15290379885297678, 0.17223752172409623, 0.1741747988002551, 0.16353853871222834, 0.16311801219085265, 0.15627058744625322, 0.15482110218032208, 0.25492145689770396, 0.17127613311585244, 0.15206606281880564, 0.16695918095631734, 0.14286247986890865, 0.14942025499982703, 0.16068174403685065, 0.1718866218417877, 0.16325168618648855, 0.13823503647527902, 0.15419703989571576, 0.16120337177918231, 0.1457892639305881, 0.16950632175597258, 0.16066555406063598, 0.21017972431417642, 0.22484340101776568, 0.21013687352533805, 0.1876923912361309, 0.19128469186903907, 0.19980408018964957, 0.1842326204488215, 0.19368633978156902, 0.1850149717145506, 0.20972621659219726, 0.18984446073548733, 0.1781203893703367, 0.057524424059891, 0.0516194004256858, 0.0671057301973369, 0.056681245818529735, 0.048249021849576246, 0.05264688776736237, 0.05562904870960117, 0.060229414519033186, 0.054026394175064385]}, "mutation_prompt": null}
{"id": "3b12172d-bcd7-43fd-9f85-005d748902c3", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "c7635f8e-ec8b-440c-8b27-2563e8ebbe8e", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "1ff33400-1071-4337-8bb9-273fd595a144", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "0bb910fc-ae9b-435a-87b4-6b6d3e2b6582", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "1b89733f-8205-4d6d-bd38-a2a8dab9ba0a", "solution": "import numpy as np\nimport chaospy as cp\n\nclass EnhancedGreyWolfOptimizationRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def chaotic_map_update(x):\n            return 3.9 * x * (1 - x)\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 * chaotic_map_update(P), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimizationRefined", "description": "Implementing a novel mutation strategy using chaotic maps to enhance exploration and exploitation capabilities of the algorithm.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'chaospy'\").", "error": "ModuleNotFoundError(\"No module named 'chaospy'\")", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {}, "mutation_prompt": null}
{"id": "3b4e8b74-7241-4669-af78-8acf5bad0c09", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "b63552ff-dc0c-4f06-b6bf-d31da3cbd04c", "solution": "import numpy as np\n\nclass HybridGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n                    \n            # Hybridization with Differential Evolution\n            F, CR = 0.5, 0.9\n            for k in range(population_size):\n                idxs = [idx for idx in range(population_size) if idx != k]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < CR, mutant, population[k])\n                if func(trial) < func(population[k]):\n                    population[k] = trial\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "HybridGreyWolfOptimization", "description": "Incorporating hybrid differential evolution with enhanced grey wolf optimization for improved search and convergence.", "configspace": "", "generation": 66, "fitness": 0.14550630031490006, "feedback": "The algorithm HybridGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.27598231896416736, 0.24274271004352477, 0.24048168000396075, 0.2109391015846842, 0.20707960085159127, 0.20390138191995866, 0.22232439771791046, 0.20630499387875556, 0.24039458875063036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05641310768912566, 0.04857665790407295, 0.06296267631813357, 0.06348303892508134, 0.06723360329438599, 0.056535186981047425, 0.07740408130274501, 0.07459655705753598, 0.050608297655725276, 0.0497618734295584, 0.04966960424817335, 0.05521054839240114, 0.05103888865983208, 0.04996818640158984, 0.044593438010436914, 0.048986173536391786, 0.04224605686198357, 0.03399583984425081, 0.9295346211763096, 0.9873662931544054, 0.9977412639400197, 0.9703581526288834, 0.9583438040128286, 0.9959008991901501, 0.971093306332225, 0.9896319333383458, 0.9644510373901911, 0.11651537505733323, 0.07557196076703077, 0.09102591874313548, 0.12368762275358403, 0.10444367063020421, 0.10017470495398206, 0.09510747946385922, 0.08443295141697016, 0.08728652110910173, 0.1989922518134808, 0.1517750137457331, 0.1565063232763637, 0.17172155655517252, 0.15141268305250055, 0.1336687378043584, 0.16892152574877328, 0.13262953495903218, 0.13623365518943387, 0.11297386522341624, 0.05275055208358481, 0.0367277912821512, 0.033728331263197076, 0.01975710335467551, 0.02482925015070292, 0.029738346154843054, 0.05007619072932701, 0.04215238993807202, 0.1257475442037792, 0.16969112481850313, 0.12172469110547357, 0.15384167780839908, 0.10163201776317476, 0.1259041090848808, 0.14596554857379307, 0.10685272897350528, 0.1687600615002668, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07037767900416181, 0.03363336243539283, 0.03892424722146737, 0.04814345616263416, 0.01704347359167646, 0.04215975704854713, 0.04881827991713106, 0.05182303465605276, 0.02788055530001221, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013494315599049678, 0.0014236233491248251, 0.01104495845114506, 0.0037555860419284937, 0.00024705392739166054, 9.999999999998899e-05, 0.01489574236759128, 0.0022831916452938916, 0.02514556866850126, 0.2237980219153537, 0.2346918850643096, 0.23064809603861325, 0.2349823727418927, 0.2213100077440977, 0.23265826406882006, 0.21879222602839143, 0.24492399338156778, 0.244037752424901, 0.07286403181333989, 0.06722086734114252, 0.06331735582447928, 0.07529318602883373, 0.07198867058817537, 0.05570299716747762, 0.05885039780302537, 0.05870915826741785, 0.0713361136216466, 0.15031669487354227, 0.12735272580254475, 0.11906506358828772, 0.12729173652909054, 0.14345400881868042, 0.1300760786448949, 0.12722500979880602, 0.18252708324425115, 0.1283835650447156, 0.17739237818683962, 0.19019738819640808, 0.17255965905751858, 0.19800915198310554, 0.19448625681936005, 0.2035658423388501, 0.18903774010383867, 0.1979091243550879, 0.18654755753968832, 0.1402209902931172, 0.12534146224917964, 0.12430207814382377, 0.1285278898350336, 0.1382417309294851, 0.11169627932760484, 0.12771227935392726, 0.12768713297068057, 0.13695562606467682, 0.19912932651569848, 0.16761042355471145, 0.19915800568921826, 0.16433723448470805, 0.19198577305418874, 0.1524636760356325, 0.165493891878427, 0.1939069547779555, 0.18950315737256618, 0.15803401788905103, 0.15185361512593443, 0.15773662790145426, 0.16113311367842398, 0.16016303898056372, 0.17077871389330157, 0.15334614270811797, 0.15511968440002022, 0.16804664501407807, 0.23825338281876474, 0.2691070321447686, 0.16380015591627473, 0.15641502916797434, 0.15946063724709947, 0.15258658648003076, 0.23112340704413892, 0.1576842543612489, 0.15818676294290457, 0.17728345167428639, 0.14074078489684638, 0.16783054068817527, 0.19643679062050534, 0.15922031746640752, 0.13713498000928726, 0.19233927703119502, 0.20721632700912285, 0.17969812301255605, 0.19748012605523158, 0.1844382146328366, 0.17255843311662333, 0.17693150332887686, 0.18663309802829897, 0.18275176044509922, 0.1753768220553351, 0.2005805701142621, 0.18235628499704126, 0.06170899763287829, 0.05805359293621437, 0.052792565012740655, 0.05200763603622094, 0.06480589091171463, 0.06386401484470916, 0.060333303975794284, 0.06927299803800979, 0.053323526623599404]}, "mutation_prompt": null}
{"id": "ec98b623-3464-4e14-9eb9-0d2e3897a301", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "4acdc4a8-09f7-4dfb-8aa7-3dafc83796ac", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "fc643ba8-8993-42f8-93e3-b7d79b2d2d2d", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "d031c34b-c24c-4f97-a460-c9057fa755a9", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "aa3792c4-bea8-4247-9925-98ef42c2ebc6", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "fc8bf901-a9b9-4cfb-9eed-95655ecad2b6", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "45b67f07-0447-4a1e-9b24-65375ccd58dc", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "48a2df92-ce84-4369-8628-75c281b33560", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "d05918e0-f3be-444c-b3a3-acb7c1319a89", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "78279c97-423a-4bc0-95a8-f312e9f9bcc2", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "54c9c44b-d793-4c35-b8bf-060f2f9116e8", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "05d79f3b-11f1-45a2-99b2-172f3ee25e91", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "f9525ba8-d7c5-4dec-a1fd-b75acac83d4a", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "f953c544-6391-486e-8047-c5e846a4839e", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "1954fa59-641b-45b0-a4da-2e40a55869b2", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "fba8cb57-61ff-4958-a038-e36c7b97cc1c", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "f2918fbd-5ac0-499f-ac60-5c4b42e8af74", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "45dbe4cf-a548-492f-97ca-98390c335f57", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "ac17acc7-39e8-430e-a579-c7b42377ea4b", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "62805a6d-35d3-464f-ad41-c6e6eb2bf055", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "8e742228-8b93-426d-a57a-4866309e682f", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "076a925b-8ef7-457d-9a1f-a4919f24acb1", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "6b6464ca-9014-4812-af5e-d07dbc8a1e0a", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "48256208-b489-4967-b12c-79f8d9dfee0d", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "5df56b27-cfc7-4a54-af1c-8836102a717b", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "561677dc-f10d-4b56-bfd8-f55ce9706b01", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "ba381c43-647a-43f2-8627-cddc0fc2c10e", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "f089b8e9-3cc1-49bd-8225-f55ed94c85c3", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "0c2da925-d92d-478a-b420-7ecd5a56b67b", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "3d1d09c5-8694-440a-b1ef-adca88d0d804", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "da5dea34-b132-4ade-bf59-871f6f03372e", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "36428098-4fd5-4696-9a57-9aa4f6212149", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization with dynamic population size adjustment to explore the search space efficiently.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.22518179463479737, 0.29798187915474117, 0.224516877956089, 0.21822587728172838, 0.24666730578552554, 0.20772574044173664, 0.2541133632861229, 0.20810616118076708, 0.239793076339884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01004624341394178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06466538492821838, 0.05662677922293746, 0.05420334799338977, 0.05390474313605298, 0.061068961581832615, 0.061157215706890256, 0.06121685836543089, 0.0658960549305222, 0.053440070443078413, 0.051706489456133764, 0.04533729343871418, 0.04320231020389764, 0.042255462719502646, 0.04105069144649587, 0.04908148945160351, 0.043813088326157046, 0.0374835371097515, 0.05589404904570383, 0.9801565187318966, 0.9906233845683524, 0.9990390368278348, 0.9797450467077115, 0.9642995628339995, 0.9795371613394955, 0.9883840444012848, 0.9948730377889148, 0.9936455077732398, 0.09674811691423968, 0.11158303824363269, 0.08921241642440947, 0.12426237517686567, 0.09760916725421853, 0.11096087125174092, 0.11300070451378053, 0.11838740003112092, 0.10941273709883648, 0.18941885835737093, 0.17228754868965312, 0.21092658127281194, 0.13734818679797567, 0.16307338298843332, 0.1650576146751659, 0.19006121610560966, 0.1433176428707984, 0.1398190787230642, 0.03940592154235256, 0.045692880324881835, 0.05579476050731136, 0.02480585284761927, 0.046112749798937536, 0.018534206406114917, 0.06090289381384395, 0.01849940614558654, 0.015335977571007797, 0.1535639759450027, 0.12886132539528594, 0.15477719149096225, 0.1209149137297505, 0.12439866438309832, 0.14960246475907402, 0.1328582452481578, 0.12195132417495458, 0.1353076854082923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03581359793522354, 0.020690670735074468, 0.061195904322679184, 0.02187104564404585, 0.025469994283975006, 0.029825336648087397, 0.0480737792917838, 0.026470722358635457, 0.057957474831256905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008402778235740538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01693123465726387, 0.008784954593756278, 0.011002474212541302, 0.0028561873007661998, 0.004779829497934429, 0.21759271425081572, 0.23409463960626786, 0.2276725795807537, 0.2662822561373672, 0.24800772318281195, 0.2686641801128863, 0.25571064273022626, 0.21847445956236344, 0.23091903170536365, 0.05020280821309242, 0.0632387502816617, 0.05853602053426643, 0.05762749469162298, 0.057416937623113284, 0.0622103178443878, 0.07047053129014824, 0.0915010659566926, 0.06823287882844575, 0.14454057488047423, 0.14449447100029666, 0.16271908234166843, 0.17743113602701233, 0.16643983079143254, 0.12427282987178623, 0.14493643854212623, 0.136448320164122, 0.1415952683237165, 0.1685439272341953, 0.18179762583602554, 0.18216570836452262, 0.1868855521090259, 0.204122138308937, 0.20852058173570687, 0.19286293415333977, 0.16920443805022023, 0.1911640819370728, 0.1460579292417138, 0.12720792098287625, 0.12979870807988192, 0.13274801774185785, 0.12449087330621589, 0.1310079754366268, 0.13132213165272988, 0.1211012626005824, 0.13550606870035387, 0.1886312696116863, 0.18135434582164744, 0.19321344158493226, 0.162699488464786, 0.17626932210530977, 0.18749847654073415, 0.15731386779819856, 0.16601766219570913, 0.174774288080511, 0.1666949645777206, 0.15658007857551037, 0.15544617531024507, 0.17211660860996858, 0.15644641056251263, 0.1552372265417189, 0.1698070101767737, 0.15641851205623114, 0.1605473249771534, 0.15613163972037836, 0.15807011749806354, 0.16455798792415988, 0.14227856168322017, 0.16719567783196942, 0.1659340813080462, 0.17208206062907871, 0.17409355557438777, 0.1677685494146588, 0.16064005548696003, 0.15907029540870787, 0.1676704317595944, 0.18967154589479585, 0.15536823827721802, 0.15366838255502457, 0.2151406448036116, 0.21033353195480275, 0.1894533447463358, 0.184916590679161, 0.17590772523631293, 0.18549716596969645, 0.21398812887104268, 0.19540014665154026, 0.17110554087081986, 0.1849902984657522, 0.20495383873011241, 0.19138218017816366, 0.04378081880769791, 0.0532017174582754, 0.08337732682881382, 0.05824101924944758, 0.061713543554927086, 0.05557596099998574, 0.056920735003298195, 0.05073342232700906, 0.05829274325829048]}, "mutation_prompt": null}
{"id": "73f1611e-d4d1-4de3-b6e1-25eaf0af9b88", "solution": "import numpy as np\n\nclass EnhancedGreyWolfOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def initialize_population(size):\n            return np.random.uniform(self.lb, self.ub, (size, self.dim))\n\n        def levy_flight():\n            beta = 1.5\n            sigma = (np.math.gamma(1 + beta) * np.math.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta / 2 ** ((beta - 1) / 2)) ** (1 / beta)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return 0.01 * step\n\n        population_size = 5\n        population = initialize_population(population_size)\n        fitness = [func(individual) for individual in population]\n        best_index = np.argmin(fitness)\n        best_solution = population[best_index]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / self.budget\n            for i in range(population_size):\n                A = 2 * a * np.random.rand(self.dim) - a\n                C = 2 * np.random.rand(self.dim)\n                P = np.random.rand(self.dim)\n\n                if i < population_size / 2:\n                    D = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D\n                    population[i] = np.clip(X1, self.lb, self.ub)\n                else:\n                    D1 = np.abs(C * best_solution - population[i])\n                    X1 = best_solution - A * D1\n                    population[i] = np.clip(X1 + levy_flight(), self.lb, self.ub)\n\n            fitness = [func(individual) for individual in population]\n            new_best_index = np.argmin(fitness)\n            if fitness[new_best_index] < fitness[best_index]:\n                best_index = new_best_index\n                best_solution = population[best_index]\n\n            # Dynamic population size adjustment\n            if np.random.rand() < 0.2:\n                population_size += 2\n                population = np.vstack((population, initialize_population(2)))\n                fitness.extend([func(individual) for individual in population[-2:]])\n\n            # Differential Evolution Mutation\n            F = 0.5\n            for i in range(population_size):\n                idxs = list(range(population_size))\n                idxs.remove(i)\n                a, b, c = np.random.choice(idxs, 3, replace=False)\n                mutant = population[a] + F * (population[b] - population[c])\n                population[i] = np.clip(mutant, self.lb, self.ub)\n\n        return best_solution", "name": "EnhancedGreyWolfOptimization", "description": "Enhancing Grey Wolf Optimization by incorporating a hybrid mutation strategy utilizing differential evolution.", "configspace": "", "generation": 99, "fitness": 0.11767540891329983, "feedback": "The algorithm EnhancedGreyWolfOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "69f0e0f6-3add-4c00-8293-1cce06c5be2d", "metadata": {"aucs": [0.21184395149364676, 0.15259339173865005, 0.1500733925507598, 0.20383319589669424, 0.1674161966613359, 0.16822245405632474, 0.1826569569974712, 0.18340914326166569, 0.15785935115662852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031008566395850146, 0.03827776364255642, 0.050913272709254276, 0.03450187131566984, 0.03775968774797833, 0.030584601183163196, 0.03357966460656625, 0.03331497154653029, 0.03080479730107777, 0.024444345726479466, 0.022988615005990476, 0.029171292033305707, 0.027856120653399374, 0.02206697342029207, 0.02324617144450425, 0.02510501672849974, 0.02315463099238879, 0.021670515674598434, 0.8770903368911365, 0.9916363329234923, 0.9281972156313107, 0.8764094459241921, 0.9353347504358747, 0.8403023564837386, 0.9103140195390227, 0.791033276164254, 0.9391078479334438, 0.06747622269159259, 0.09021208829151495, 0.04949028285368695, 0.05812329920126691, 0.08169482358729019, 0.07008293631227758, 0.06567891074947185, 0.08869597030103993, 0.07931635294091266, 0.14453927790205068, 0.08848946387044321, 0.11316240040198378, 0.12326008059735649, 0.09772117173556893, 0.12284921235559809, 0.12667722481686883, 0.10012743205789609, 0.10716543128269129, 0.005444997700806531, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005060225591938528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003003747530556655, 0.006387514004601469, 0.028545457387353257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03599784553654439, 0.01754459569315714, 0.04125110229626916, 0.05224175771708017, 0.014242741692428118, 0.03285370346022898, 0.03056660841058345, 0.019046415029357333, 0.046157672822739415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013994842945237451, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005805341587386104, 0.001975056326545377, 9.999999999998899e-05, 0.1976928142472788, 0.18273502688639987, 0.16773774815752984, 0.2329075389617853, 0.18540513719030627, 0.20487046777445717, 0.19154762769354372, 0.17794741844874573, 0.1756906186456787, 0.04871386380798903, 0.04189393449637302, 0.06296067812946116, 0.04444272408936489, 0.05278546755254443, 0.0300603545435546, 0.04599377927618575, 0.04766374659042416, 0.034075874993255484, 0.13101921683147544, 0.14206464022508514, 0.20635336846542918, 0.1351514665597766, 0.1746218272755039, 0.14937371386725207, 0.15381854516574944, 0.13879856628608833, 0.13127636140727938, 0.14880924841224918, 0.15250520637314735, 0.15727430622388072, 0.1542817444095239, 0.14759068973348544, 0.15802444062662635, 0.18079588828083704, 0.1478759120909382, 0.1517484987634401, 0.10873341343856935, 0.09799528223027976, 0.09429058836330528, 0.09629500092286669, 0.1021959728240861, 0.11774344306091056, 0.10091921542245486, 0.09782579023647109, 0.10262532740646058, 0.14242695251373294, 0.15006983029732401, 0.14902435810965287, 0.13624966099534574, 0.1523990793746005, 0.1348737765219521, 0.14368211236143724, 0.13991496112974033, 0.14602050254714072, 0.15572123666098248, 0.11034393670055065, 0.14149331847303326, 0.14584674666301867, 0.12034526243610255, 0.10613388639235255, 0.1193960708834868, 0.1273491415114102, 0.12575305823979066, 0.16646017180392425, 0.1715213329729257, 0.21804997223341227, 0.1471486723713349, 0.14809678318803832, 0.11368082269462187, 0.150616770205921, 0.15351987530237288, 0.13358238652141774, 0.1478496877930966, 0.2333156938257428, 0.12906880874338533, 0.12406610243703109, 0.15590816359749493, 0.1048485093112882, 0.16941688307865754, 0.21901165113894727, 0.17284054818680983, 0.1785264607201198, 0.18150388834964692, 0.17909989654119818, 0.19749949626903995, 0.19297945678368955, 0.18755737098708825, 0.17700876233145357, 0.20617689860928334, 0.18134132357303512, 0.04549254671279468, 0.05203695205536241, 0.04410786533787214, 0.04617436902664651, 0.04212186650692906, 0.034984640589948324, 0.04768161409204297, 0.039737950898089514, 0.04526597519328568]}, "mutation_prompt": null}
