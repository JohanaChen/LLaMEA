{"id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 0, "fitness": 0.11495233907092982, "feedback": "The algorithm HybridPSOSA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": null, "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "c0eb175e-17b6-43a8-a859-f91008e46a52", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "209e7ffb-8d25-47b5-9079-fa525c66e713", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "6c7b1a4a-f2c6-417d-a7b3-a0b124210c18", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "084feaab-d955-4625-8af7-96af6b6ca6a1", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "9dd71e0a-7df3-4ed2-a401-696389cceaa0", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "ae473332-8120-46ec-ab81-f5a0315e3c8b", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "137afcc7-3bd7-4742-a971-1753c798431d", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "d7cc3bb5-0aba-482b-b116-72aced91d555", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "78ad8568-9b9b-4317-b127-2d8fb9ae236a", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "066536c4-8c55-4956-b184-83ad7fe0cd95", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "ac6b3f2d-0e73-43b9-b756-10a530c568b7", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "eecc64e3-3e49-458e-9e6c-7d697a2f3d7c", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "6713737c-5ce7-47bb-8eab-e0486dafb83f", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "c28c6425-23d1-4966-ba5c-e501fa37d50d", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "7d245565-2217-477a-bec9-9d7483ee3b99", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "afc5e4b9-2d28-4dee-9053-7d918b0e91df", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "21f2dcac-5c06-4807-9cbc-1fac05bf417d", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "4eba2e97-85c3-4017-940e-bf78e35b34b0", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "5040026f-4e1a-4959-ac10-b308b4e7c291", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "27a9f100-a2b4-449d-867f-e5111986fccc", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "82dabfcc-54ad-438a-a8fd-6b97e40ac0f0", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "e7fb5904-cf3c-444d-bb58-e38db79ce3b9", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "ea37112c-70b7-4292-946d-d1268d824a20", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "fbf464d4-dff2-47eb-b592-29a74cff2cc9", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "60400f7e-7025-4937-9398-cacb714d2a4b", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "a84cae02-b89b-464c-b113-89f86c57cdf8", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "4ac35082-63d4-4052-8d9a-3f398b88b263", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "8b0883d3-842c-475c-b9fe-5c5a1ab58c9f", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "037933fc-4f48-462a-9b7f-a88c0106dfb8", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "6a5ba8ff-83b7-47a0-ac38-988f492a9de2", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "edf4a87a-19d6-45bf-9eb9-336d6e9ccb91", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "4d1980bd-c3e8-482c-ab33-6bc171c2071a", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "e784de6b-535d-4d09-b6a4-3a2f58df0e73", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "afffccdc-b64c-4d1c-961c-7471c05504fb", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "7132d95a-7291-4d94-b216-69961cf3d6e9", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "e6ed57cc-ec7e-4e70-80b8-b66534312bc0", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "ac71bbec-13a7-4eb5-8d37-019204d540b6", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "6b4c0f2f-34e3-443b-950d-1dce8d0e3928", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "a69d806e-2a6c-4ab6-89f9-cac425bc891e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "78c6903a-0e58-4c6a-b91a-e7d8bd01737a", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "00e93252-c289-485c-b3cc-960b56387876", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "ec49ad4f-bdf7-422d-bd76-efa971b8876a", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "a59cf526-c581-4573-ab6f-71d2d48dc085", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "0b432108-243a-49ca-8dd7-093c469d4b54", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "53c630c5-68f5-4a34-8ea7-aee44c56958e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "f36140ad-84a9-428b-82c0-07052cecdbe8", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "a6b1f74f-0832-4774-bc62-6f5f5e7d39fa", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "5f682002-bf27-423b-9f98-3c7e3b487079", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "765c0ed3-e8e8-4882-88ed-e0949b87472e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "30693f4f-63e3-4313-b09b-654d7b69c701", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "4ec9f0ec-441b-4ba2-9352-81264e8cdac3", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "4f35257e-1b68-4fc7-b50e-5adb42c4457a", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "d17fb881-5f4a-45af-b733-dffcda39e68d", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "a003348b-6e6e-4a42-818d-74ee480420dd", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "fe8b0633-e01c-4bec-8288-927334989d24", "solution": "from scipy.optimize import minimize\n\nclass ImprovedHybridPSOSA(HybridPSOSA):\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        super().__init__(budget, dim, swarm_size, max_iter)\n        self.local_search_iter = 20\n\n    def local_search(self, initial_solution):\n        res = minimize(func, initial_solution, method='Nelder-Mead', options={'maxiter': self.local_search_iter})\n        return res.x\n\n    def __call__(self, func):\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = self.local_search(best_solution)\n\n        return best_solution", "name": "ImprovedHybridPSOSA", "description": "Improved HybridPSOSA algorithm by incorporating a local search mechanism with Nelder-Mead optimization method.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'pso_search' is not defined\").", "error": "NameError(\"name 'pso_search' is not defined\")", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {}, "mutation_prompt": null}
{"id": "ff2ac415-2553-4906-8e54-49bd03b1664d", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "4f20d715-d89d-49ee-8ee9-b81080275606", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "d39c25c4-5219-4930-b87c-3a528247f606", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "417aecdb-fe08-4597-b459-2b8858e321b2", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "7b8c69e4-8c35-4741-8af3-9c1e2247e33b", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "0d840edf-56ec-4912-bc98-768f2dcbbf08", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "aed5e5cb-0b05-4c1b-8f65-8811360239e7", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "63547838-edf9-4fa5-83f5-a49c780bd674", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "912b36b5-763a-4fb9-af55-6e581c4e8373", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "9c2e60a0-a646-431f-b3ed-b72538ea51b9", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "7732150f-dcda-4f02-8d85-784609e79aa3", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "b3be4364-c18a-44f8-b874-6f3e6a59390e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "baa90681-7065-46e1-87ef-fe6a58cf2d67", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "26260076-8e40-412d-8269-84cb9dd64566", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "8f1f3f07-d421-4fc4-803c-5bb5b3514030", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "a90e9e42-bab2-497a-94f5-006d41671aa5", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "eb7e2b1f-db95-4a59-812a-9c5892f2ee7e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "09ca994f-c17c-4c5c-a484-d0d703b6465c", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "57f2d889-49db-47c0-9533-0b14d4f17e2e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "797eeb6f-dfde-42bb-8401-a4cf855dce97", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "c1dc82f0-b4a1-4e51-aa7f-14994726cbfe", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "272aae4b-a3f4-46d0-972f-1814589a97a7", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "0d77a725-b6a6-4a21-a856-a267fab42a2e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "6b6f97f1-2549-4c9a-a4a5-fc10a1d864ef", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "952e1f54-9265-4cb9-91b9-fb7f17945a06", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "7a90673f-6b94-41b4-bc8d-83987e87ab5d", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "de4190fd-162a-4739-ae89-3a599ce6c926", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "6f82cdf6-bc27-480a-bdf4-cfc8eb2859c6", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "ade4620b-b39b-41db-9090-94f032801d0e", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "1f4b3750-09ec-4082-9427-dbce3fafa45f", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "641c03f1-5ad0-4890-9e53-787f87737286", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "959ad358-af61-4894-9f25-2cd81a47c571", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "e594d9e9-3156-4067-b9b9-ed6a5865cfd4", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "ebe47b5e-ad5a-40c5-bcf4-a09612799425", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "8528975c-e630-4887-95dd-71346e4b81a7", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "35238762-2526-4137-ade6-f5e974087127", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "325ae048-ea1d-4e2f-afe0-3c2c639dca39", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "4a5c6902-fcfa-4d09-96c1-0cf8279ea543", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "d6ecb3c7-7c82-4b66-b662-5fc3c1935014", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "82ed4bf4-52c3-4053-ba02-1c37d2188494", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "94ea4960-33ae-438b-b72a-422b0dc8650b", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "6f2d8ca3-f2d7-4743-9708-f40e19576434", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "f2abf541-f7ba-48d5-941f-6a5603478435", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
{"id": "5a9c08e2-8df9-43ea-991e-11c3ea2f1aab", "solution": "import numpy as np\n\nclass HybridPSOSA:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=100):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(individual) for individual in population])\n\n        def perturb_solution(solution, scale=0.1):\n            return solution + scale * np.random.randn(self.dim)\n\n        def pso_search():\n            # PSO initialization\n            population = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n            pbest = population.copy()\n            pbest_fitness = evaluate_population(pbest)\n            gbest_idx = np.argmin(pbest_fitness)\n            gbest = pbest[gbest_idx].copy()\n\n            # PSO main loop\n            for _ in range(self.max_iter):\n                for i in range(self.swarm_size):\n                    velocity = np.random.rand() * (pbest[i] - population[i]) + np.random.rand() * (gbest - population[i])\n                    population[i] += velocity\n                    population[i] = np.clip(population[i], -5.0, 5.0)\n                    \n                    fitness = func(population[i])\n                    if fitness < pbest_fitness[i]:\n                        pbest[i] = population[i].copy()\n                        pbest_fitness[i] = fitness\n                        if fitness < pbest_fitness[gbest_idx]:\n                            gbest_idx = i\n                            gbest = pbest[i].copy()\n            \n            return gbest\n\n        def sa_search(initial_solution):\n            current_solution = initial_solution\n            current_fitness = func(current_solution)\n            best_solution = current_solution\n            best_fitness = current_fitness\n\n            temperature = 1.0\n            cooling_rate = 0.95\n\n            for _ in range(self.max_iter):\n                new_solution = perturb_solution(current_solution)\n                new_fitness = func(new_solution)\n\n                if new_fitness < current_fitness or np.random.rand() < np.exp((current_fitness - new_fitness) / temperature):\n                    current_solution = new_solution\n                    current_fitness = new_fitness\n\n                if new_fitness < best_fitness:\n                    best_solution = new_solution\n                    best_fitness = new_fitness\n\n                temperature *= cooling_rate\n\n            return best_solution\n\n        # Hybrid PSO-SA\n        best_solution = pso_search()\n        remaining_budget = self.budget - self.max_iter * self.swarm_size\n        if remaining_budget > 0:\n            best_solution = sa_search(best_solution)\n\n        return best_solution", "name": "HybridPSOSA", "description": "A novel hybrid metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to efficiently explore the search space and exploit the best solutions. ", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83e1ffce-49fe-4e99-a588-5c3f9a6fa53c", "metadata": {"aucs": [0.28222967782298725, 0.29710997296244057, 0.36407598723218393, 0.22388853638708128, 0.23134463762434754, 0.214920510300043, 0.29466095892550725, 0.2773732319149598, 0.2947879872324838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.060087104550725634, 0.04658111028443723, 0.09329881277800633, 0.06842904639898328, 0.09647211059094585, 0.07612340772544068, 0.06586913679296302, 0.03339231273169685, 0.060099224419473796, 0.06583891550583032, 0.043030660460324555, 0.051711368261520674, 0.06752257252788985, 0.06092055001489771, 0.0, 0.06377024716225754, 0.02460419308399575, 0.024475671703066304, 0.06952133146107642, 0.0750443813641799, 0.06753843650214209, 0.07638422722273186, 0.07130445523453932, 0.060054206557288436, 0.09838529179992328, 0.07176046539528602, 0.06147230210954435, 0.13490468664071864, 0.1065443714313622, 0.07648863096344027, 0.1548072872243108, 0.10011164864469613, 0.09196300295472792, 0.1126543110391649, 0.07866050030079463, 0.044055001709998765, 0.1883901647087205, 0.10731547974772615, 0.1310305947721948, 0.11010983779293981, 0.10989380441004437, 0.08966694688011334, 0.12192572255105882, 0.12203906251040131, 0.16090441617077955, 0.10592035861162008, 0.003400864552038141, 0.0, 0.020453286546481153, 0.10703792583436911, 0.0, 0.16175125796544432, 0.10281025018445344, 0.10368485056855092, 0.12707237481516054, 0.13651212727094442, 0.0963526983716314, 0.11759617023953706, 0.12782269883709219, 0.1701505788371327, 0.11174788937931812, 0.09476719147759849, 0.11688537553038458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06617227793851577, 0.024046203500479923, 0.0687330549958235, 0.06344148371407077, 0.0, 0.0, 0.1298169496543835, 0.05370274686711651, 0.04122022682452875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002487668392949338, 0.06258937997228475, 0.03608931144020988, 0.0, 0.033722654815177, 0.0651978330410522, 0.03165041279998859, 0.051936333012332025, 0.03354607006975874, 0.3391887758787825, 0.365012850857505, 0.22884430169125602, 0.2980582590317937, 0.2245207428515309, 0.19012830031200156, 0.35886917323236633, 0.31461291624779286, 0.2576225211034887, 0.04150312738706452, 0.006186678139629698, 0.0, 0.05502467739653727, 0.04900626663262997, 0.06598001037406687, 0.053214460803536756, 0.05956225481057287, 0.0641460803222339, 0.09746210662936505, 0.19505427088278515, 0.10137131380612407, 0.1429398861655089, 0.17949718599045317, 0.12495104633732312, 0.1693062205536906, 0.17376953643450654, 0.16378777508594344, 0.1657746384155505, 0.2200406543063308, 0.16593762592151873, 0.2321641451104972, 0.23917795037520995, 0.16390497333237275, 0.16504627858169585, 0.21649270398630927, 0.15032327564448278, 0.07696166935393978, 0.08331249831126719, 0.10197769746982666, 0.18536369034765976, 0.15834652001696703, 0.11885891614089228, 0.11657908540739481, 0.12548518756349736, 0.09179568625541501, 0.23492687509711052, 0.22041309582927748, 0.19854954618712117, 0.248310498104639, 0.21813665510943703, 0.1832487236710253, 0.21783899352368175, 0.2079480640247494, 0.17174523533370667, 0.16681700195482996, 0.16769076397816263, 0.1569958940773184, 0.16456272925908266, 0.1726540541951579, 0.17203427376132552, 0.16032425699325104, 0.2035002647332672, 0.16619303898242688, 0.24844997706676464, 0.11298372989828842, 0.13931619717218235, 0.2951724525698308, 0.1891162632026886, 0.17277237847944593, 0.12035078277795741, 0.15445537220869887, 0.3242660137097221, 0.2912568499081831, 0.15308813334891092, 0.21806737830473644, 0.09423138140730136, 0.14246472062269044, 0.13201518193848316, 0.10176838486649686, 0.19124809245412722, 0.1293945065349602, 0.17517539791238235, 0.19281655279038934, 0.19187432587350217, 0.2178311607005622, 0.19497911803716939, 0.19620396089273917, 0.16438132279494166, 0.20098298094557498, 0.1766488523454074, 0.08167317313788958, 0.09622672826344403, 0.053398815888631934, 0.10454092879926824, 0.08994006956759626, 0.08644319819485868, 0.08398420198129386, 0.05493869187888034, 0.08432704297513371]}, "mutation_prompt": null}
