{"id": "90ae3752-3439-4a99-9fea-b252d4511d7f", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "954a48f1-206a-4eda-b502-df6b28a12bcc", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "90ae3752-3439-4a99-9fea-b252d4511d7f", "metadata": {}, "mutation_prompt": null}
{"id": "3f3edc15-0e52-4216-9b95-4009390abf2b", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "90ae3752-3439-4a99-9fea-b252d4511d7f", "metadata": {}, "mutation_prompt": null}
{"id": "4e9a8ae3-9ccf-43da-b322-ff7b9476b546", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "90ae3752-3439-4a99-9fea-b252d4511d7f", "metadata": {}, "mutation_prompt": null}
{"id": "ce8d378a-c850-4a04-acc9-c7c6541b003b", "solution": "import numpy as np\n\nclass DEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        CR = 0.9\n        F = 0.8\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    mutated[i] = target_to_bounds(candidates[a, i] + F * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DEWithLocalSearch", "description": "An evolutionary algorithm using a combination of differential evolution and local search to efficiently optimize black box functions within a specified budget.", "configspace": "", "generation": 4, "fitness": 0.07449737612318891, "feedback": "The algorithm DEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "90ae3752-3439-4a99-9fea-b252d4511d7f", "metadata": {"aucs": [0.14373001191401413, 0.15376331765127416, 0.15168385603078716, 0.14410222006768858, 0.12026475092678224, 0.1376519768207488, 0.12717725749765774, 0.12188617899117193, 0.13480760161489724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03388748228807981, 0.04080744994944485, 0.024230917990169076, 0.03248561353334789, 0.033902092401570716, 0.031342254064218866, 0.044683026200815545, 0.02912773387679446, 0.03478690275341456, 0.01649876810925266, 0.015166099664181143, 0.023140215978126988, 0.02123266141802016, 0.015162808425568275, 0.011439387041905502, 0.017164203968612846, 0.014870302943430613, 0.022151038996215178, 0.09777392445243949, 0.1231932219069084, 0.09034984041630045, 0.10075149057541488, 0.10997343046344454, 0.12444011551594192, 0.11280103384586548, 0.11713773572894004, 0.1275893461221833, 0.05192210754908444, 0.06194185967943244, 0.0520477967852343, 0.046377343577818864, 0.052343756532947205, 0.05546406722435515, 0.06575045403541169, 0.033583250000223774, 0.024714454698217758, 0.12063298247296095, 0.07265769114585674, 0.10289363210137203, 0.0834027994687454, 0.07754219941909324, 0.08919695032699726, 0.08603287459519093, 0.08164327459402998, 0.08754097098197566, 9.999999999998899e-05, 0.0002490431361106271, 9.999999999998899e-05, 0.02961852818240418, 0.0010949463122343905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016697271904975164, 0.013272708845180725, 9.999999999998899e-05, 0.000887532754125786, 9.999999999998899e-05, 9.999999999998899e-05, 0.002349521854367098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0404961960261222, 0.06651867434590641, 0.026210182002916693, 0.027120712439149597, 0.023305138757204413, 0.041831289379620884, 0.020713852619342665, 0.02534024282928915, 0.0872117164483801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16738660765584823, 0.15762930644933726, 0.1692801786116075, 0.17490097777488922, 0.17747362626709706, 0.1369870565027943, 0.17142243555803904, 0.15474858831384264, 0.15019558362881835, 0.025241767096276457, 0.03716338119156515, 0.026058982230374395, 0.04081767476948661, 0.022540870613481312, 0.05108276367065445, 0.03854395646146436, 0.02898945645006623, 0.037033760465565724, 0.1261034069828052, 0.11307634560625124, 0.11924263363735443, 0.13276705726481264, 0.1327925782121041, 0.14383173632740287, 0.12923727363661996, 0.1447342463566138, 0.12321154526057654, 0.14573514799145104, 0.14518390345306675, 0.15378717331604297, 0.1550307488938002, 0.14173980750874793, 0.13226597789217098, 0.1417027444615493, 0.18226041737726617, 0.13373439129836484, 0.08127438300067058, 0.09327699229472652, 0.08498651011485203, 0.1111728105221036, 0.0909529791185123, 0.08865315152383768, 0.08713222055687675, 0.10338680019040736, 0.08167140070636048, 0.1571382160050211, 0.17833576937269358, 0.15426695765041754, 0.15307514033881653, 0.1384573427174811, 0.15341576546613256, 0.16213040190288264, 0.13742009985153214, 0.16285792587628967, 0.13931776666343354, 0.000405444380395803, 0.10409413288195812, 0.10216715718882952, 0.08217178291482286, 0.03317400450693708, 0.12218828961051587, 0.07850679287810924, 0.10324213901047641, 0.12090755378986218, 0.11149650324478366, 0.11060193783770211, 0.11719717182389122, 0.14699894883673803, 0.12356538301844955, 0.10382041801496233, 0.12217644424118212, 0.2154538054963263, 0.12267025467564818, 0.12913578678853666, 0.1133662217102197, 0.17338695790826308, 0.1280169043623406, 0.14387083486742536, 0.1187223489376491, 0.13253550322117302, 0.11777940143003163, 0.1769026488641512, 0.19520827187271939, 0.1853380303398361, 0.18679366533805286, 0.18409108795715323, 0.18323256117646836, 0.1914514403586306, 0.1885572310751702, 0.18258501290131623, 0.05012247042412943, 0.04497801255684042, 0.04238175252645493, 0.04966634037071782, 0.06620108126237978, 0.04626011555246079, 0.05117830811744062, 0.04364878957746732, 0.06439556171294825]}, "mutation_prompt": null}
{"id": "dbd4e9df-3c52-4fad-910f-2dfcc62b3016", "solution": "import numpy as np\n\nclass ImprovedDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "ImprovedDEWithLocalSearch", "description": "Introducing dynamic adaptation of mutation parameters based on individual performance to enhance exploration and exploitation balance in optimization.", "configspace": "", "generation": 5, "fitness": 0.07614153412801562, "feedback": "The algorithm ImprovedDEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "ce8d378a-c850-4a04-acc9-c7c6541b003b", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.1352054727369727, 0.13444786273106024, 0.17607209064143403, 0.13918446357278902, 0.11588331677585884, 0.18731286685633053, 0.1457752034795482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02645181648991124, 0.030782776903271802, 0.02251341994468925, 0.03400809609710964, 0.02124760860750252, 0.030590377836968163, 0.030501150965523305, 0.031223416552544014, 0.033663836183011386, 0.029950207644699356, 0.019854625211401467, 0.01787588530738371, 0.022252363566819255, 0.02151516735234127, 0.025030430724502728, 0.017106893560257075, 0.023839399197336908, 0.018298444918295687, 0.15812994309442163, 0.07508033192988584, 0.15671633118952033, 0.10878995349509257, 0.14826602147883883, 0.09682543216716477, 0.17002262923072375, 0.09154899455097254, 0.0913909000370775, 0.04912846365240642, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.036776689390488504, 0.05195966413306652, 0.0436348306783928, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.0768911052188076, 0.065706374590347, 0.11880016544994054, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012530209238963863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23586490308657948, 0.1571196057694153, 0.16806161018354338, 0.15675923293876126, 0.1815419324210834, 0.16795950028434636, 0.16449084254152024, 0.19630264420580357, 0.18069263750508002, 0.016804096487610387, 0.04852834181106713, 0.028768792681170052, 0.037883410274162865, 0.016408322989743596, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.11448983182927497, 0.1179267846320392, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.11035706336641937, 0.12464311688474916, 0.1364185482073641, 0.14954285330586503, 0.1500645924635544, 0.15409464507898651, 0.1397491783425947, 0.14239905643279804, 0.1422869888075502, 0.1737354908282296, 0.14788869040720332, 0.08746230653504772, 0.0882862465603792, 0.07725775875675467, 0.08580274735433491, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10465585574732927, 0.09037476184532223, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.15911517827385435, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.12855744652330892, 0.12330451613658078, 0.10366224318346628, 0.11306223113393477, 0.08993386681890947, 0.03191910254527608, 0.1262266955914363, 0.1409844122043198, 0.12098231423546224, 0.13301186245655539, 0.1474372846856612, 0.11039892579727473, 0.11356930054181469, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170349996472683, 0.11457512244857249, 0.09081086379163317, 0.32769342377455846, 0.17994873349059948, 0.12042110621644364, 0.10580766568384692, 0.17282209857832698, 0.19238792833829133, 0.1834567088511042, 0.1960584046212246, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.057875177901999586, 0.044037689066558916, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.042873460389812657]}, "mutation_prompt": null}
{"id": "9defc02b-0732-49a6-9a6a-4652c69c3b80", "solution": "import numpy as np\n\nclass ImprovedDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "ImprovedDEWithLocalSearch", "description": "Introducing dynamic adaptation of mutation parameters based on individual performance to enhance exploration and exploitation balance in optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd4e9df-3c52-4fad-910f-2dfcc62b3016", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.1352054727369727, 0.13444786273106024, 0.17607209064143403, 0.13918446357278902, 0.11588331677585884, 0.18731286685633053, 0.1457752034795482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02645181648991124, 0.030782776903271802, 0.02251341994468925, 0.03400809609710964, 0.02124760860750252, 0.030590377836968163, 0.030501150965523305, 0.031223416552544014, 0.033663836183011386, 0.029950207644699356, 0.019854625211401467, 0.01787588530738371, 0.022252363566819255, 0.02151516735234127, 0.025030430724502728, 0.017106893560257075, 0.023839399197336908, 0.018298444918295687, 0.15812994309442163, 0.07508033192988584, 0.15671633118952033, 0.10878995349509257, 0.14826602147883883, 0.09682543216716477, 0.17002262923072375, 0.09154899455097254, 0.0913909000370775, 0.04912846365240642, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.036776689390488504, 0.05195966413306652, 0.0436348306783928, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.0768911052188076, 0.065706374590347, 0.11880016544994054, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012530209238963863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23586490308657948, 0.1571196057694153, 0.16806161018354338, 0.15675923293876126, 0.1815419324210834, 0.16795950028434636, 0.16449084254152024, 0.19630264420580357, 0.18069263750508002, 0.016804096487610387, 0.04852834181106713, 0.028768792681170052, 0.037883410274162865, 0.016408322989743596, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.11448983182927497, 0.1179267846320392, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.11035706336641937, 0.12464311688474916, 0.1364185482073641, 0.14954285330586503, 0.1500645924635544, 0.15409464507898651, 0.1397491783425947, 0.14239905643279804, 0.1422869888075502, 0.1737354908282296, 0.14788869040720332, 0.08746230653504772, 0.0882862465603792, 0.07725775875675467, 0.08580274735433491, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10465585574732927, 0.09037476184532223, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.15911517827385435, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.12855744652330892, 0.12330451613658078, 0.10366224318346628, 0.11306223113393477, 0.08993386681890947, 0.03191910254527608, 0.1262266955914363, 0.1409844122043198, 0.12098231423546224, 0.13301186245655539, 0.1474372846856612, 0.11039892579727473, 0.11356930054181469, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170349996472683, 0.11457512244857249, 0.09081086379163317, 0.32769342377455846, 0.17994873349059948, 0.12042110621644364, 0.10580766568384692, 0.17282209857832698, 0.19238792833829133, 0.1834567088511042, 0.1960584046212246, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.057875177901999586, 0.044037689066558916, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.042873460389812657]}, "mutation_prompt": null}
{"id": "c22147b0-575e-4b11-bfc6-87a4b7b9d5f9", "solution": "import numpy as np\n\nclass ImprovedDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "ImprovedDEWithLocalSearch", "description": "Introducing dynamic adaptation of mutation parameters based on individual performance to enhance exploration and exploitation balance in optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd4e9df-3c52-4fad-910f-2dfcc62b3016", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.1352054727369727, 0.13444786273106024, 0.17607209064143403, 0.13918446357278902, 0.11588331677585884, 0.18731286685633053, 0.1457752034795482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02645181648991124, 0.030782776903271802, 0.02251341994468925, 0.03400809609710964, 0.02124760860750252, 0.030590377836968163, 0.030501150965523305, 0.031223416552544014, 0.033663836183011386, 0.029950207644699356, 0.019854625211401467, 0.01787588530738371, 0.022252363566819255, 0.02151516735234127, 0.025030430724502728, 0.017106893560257075, 0.023839399197336908, 0.018298444918295687, 0.15812994309442163, 0.07508033192988584, 0.15671633118952033, 0.10878995349509257, 0.14826602147883883, 0.09682543216716477, 0.17002262923072375, 0.09154899455097254, 0.0913909000370775, 0.04912846365240642, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.036776689390488504, 0.05195966413306652, 0.0436348306783928, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.0768911052188076, 0.065706374590347, 0.11880016544994054, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012530209238963863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23586490308657948, 0.1571196057694153, 0.16806161018354338, 0.15675923293876126, 0.1815419324210834, 0.16795950028434636, 0.16449084254152024, 0.19630264420580357, 0.18069263750508002, 0.016804096487610387, 0.04852834181106713, 0.028768792681170052, 0.037883410274162865, 0.016408322989743596, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.11448983182927497, 0.1179267846320392, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.11035706336641937, 0.12464311688474916, 0.1364185482073641, 0.14954285330586503, 0.1500645924635544, 0.15409464507898651, 0.1397491783425947, 0.14239905643279804, 0.1422869888075502, 0.1737354908282296, 0.14788869040720332, 0.08746230653504772, 0.0882862465603792, 0.07725775875675467, 0.08580274735433491, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10465585574732927, 0.09037476184532223, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.15911517827385435, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.12855744652330892, 0.12330451613658078, 0.10366224318346628, 0.11306223113393477, 0.08993386681890947, 0.03191910254527608, 0.1262266955914363, 0.1409844122043198, 0.12098231423546224, 0.13301186245655539, 0.1474372846856612, 0.11039892579727473, 0.11356930054181469, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170349996472683, 0.11457512244857249, 0.09081086379163317, 0.32769342377455846, 0.17994873349059948, 0.12042110621644364, 0.10580766568384692, 0.17282209857832698, 0.19238792833829133, 0.1834567088511042, 0.1960584046212246, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.057875177901999586, 0.044037689066558916, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.042873460389812657]}, "mutation_prompt": null}
{"id": "2e772b19-16bb-4216-95b3-5123364289aa", "solution": "import numpy as np\n\nclass ImprovedDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "ImprovedDEWithLocalSearch", "description": "Introducing dynamic adaptation of mutation parameters based on individual performance to enhance exploration and exploitation balance in optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd4e9df-3c52-4fad-910f-2dfcc62b3016", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.1352054727369727, 0.13444786273106024, 0.17607209064143403, 0.13918446357278902, 0.11588331677585884, 0.18731286685633053, 0.1457752034795482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02645181648991124, 0.030782776903271802, 0.02251341994468925, 0.03400809609710964, 0.02124760860750252, 0.030590377836968163, 0.030501150965523305, 0.031223416552544014, 0.033663836183011386, 0.029950207644699356, 0.019854625211401467, 0.01787588530738371, 0.022252363566819255, 0.02151516735234127, 0.025030430724502728, 0.017106893560257075, 0.023839399197336908, 0.018298444918295687, 0.15812994309442163, 0.07508033192988584, 0.15671633118952033, 0.10878995349509257, 0.14826602147883883, 0.09682543216716477, 0.17002262923072375, 0.09154899455097254, 0.0913909000370775, 0.04912846365240642, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.036776689390488504, 0.05195966413306652, 0.0436348306783928, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.0768911052188076, 0.065706374590347, 0.11880016544994054, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012530209238963863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23586490308657948, 0.1571196057694153, 0.16806161018354338, 0.15675923293876126, 0.1815419324210834, 0.16795950028434636, 0.16449084254152024, 0.19630264420580357, 0.18069263750508002, 0.016804096487610387, 0.04852834181106713, 0.028768792681170052, 0.037883410274162865, 0.016408322989743596, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.11448983182927497, 0.1179267846320392, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.11035706336641937, 0.12464311688474916, 0.1364185482073641, 0.14954285330586503, 0.1500645924635544, 0.15409464507898651, 0.1397491783425947, 0.14239905643279804, 0.1422869888075502, 0.1737354908282296, 0.14788869040720332, 0.08746230653504772, 0.0882862465603792, 0.07725775875675467, 0.08580274735433491, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10465585574732927, 0.09037476184532223, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.15911517827385435, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.12855744652330892, 0.12330451613658078, 0.10366224318346628, 0.11306223113393477, 0.08993386681890947, 0.03191910254527608, 0.1262266955914363, 0.1409844122043198, 0.12098231423546224, 0.13301186245655539, 0.1474372846856612, 0.11039892579727473, 0.11356930054181469, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170349996472683, 0.11457512244857249, 0.09081086379163317, 0.32769342377455846, 0.17994873349059948, 0.12042110621644364, 0.10580766568384692, 0.17282209857832698, 0.19238792833829133, 0.1834567088511042, 0.1960584046212246, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.057875177901999586, 0.044037689066558916, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.042873460389812657]}, "mutation_prompt": null}
{"id": "b54206ab-acab-410d-93b0-3bf77b5109a1", "solution": "import numpy as np\n\nclass ImprovedDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n                    # Introducing opposition-based learning mutation\n                    if np.random.rand() < 0.5:\n                        mutated[i] = 2 * 0 - mutated[i]\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "ImprovedDEWithLocalSearch", "description": "Enhancing the mutation strategy by introducing a novel mutation mechanism based on opposition-based learning to improve population diversity and convergence speed.", "configspace": "", "generation": 9, "fitness": 0.0757273640852803, "feedback": "The algorithm ImprovedDEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "dbd4e9df-3c52-4fad-910f-2dfcc62b3016", "metadata": {"aucs": [0.12055952938875003, 0.14315523223616033, 0.1602511670457245, 0.14379854935599634, 0.14661212408394586, 0.19771463021403657, 0.1472704096961006, 0.158472707898777, 0.14812110388876631, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028365480995186987, 0.027645630778907027, 0.026675673240152187, 0.03731085819699698, 0.047370967617121784, 0.03060430911848655, 0.04097495368906712, 0.03788196048407988, 0.03239352421551067, 0.02822580959175025, 0.034286137121088855, 0.01720514975343046, 0.05226293214274225, 0.03490274681022387, 0.016445339856880348, 0.02670508900701718, 0.023388524720557302, 0.025849155859353212, 0.06868311739829458, 0.09347934905290423, 0.0826635261170039, 0.08858071963818914, 0.11113444162286379, 0.08863026792186723, 0.09273713203468592, 0.1233517198858477, 0.08771126855426681, 0.05178371136405435, 0.0457749852462932, 0.04032320392488031, 0.04678206155720166, 0.04353764318735143, 0.04341401838604819, 0.027469931076319898, 0.025629130722333526, 0.08396150737925256, 0.10125089380969543, 0.1653854840010488, 0.09034389491115302, 0.07315108851747665, 0.08728711821823654, 0.11115810605051868, 0.07631253719236197, 0.10841571466886413, 0.07877746662288299, 0.02258028290464076, 0.03226191354207075, 0.059057165359519104, 0.0004998710393474548, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005197298283450946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02656458225724545, 0.07120049089200331, 0.053678756398047645, 0.0365517402282618, 0.07300117255183036, 0.004983237641130289, 0.03838596963774965, 0.031158334738857985, 0.013065584773640282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15446564686908137, 0.1639425835733609, 0.18726013468949199, 0.1708097660978829, 0.16265316214647296, 0.1949075005094807, 0.18449413927904845, 0.15722473393429104, 0.16705574954511848, 0.03564436766754697, 0.02851552224175724, 0.024388855354365635, 0.037010654788994124, 0.02998279334773246, 0.03064583538812604, 0.030286585133795563, 0.043659018665343274, 0.046688001682748115, 0.12720429540058997, 0.13424351561624392, 0.11806253914417086, 0.11395645110858599, 0.11496155565262556, 0.12798271387553972, 0.1364831367191619, 0.10590981510051156, 0.11382201157890648, 0.14861961997870965, 0.16305357702864054, 0.15493829163626538, 0.15194818705287105, 0.16242762132565403, 0.14578194529454724, 0.14460023749752182, 0.1784580476035399, 0.15255682559922967, 0.08984129683770548, 0.09339068671837136, 0.09836921043915225, 0.09301333864060801, 0.10164647631997392, 0.08223944407483164, 0.09490750334926401, 0.10586640729341235, 0.09829370265738357, 0.1590000192666594, 0.16769868176801317, 0.1495502088155869, 0.15656477246923528, 0.15267379300462058, 0.15583089923475035, 0.15261855547144076, 0.14163740207753073, 0.14340738513939655, 0.06406001668368333, 0.13464667267176011, 0.09441730535930071, 0.023391333683717486, 0.1307357778342193, 0.1352556022736522, 0.08005129533593758, 0.12658671128608312, 0.09086823865272187, 0.11341365871823783, 0.1127156994105426, 0.14353731065905673, 0.1738563463865732, 0.14891416971092053, 0.13423502840979362, 0.10715589432296879, 0.1216689552267608, 0.12480723619626788, 0.12385076590351218, 0.11773589435993526, 0.13992008316256566, 0.1045132891041971, 0.11682224534373176, 0.11958320350498453, 0.10271370816269731, 0.09425743621824623, 0.13887215747747195, 0.18017261531195705, 0.16974838009553916, 0.1771439432727282, 0.19615124305462217, 0.17977030234746982, 0.18384147767051384, 0.18544963703033313, 0.2330621210833541, 0.18038342559281773, 0.04048244366408216, 0.04560699244714106, 0.05219526250653417, 0.05151447842223278, 0.04810896034179257, 0.042672067847338124, 0.0497796214068108, 0.0429765791015736, 0.05300369714177178]}, "mutation_prompt": null}
{"id": "bcdf07f3-de79-4418-bd09-38f84f024fcb", "solution": "import numpy as np\n\nclass ImprovedDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "ImprovedDEWithLocalSearch", "description": "Introducing dynamic adaptation of mutation parameters based on individual performance to enhance exploration and exploitation balance in optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dbd4e9df-3c52-4fad-910f-2dfcc62b3016", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.1352054727369727, 0.13444786273106024, 0.17607209064143403, 0.13918446357278902, 0.11588331677585884, 0.18731286685633053, 0.1457752034795482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02645181648991124, 0.030782776903271802, 0.02251341994468925, 0.03400809609710964, 0.02124760860750252, 0.030590377836968163, 0.030501150965523305, 0.031223416552544014, 0.033663836183011386, 0.029950207644699356, 0.019854625211401467, 0.01787588530738371, 0.022252363566819255, 0.02151516735234127, 0.025030430724502728, 0.017106893560257075, 0.023839399197336908, 0.018298444918295687, 0.15812994309442163, 0.07508033192988584, 0.15671633118952033, 0.10878995349509257, 0.14826602147883883, 0.09682543216716477, 0.17002262923072375, 0.09154899455097254, 0.0913909000370775, 0.04912846365240642, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.036776689390488504, 0.05195966413306652, 0.0436348306783928, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.0768911052188076, 0.065706374590347, 0.11880016544994054, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012530209238963863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23586490308657948, 0.1571196057694153, 0.16806161018354338, 0.15675923293876126, 0.1815419324210834, 0.16795950028434636, 0.16449084254152024, 0.19630264420580357, 0.18069263750508002, 0.016804096487610387, 0.04852834181106713, 0.028768792681170052, 0.037883410274162865, 0.016408322989743596, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.11448983182927497, 0.1179267846320392, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.11035706336641937, 0.12464311688474916, 0.1364185482073641, 0.14954285330586503, 0.1500645924635544, 0.15409464507898651, 0.1397491783425947, 0.14239905643279804, 0.1422869888075502, 0.1737354908282296, 0.14788869040720332, 0.08746230653504772, 0.0882862465603792, 0.07725775875675467, 0.08580274735433491, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10465585574732927, 0.09037476184532223, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.15911517827385435, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.12855744652330892, 0.12330451613658078, 0.10366224318346628, 0.11306223113393477, 0.08993386681890947, 0.03191910254527608, 0.1262266955914363, 0.1409844122043198, 0.12098231423546224, 0.13301186245655539, 0.1474372846856612, 0.11039892579727473, 0.11356930054181469, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170349996472683, 0.11457512244857249, 0.09081086379163317, 0.32769342377455846, 0.17994873349059948, 0.12042110621644364, 0.10580766568384692, 0.17282209857832698, 0.19238792833829133, 0.1834567088511042, 0.1960584046212246, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.057875177901999586, 0.044037689066558916, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.042873460389812657]}, "mutation_prompt": null}
{"id": "998eb5ab-667c-4fcd-a746-75b0714ddb7b", "solution": "import numpy as np\n\nclass ImprovedDEWithDynamicPopSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(len(candidates), 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n        pop_size = 30\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n                \n            # Dynamically adjust population size based on diversity\n            avg_dist = np.mean([np.linalg.norm(population[j] - population[k]) for j in range(pop_size) for k in range(j + 1, pop_size)])\n            pop_size = min(50, max(20, int(30 + 10 * (1 - avg_dist))))  # Adjust population size based on diversity\n        \n        return best_solution", "name": "ImprovedDEWithDynamicPopSize", "description": "Incorporating a dynamic population size adjustment mechanism based on diversity to enhance the exploration capability of the algorithm.", "configspace": "", "generation": 11, "fitness": 0.0746705934211237, "feedback": "The algorithm ImprovedDEWithDynamicPopSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "dbd4e9df-3c52-4fad-910f-2dfcc62b3016", "metadata": {"aucs": [0.11875731231770192, 0.13986595194540064, 0.1597631997368013, 0.13474062840985168, 0.09889418408053974, 0.13370648174072308, 0.1609431162135555, 0.18731286685633053, 0.13298093510733056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025042905399776827, 0.027318837900429216, 0.04931129610115226, 0.02543251203960173, 0.02626425120341014, 0.032472559843778614, 0.034760346824431854, 0.030855178662882787, 0.02369565339598323, 0.010888786864429179, 0.020022955926876973, 0.0262081051044728, 0.026988638499184203, 0.02373508583071582, 0.019797315666436277, 0.010518069737229907, 0.03236254705647712, 0.02106477559888298, 0.12523858772023155, 0.06916180589814014, 0.10091114134827439, 0.09912224404230563, 0.10171300061982225, 0.13271211764882684, 0.0764954028710827, 0.09456744661404026, 0.13906552893177704, 0.07213005934117667, 0.05711797494531079, 0.045877992523825184, 0.06604213811916526, 0.04187881427288409, 0.034970268875052946, 0.023582832027259637, 0.05033228292473213, 0.01482121558896321, 0.10074596805527614, 0.10153267036767333, 0.09068404729070867, 0.14238216524843228, 0.07983373270974803, 0.07966796287518607, 0.10856326794611504, 0.09898813081246227, 0.08784862690916284, 9.999999999998899e-05, 0.0028728837313621858, 0.0012243697701235234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003982539581695366, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023275533156254635, 0.12376875274107046, 0.04670980559087767, 0.02708169850348152, 0.008476606128713815, 0.04893866669347857, 0.0324675353469549, 0.031316572144035826, 0.002897672364995385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00015932286428765874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17043520573080606, 0.17832836933832563, 0.1794617524099842, 0.15516528201979585, 0.19030667480139996, 0.16764271785657525, 0.18401900484177103, 0.177620800811934, 0.18131823055587115, 0.026086887200413966, 0.022263668669544323, 0.03976074636141458, 0.051520291269518514, 0.039158986345160685, 0.032677727166916304, 0.030641241766106053, 0.05492190352994908, 0.031083700836866623, 0.13090012997441314, 0.10687419333978032, 0.11629899682968392, 0.1268904314951924, 0.1242745099452024, 0.12768857982755288, 0.12163356003025616, 0.11383313997568034, 0.1216789509324111, 0.1496039217778271, 0.14332896178088572, 0.1500645924635544, 0.15082131342296867, 0.1508718875117827, 0.1452725643216105, 0.1540829366738049, 0.1737354908282296, 0.15828146209957472, 0.09785645205380056, 0.08255180368267678, 0.07593553566421818, 0.10618574894396848, 0.0971126606899938, 0.09065956899972372, 0.09703840173386746, 0.10736715974190703, 0.10425068374521873, 0.16881569651739337, 0.14502433631992884, 0.15506193024662263, 0.14568131184116662, 0.15121136246965539, 0.14651177564478823, 0.15825037270930353, 0.16320849325817832, 0.17646843838412662, 0.14243552979043983, 0.08657654409171012, 0.07841411163912704, 0.04261798081496804, 0.0865807173032801, 0.12792807296283593, 0.10677987693299607, 0.12587190572101303, 0.08293637294086897, 0.11065210809891302, 0.11982348064223947, 0.12004901297538872, 0.12278548625479091, 0.12377913310038002, 0.12877851454348088, 0.1270837706998551, 0.11259462307759383, 0.10808639048379642, 0.10972840171397691, 0.11261767365718, 0.11610853123196341, 0.13466741918987502, 0.10612240020484753, 0.10578760394235454, 0.16964545706510836, 0.12656831982808403, 0.12452844303093447, 0.18463364255060444, 0.18579614294806057, 0.18905038707016597, 0.18876664034763901, 0.18110494789744314, 0.18053847295584657, 0.180885547231191, 0.18851055211767742, 0.19185945698681028, 0.0491918357331691, 0.048011344351452157, 0.051692298259098046, 0.040317685502808676, 0.051428399556572746, 0.04107316139500217, 0.042017224951737986, 0.05101398763869458, 0.047804138932085904]}, "mutation_prompt": null}
{"id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 12, "fitness": 0.0761822503609417, "feedback": "The algorithm DynamicScaleFactorDEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "dbd4e9df-3c52-4fad-910f-2dfcc62b3016", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "4a187177-c1b7-4a47-aa78-6adb0d4eac11", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "8561d693-4d3a-41d4-bfb4-3caebfbbd5a1", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "ed0dcef4-38f1-4dcd-a852-548d301dff7d", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "3b4f8960-9ebc-4e18-8e39-3fe4568e9550", "solution": "import numpy as np\n\nclass EnhancedDynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n\n                    F_i_dim = F_i + 0.1 * np.random.randn()  # Enhanced mutation scale for each dimension\n                    F_i_dim = max(0.1, min(0.9, F_i_dim))\n                    \n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i_dim * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "EnhancedDynamicScaleFactorDEWithLocalSearch", "description": "Enhancing the mutation strategy by introducing a variable differential weight mechanism to adaptively adjust the mutation scale for each dimension during the evolution process.", "configspace": "", "generation": 16, "fitness": 0.07385795726358516, "feedback": "The algorithm EnhancedDynamicScaleFactorDEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.16317203891743626, 0.17969646469305112, 0.12543637875241342, 0.13786651439962794, 0.15297372957990651, 0.1489325359800907, 0.13264665341440318, 0.1385273215032672, 0.12747179621918225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0429423845440815, 0.03595797557502578, 0.024540458469216375, 0.026538390653966015, 0.02508990616818496, 0.030121822916098218, 0.0327155627450475, 0.03262611864722187, 0.02703902947722725, 0.019369738899335576, 0.01518613692757187, 0.013858258108908728, 0.021118333279027346, 0.023351213938666793, 0.02493620095081661, 0.016255283337800353, 0.026360722528411817, 0.023527694272245436, 0.08153775221340764, 0.09704954333039584, 0.07526038814250369, 0.09175271323815792, 0.10000340272398767, 0.10887157173214623, 0.08754926307920119, 0.09369445206983673, 0.08554301597293723, 0.04689933176304273, 0.06519820981985036, 0.0726659069292509, 0.024550434488549544, 0.12347244681508396, 0.05277418774472098, 0.031368200459396256, 0.054532176424019085, 0.041334323498698144, 0.09986257953359512, 0.08074645873527331, 0.08948085619446611, 0.11521423764531313, 0.07780737365809887, 0.08819603445534363, 0.10827961585246426, 0.1017652638362051, 0.08020287561144668, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029348173008031386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008546817836898812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04215383577459686, 0.02110903541114606, 0.03434112613597029, 0.036469906412708974, 0.026924269933517153, 0.05316819659383598, 0.05322899481780663, 0.023993164160249547, 0.04612066808550774, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008666063219501252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014256934229194829, 0.16722920351746584, 0.15694138498227606, 0.17436707896695958, 0.17029797485767217, 0.16618127698840357, 0.15573757370077945, 0.1946467096094171, 0.1904762858957243, 0.15100405249714133, 0.023301100391885265, 0.033851455890159365, 0.035579305204020084, 0.02438267874084543, 0.02882485995788231, 0.03004972154981822, 0.030714612500581606, 0.0288247353988188, 0.04861581926589753, 0.10951059403129804, 0.1185363930221438, 0.11849097949351384, 0.12443620554583013, 0.12815230363958086, 0.11352743671289733, 0.1311546924287863, 0.13561870020387978, 0.11918674157046538, 0.14075264934511633, 0.15977467126971456, 0.1486269160666045, 0.16601811225103225, 0.1424419344560811, 0.14533122143607835, 0.1464563195657833, 0.17465486095968896, 0.1572983674336048, 0.0792703915488071, 0.09947690696727807, 0.07599491289157811, 0.09424778721223737, 0.08781402600015775, 0.09266619760643713, 0.0988150771404096, 0.10228694049977405, 0.09344814994279327, 0.15531516921946675, 0.15268761375652962, 0.16398864549410141, 0.14037903527661477, 0.15114048842578998, 0.14652488989490287, 0.1558452335423668, 0.16762224914204193, 0.15308802939997024, 0.11634271082882475, 0.10958045736110722, 0.07078221277041208, 0.07860375125706087, 0.006878986972195689, 0.04555894008969663, 0.10283735022488494, 0.10350959745947497, 0.09702915653159638, 0.10730934778107148, 0.10323001672248355, 0.11493453275405552, 0.13137900181862316, 0.1427883605051793, 0.10861029586854254, 0.135447350649735, 0.14136191816722532, 0.13521197658984607, 0.15595612994659436, 0.12224502842730856, 0.1396070658405293, 0.16190878067336, 0.09569911122059716, 0.10833355305334424, 0.09599257108910864, 0.09865512946124977, 0.11343520929245021, 0.19476820146179274, 0.1918553298846304, 0.17607207479727094, 0.20098932789364, 0.18418226682708305, 0.1749972090328843, 0.1942355714843348, 0.19657335898085204, 0.19252655961920695, 0.06009162616086927, 0.04040472151689212, 0.06122667593063269, 0.04196347185434102, 0.06857979420628058, 0.04250383126565771, 0.04346271135738533, 0.061775265501232246, 0.06149044371638579]}, "mutation_prompt": null}
{"id": "a0f45270-c2a1-4d92-ae04-47b147763659", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "49cad7f7-9778-4c2d-baaf-79bf127abcb4", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "42863a2f-2925-47a1-91af-a71d5e3f5a7f", "solution": "import numpy as np\n\nclass MultiPopulationDEWithMigration:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        num_populations = 5\n        migration_interval = 10\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        populations = [np.random.uniform(-5.0, 5.0, (pop_size, self.dim)) for _ in range(num_populations)]\n        for _ in range(self.budget // (pop_size * num_populations)):\n            for p_idx in range(num_populations):\n                population = populations[p_idx]\n                for i in range(pop_size):\n                    trial = mutate(population[i], population, F, CR)\n                    mutated_fitness = func(trial)\n                    if mutated_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = mutated_fitness\n                    population[i] = local_search(population[i], func)\n                \n                if _ % migration_interval == 0 and p_idx < num_populations - 1:\n                    populations[p_idx + 1] = population\n        \n        return best_solution", "name": "MultiPopulationDEWithMigration", "description": "Enhancing diversity through multi-population approach with migration for improved global exploration.", "configspace": "", "generation": 19, "fitness": 0.06934178626129678, "feedback": "The algorithm MultiPopulationDEWithMigration got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.12860604708336, 0.1245422444768215, 0.12288027485243491, 0.12710760531885767, 0.13458576048366233, 0.12028638803386771, 0.1288855537228194, 0.11705042893686801, 0.11026781667202723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026753366225139463, 0.0316604058446317, 0.028488692256203985, 0.027812148435263917, 0.028998148485581132, 0.03177026181163223, 0.03754782526760225, 0.02664258381715079, 0.03786685019647007, 0.009310093755517168, 0.015309674841322174, 0.008465603373712605, 0.05206271113861949, 0.015805690804112982, 0.0035626375299067092, 0.009577949279162778, 0.02604722252796987, 0.001595579367287825, 0.10145480214284419, 0.07177588421683323, 0.08178157008741493, 0.10458549540897655, 0.1334822102253893, 0.10204578248462803, 0.11887056216330127, 0.13241962244873395, 0.24085246287264683, 0.037472549787096576, 0.04751213889367556, 0.05534681619441728, 0.06006478308351748, 0.06477086427409673, 0.02819683714194765, 0.043939740478203704, 0.042424501578992246, 0.03320792607943279, 0.10019869174805551, 0.0628677491593822, 0.09679259443169264, 0.09275322091705018, 0.0612106375310959, 0.05328095021508328, 0.05544438907341087, 0.06206752022554607, 0.13056301753421062, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006530711903611763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007199597443483419, 9.999999999998899e-05, 9.999999999998899e-05, 0.004532169271473485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05725078823490204, 0.0380330770358267, 0.055461319767981854, 0.01762178174663298, 0.0034226122983862517, 0.01501085438554639, 0.012758494802098341, 0.04628152309466782, 0.03875948855754541, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14611206106509567, 0.17083781606565973, 0.18356570973325448, 0.1469131598945358, 0.15652870586176704, 0.1485062734831063, 0.21005883781946788, 0.14115464247738052, 0.16948912183685572, 0.03259075756487395, 0.025556628710698304, 0.007218415115884946, 0.030460370915286528, 0.01928187355251121, 0.04712749993327381, 0.021663098494736688, 0.020591844463213826, 0.06564711630832842, 0.10245053996757836, 0.10812224434449158, 0.11293577231207708, 0.1266701990575575, 0.12657162114379317, 0.10679747992955035, 0.15287879726294973, 0.10306302815326562, 0.10476796674821476, 0.13144559019575897, 0.13346885252370977, 0.15405931144057416, 0.1409273322479252, 0.12956663781942224, 0.13259756534552758, 0.1468642137962708, 0.18375426712042797, 0.1468971533188833, 0.08296058183162802, 0.07948685835531344, 0.08245512703202462, 0.07767323857476927, 0.07562779215556326, 0.0806994254309964, 0.0935518662919641, 0.12007942194861132, 0.088001906422003, 0.172099684874213, 0.12804847757808857, 0.152944704033663, 0.1525512299667664, 0.11879383602571614, 0.13945997307817504, 0.13822433650269428, 0.1417899724463858, 0.12805055893426565, 0.07406336243028278, 9.999999999998899e-05, 0.0517176729663501, 0.0822186011652708, 0.09916628610976275, 0.07616271326885804, 9.999999999998899e-05, 9.999999999998899e-05, 0.01837519848025293, 0.1152650171938403, 0.1387029531087448, 0.13575850109806287, 0.11651429530253865, 0.1479982666295675, 0.11152675223763708, 0.1045198595586806, 0.1074541534681639, 0.1382395680023546, 0.16696061340294988, 0.119410856660364, 0.11744892646414173, 0.11103700711846665, 0.06547999771247726, 0.10860868409708013, 0.0850375033911025, 0.09261888559368292, 0.09158835608453575, 0.18598427140523, 0.19104079960090314, 0.20721495670539292, 0.2106204635579726, 0.2324884322787435, 0.20710460727967028, 0.21813345306717757, 0.23430451062836477, 0.2082822620891499, 0.0368258956599673, 0.03310164442106178, 0.055792169168609185, 0.05166706559814904, 0.06966782471545574, 0.04291865234835046, 0.04570418506827556, 0.04101563528138463, 0.03918581174973801]}, "mutation_prompt": null}
{"id": "e87efdc0-5bdd-41b3-82c9-335cb5e44306", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "75827603-11c2-44ee-ab79-3e584b69dd0c", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "1c2a91c2-6790-4dd2-a50d-e9af8a66a99b", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "6b10b881-d738-474b-9c6c-aaf8687c36a2", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "07a1e72b-eb2f-4741-96d7-7d7c4f7e1367", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "6b781ac3-75ea-4fed-8af3-9919308af481", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "cd57136d-6689-4cbc-abda-d86110c9a3ba", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "f4819165-af5b-44e6-97c1-d91baf19c1b1", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "0fa7df82-72fa-456a-ab3f-8a95ccea0095", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "617dfcac-3433-4a61-a2f3-582fecf3dfda", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "8a844075-279a-4499-a58f-2192370af492", "solution": "import numpy as np\n\nclass HybridPSODEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "HybridPSODEWithLocalSearch", "description": "Implementing a hybrid algorithm combining Particle Swarm Optimization with Differential Evolution to enhance exploration and exploitation for better optimization performance.", "configspace": "", "generation": 30, "fitness": 0.0761822503609417, "feedback": "The algorithm HybridPSODEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "787f54e5-3189-4b34-82fe-42337999ebf1", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "43584604-509e-4b1b-b582-15fbb11cca64", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "8652ad47-8473-488a-adb8-6a92d791403d", "solution": "import numpy as np\n\nclass DynamicScaleFactorDEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            for i in range(pop_size):\n                trial = mutate(population[i], population, F, CR)\n                mutated_fitness = func(trial)\n                if mutated_fitness < best_fitness:\n                    best_solution = trial\n                    best_fitness = mutated_fitness\n                population[i] = local_search(population[i], func)\n        \n        return best_solution", "name": "DynamicScaleFactorDEWithLocalSearch", "description": "Incorporating a dynamic mechanism to adjust mutation scale factor 'F' based on the performance of the current population to improve exploration and exploitation balance in optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.14063036884392988, 0.14324251969856705, 0.135205366120146, 0.13444786273106024, 0.17895729613374134, 0.13918446357278902, 0.1157709707507274, 0.18731286685633053, 0.14579034609558694, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026248279636628125, 0.031175398063173487, 0.020148826567331746, 0.03400809609710964, 0.02124760860750252, 0.030843230145305323, 0.030501150965523305, 0.031218433433781168, 0.033663836183011386, 0.029950207644699356, 0.01998108187813763, 0.015650336300572, 0.022252363566819255, 0.02151516735234127, 0.024957692086525096, 0.014938613562330838, 0.023839399197336908, 0.017897079399082805, 0.15807856329369008, 0.0750629357657353, 0.15671618139815668, 0.10878995349509257, 0.14826008310934535, 0.09682543216716477, 0.17002262923072375, 0.09148361337128386, 0.0913909000370775, 0.05042244499148196, 0.055078406429523996, 0.04857727932572764, 0.034146249464538814, 0.0717819841783699, 0.03670711502380164, 0.05195966413306652, 0.043679980157051435, 0.04252732059693809, 0.11431539032446725, 0.0753021068963382, 0.10058462580608996, 0.08005665001155571, 0.065706374590347, 0.11923814254090104, 0.0694267279580898, 0.08868031619870453, 0.08598936759105691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012572911448437307, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0247917852709012, 0.024566213173861984, 0.06613347661005131, 0.07014948599886972, 0.03241438742826941, 0.024145100456357205, 0.06696188262089586, 0.03174846007252419, 0.04072386008465945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002891855075134342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.23596949537680134, 0.1571196057694153, 0.16787550266963192, 0.15675923293876126, 0.1815293268897279, 0.16795950028434636, 0.16449084254152024, 0.196306711814776, 0.18224437659032244, 0.016804096487610387, 0.04852834181106713, 0.027001198323319486, 0.037883410274162865, 0.04111224688907167, 0.04079320338720971, 0.028272487835158566, 0.03400546293599804, 0.03676779627379767, 0.10624284701373932, 0.1155958917127684, 0.11861704861730726, 0.1237713250206296, 0.12123348948739643, 0.11824354952115157, 0.11841098301135133, 0.09963138415545725, 0.13137564881092, 0.13644443628014524, 0.14954285330586503, 0.1500645924635544, 0.1534105992095659, 0.13984830044835617, 0.14250482920622143, 0.14135640593159138, 0.17373530470735732, 0.14232788557752352, 0.08859333436099426, 0.0882862465603792, 0.0772851552985856, 0.08518854594564251, 0.08843321838794183, 0.09081618167052641, 0.08920431788342098, 0.10472613109759821, 0.08242540077772775, 0.15789502739448857, 0.14499638328594733, 0.19262877144243284, 0.15734401253557262, 0.15318460814425106, 0.1592754779956067, 0.1641595814424771, 0.1638882875458092, 0.14856161091560882, 0.06355780934897215, 0.08752239906510872, 0.13717336035392014, 0.128309894439385, 0.12362350003739198, 0.10366224318346628, 0.11313075527478522, 0.08993386681890947, 0.03212517452310637, 0.1266000164244251, 0.1409844122043198, 0.12014325818812432, 0.13301186245655539, 0.1474372846856612, 0.11029713894999127, 0.11348571669518026, 0.11015900012679958, 0.14498383929995362, 0.13164474495603395, 0.11022864680539202, 0.10170303412744275, 0.11457512244857249, 0.09081085058784866, 0.32769342377455846, 0.17994873349059948, 0.12042277130945223, 0.10580766568384692, 0.17283404429034077, 0.19238792833829133, 0.1834567088511042, 0.19604903655096328, 0.18624532776754743, 0.18553757791375358, 0.180885547231191, 0.18699136383333403, 0.19464506384623204, 0.053247868626395745, 0.05786411808814629, 0.044288864450458876, 0.04117030778577668, 0.05062197090848897, 0.04198534321257397, 0.04057606363313482, 0.05048793450307598, 0.04275325879781244]}, "mutation_prompt": null}
{"id": "90537ff7-a8c3-408f-ab2c-075d546480fe", "solution": "import numpy as np\n\nclass HybridDEPSOWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "HybridDEPSOWithLocalSearch", "description": "Implementing a hybrid metaheuristic algorithm by combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for enhanced global and local search capability.", "configspace": "", "generation": 34, "fitness": 0.1249470847331023, "feedback": "The algorithm HybridDEPSOWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "6b350918-d1d9-4f8b-909b-11657b8c199c", "metadata": {"aucs": [0.2176960226508008, 0.20998415870705334, 0.20647197736951362, 0.19086286445412137, 0.22041868666779996, 0.20547186891803615, 0.23171973595034168, 0.20677256962955926, 0.16952045642665692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040950399128451, 0.04813620460881396, 0.0551246718750239, 0.04260978959404116, 0.04939426643638345, 0.06105681828736431, 0.06369328650875983, 0.04952765640606682, 0.06933645886706186, 0.03583806247294363, 0.028628149204402153, 0.031779554302047486, 0.058805321722351755, 0.039144784592709425, 0.035610095001764375, 0.026799205479494548, 0.045921005674872006, 0.05762144538646097, 0.9256029276606589, 0.8913969203326678, 0.883594165559049, 0.8914927802275437, 0.9227158171080191, 0.9269615213954796, 0.8834575052659936, 0.9258328187018516, 0.886252737274468, 0.08880916468545452, 0.06432234569575901, 0.05310213230622862, 0.10327191021727156, 0.10499923345309159, 0.10003523055945929, 0.07744439607281439, 0.07906723131744453, 0.07584389300292427, 0.10771917497234684, 0.1075994429421453, 0.10564017009378224, 0.14132197779443578, 0.10427594784391492, 0.13771944255444868, 0.12086708475652319, 0.08177431522218082, 0.1428100861901208, 9.999999999998899e-05, 0.03278523210400652, 9.999999999998899e-05, 0.04296408162269927, 0.0006713272713190221, 0.014768638378217847, 0.01173797492219697, 0.030008805316239173, 9.999999999998899e-05, 0.008568762453285639, 0.018642981506731826, 0.016471936395351938, 0.005845360205245509, 0.03360338688053166, 0.04772875352818251, 0.04039252759831469, 9.999999999998899e-05, 0.0273541386833962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01114595708323618, 0.03750942834669546, 0.04849612415380855, 0.056133294000347056, 0.013303834790278746, 0.03361905940114884, 0.012539225222968353, 0.029911432611985256, 0.07197419859804466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006342456575935129, 0.013326994770991196, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605356020229387, 0.005112068203332765, 0.22089938907880846, 0.18566242006700706, 0.2047752613404148, 0.21507694028591495, 0.2502914688671998, 0.20776855465204347, 0.20953976959835718, 0.19510974364310707, 0.20089862546820791, 0.05709508506294281, 0.05187052183912799, 0.051127335728756385, 0.048824943420782585, 0.060867327674202, 0.0487568327075909, 0.041653959338908364, 0.04218879418086929, 0.04453342240254021, 0.14616126993558742, 0.13599355840273653, 0.10663808545109354, 0.17176534447686498, 0.11838519836149552, 0.1354220054323092, 0.11984764391341829, 0.14367054466023765, 0.13043075104157376, 0.1585985989241897, 0.1306458028070996, 0.1643865299971936, 0.19570898614958432, 0.1803392015241716, 0.165265466589135, 0.17274070333027358, 0.1744680939129596, 0.18801696477122076, 0.1057602013475536, 0.07177204621948208, 0.10788904888653594, 0.155315909558443, 0.12305631914413284, 0.07735266938858021, 0.15322004463945993, 0.12315917360852158, 0.10716646781912098, 0.15242073423757518, 0.17508379510353078, 0.17388391656627022, 0.17742068529201283, 0.19322591067109696, 0.1829478448339843, 0.19292144687112678, 0.15348367922318917, 0.15728171118471568, 0.14597772810464116, 0.135003797238339, 0.0828821813508499, 0.1547148992735069, 0.1342134309552584, 0.15156760230374766, 0.1473495753378502, 0.12588675777766678, 0.13665505434232839, 0.16612088233562516, 0.11874550429530684, 0.16354060547491567, 0.13802634662855195, 0.15006311908693803, 0.1819379574745721, 0.12234703346222764, 0.1451113637197592, 0.11622447560630367, 0.1440333976905508, 0.12162350284558465, 0.09796719979307544, 0.08791210494574098, 0.26278112362630257, 0.09144248038685965, 0.13588131853789887, 0.11441121906336116, 0.2411051989856704, 0.19211802996783767, 0.18516684478512058, 0.18638845621534772, 0.18793827501423588, 0.2025476997946951, 0.2062214846412207, 0.19268145555433025, 0.1816937454981551, 0.18299060428812153, 0.07004139810355758, 0.042935250277656434, 0.06327053603109523, 0.04659598961876399, 0.048971839239010606, 0.04686454283320651, 0.05169805688096207, 0.05693778959540685, 0.04775826337892708]}, "mutation_prompt": null}
{"id": "896b7b95-a7ec-4a81-967b-7146bf329669", "solution": "import numpy as np\n\nclass HybridDEPSOWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "HybridDEPSOWithLocalSearch", "description": "Implementing a hybrid metaheuristic algorithm by combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for enhanced global and local search capability.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "90537ff7-a8c3-408f-ab2c-075d546480fe", "metadata": {"aucs": [0.2176960226508008, 0.20998415870705334, 0.20647197736951362, 0.19086286445412137, 0.22041868666779996, 0.20547186891803615, 0.23171973595034168, 0.20677256962955926, 0.16952045642665692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040950399128451, 0.04813620460881396, 0.0551246718750239, 0.04260978959404116, 0.04939426643638345, 0.06105681828736431, 0.06369328650875983, 0.04952765640606682, 0.06933645886706186, 0.03583806247294363, 0.028628149204402153, 0.031779554302047486, 0.058805321722351755, 0.039144784592709425, 0.035610095001764375, 0.026799205479494548, 0.045921005674872006, 0.05762144538646097, 0.9256029276606589, 0.8913969203326678, 0.883594165559049, 0.8914927802275437, 0.9227158171080191, 0.9269615213954796, 0.8834575052659936, 0.9258328187018516, 0.886252737274468, 0.08880916468545452, 0.06432234569575901, 0.05310213230622862, 0.10327191021727156, 0.10499923345309159, 0.10003523055945929, 0.07744439607281439, 0.07906723131744453, 0.07584389300292427, 0.10771917497234684, 0.1075994429421453, 0.10564017009378224, 0.14132197779443578, 0.10427594784391492, 0.13771944255444868, 0.12086708475652319, 0.08177431522218082, 0.1428100861901208, 9.999999999998899e-05, 0.03278523210400652, 9.999999999998899e-05, 0.04296408162269927, 0.0006713272713190221, 0.014768638378217847, 0.01173797492219697, 0.030008805316239173, 9.999999999998899e-05, 0.008568762453285639, 0.018642981506731826, 0.016471936395351938, 0.005845360205245509, 0.03360338688053166, 0.04772875352818251, 0.04039252759831469, 9.999999999998899e-05, 0.0273541386833962, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01114595708323618, 0.03750942834669546, 0.04849612415380855, 0.056133294000347056, 0.013303834790278746, 0.03361905940114884, 0.012539225222968353, 0.029911432611985256, 0.07197419859804466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006342456575935129, 0.013326994770991196, 9.999999999998899e-05, 9.999999999998899e-05, 0.01605356020229387, 0.005112068203332765, 0.22089938907880846, 0.18566242006700706, 0.2047752613404148, 0.21507694028591495, 0.2502914688671998, 0.20776855465204347, 0.20953976959835718, 0.19510974364310707, 0.20089862546820791, 0.05709508506294281, 0.05187052183912799, 0.051127335728756385, 0.048824943420782585, 0.060867327674202, 0.0487568327075909, 0.041653959338908364, 0.04218879418086929, 0.04453342240254021, 0.14616126993558742, 0.13599355840273653, 0.10663808545109354, 0.17176534447686498, 0.11838519836149552, 0.1354220054323092, 0.11984764391341829, 0.14367054466023765, 0.13043075104157376, 0.1585985989241897, 0.1306458028070996, 0.1643865299971936, 0.19570898614958432, 0.1803392015241716, 0.165265466589135, 0.17274070333027358, 0.1744680939129596, 0.18801696477122076, 0.1057602013475536, 0.07177204621948208, 0.10788904888653594, 0.155315909558443, 0.12305631914413284, 0.07735266938858021, 0.15322004463945993, 0.12315917360852158, 0.10716646781912098, 0.15242073423757518, 0.17508379510353078, 0.17388391656627022, 0.17742068529201283, 0.19322591067109696, 0.1829478448339843, 0.19292144687112678, 0.15348367922318917, 0.15728171118471568, 0.14597772810464116, 0.135003797238339, 0.0828821813508499, 0.1547148992735069, 0.1342134309552584, 0.15156760230374766, 0.1473495753378502, 0.12588675777766678, 0.13665505434232839, 0.16612088233562516, 0.11874550429530684, 0.16354060547491567, 0.13802634662855195, 0.15006311908693803, 0.1819379574745721, 0.12234703346222764, 0.1451113637197592, 0.11622447560630367, 0.1440333976905508, 0.12162350284558465, 0.09796719979307544, 0.08791210494574098, 0.26278112362630257, 0.09144248038685965, 0.13588131853789887, 0.11441121906336116, 0.2411051989856704, 0.19211802996783767, 0.18516684478512058, 0.18638845621534772, 0.18793827501423588, 0.2025476997946951, 0.2062214846412207, 0.19268145555433025, 0.1816937454981551, 0.18299060428812153, 0.07004139810355758, 0.042935250277656434, 0.06327053603109523, 0.04659598961876399, 0.048971839239010606, 0.04686454283320651, 0.05169805688096207, 0.05693778959540685, 0.04775826337892708]}, "mutation_prompt": null}
{"id": "8c8f92a6-faab-4de3-9f15-5cc892588924", "solution": "import numpy as np\n\nclass EnhancedHybridDEPSOWithDynamicParams:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn() if np.random.rand() < 0.5 else F  # Dynamic adjustment of F_i\n                    F_i = max(0.1, min(0.9, F_i))\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                F = np.random.uniform(0.6, 1.0)  # Dynamic adjustment of inertia weight\n                CR = np.random.uniform(0.7, 1.0)  # Dynamic adjustment of differential weight\n\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                omega = 0.5\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedHybridDEPSOWithDynamicParams", "description": "Enhanced HybridDEPSO algorithm with dynamic adjustment of inertia weight and differential weight for improved global and local search capability.", "configspace": "", "generation": 36, "fitness": 0.12481211395402071, "feedback": "The algorithm EnhancedHybridDEPSOWithDynamicParams got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "90537ff7-a8c3-408f-ab2c-075d546480fe", "metadata": {"aucs": [0.19460575337309993, 0.20564878582577917, 0.19899574043049695, 0.21450559328208207, 0.2188507243794341, 0.16916038843807313, 0.22640874412281076, 0.22306679664099616, 0.1891017647205987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006427644850851899, 9.999999999998899e-05, 0.05605179125814008, 0.040721777965741834, 0.04683016663348749, 0.0394759989148995, 0.06466816266033126, 0.05535525657535001, 0.05005919962597183, 0.058306705136035974, 0.06797039788869919, 0.04208633520128824, 0.028063127116177977, 0.04865586422226609, 0.0446170820723244, 0.03602923927790325, 0.04264032836597287, 0.05137769841627471, 0.02994629969330309, 0.02530377488495228, 0.9133464406390568, 0.8884211132993104, 0.8804575804345361, 0.9247905231810961, 0.8874747416163973, 0.8922388251463969, 0.8699512528312565, 0.9236590728169205, 0.9099636153221161, 0.07419326621125233, 0.05365763941040147, 0.06380018858724013, 0.06670089714843619, 0.10429498404834081, 0.13320570384909391, 0.07495685544118424, 0.09006269537483336, 0.10487685460403695, 0.1284786987315778, 0.07453761202214393, 0.09523917976717133, 0.14276597132229873, 0.11592965902951768, 0.14730023630025157, 0.1466532968487887, 0.13089651360617083, 0.10559089522661358, 0.010035889996032887, 0.12852805744866946, 0.013799216131799796, 0.03662391915267438, 0.03300589534395926, 0.010802663248747013, 0.015517575639529269, 0.012020558895904254, 0.006331672710197189, 0.037592171089559256, 9.999999999998899e-05, 9.999999999998899e-05, 0.0293245287857824, 0.044298858994145984, 0.015324156998806182, 0.01061576411119236, 9.999999999998899e-05, 0.030500550975878782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010358074663279315, 0.019197500132457246, 0.03233820494375217, 0.06064578048886038, 0.009474388308613024, 0.04393206308140385, 0.08413775879576313, 0.01968449278265194, 0.020200075168050335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006731663253252362, 0.0009870601072665686, 9.999999999998899e-05, 0.006458794436736914, 0.018156751974097607, 9.999999999998899e-05, 0.009206905499121398, 0.010243489640138659, 0.0027511590294220234, 0.2371964342856412, 0.19560627688013044, 0.24834169734216127, 0.2076308398382013, 0.19796879103797438, 0.21195604402483093, 0.21007253566078565, 0.23291489433152746, 0.19884102726552777, 0.04981807168914987, 0.04488733336895001, 0.05090654019281449, 0.05812198099562793, 0.060162377598429906, 0.05592057575078557, 0.05798890097763665, 0.053338240278531734, 0.03322557544589433, 0.09623845568092437, 0.13475584144404495, 0.17340784786083552, 0.13017317791623717, 0.12676587438401443, 0.12453801905940631, 0.14758450431364967, 0.134831124020923, 0.11094919108676893, 0.18881350263500096, 0.17602314637494232, 0.1591001079851183, 0.17789520781440638, 0.15980336007806306, 0.1860181717625845, 0.17030966787051416, 0.17242413913244037, 0.16404527205620345, 0.1113149514718128, 0.07779751040732463, 0.08057300877389917, 0.12583056269159265, 0.11179306019554447, 0.13338514141748836, 0.09031279404195869, 0.11636250652280666, 0.0837472244979155, 0.17563456288681922, 0.20040535248406632, 0.17556303277137997, 0.15990901628912524, 0.1788001751384961, 0.18566016415358066, 0.17801130246393937, 0.147817946677391, 0.15178699830962983, 0.15123465504781775, 0.13246079687462387, 0.1383778325686571, 0.14785166020683393, 0.15266371458493466, 0.1423705278266263, 0.17374660358569471, 0.13458940433086886, 0.12045797488642951, 0.15455641419643928, 0.11812625021037315, 0.12086367335510206, 0.13612431541107695, 0.16265054981543126, 0.15071076403289696, 0.16247458069697363, 0.1328091377041717, 0.13800871443174778, 0.18593443054499004, 0.11325254533420626, 0.1412669698723532, 0.12273187733599111, 0.08742111005999376, 0.11784085852651138, 0.10826987845766978, 0.1054212937822645, 0.1557528157132192, 0.16366632203503484, 0.18861093483247882, 0.1926539864608009, 0.17593940266406738, 0.1807982771504847, 0.20408930017490734, 0.19140322627954842, 0.1762810455273739, 0.1902743134764534, 0.059626187871616665, 0.04630874388508455, 0.07750521384600395, 0.050546053557470993, 0.04784625875777515, 0.06701388152922372, 0.06149295227204543, 0.060734635680032234, 0.08307537242119345]}, "mutation_prompt": null}
{"id": "c725760a-5570-479c-869e-0e298cc0ff64", "solution": "import numpy as np\n\nclass DynamicPopSizeHybridDEPSOWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(len(candidates), 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n        pop_size = 30\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_values = np.array([func(ind) for ind in population])\n            pop_size = max(int((1 - min(fitness_values) / best_fitness) * 30), 5)  # Dynamic pop size\n            for i in range(pop_size):\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n                \n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "DynamicPopSizeHybridDEPSOWithLocalSearch", "description": "Enhancing HybridDEPSOWithLocalSearch algorithm by introducing a dynamic population size adaptation strategy based on individual performance.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 5 is out of bounds for axis 0 with size 5').", "error": "IndexError('index 5 is out of bounds for axis 0 with size 5')", "parent_id": "90537ff7-a8c3-408f-ab2c-075d546480fe", "metadata": {}, "mutation_prompt": null}
{"id": "7451187b-ff5c-4336-a322-db2470193df4", "solution": "import numpy as np\n\nclass HybridDEPSOWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def tournament_selection(population, func, k=3):\n            selected_indices = np.random.choice(len(population), k, replace=False)\n            selected_fitness = [func(population[i]) for i in selected_indices]\n            return population[selected_indices[np.argmin(selected_fitness)]]\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search with Tournament Selection\n                population[i] = local_search(tournament_selection(population, func), func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "HybridDEPSOWithLocalSearch", "description": "Enhancing the diversity of the population by introducing a tournament selection mechanism to select individuals for local search.", "configspace": "", "generation": 38, "fitness": 0.10449741333996977, "feedback": "The algorithm HybridDEPSOWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.13.", "error": "", "parent_id": "90537ff7-a8c3-408f-ab2c-075d546480fe", "metadata": {"aucs": [0.16027867308622878, 0.13306645836722286, 0.19074377932028797, 0.14044832997460466, 0.1481639816229443, 0.15972327128922859, 0.1467114942654998, 0.16111564400649403, 0.15454821567652433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03404603085933289, 0.030685517915780336, 0.03615531862622978, 0.026211336166268695, 0.040916542255278965, 0.04999148891662786, 0.04810022644691814, 0.04846049261907426, 0.03858895375656579, 0.020990066978860855, 0.020290752304568338, 0.0208887926495106, 0.030611683893699393, 0.035700507563002026, 0.04417440287248975, 0.021942280418447258, 0.02437817518940688, 0.018121123040026443, 0.7954243907229432, 0.6230488509190684, 0.4458079245538662, 0.42306470310120703, 0.6258873254796162, 0.6155759004724102, 0.6899458273089838, 0.753897754822017, 0.7090307616819385, 0.05436454939444679, 0.038512510100966235, 0.027831426693127326, 0.05406273822823482, 0.05029972638080893, 0.05812489503416396, 0.04622488896935972, 0.05921601748833438, 0.04510478235994675, 0.1050560075723872, 0.09720552064814891, 0.0895578507162691, 0.09583485748998688, 0.0714200893459419, 0.06981573224756554, 0.08709536192768041, 0.09143432615330316, 0.09688241754326843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013028572730284793, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018385660381560198, 9.999999999998899e-05, 9.999999999998899e-05, 0.028140338589195735, 9.999999999998899e-05, 9.999999999998899e-05, 0.010079526919976378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07706634136804058, 0.0777368465203514, 0.06487299297461269, 0.09885295216255852, 0.07188131458199509, 0.08151361644038968, 0.06292266972356242, 0.07573068655371884, 0.06720804985821649, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011216681338234724, 9.999999999998899e-05, 9.999999999998899e-05, 0.16005943312855797, 0.18694950915345054, 0.171499105796311, 0.16574083736229517, 0.15055479519934545, 0.17203473827202997, 0.16927672718392328, 0.188344203617423, 0.16531019150466164, 0.059423316757732936, 0.030491364384755748, 0.03088564599831245, 0.05528318223945605, 0.027739119172139892, 0.045549739400346345, 0.04168785100938899, 0.04005326620453109, 0.03824866049083486, 0.1149080105144269, 0.14573020096597578, 0.10543225452834126, 0.1802998037838106, 0.12701024374662884, 0.13488959739764395, 0.12636697898585403, 0.10968466703303292, 0.14305067429299723, 0.15923467645133116, 0.15617427204788725, 0.16050338778344542, 0.1736529472517645, 0.16085151145102483, 0.15603297319043907, 0.17510886602993037, 0.18437909746246128, 0.16554220217834315, 0.116243435937884, 0.1109188274448879, 0.10140408179014271, 0.10096728988244308, 0.09744046418759822, 0.09581785070416227, 0.12092168375438683, 0.10812631275125839, 0.10002122852762974, 0.16806489969817773, 0.15307674693854056, 0.17069340360349383, 0.17865135126175302, 0.15593234687588942, 0.16174902108069822, 0.15899783663691391, 0.15253361105468666, 0.18907771757707037, 0.12119466247471211, 0.07847132857739614, 0.1207433661689743, 0.10786652506571193, 0.10166979100869433, 0.150247669973824, 0.09914297619258727, 0.10500250509401199, 0.14392128338768795, 0.12403049214715522, 0.1288709000053304, 0.11402685852422434, 0.1051934052825696, 0.12128337489588847, 0.13375239801969074, 0.1123748804821525, 0.12750020878477264, 0.13895832679335596, 0.11697740868698236, 0.11540818802131603, 0.11225041316397599, 0.18869100991887722, 0.21320298940236693, 0.2226515084061833, 0.11637789620279926, 0.13081542656223988, 0.12851547672046437, 0.20436348090249434, 0.19235824953282432, 0.21247389973264685, 0.21200707983099742, 0.19482306555792273, 0.21395287380272476, 0.20015615754733318, 0.2041524456877496, 0.2155415182971201, 0.04559772901735437, 0.051096426632319836, 0.06523357163621535, 0.0643445908782484, 0.07766099575232455, 0.08968608952988633, 0.06063147883532716, 0.05946836782910281, 0.07008571100932981]}, "mutation_prompt": null}
{"id": "37bbac75-e2f4-47a1-b55a-b53a2e13d696", "solution": "import numpy as np\n\nclass HybridGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "HybridGADEWithLocalSearch", "description": "Implementing a novel metaheuristic algorithm by integrating Genetic Algorithm (GA) with Differential Evolution (DE) for enhanced exploration and exploitation balance.", "configspace": "", "generation": 39, "fitness": 0.12937254200855738, "feedback": "The algorithm HybridGADEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "90537ff7-a8c3-408f-ab2c-075d546480fe", "metadata": {"aucs": [0.26726378366482784, 0.20133371446369208, 0.2133788744636027, 0.23835927656833322, 0.198474247740827, 0.21504732678131588, 0.24231894162463374, 0.19989379655371753, 0.216413636596121, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08267155965504336, 0.053935168565244385, 0.07173817836756768, 0.07982663689306246, 0.052470069837951105, 0.06583730174934188, 0.049330957409004395, 0.04756339559128231, 0.06153740194173496, 0.06494853223817376, 0.03090798950581153, 0.039631293575383975, 0.08678261233333473, 0.04352136412787766, 0.03903033075286966, 0.043249799415797874, 0.02337986771933298, 0.04675161239918468, 0.9287686482809334, 0.9205347718202386, 0.8773095954539711, 0.8531151530956236, 0.919020176002083, 0.8905882503707307, 0.883195680785279, 0.8922280602578964, 0.8959234423470669, 0.09273243798643782, 0.06238345984538152, 0.06065238866574496, 0.10415465197392582, 0.10248768737804625, 0.09393287124936656, 0.13122386200616543, 0.10174640637098731, 0.07092500237220356, 0.1523092526590497, 0.09550253437104217, 0.11260586483080315, 0.08502757765098778, 0.13593346434276377, 0.13721785285165478, 0.14659363199499076, 0.13353013022081506, 0.12276276667155495, 0.033837159357331226, 0.035439072405216265, 0.0020747802790516134, 0.027077838184815683, 0.06074052392159823, 0.0427082495059693, 0.06496269869452154, 0.051788127367341064, 0.02049172690604406, 0.04381516436422428, 0.02999890134519645, 0.022192317511454007, 0.015651439785737575, 9.999999999998899e-05, 0.007529710090281694, 0.05076006817625345, 0.014269720654441542, 0.04155190763954675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0992440487327485, 0.02376718659319088, 0.08697487924473701, 0.0611857671329431, 0.009914970930438916, 9.999999999998899e-05, 0.14520130798672803, 0.03515755001618781, 0.020339845661239142, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0057490274650966455, 0.00032945653493843263, 0.0019728615410056216, 0.00010775760579850857, 0.015192361472184168, 0.009326300728121684, 0.013721232448658305, 0.0102612691750259, 0.012418247551392092, 0.23618137540668083, 0.21529030338525346, 0.21716474891922488, 0.22902287970488755, 0.2219008699401498, 0.21492551877142752, 0.2244561952582761, 0.1865370514690795, 0.24012062166548298, 0.05737511951135188, 0.04067714170410075, 0.04515685430537941, 0.07149079133954106, 0.0643439937135849, 0.05967885033787601, 0.04890480347275117, 0.038670791820968775, 0.03414229198775176, 0.13060901836307381, 0.14079498298183935, 0.15745774495811526, 0.11170324415977884, 0.12768896666767438, 0.11249159573877532, 0.1442305072642781, 0.12834084934187395, 0.15219996034405447, 0.1752896712866825, 0.148674047568367, 0.16193338816728797, 0.18491568107856415, 0.16426364354219147, 0.17572795420122533, 0.19264396041361653, 0.17679607179441303, 0.14565062136867823, 0.12376905801565063, 0.14002145916111608, 0.08888537124744889, 0.13059896131093662, 0.12070905613047145, 0.1250718973771232, 0.09949502215815753, 0.11303891941641198, 0.15728946384471887, 0.17141872229910682, 0.18967777697068655, 0.16881031061075158, 0.17321689786972894, 0.1509112014631373, 0.17409408875529264, 0.19516275327276345, 0.14148133271610264, 0.16892066367013647, 0.13746008681748556, 0.13213064802749208, 0.1402163321446267, 0.16132196564993828, 0.1513067235380593, 0.16222345300818575, 0.15333080604713634, 0.15246469116022532, 0.15345913440878267, 0.1573416236295474, 0.11909343798938776, 0.12930724620579825, 0.15148804899324309, 0.12256811617810492, 0.11755475362408796, 0.14597175740981183, 0.1235976841677997, 0.13717602673595486, 0.1209600916575444, 0.10870089529987614, 0.11085576867895375, 0.1404644554288048, 0.13135545623596312, 0.19977361675100336, 0.13578893186049923, 0.12734283697739524, 0.11218310207073778, 0.2007265735993592, 0.1956642230260751, 0.2266404530555023, 0.18008271527110697, 0.18969781066029268, 0.17273953603263503, 0.1833268713916849, 0.1940197260932628, 0.17005216053847616, 0.07000284738068152, 0.0714291186185334, 0.06392778155414602, 0.0794979310417484, 0.057959041888406504, 0.07022532582167129, 0.058542756864347734, 0.05166650933349248, 0.06614816333625673]}, "mutation_prompt": null}
{"id": "7af77e39-2124-4e15-bc1c-71cc72564e42", "solution": "import numpy as np\n\nclass EnhancedHybridGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                new_candidate_fitness = f_local(new_candidate)\n                if new_candidate_fitness < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.1  # Increase step size for better candidates\n                else:\n                    step_size *= 0.8  # Decrease step size for worse candidates\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedHybridGADEWithLocalSearch", "description": "Enhancing the local search mechanism by utilizing a dynamic step size based on fitness improvement.", "configspace": "", "generation": 40, "fitness": 0.12722037138754147, "feedback": "The algorithm EnhancedHybridGADEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "37bbac75-e2f4-47a1-b55a-b53a2e13d696", "metadata": {"aucs": [0.26398541378354445, 0.20652361558890198, 0.20030826607019514, 0.1865905053157466, 0.1984650792653221, 0.213067526739268, 0.24175327282503378, 0.19983239527526708, 0.22034335571212127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07802167706835805, 0.043100722898294364, 0.08376902241468454, 0.06548902169805837, 0.04828708702357398, 0.06101289594242376, 0.04800824109136337, 0.04318442376162179, 0.04644594287171988, 0.07291375611195905, 0.03216084853222778, 0.038279004258506055, 0.08503479801759262, 0.040525892676102404, 0.028093058659615755, 0.055696875311526894, 0.028150326181274776, 0.05141291139306836, 0.9287703405033364, 0.920529442527434, 0.8773747028427038, 0.8530095566222885, 0.9193931493315135, 0.8905345591982567, 0.8831633954438697, 0.8923986399344974, 0.8981923570483801, 0.09360786321120362, 0.060093233347385255, 0.06067758060638495, 0.10327473577369328, 0.10328918514389573, 0.0975878308364927, 0.12984246670548405, 0.049592004770452336, 0.08272735945943133, 0.11592780278415105, 0.10366707317529633, 0.113522668802571, 0.08236192147265742, 0.135932719743463, 0.13721784930229297, 0.19882623745330286, 0.13353072989741777, 0.12204575170253196, 0.03343772379671206, 0.03575988382252637, 0.005326607703088904, 0.02744903655842157, 0.028005664394646912, 0.047124337867301413, 0.06632445147001254, 0.052377420982933964, 0.02011649772995383, 0.044553427416317404, 0.030658984250506727, 0.019742058052084732, 0.01461417828651157, 0.009673912178207345, 0.00814735233230035, 0.051582302518711876, 0.0019468129630626496, 0.06869236619980168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013150514184148143, 0.02717580656830565, 0.03829173547642606, 0.05786515420942795, 0.009527609457695485, 0.0028246181076978516, 0.07615242640064679, 0.02818951720447349, 0.03871561072752816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006967841169699063, 9.999999999998899e-05, 0.012629887211740187, 9.999999999998899e-05, 0.013684159218651959, 0.004987304034960283, 0.0008701901480550056, 0.02530061175606202, 0.011618997438562872, 0.23819294988113127, 0.21378295761837252, 0.21994266613861302, 0.22879668736520564, 0.24699996437253013, 0.20879162190011835, 0.22513057495711286, 0.18649787780182936, 0.23894059698568437, 0.05797026128356919, 0.04853829668041543, 0.04360382117653239, 0.07115319688605726, 0.047549182036870086, 0.054836593402011746, 0.04893622747190651, 0.035608740587279364, 0.049063719464980005, 0.11564534576010954, 0.15530310010036996, 0.15333114687111138, 0.12191317224537657, 0.14472091039021218, 0.14105636072271932, 0.15267547562454764, 0.1308269829069726, 0.13232613521149683, 0.17048570950616082, 0.148674047568367, 0.1430940255094978, 0.1865775890868855, 0.1758252592926628, 0.17150264204385424, 0.18125840539377114, 0.21136863728935862, 0.14403975536170077, 0.1403029566259757, 0.14324931795296236, 0.08284196447988179, 0.1148136099927426, 0.11769499004762096, 0.1036677099065364, 0.12332615405744296, 0.09963738582461412, 0.14421889830630552, 0.16178770868251502, 0.15638157416217668, 0.18974008391273256, 0.18080710845691905, 0.12736373578664428, 0.18184716158932435, 0.18638102749937002, 0.13872850788757463, 0.1630779594165611, 0.13420007550257906, 0.13389397940778347, 0.1386019561160694, 0.1589660196522069, 0.14729872443383607, 0.17255945317166665, 0.15245363429290393, 0.15197447481778326, 0.15010126352004427, 0.15835775353790305, 0.11933280644337807, 0.12931876155562028, 0.1520420515932729, 0.12259642616336952, 0.11726833225904698, 0.1458888782346457, 0.12363075158815495, 0.13827665586538385, 0.12142368858363639, 0.10857246037435564, 0.10715408082448341, 0.14101822260892927, 0.12656543188506908, 0.13894287256828974, 0.1367796976522061, 0.12508697172319483, 0.11154229745942557, 0.18541033305003052, 0.18705358391228777, 0.1835373139775437, 0.17958301711405056, 0.1817753654564942, 0.1962858835679413, 0.18868435957443308, 0.18541498022706004, 0.17900529041004498, 0.062273826135753385, 0.08157186842986863, 0.05936505258176383, 0.05916198114164095, 0.041998394466449485, 0.06325895004264748, 0.07003055897317367, 0.0503489808074955, 0.06806763332253918]}, "mutation_prompt": null}
{"id": "622f214d-4309-4820-a3ab-d0178d42349b", "solution": "import numpy as np\n\nclass HybridGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_levy(current):\n            mutated = np.copy(current)\n            beta = 1.5\n            scale = 0.01\n            levy = np.random.standard_t(beta, size=self.dim) * scale\n            mutated = target_to_bounds(mutated + levy, -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                trial_mutate = mutate_levy(population[i])\n                mutated_fitness = func(trial_mutate)\n                if mutated_fitness < func(population[i]):\n                    population[i] = trial_mutate\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "HybridGADEWithLocalSearch", "description": "Enhancing the diversity of the population by incorporating a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 41, "fitness": 0.1267571717886429, "feedback": "The algorithm HybridGADEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "37bbac75-e2f4-47a1-b55a-b53a2e13d696", "metadata": {"aucs": [0.21090827883991392, 0.2017429078471239, 0.24196551659063958, 0.2078101694545914, 0.1722493204667953, 0.20438266678796058, 0.23352387790159868, 0.21503098897564243, 0.23003609884631937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030980847387185317, 9.999999999998899e-05, 0.06572435607205007, 0.05016604424260207, 0.06332384090469145, 0.047857849958708565, 0.04443138360244192, 0.040225265524798104, 0.04450343047538785, 0.050086789942683896, 0.05817626756004923, 0.03492036387302, 0.03291991650524484, 0.03642873874788022, 0.04021831954683186, 0.04058349408562423, 0.02701363585989147, 0.048518626476648063, 0.038278250189423435, 0.05142726014460952, 0.9571982647799255, 0.8859236279914525, 0.8891600180852269, 0.9137714929249103, 0.9284150316451918, 0.9172980378433747, 0.911656310368203, 0.9217572053543417, 0.9553762382076606, 0.08337069447136147, 0.07380929708195749, 0.0632686525655154, 0.08075295147094852, 0.11852310827806523, 0.11950622917342102, 0.10830387292159249, 0.06497916980483276, 0.09245905134063959, 0.13291400634194983, 0.1035252029147925, 0.07767389019461446, 0.22142170710769038, 0.13826931432209222, 0.10228248112576444, 0.15175535702875642, 0.10430739482264184, 0.1005913888578489, 0.018861962522635056, 0.03033970610541814, 0.05522328292194667, 0.028302554205484776, 0.023693832655523717, 0.015250998272579586, 0.05240904598105667, 0.039441595827059195, 0.033849599354129345, 0.041058783232511775, 0.044522102911776384, 0.041517228102094905, 0.05472703099027765, 9.999999999998899e-05, 0.010158007076259357, 0.03372737343148824, 9.999999999998899e-05, 0.058760242347652314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025685816438936304, 0.0395925557164295, 0.05281466773238641, 0.05160874214675237, 9.999999999998899e-05, 0.0718710085846258, 0.03560847908055875, 0.04230295335337253, 0.006061147532257616, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00587999268758066, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034606565452002247, 0.006350311180310042, 9.999999999998899e-05, 0.018320390488615668, 0.0018646257807316546, 0.004638423955043991, 0.23199862940898686, 0.20923124087222789, 0.22964141907492608, 0.23119195563116424, 0.2002251570920267, 0.1937739639646846, 0.22403921236994562, 0.2163908648187024, 0.23057103277521085, 0.04915657536947693, 0.056075721115109056, 0.04422024609759878, 0.0563918892571974, 0.05240011795990118, 0.06406927237861149, 0.05136369481459846, 0.05404821989300723, 0.04568197930183271, 0.13239816231581425, 0.1276539343230062, 0.1236738658033586, 0.12432692768901521, 0.13072989372882549, 0.10630386060441654, 0.16157319583836494, 0.1062325166981396, 0.1354451078180262, 0.16876832518421647, 0.1547781026196271, 0.1617529838013495, 0.20047291960517655, 0.1446196254448736, 0.16487335437729433, 0.1744123275223023, 0.16659628088392164, 0.14011825560974434, 0.11791383218006901, 0.11534160132882221, 0.12352154874388743, 0.11690198033863364, 0.1356439884999796, 0.10496598141995983, 0.12436473515338253, 0.1098573023974474, 0.12037329562943466, 0.16100547137662213, 0.1748847134802094, 0.1665349749706535, 0.17635681615136523, 0.1280874032073963, 0.16392148629924685, 0.17351460393995366, 0.15131943470861264, 0.18553115614456994, 0.1479131285590043, 0.13677764897296552, 0.1388936653973406, 0.17566823906689755, 0.12883737127222106, 0.14142808264388873, 0.16408986146658477, 0.1328427548758334, 0.13740689853217303, 0.14955977898389627, 0.10937778776352958, 0.1392748576068521, 0.173320351738516, 0.11762423871978955, 0.14061050124925456, 0.17490131783085194, 0.1262080580100141, 0.13439641042345052, 0.09321055840637049, 0.10443538988617274, 0.08794684666663233, 0.13667375090788825, 0.09105937603945935, 0.11449485835319051, 0.16059018824974103, 0.1309178072425773, 0.11629817387874752, 0.22167413790852075, 0.17708919733345607, 0.20478753814165207, 0.19146241859983248, 0.19033898749914302, 0.18318865907249982, 0.17651958615197805, 0.18692991549314042, 0.18637481565847613, 0.055117208585358846, 0.05965718411364773, 0.045436458800571344, 0.056888378394796435, 0.05102224840892233, 0.05124768627935117, 0.08938936953695376, 0.050284078944652144, 0.0772173182997844]}, "mutation_prompt": null}
{"id": "f891672e-42ef-48a0-b28f-22ee99b4e902", "solution": "import numpy as np\n\nclass HybridGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "HybridGADEWithLocalSearch", "description": "Implementing a novel metaheuristic algorithm by integrating Genetic Algorithm (GA) with Differential Evolution (DE) for enhanced exploration and exploitation balance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bbac75-e2f4-47a1-b55a-b53a2e13d696", "metadata": {"aucs": [0.26726378366482784, 0.20133371446369208, 0.2133788744636027, 0.23835927656833322, 0.198474247740827, 0.21504732678131588, 0.24231894162463374, 0.19989379655371753, 0.216413636596121, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08267155965504336, 0.053935168565244385, 0.07173817836756768, 0.07982663689306246, 0.052470069837951105, 0.06583730174934188, 0.049330957409004395, 0.04756339559128231, 0.06153740194173496, 0.06494853223817376, 0.03090798950581153, 0.039631293575383975, 0.08678261233333473, 0.04352136412787766, 0.03903033075286966, 0.043249799415797874, 0.02337986771933298, 0.04675161239918468, 0.9287686482809334, 0.9205347718202386, 0.8773095954539711, 0.8531151530956236, 0.919020176002083, 0.8905882503707307, 0.883195680785279, 0.8922280602578964, 0.8959234423470669, 0.09273243798643782, 0.06238345984538152, 0.06065238866574496, 0.10415465197392582, 0.10248768737804625, 0.09393287124936656, 0.13122386200616543, 0.10174640637098731, 0.07092500237220356, 0.1523092526590497, 0.09550253437104217, 0.11260586483080315, 0.08502757765098778, 0.13593346434276377, 0.13721785285165478, 0.14659363199499076, 0.13353013022081506, 0.12276276667155495, 0.033837159357331226, 0.035439072405216265, 0.0020747802790516134, 0.027077838184815683, 0.06074052392159823, 0.0427082495059693, 0.06496269869452154, 0.051788127367341064, 0.02049172690604406, 0.04381516436422428, 0.02999890134519645, 0.022192317511454007, 0.015651439785737575, 9.999999999998899e-05, 0.007529710090281694, 0.05076006817625345, 0.014269720654441542, 0.04155190763954675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0992440487327485, 0.02376718659319088, 0.08697487924473701, 0.0611857671329431, 0.009914970930438916, 9.999999999998899e-05, 0.14520130798672803, 0.03515755001618781, 0.020339845661239142, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0057490274650966455, 0.00032945653493843263, 0.0019728615410056216, 0.00010775760579850857, 0.015192361472184168, 0.009326300728121684, 0.013721232448658305, 0.0102612691750259, 0.012418247551392092, 0.23618137540668083, 0.21529030338525346, 0.21716474891922488, 0.22902287970488755, 0.2219008699401498, 0.21492551877142752, 0.2244561952582761, 0.1865370514690795, 0.24012062166548298, 0.05737511951135188, 0.04067714170410075, 0.04515685430537941, 0.07149079133954106, 0.0643439937135849, 0.05967885033787601, 0.04890480347275117, 0.038670791820968775, 0.03414229198775176, 0.13060901836307381, 0.14079498298183935, 0.15745774495811526, 0.11170324415977884, 0.12768896666767438, 0.11249159573877532, 0.1442305072642781, 0.12834084934187395, 0.15219996034405447, 0.1752896712866825, 0.148674047568367, 0.16193338816728797, 0.18491568107856415, 0.16426364354219147, 0.17572795420122533, 0.19264396041361653, 0.17679607179441303, 0.14565062136867823, 0.12376905801565063, 0.14002145916111608, 0.08888537124744889, 0.13059896131093662, 0.12070905613047145, 0.1250718973771232, 0.09949502215815753, 0.11303891941641198, 0.15728946384471887, 0.17141872229910682, 0.18967777697068655, 0.16881031061075158, 0.17321689786972894, 0.1509112014631373, 0.17409408875529264, 0.19516275327276345, 0.14148133271610264, 0.16892066367013647, 0.13746008681748556, 0.13213064802749208, 0.1402163321446267, 0.16132196564993828, 0.1513067235380593, 0.16222345300818575, 0.15333080604713634, 0.15246469116022532, 0.15345913440878267, 0.1573416236295474, 0.11909343798938776, 0.12930724620579825, 0.15148804899324309, 0.12256811617810492, 0.11755475362408796, 0.14597175740981183, 0.1235976841677997, 0.13717602673595486, 0.1209600916575444, 0.10870089529987614, 0.11085576867895375, 0.1404644554288048, 0.13135545623596312, 0.19977361675100336, 0.13578893186049923, 0.12734283697739524, 0.11218310207073778, 0.2007265735993592, 0.1956642230260751, 0.2266404530555023, 0.18008271527110697, 0.18969781066029268, 0.17273953603263503, 0.1833268713916849, 0.1940197260932628, 0.17005216053847616, 0.07000284738068152, 0.0714291186185334, 0.06392778155414602, 0.0794979310417484, 0.057959041888406504, 0.07022532582167129, 0.058542756864347734, 0.05166650933349248, 0.06614816333625673]}, "mutation_prompt": null}
{"id": "f1baf356-7764-4e76-be6e-f77a88d40ff4", "solution": "import numpy as np\n\nclass HybridGADEWithLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_min = 0.1\n        F_max = 0.9\n        CR_min = 0.1\n        CR_max = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = target_to_bounds(F_i, F_min, F_max)  # Adaptive adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "HybridGADEWithLocalSearchImproved", "description": "Adding adaptive parameter control for mutation rate in Differential Evolution to enhance exploration and exploitation balance.", "configspace": "", "generation": 43, "fitness": 0.12937254200855738, "feedback": "The algorithm HybridGADEWithLocalSearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "37bbac75-e2f4-47a1-b55a-b53a2e13d696", "metadata": {"aucs": [0.26726378366482784, 0.20133371446369208, 0.2133788744636027, 0.23835927656833322, 0.198474247740827, 0.21504732678131588, 0.24231894162463374, 0.19989379655371753, 0.216413636596121, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08267155965504336, 0.053935168565244385, 0.07173817836756768, 0.07982663689306246, 0.052470069837951105, 0.06583730174934188, 0.049330957409004395, 0.04756339559128231, 0.06153740194173496, 0.06494853223817376, 0.03090798950581153, 0.039631293575383975, 0.08678261233333473, 0.04352136412787766, 0.03903033075286966, 0.043249799415797874, 0.02337986771933298, 0.04675161239918468, 0.9287686482809334, 0.9205347718202386, 0.8773095954539711, 0.8531151530956236, 0.919020176002083, 0.8905882503707307, 0.883195680785279, 0.8922280602578964, 0.8959234423470669, 0.09273243798643782, 0.06238345984538152, 0.06065238866574496, 0.10415465197392582, 0.10248768737804625, 0.09393287124936656, 0.13122386200616543, 0.10174640637098731, 0.07092500237220356, 0.1523092526590497, 0.09550253437104217, 0.11260586483080315, 0.08502757765098778, 0.13593346434276377, 0.13721785285165478, 0.14659363199499076, 0.13353013022081506, 0.12276276667155495, 0.033837159357331226, 0.035439072405216265, 0.0020747802790516134, 0.027077838184815683, 0.06074052392159823, 0.0427082495059693, 0.06496269869452154, 0.051788127367341064, 0.02049172690604406, 0.04381516436422428, 0.02999890134519645, 0.022192317511454007, 0.015651439785737575, 9.999999999998899e-05, 0.007529710090281694, 0.05076006817625345, 0.014269720654441542, 0.04155190763954675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0992440487327485, 0.02376718659319088, 0.08697487924473701, 0.0611857671329431, 0.009914970930438916, 9.999999999998899e-05, 0.14520130798672803, 0.03515755001618781, 0.020339845661239142, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0057490274650966455, 0.00032945653493843263, 0.0019728615410056216, 0.00010775760579850857, 0.015192361472184168, 0.009326300728121684, 0.013721232448658305, 0.0102612691750259, 0.012418247551392092, 0.23618137540668083, 0.21529030338525346, 0.21716474891922488, 0.22902287970488755, 0.2219008699401498, 0.21492551877142752, 0.2244561952582761, 0.1865370514690795, 0.24012062166548298, 0.05737511951135188, 0.04067714170410075, 0.04515685430537941, 0.07149079133954106, 0.0643439937135849, 0.05967885033787601, 0.04890480347275117, 0.038670791820968775, 0.03414229198775176, 0.13060901836307381, 0.14079498298183935, 0.15745774495811526, 0.11170324415977884, 0.12768896666767438, 0.11249159573877532, 0.1442305072642781, 0.12834084934187395, 0.15219996034405447, 0.1752896712866825, 0.148674047568367, 0.16193338816728797, 0.18491568107856415, 0.16426364354219147, 0.17572795420122533, 0.19264396041361653, 0.17679607179441303, 0.14565062136867823, 0.12376905801565063, 0.14002145916111608, 0.08888537124744889, 0.13059896131093662, 0.12070905613047145, 0.1250718973771232, 0.09949502215815753, 0.11303891941641198, 0.15728946384471887, 0.17141872229910682, 0.18967777697068655, 0.16881031061075158, 0.17321689786972894, 0.1509112014631373, 0.17409408875529264, 0.19516275327276345, 0.14148133271610264, 0.16892066367013647, 0.13746008681748556, 0.13213064802749208, 0.1402163321446267, 0.16132196564993828, 0.1513067235380593, 0.16222345300818575, 0.15333080604713634, 0.15246469116022532, 0.15345913440878267, 0.1573416236295474, 0.11909343798938776, 0.12930724620579825, 0.15148804899324309, 0.12256811617810492, 0.11755475362408796, 0.14597175740981183, 0.1235976841677997, 0.13717602673595486, 0.1209600916575444, 0.10870089529987614, 0.11085576867895375, 0.1404644554288048, 0.13135545623596312, 0.19977361675100336, 0.13578893186049923, 0.12734283697739524, 0.11218310207073778, 0.2007265735993592, 0.1956642230260751, 0.2266404530555023, 0.18008271527110697, 0.18969781066029268, 0.17273953603263503, 0.1833268713916849, 0.1940197260932628, 0.17005216053847616, 0.07000284738068152, 0.0714291186185334, 0.06392778155414602, 0.0794979310417484, 0.057959041888406504, 0.07022532582167129, 0.058542756864347734, 0.05166650933349248, 0.06614816333625673]}, "mutation_prompt": null}
{"id": "466ced54-e9bc-4453-b048-9f510dd0cd11", "solution": "import numpy as np\n\nclass HybridGADEWithLocalSearchRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    \n                    # Dynamic adjustment of F_i based on individual performance\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i)) if func(mutated) < func(current) else F_i\n                    \n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "HybridGADEWithLocalSearchRefined", "description": "Introducing a dynamic mutation strategy based on individual performance for each candidate solution in Differential Evolution.", "configspace": "", "generation": 44, "fitness": 0.12095863506462658, "feedback": "The algorithm HybridGADEWithLocalSearchRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "37bbac75-e2f4-47a1-b55a-b53a2e13d696", "metadata": {"aucs": [0.2093554083200252, 0.20609870148403164, 0.17514480123149456, 0.17084751855206448, 0.19011007644611755, 0.2186022832804222, 0.21335190866424458, 0.2195635251902036, 0.2251425515653207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04728833484250117, 0.04226606211965078, 0.05648110334752687, 0.044680592563981714, 0.03757651577472754, 0.03745105824556427, 0.04477581735889091, 0.05102835116632687, 0.04364519360880981, 0.0627303964518966, 0.026955583032524544, 0.06414546759659812, 0.03155785888205187, 0.025211170200737598, 0.03653341487549644, 0.025737038790256128, 0.02295977338700106, 0.02882119766215452, 0.818856592121401, 0.867183117872822, 0.8060274666185341, 0.8152851065480177, 0.9245954880017598, 0.8705272358683633, 0.8525069848227703, 0.830682445294323, 0.8764348516967742, 0.0788899006484618, 0.0540024482697794, 0.0540328904033337, 0.13949320889040862, 0.09936616119709529, 0.05564314169967077, 0.08761670408276767, 0.07792258085548898, 0.08807459468634349, 0.10851881716031753, 0.0702117675946714, 0.11283050742063627, 0.12256962453918041, 0.1232193117952104, 0.11749338977487644, 0.11124448537135068, 0.11711010999369387, 0.12904932243083278, 0.02141577156985841, 0.02161321018021134, 0.004566145744392958, 0.018052431836012683, 0.019029557128314223, 0.005749442556897022, 0.011597293547862542, 0.0553397777206972, 0.05895711102063128, 0.04710558971484202, 0.0052530543391942075, 0.006776358286706641, 0.029034753884540132, 0.04525935876707665, 0.03485104150871032, 0.036808927493391264, 0.03460940536977064, 0.029909226195343752, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.101861786415683, 0.04862470794582974, 0.07403169794404019, 0.07421111822677262, 0.025322100550501436, 0.020725448750236297, 0.06920935916632898, 0.03465952950952633, 0.010793347486626637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014046476245417328, 0.001128948932245688, 0.00287821960719159, 0.0012365085311688562, 9.999999999998899e-05, 9.999999999998899e-05, 0.012036596377840048, 0.026049022407793387, 0.010765366344645533, 0.21150042749864384, 0.23203302544324012, 0.2188357381551106, 0.18993592877908472, 0.2182587744833302, 0.2049118574937645, 0.20914916650205684, 0.21044784372552316, 0.1930838282157441, 0.04029599119699456, 0.04471694613412602, 0.032674084313983665, 0.03049457457849225, 0.03616733189337884, 0.046792302317004264, 0.04510060175024022, 0.03969115764811537, 0.04306936233729486, 0.1398333332282906, 0.12845269442371465, 0.1270665214006742, 0.1206437140651071, 0.12712677071451706, 0.12547182548156666, 0.15670003295094537, 0.11877956402897871, 0.12506500683018817, 0.17032609012898248, 0.1433791981792878, 0.14164396502533838, 0.16937766828436418, 0.15835084087090123, 0.16317944450177635, 0.16224780408758765, 0.13134555408241855, 0.16964417701270462, 0.10673291806335183, 0.06972880211169252, 0.09440985276729841, 0.1164821172429984, 0.10942251721500229, 0.07590956533755855, 0.11661853782739129, 0.0855470070515636, 0.09953998870641023, 0.1739997185796095, 0.16076933707551033, 0.1463331907284714, 0.1683006650396046, 0.17306239580538718, 0.16811169908132073, 0.1850100248356069, 0.14234814924485295, 0.15855102146295252, 0.15440176735029743, 0.12242892945974726, 0.13919458046141553, 0.1489285529737706, 0.1531867817850332, 0.15042938837212072, 0.15383733421019752, 0.12646888517204113, 0.14727485034172805, 0.18747665202111907, 0.1465916346827114, 0.13148296998024855, 0.12775980877518045, 0.12268562585497456, 0.11427511563271564, 0.1706356432550834, 0.14508537234330066, 0.15181081252941253, 0.14828617364429397, 0.1377361088288399, 0.1036052312786806, 0.2014216145707819, 0.12704819898340247, 0.0909824634492985, 0.21398503032434624, 0.11256978290372122, 0.11365347652463043, 0.18185877133724349, 0.1839044838861782, 0.17941479679680727, 0.17048404588017507, 0.18447665424264015, 0.17437795883019191, 0.18097367021984756, 0.18738857521566676, 0.20743890546508692, 0.06089135190052053, 0.037631926533286286, 0.04511843614684352, 0.047969551922209974, 0.06372447799217784, 0.06646138709484384, 0.057130824643115696, 0.062423195031964474, 0.04426589618646337]}, "mutation_prompt": null}
{"id": "48b3ce38-4b34-4424-a95e-64cd749f4be9", "solution": "import numpy as np\n\nclass HybridGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def mutate_gaussian(candidate, std_dev):\n            mutated = target_to_bounds(candidate + std_dev * np.random.randn(self.dim), -5.0, 5.0)\n            return mutated\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    if np.random.rand() < 0.5:\n                        F_i = F + 0.1 * np.random.randn()\n                        F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i\n                    else:\n                        F_i = F\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "HybridGADEWithLocalSearch", "description": "Enhancing local search capability by incorporating a Gaussian mutation strategy for more effective exploration.", "configspace": "", "generation": 45, "fitness": 0.12937254200855738, "feedback": "The algorithm HybridGADEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "37bbac75-e2f4-47a1-b55a-b53a2e13d696", "metadata": {"aucs": [0.26726378366482784, 0.20133371446369208, 0.2133788744636027, 0.23835927656833322, 0.198474247740827, 0.21504732678131588, 0.24231894162463374, 0.19989379655371753, 0.216413636596121, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08267155965504336, 0.053935168565244385, 0.07173817836756768, 0.07982663689306246, 0.052470069837951105, 0.06583730174934188, 0.049330957409004395, 0.04756339559128231, 0.06153740194173496, 0.06494853223817376, 0.03090798950581153, 0.039631293575383975, 0.08678261233333473, 0.04352136412787766, 0.03903033075286966, 0.043249799415797874, 0.02337986771933298, 0.04675161239918468, 0.9287686482809334, 0.9205347718202386, 0.8773095954539711, 0.8531151530956236, 0.919020176002083, 0.8905882503707307, 0.883195680785279, 0.8922280602578964, 0.8959234423470669, 0.09273243798643782, 0.06238345984538152, 0.06065238866574496, 0.10415465197392582, 0.10248768737804625, 0.09393287124936656, 0.13122386200616543, 0.10174640637098731, 0.07092500237220356, 0.1523092526590497, 0.09550253437104217, 0.11260586483080315, 0.08502757765098778, 0.13593346434276377, 0.13721785285165478, 0.14659363199499076, 0.13353013022081506, 0.12276276667155495, 0.033837159357331226, 0.035439072405216265, 0.0020747802790516134, 0.027077838184815683, 0.06074052392159823, 0.0427082495059693, 0.06496269869452154, 0.051788127367341064, 0.02049172690604406, 0.04381516436422428, 0.02999890134519645, 0.022192317511454007, 0.015651439785737575, 9.999999999998899e-05, 0.007529710090281694, 0.05076006817625345, 0.014269720654441542, 0.04155190763954675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0992440487327485, 0.02376718659319088, 0.08697487924473701, 0.0611857671329431, 0.009914970930438916, 9.999999999998899e-05, 0.14520130798672803, 0.03515755001618781, 0.020339845661239142, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0057490274650966455, 0.00032945653493843263, 0.0019728615410056216, 0.00010775760579850857, 0.015192361472184168, 0.009326300728121684, 0.013721232448658305, 0.0102612691750259, 0.012418247551392092, 0.23618137540668083, 0.21529030338525346, 0.21716474891922488, 0.22902287970488755, 0.2219008699401498, 0.21492551877142752, 0.2244561952582761, 0.1865370514690795, 0.24012062166548298, 0.05737511951135188, 0.04067714170410075, 0.04515685430537941, 0.07149079133954106, 0.0643439937135849, 0.05967885033787601, 0.04890480347275117, 0.038670791820968775, 0.03414229198775176, 0.13060901836307381, 0.14079498298183935, 0.15745774495811526, 0.11170324415977884, 0.12768896666767438, 0.11249159573877532, 0.1442305072642781, 0.12834084934187395, 0.15219996034405447, 0.1752896712866825, 0.148674047568367, 0.16193338816728797, 0.18491568107856415, 0.16426364354219147, 0.17572795420122533, 0.19264396041361653, 0.17679607179441303, 0.14565062136867823, 0.12376905801565063, 0.14002145916111608, 0.08888537124744889, 0.13059896131093662, 0.12070905613047145, 0.1250718973771232, 0.09949502215815753, 0.11303891941641198, 0.15728946384471887, 0.17141872229910682, 0.18967777697068655, 0.16881031061075158, 0.17321689786972894, 0.1509112014631373, 0.17409408875529264, 0.19516275327276345, 0.14148133271610264, 0.16892066367013647, 0.13746008681748556, 0.13213064802749208, 0.1402163321446267, 0.16132196564993828, 0.1513067235380593, 0.16222345300818575, 0.15333080604713634, 0.15246469116022532, 0.15345913440878267, 0.1573416236295474, 0.11909343798938776, 0.12930724620579825, 0.15148804899324309, 0.12256811617810492, 0.11755475362408796, 0.14597175740981183, 0.1235976841677997, 0.13717602673595486, 0.1209600916575444, 0.10870089529987614, 0.11085576867895375, 0.1404644554288048, 0.13135545623596312, 0.19977361675100336, 0.13578893186049923, 0.12734283697739524, 0.11218310207073778, 0.2007265735993592, 0.1956642230260751, 0.2266404530555023, 0.18008271527110697, 0.18969781066029268, 0.17273953603263503, 0.1833268713916849, 0.1940197260932628, 0.17005216053847616, 0.07000284738068152, 0.0714291186185334, 0.06392778155414602, 0.0794979310417484, 0.057959041888406504, 0.07022532582167129, 0.058542756864347734, 0.05166650933349248, 0.06614816333625673]}, "mutation_prompt": null}
{"id": "60715a1d-70cd-4e52-8e30-3a15c3c51af7", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearch", "description": "Enhancing the diversity of the population through adaptive mutation strategy for Differential Evolution.", "configspace": "", "generation": 46, "fitness": 0.1309661409791285, "feedback": "The algorithm AdaptiveMutationGADEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "37bbac75-e2f4-47a1-b55a-b53a2e13d696", "metadata": {"aucs": [0.24343649148078728, 0.2138346891424926, 0.19093849776620442, 0.20076131030523703, 0.21115678114314917, 0.23772391568176277, 0.2311633989211478, 0.2410282389963797, 0.2456108267457816, 0.006250180661428795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627066026367577, 0.048050031653564695, 0.049102697104673965, 0.04853711766247981, 0.045942585025245175, 0.05640747602304197, 0.06329494825436033, 0.04648673372863099, 0.05789885952844254, 0.06352128282582581, 0.04500972849362439, 0.062156529363370794, 0.05419741320605531, 0.041746223168344865, 0.041332408553935385, 0.02684663659952735, 0.03906256091744531, 0.041188349458982754, 0.8921484414919729, 0.9200539026998826, 0.8842596314537179, 0.8896286460706208, 0.9545366399542784, 0.9226794502726119, 0.9120150114791342, 0.8982552678513623, 0.92604627554834, 0.11861658954313403, 0.07248200794585613, 0.07102275699134697, 0.14742609817970642, 0.10590804080000582, 0.07803701806534569, 0.08892090177337009, 0.06184071330727969, 0.10754364678370876, 0.11097861851655944, 0.05723788657434725, 0.11907212216145491, 0.1320046152085288, 0.12438403422563638, 0.1618964615046674, 0.10708212508823944, 0.12890788421022048, 0.14461177251727053, 0.03057480467738516, 0.07835690212615443, 0.029361341314103062, 0.04462203025318756, 0.03324954499771282, 0.0336043804503412, 0.03856231039758984, 0.0669000715023802, 0.08755459042058178, 0.036793695795509285, 0.0215701126711898, 0.023484057462292762, 0.038949819934972596, 0.04735382607521099, 0.0651908135467325, 0.05052594957984324, 0.061410682607037415, 0.0536338963971722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10912677377467772, 0.0472155139976147, 0.0477906908377701, 0.046218874030385604, 0.03715646025107178, 0.0034261322242682413, 0.07577102991649276, 0.03517261222546009, 0.031853053035227785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006256222714690507, 0.005375030239042289, 0.004001792636550094, 0.008321987665448782, 9.999999999998899e-05, 9.999999999998899e-05, 0.018694008614729696, 0.03228229223449686, 0.017968307344189083, 0.22435324802116952, 0.2498566108394633, 0.2411244990188801, 0.23134538690587336, 0.2352793641767258, 0.2323695426470046, 0.2093860618190736, 0.207958073815532, 0.2446729316960906, 0.04457413494969731, 0.042679384094078565, 0.03266849886941714, 0.04530934398415998, 0.053860042254356255, 0.04592211043707972, 0.0387337679662807, 0.047283681860520343, 0.03704568143914966, 0.14637846807396815, 0.13669439657871318, 0.13200610854615447, 0.12774267753433832, 0.11828146648968108, 0.12578049952435444, 0.146783935089019, 0.13652986608969409, 0.1255052045410272, 0.17297188413069076, 0.13125119915282213, 0.14508576899269832, 0.20080556495977775, 0.16558714396967567, 0.1782584907447572, 0.16318633764398205, 0.13254556720870114, 0.15075818035006538, 0.15855433687038145, 0.06462150428620317, 0.0947610358111407, 0.12735573113073229, 0.10822180577719132, 0.08936962413268434, 0.11834748208583135, 0.11669744554182382, 0.10834448133838104, 0.17133929236354783, 0.1668268894064242, 0.16479644128057847, 0.19385182636730358, 0.1750576816153092, 0.18501920244848935, 0.20069740303975014, 0.15507955338716672, 0.16085983315654573, 0.16191609436629917, 0.14227223258055222, 0.15465514872277764, 0.16373185331848894, 0.15266893316491637, 0.14839917176889028, 0.15783076853963718, 0.1413348168570805, 0.15551894474075179, 0.18413945837347467, 0.15354819548121235, 0.13589790146891134, 0.1421244241514802, 0.1196957262491396, 0.11664308661670253, 0.17997887683163938, 0.13928607739859422, 0.16097086002985106, 0.16125650963723437, 0.14112362487001995, 0.09369804160212702, 0.21411093683084415, 0.13235130145392215, 0.11210928655956742, 0.2456437532039134, 0.10267529930001729, 0.13850030240675948, 0.19393746532134826, 0.1806664430335222, 0.1863965722535782, 0.1796238278961091, 0.17821637610981556, 0.18993859930046542, 0.16976530385926147, 0.18942269941401035, 0.1843762629591641, 0.06300687141248695, 0.05309455704309618, 0.05227073592206777, 0.05060547444964669, 0.05943551027492466, 0.08072772903290804, 0.05535061160960408, 0.048005672817820755, 0.05370467295725734]}, "mutation_prompt": null}
{"id": "c68a4e76-d866-428f-ad0f-e9ae62ee979c", "solution": "import numpy as np\n\nclass HybridPSOWithSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        initial_temp = 10.0\n        cooling_rate = 0.95\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            temp = initial_temp\n\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update with Simulated Annealing\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Simulated Annealing\n                proposal = population[i] + 0.1 * np.random.randn(self.dim)\n                energy_diff = func(proposal) - func(population[i])\n                if energy_diff < 0 or np.random.rand() < np.exp(-energy_diff / temp):\n                    population[i] = target_to_bounds(proposal, -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n                temp *= cooling_rate\n\n        return best_solution", "name": "HybridPSOWithSimulatedAnnealing", "description": "Improving global exploration and exploitation through a hybridization of Particle Swarm Optimization and Simulated Annealing for better convergence.", "configspace": "", "generation": 47, "fitness": 0.12933832767473702, "feedback": "The algorithm HybridPSOWithSimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "60715a1d-70cd-4e52-8e30-3a15c3c51af7", "metadata": {"aucs": [0.2320625171960704, 0.19035185851457415, 0.22094551538839668, 0.26161426697486234, 0.2393946910990129, 0.23343439473342742, 0.2648049874961568, 0.2417283230687003, 0.2701075354501197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021268379884033295, 9.999999999998899e-05, 9.999999999998899e-05, 0.05661416974819, 0.06501154442687462, 0.055655749216650285, 0.0767504081085375, 0.038550264150393976, 0.045714836379689205, 0.057544191978909254, 0.05174906093855247, 0.04769152219776551, 0.04231866316199995, 0.03411706791611446, 0.05060900651880962, 0.044984784789721344, 0.04315429328001519, 0.030478574203284925, 0.050282036373959116, 0.02890163265665413, 0.06666816101021922, 0.8555441728107038, 0.9122006741907378, 0.859154961914214, 0.8683436696581341, 0.9181000129826894, 0.8883160540920441, 0.8494267672424332, 0.9351914714932265, 0.9160210936252978, 0.10552237726367297, 0.0636448217359522, 0.06980955240649944, 0.08883478566813885, 0.11324346729824242, 0.08374048357011687, 0.07740785645352721, 0.10556988263230449, 0.08473940368374788, 0.11299866745026743, 0.09738639570539531, 0.13765849819953313, 0.11300232719826386, 0.1140297470389009, 0.11757907236850096, 0.13935738656958274, 0.11419106552813085, 0.14319966483226798, 0.02068006844818704, 0.06048372589170048, 0.08058987963124964, 0.007208704007078959, 0.03832734164899265, 0.007719994731331115, 0.029332595202098632, 0.004340819582471678, 0.011772210983013065, 0.018390000064583578, 0.04170536273184533, 0.006422477830569151, 0.06295216283359728, 9.999999999998899e-05, 0.040404321584183944, 0.0551454655838981, 0.02965814045071724, 0.0363988178337471, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05430236912521336, 0.03491473521175137, 0.07370165268910756, 0.06627488367659828, 0.017947598469474024, 0.07252095138293446, 0.044517231120904555, 0.030890813177654852, 0.012445952273322458, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005906567001399021, 0.003976695872239366, 0.0031082184466875162, 9.999999999998899e-05, 0.0019010879645869894, 0.0069701281547029925, 0.005882626443309724, 0.011096155133712093, 0.21815404789096682, 0.2350522625384317, 0.2239370053642239, 0.2197585385019979, 0.2331410494386218, 0.19551315706480332, 0.2335055539295119, 0.19954123549350844, 0.21947691548559767, 0.05941098505044318, 0.05011727399762089, 0.06190975781320407, 0.047150579554703254, 0.05791778174474471, 0.05704962496857546, 0.043613747231957545, 0.05391449015510841, 0.042413476968659825, 0.12279908119520477, 0.13813451387815, 0.17842033252639233, 0.12119394898455116, 0.1249394179064951, 0.13208144081497952, 0.14378830904819329, 0.11243531657066119, 0.19505102018923126, 0.15802028325603645, 0.17008733167719092, 0.1537672493259009, 0.2103623141563341, 0.16873498654281016, 0.14137102862235074, 0.2019555475213789, 0.16535501671239194, 0.2207591767182091, 0.1218998525052637, 0.09911340938177127, 0.08392421735189892, 0.1651832463859384, 0.09714073107677978, 0.12514418199769684, 0.11561476635981305, 0.11678735315633071, 0.10149477961187514, 0.1531302720112302, 0.19160209442310216, 0.15614729956741846, 0.19763046492718017, 0.1535036831247324, 0.16263010761624352, 0.2029968033941495, 0.16435754288643856, 0.1554585480658598, 0.1592576676411689, 0.13590323254740055, 0.14565365274745545, 0.14252498037994832, 0.1583197671082427, 0.16072611361256384, 0.14573407934824156, 0.1486612962790005, 0.15596532847165723, 0.15959253128250694, 0.12792870079259788, 0.127007314366263, 0.16288348649143758, 0.13899891124991592, 0.11459551658993483, 0.12083936618412261, 0.1317717451152174, 0.11481029693174682, 0.14786040003169543, 0.11339743628203525, 0.07556619785700003, 0.15664493192178108, 0.09578219089366535, 0.11686348461282892, 0.27988841322465574, 0.0854571314736613, 0.1421754994857387, 0.19158090176373477, 0.20388945253262203, 0.19923063067373104, 0.208997528346489, 0.18485018007190224, 0.18110672700913222, 0.1744140636787539, 0.20025974701228777, 0.18930956480975458, 0.06813581705810101, 0.0888612920878199, 0.06503177040130159, 0.06515032888039529, 0.0711176819336704, 0.05983871851528999, 0.07953966690808012, 0.06856532636697343, 0.05028402843072455]}, "mutation_prompt": null}
{"id": "db5a6cae-41e8-43dd-9492-f99097f8331f", "solution": "import numpy as np\n\nclass ImprovedAdaptiveMutationGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n\n            # Crowding-based Selection\n            fitness_values = np.array([func(individual) for individual in population])\n            sorted_indices = np.argsort(fitness_values)\n            population = population[sorted_indices]\n\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "ImprovedAdaptiveMutationGADEWithLocalSearch", "description": "Improving the diversity maintenance strategy by implementing a novel crowding-based selection mechanism to maintain a diverse population.", "configspace": "", "generation": 48, "fitness": 0.1293818299711302, "feedback": "The algorithm ImprovedAdaptiveMutationGADEWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "60715a1d-70cd-4e52-8e30-3a15c3c51af7", "metadata": {"aucs": [0.2207192006454759, 0.20186721247252004, 0.19998590351393508, 0.19044493897578707, 0.19842178044841807, 0.22159930363707636, 0.2047233738659071, 0.2244037966479554, 0.22730231164553028, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00052629943235738, 0.0004385432142651746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03774550507650398, 0.04094527553445171, 0.050781198825146756, 0.047709092023617616, 0.06360632349372441, 0.052931130553162675, 0.06916932628979888, 0.043802014007982115, 0.07351920370570986, 0.042354076504573124, 0.022392004246875374, 0.039299912243502155, 0.04673724529084211, 0.024662785903107554, 0.041612705252151105, 0.04361129443317491, 0.04823231128749539, 0.04424441049301153, 0.9534193956278568, 0.8757316394718442, 0.8086503707509365, 0.904886634494717, 0.8609278002427674, 0.8895495859510685, 0.8726762911013755, 0.9053962392813285, 0.8689527970577536, 0.10958783197913347, 0.08254473856290001, 0.07596858955499919, 0.10358044128837085, 0.10600531862087847, 0.11319992498780407, 0.11908381806167778, 0.05896832134564178, 0.1288938353899668, 0.12977004980079454, 0.15978912302021508, 0.10970975116849091, 0.1545246311166738, 0.12261617532263058, 0.14011812226243925, 0.1522179832585523, 0.11044750625782851, 0.08963558965722329, 0.06504307264882103, 0.06251925470902264, 0.01975866726972675, 0.04111134301681618, 0.04749059393191424, 0.034124981921606734, 0.09971781579963213, 0.029276935974275164, 0.027722661522189274, 0.04692792945405877, 0.043910086049884334, 0.044387767377679466, 0.03951878736310099, 0.01267838385128739, 0.051091272122115505, 0.02589675660318913, 0.037918444239464555, 0.0025158704592835868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02423056985404548, 0.016049933699928576, 0.0612925157291464, 0.05846363800873622, 0.012403080852097625, 0.013618035733771294, 0.013286367997444315, 0.010380547928110717, 0.0005235140563414342, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002754528932616962, 0.010859238589778997, 0.00888496991003107, 9.999999999998899e-05, 9.999999999998899e-05, 0.00780375853659665, 0.01656964035400943, 0.026821185925676727, 0.020373229789125036, 0.2297322229348704, 0.2506979385260849, 0.23623051873022405, 0.23729012808808725, 0.2150878941843215, 0.20376302934563983, 0.22093987802614157, 0.25403096230539446, 0.20148742781947393, 0.06656289862788312, 0.0435247067280381, 0.05671807140924645, 0.034579779626172424, 0.045682606347976606, 0.04338692674781308, 0.06517667808218974, 0.040397851425618136, 0.059661399223703615, 0.1030762633132114, 0.13283901459523417, 0.11613106553392649, 0.10684148828577378, 0.12834449291153505, 0.1464247704401649, 0.1185598866338674, 0.1394851130656054, 0.1729645141352728, 0.18960879620059212, 0.16355709721174494, 0.15789040984223224, 0.17777163892068215, 0.16350442838204415, 0.1512280207850335, 0.17968922810875287, 0.18490952403319028, 0.17699783511418865, 0.1308066173122543, 0.11827886400359655, 0.09877830450065772, 0.1384891034175032, 0.11835130444239017, 0.10980542224071066, 0.12517494512147864, 0.10333047960956698, 0.09445180112303353, 0.15377251853995255, 0.15704298145847662, 0.184349274630476, 0.16826426756069635, 0.16532748090193472, 0.16360988888083872, 0.18724100253634401, 0.14900913796976933, 0.1556511721088356, 0.1559087947824067, 0.15989928460145586, 0.15603803035626151, 0.15821323663807563, 0.12867774769131013, 0.1485299220641202, 0.15547436298935957, 0.12028232015475382, 0.16872673519446857, 0.140595635944178, 0.14636204460140745, 0.12482874821637302, 0.14768098408595776, 0.12089097641065438, 0.307176899564368, 0.16160098535056755, 0.11813740032618969, 0.13589549306160442, 0.1536890078843446, 0.11412697091056556, 0.11904085406556952, 0.1558877173403369, 0.2992968157567477, 0.16343948653828033, 0.23653088372566067, 0.11015036868226324, 0.12743833892445744, 0.18787385157205416, 0.19196223935944468, 0.17550692584371885, 0.18054405112724858, 0.17680663684859066, 0.19512791496566906, 0.17834546415194363, 0.18962353388700692, 0.18939181500400515, 0.04517853559545071, 0.05853779746969434, 0.05327148166617901, 0.06000856388000342, 0.06323741283898565, 0.07508060473469558, 0.06648995332179275, 0.053782037361882806, 0.06541097071211721]}, "mutation_prompt": null}
{"id": "24da0acd-b72b-4740-b861-37bc8ef8513b", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearch", "description": "Enhancing the diversity of the population through adaptive mutation strategy for Differential Evolution.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60715a1d-70cd-4e52-8e30-3a15c3c51af7", "metadata": {"aucs": [0.24343649148078728, 0.2138346891424926, 0.19093849776620442, 0.20076131030523703, 0.21115678114314917, 0.23772391568176277, 0.2311633989211478, 0.2410282389963797, 0.2456108267457816, 0.006250180661428795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627066026367577, 0.048050031653564695, 0.049102697104673965, 0.04853711766247981, 0.045942585025245175, 0.05640747602304197, 0.06329494825436033, 0.04648673372863099, 0.05789885952844254, 0.06352128282582581, 0.04500972849362439, 0.062156529363370794, 0.05419741320605531, 0.041746223168344865, 0.041332408553935385, 0.02684663659952735, 0.03906256091744531, 0.041188349458982754, 0.8921484414919729, 0.9200539026998826, 0.8842596314537179, 0.8896286460706208, 0.9545366399542784, 0.9226794502726119, 0.9120150114791342, 0.8982552678513623, 0.92604627554834, 0.11861658954313403, 0.07248200794585613, 0.07102275699134697, 0.14742609817970642, 0.10590804080000582, 0.07803701806534569, 0.08892090177337009, 0.06184071330727969, 0.10754364678370876, 0.11097861851655944, 0.05723788657434725, 0.11907212216145491, 0.1320046152085288, 0.12438403422563638, 0.1618964615046674, 0.10708212508823944, 0.12890788421022048, 0.14461177251727053, 0.03057480467738516, 0.07835690212615443, 0.029361341314103062, 0.04462203025318756, 0.03324954499771282, 0.0336043804503412, 0.03856231039758984, 0.0669000715023802, 0.08755459042058178, 0.036793695795509285, 0.0215701126711898, 0.023484057462292762, 0.038949819934972596, 0.04735382607521099, 0.0651908135467325, 0.05052594957984324, 0.061410682607037415, 0.0536338963971722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10912677377467772, 0.0472155139976147, 0.0477906908377701, 0.046218874030385604, 0.03715646025107178, 0.0034261322242682413, 0.07577102991649276, 0.03517261222546009, 0.031853053035227785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006256222714690507, 0.005375030239042289, 0.004001792636550094, 0.008321987665448782, 9.999999999998899e-05, 9.999999999998899e-05, 0.018694008614729696, 0.03228229223449686, 0.017968307344189083, 0.22435324802116952, 0.2498566108394633, 0.2411244990188801, 0.23134538690587336, 0.2352793641767258, 0.2323695426470046, 0.2093860618190736, 0.207958073815532, 0.2446729316960906, 0.04457413494969731, 0.042679384094078565, 0.03266849886941714, 0.04530934398415998, 0.053860042254356255, 0.04592211043707972, 0.0387337679662807, 0.047283681860520343, 0.03704568143914966, 0.14637846807396815, 0.13669439657871318, 0.13200610854615447, 0.12774267753433832, 0.11828146648968108, 0.12578049952435444, 0.146783935089019, 0.13652986608969409, 0.1255052045410272, 0.17297188413069076, 0.13125119915282213, 0.14508576899269832, 0.20080556495977775, 0.16558714396967567, 0.1782584907447572, 0.16318633764398205, 0.13254556720870114, 0.15075818035006538, 0.15855433687038145, 0.06462150428620317, 0.0947610358111407, 0.12735573113073229, 0.10822180577719132, 0.08936962413268434, 0.11834748208583135, 0.11669744554182382, 0.10834448133838104, 0.17133929236354783, 0.1668268894064242, 0.16479644128057847, 0.19385182636730358, 0.1750576816153092, 0.18501920244848935, 0.20069740303975014, 0.15507955338716672, 0.16085983315654573, 0.16191609436629917, 0.14227223258055222, 0.15465514872277764, 0.16373185331848894, 0.15266893316491637, 0.14839917176889028, 0.15783076853963718, 0.1413348168570805, 0.15551894474075179, 0.18413945837347467, 0.15354819548121235, 0.13589790146891134, 0.1421244241514802, 0.1196957262491396, 0.11664308661670253, 0.17997887683163938, 0.13928607739859422, 0.16097086002985106, 0.16125650963723437, 0.14112362487001995, 0.09369804160212702, 0.21411093683084415, 0.13235130145392215, 0.11210928655956742, 0.2456437532039134, 0.10267529930001729, 0.13850030240675948, 0.19393746532134826, 0.1806664430335222, 0.1863965722535782, 0.1796238278961091, 0.17821637610981556, 0.18993859930046542, 0.16976530385926147, 0.18942269941401035, 0.1843762629591641, 0.06300687141248695, 0.05309455704309618, 0.05227073592206777, 0.05060547444964669, 0.05943551027492466, 0.08072772903290804, 0.05535061160960408, 0.048005672817820755, 0.05370467295725734]}, "mutation_prompt": null}
{"id": "78aa806d-2d30-4553-8c20-3f05d0d96803", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearch", "description": "Enhancing the diversity of the population through adaptive mutation strategy for Differential Evolution.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60715a1d-70cd-4e52-8e30-3a15c3c51af7", "metadata": {"aucs": [0.24343649148078728, 0.2138346891424926, 0.19093849776620442, 0.20076131030523703, 0.21115678114314917, 0.23772391568176277, 0.2311633989211478, 0.2410282389963797, 0.2456108267457816, 0.006250180661428795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627066026367577, 0.048050031653564695, 0.049102697104673965, 0.04853711766247981, 0.045942585025245175, 0.05640747602304197, 0.06329494825436033, 0.04648673372863099, 0.05789885952844254, 0.06352128282582581, 0.04500972849362439, 0.062156529363370794, 0.05419741320605531, 0.041746223168344865, 0.041332408553935385, 0.02684663659952735, 0.03906256091744531, 0.041188349458982754, 0.8921484414919729, 0.9200539026998826, 0.8842596314537179, 0.8896286460706208, 0.9545366399542784, 0.9226794502726119, 0.9120150114791342, 0.8982552678513623, 0.92604627554834, 0.11861658954313403, 0.07248200794585613, 0.07102275699134697, 0.14742609817970642, 0.10590804080000582, 0.07803701806534569, 0.08892090177337009, 0.06184071330727969, 0.10754364678370876, 0.11097861851655944, 0.05723788657434725, 0.11907212216145491, 0.1320046152085288, 0.12438403422563638, 0.1618964615046674, 0.10708212508823944, 0.12890788421022048, 0.14461177251727053, 0.03057480467738516, 0.07835690212615443, 0.029361341314103062, 0.04462203025318756, 0.03324954499771282, 0.0336043804503412, 0.03856231039758984, 0.0669000715023802, 0.08755459042058178, 0.036793695795509285, 0.0215701126711898, 0.023484057462292762, 0.038949819934972596, 0.04735382607521099, 0.0651908135467325, 0.05052594957984324, 0.061410682607037415, 0.0536338963971722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10912677377467772, 0.0472155139976147, 0.0477906908377701, 0.046218874030385604, 0.03715646025107178, 0.0034261322242682413, 0.07577102991649276, 0.03517261222546009, 0.031853053035227785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006256222714690507, 0.005375030239042289, 0.004001792636550094, 0.008321987665448782, 9.999999999998899e-05, 9.999999999998899e-05, 0.018694008614729696, 0.03228229223449686, 0.017968307344189083, 0.22435324802116952, 0.2498566108394633, 0.2411244990188801, 0.23134538690587336, 0.2352793641767258, 0.2323695426470046, 0.2093860618190736, 0.207958073815532, 0.2446729316960906, 0.04457413494969731, 0.042679384094078565, 0.03266849886941714, 0.04530934398415998, 0.053860042254356255, 0.04592211043707972, 0.0387337679662807, 0.047283681860520343, 0.03704568143914966, 0.14637846807396815, 0.13669439657871318, 0.13200610854615447, 0.12774267753433832, 0.11828146648968108, 0.12578049952435444, 0.146783935089019, 0.13652986608969409, 0.1255052045410272, 0.17297188413069076, 0.13125119915282213, 0.14508576899269832, 0.20080556495977775, 0.16558714396967567, 0.1782584907447572, 0.16318633764398205, 0.13254556720870114, 0.15075818035006538, 0.15855433687038145, 0.06462150428620317, 0.0947610358111407, 0.12735573113073229, 0.10822180577719132, 0.08936962413268434, 0.11834748208583135, 0.11669744554182382, 0.10834448133838104, 0.17133929236354783, 0.1668268894064242, 0.16479644128057847, 0.19385182636730358, 0.1750576816153092, 0.18501920244848935, 0.20069740303975014, 0.15507955338716672, 0.16085983315654573, 0.16191609436629917, 0.14227223258055222, 0.15465514872277764, 0.16373185331848894, 0.15266893316491637, 0.14839917176889028, 0.15783076853963718, 0.1413348168570805, 0.15551894474075179, 0.18413945837347467, 0.15354819548121235, 0.13589790146891134, 0.1421244241514802, 0.1196957262491396, 0.11664308661670253, 0.17997887683163938, 0.13928607739859422, 0.16097086002985106, 0.16125650963723437, 0.14112362487001995, 0.09369804160212702, 0.21411093683084415, 0.13235130145392215, 0.11210928655956742, 0.2456437532039134, 0.10267529930001729, 0.13850030240675948, 0.19393746532134826, 0.1806664430335222, 0.1863965722535782, 0.1796238278961091, 0.17821637610981556, 0.18993859930046542, 0.16976530385926147, 0.18942269941401035, 0.1843762629591641, 0.06300687141248695, 0.05309455704309618, 0.05227073592206777, 0.05060547444964669, 0.05943551027492466, 0.08072772903290804, 0.05535061160960408, 0.048005672817820755, 0.05370467295725734]}, "mutation_prompt": null}
{"id": "3d66c43b-d35a-4035-a17c-e1a88202aa7a", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearch", "description": "Enhancing the diversity of the population through adaptive mutation strategy for Differential Evolution.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60715a1d-70cd-4e52-8e30-3a15c3c51af7", "metadata": {"aucs": [0.24343649148078728, 0.2138346891424926, 0.19093849776620442, 0.20076131030523703, 0.21115678114314917, 0.23772391568176277, 0.2311633989211478, 0.2410282389963797, 0.2456108267457816, 0.006250180661428795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627066026367577, 0.048050031653564695, 0.049102697104673965, 0.04853711766247981, 0.045942585025245175, 0.05640747602304197, 0.06329494825436033, 0.04648673372863099, 0.05789885952844254, 0.06352128282582581, 0.04500972849362439, 0.062156529363370794, 0.05419741320605531, 0.041746223168344865, 0.041332408553935385, 0.02684663659952735, 0.03906256091744531, 0.041188349458982754, 0.8921484414919729, 0.9200539026998826, 0.8842596314537179, 0.8896286460706208, 0.9545366399542784, 0.9226794502726119, 0.9120150114791342, 0.8982552678513623, 0.92604627554834, 0.11861658954313403, 0.07248200794585613, 0.07102275699134697, 0.14742609817970642, 0.10590804080000582, 0.07803701806534569, 0.08892090177337009, 0.06184071330727969, 0.10754364678370876, 0.11097861851655944, 0.05723788657434725, 0.11907212216145491, 0.1320046152085288, 0.12438403422563638, 0.1618964615046674, 0.10708212508823944, 0.12890788421022048, 0.14461177251727053, 0.03057480467738516, 0.07835690212615443, 0.029361341314103062, 0.04462203025318756, 0.03324954499771282, 0.0336043804503412, 0.03856231039758984, 0.0669000715023802, 0.08755459042058178, 0.036793695795509285, 0.0215701126711898, 0.023484057462292762, 0.038949819934972596, 0.04735382607521099, 0.0651908135467325, 0.05052594957984324, 0.061410682607037415, 0.0536338963971722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10912677377467772, 0.0472155139976147, 0.0477906908377701, 0.046218874030385604, 0.03715646025107178, 0.0034261322242682413, 0.07577102991649276, 0.03517261222546009, 0.031853053035227785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006256222714690507, 0.005375030239042289, 0.004001792636550094, 0.008321987665448782, 9.999999999998899e-05, 9.999999999998899e-05, 0.018694008614729696, 0.03228229223449686, 0.017968307344189083, 0.22435324802116952, 0.2498566108394633, 0.2411244990188801, 0.23134538690587336, 0.2352793641767258, 0.2323695426470046, 0.2093860618190736, 0.207958073815532, 0.2446729316960906, 0.04457413494969731, 0.042679384094078565, 0.03266849886941714, 0.04530934398415998, 0.053860042254356255, 0.04592211043707972, 0.0387337679662807, 0.047283681860520343, 0.03704568143914966, 0.14637846807396815, 0.13669439657871318, 0.13200610854615447, 0.12774267753433832, 0.11828146648968108, 0.12578049952435444, 0.146783935089019, 0.13652986608969409, 0.1255052045410272, 0.17297188413069076, 0.13125119915282213, 0.14508576899269832, 0.20080556495977775, 0.16558714396967567, 0.1782584907447572, 0.16318633764398205, 0.13254556720870114, 0.15075818035006538, 0.15855433687038145, 0.06462150428620317, 0.0947610358111407, 0.12735573113073229, 0.10822180577719132, 0.08936962413268434, 0.11834748208583135, 0.11669744554182382, 0.10834448133838104, 0.17133929236354783, 0.1668268894064242, 0.16479644128057847, 0.19385182636730358, 0.1750576816153092, 0.18501920244848935, 0.20069740303975014, 0.15507955338716672, 0.16085983315654573, 0.16191609436629917, 0.14227223258055222, 0.15465514872277764, 0.16373185331848894, 0.15266893316491637, 0.14839917176889028, 0.15783076853963718, 0.1413348168570805, 0.15551894474075179, 0.18413945837347467, 0.15354819548121235, 0.13589790146891134, 0.1421244241514802, 0.1196957262491396, 0.11664308661670253, 0.17997887683163938, 0.13928607739859422, 0.16097086002985106, 0.16125650963723437, 0.14112362487001995, 0.09369804160212702, 0.21411093683084415, 0.13235130145392215, 0.11210928655956742, 0.2456437532039134, 0.10267529930001729, 0.13850030240675948, 0.19393746532134826, 0.1806664430335222, 0.1863965722535782, 0.1796238278961091, 0.17821637610981556, 0.18993859930046542, 0.16976530385926147, 0.18942269941401035, 0.1843762629591641, 0.06300687141248695, 0.05309455704309618, 0.05227073592206777, 0.05060547444964669, 0.05943551027492466, 0.08072772903290804, 0.05535061160960408, 0.048005672817820755, 0.05370467295725734]}, "mutation_prompt": null}
{"id": "2612bbeb-4475-4a23-a45c-c9463ab65f12", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearch", "description": "Enhancing the diversity of the population through adaptive mutation strategy for Differential Evolution.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60715a1d-70cd-4e52-8e30-3a15c3c51af7", "metadata": {"aucs": [0.24343649148078728, 0.2138346891424926, 0.19093849776620442, 0.20076131030523703, 0.21115678114314917, 0.23772391568176277, 0.2311633989211478, 0.2410282389963797, 0.2456108267457816, 0.006250180661428795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627066026367577, 0.048050031653564695, 0.049102697104673965, 0.04853711766247981, 0.045942585025245175, 0.05640747602304197, 0.06329494825436033, 0.04648673372863099, 0.05789885952844254, 0.06352128282582581, 0.04500972849362439, 0.062156529363370794, 0.05419741320605531, 0.041746223168344865, 0.041332408553935385, 0.02684663659952735, 0.03906256091744531, 0.041188349458982754, 0.8921484414919729, 0.9200539026998826, 0.8842596314537179, 0.8896286460706208, 0.9545366399542784, 0.9226794502726119, 0.9120150114791342, 0.8982552678513623, 0.92604627554834, 0.11861658954313403, 0.07248200794585613, 0.07102275699134697, 0.14742609817970642, 0.10590804080000582, 0.07803701806534569, 0.08892090177337009, 0.06184071330727969, 0.10754364678370876, 0.11097861851655944, 0.05723788657434725, 0.11907212216145491, 0.1320046152085288, 0.12438403422563638, 0.1618964615046674, 0.10708212508823944, 0.12890788421022048, 0.14461177251727053, 0.03057480467738516, 0.07835690212615443, 0.029361341314103062, 0.04462203025318756, 0.03324954499771282, 0.0336043804503412, 0.03856231039758984, 0.0669000715023802, 0.08755459042058178, 0.036793695795509285, 0.0215701126711898, 0.023484057462292762, 0.038949819934972596, 0.04735382607521099, 0.0651908135467325, 0.05052594957984324, 0.061410682607037415, 0.0536338963971722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10912677377467772, 0.0472155139976147, 0.0477906908377701, 0.046218874030385604, 0.03715646025107178, 0.0034261322242682413, 0.07577102991649276, 0.03517261222546009, 0.031853053035227785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006256222714690507, 0.005375030239042289, 0.004001792636550094, 0.008321987665448782, 9.999999999998899e-05, 9.999999999998899e-05, 0.018694008614729696, 0.03228229223449686, 0.017968307344189083, 0.22435324802116952, 0.2498566108394633, 0.2411244990188801, 0.23134538690587336, 0.2352793641767258, 0.2323695426470046, 0.2093860618190736, 0.207958073815532, 0.2446729316960906, 0.04457413494969731, 0.042679384094078565, 0.03266849886941714, 0.04530934398415998, 0.053860042254356255, 0.04592211043707972, 0.0387337679662807, 0.047283681860520343, 0.03704568143914966, 0.14637846807396815, 0.13669439657871318, 0.13200610854615447, 0.12774267753433832, 0.11828146648968108, 0.12578049952435444, 0.146783935089019, 0.13652986608969409, 0.1255052045410272, 0.17297188413069076, 0.13125119915282213, 0.14508576899269832, 0.20080556495977775, 0.16558714396967567, 0.1782584907447572, 0.16318633764398205, 0.13254556720870114, 0.15075818035006538, 0.15855433687038145, 0.06462150428620317, 0.0947610358111407, 0.12735573113073229, 0.10822180577719132, 0.08936962413268434, 0.11834748208583135, 0.11669744554182382, 0.10834448133838104, 0.17133929236354783, 0.1668268894064242, 0.16479644128057847, 0.19385182636730358, 0.1750576816153092, 0.18501920244848935, 0.20069740303975014, 0.15507955338716672, 0.16085983315654573, 0.16191609436629917, 0.14227223258055222, 0.15465514872277764, 0.16373185331848894, 0.15266893316491637, 0.14839917176889028, 0.15783076853963718, 0.1413348168570805, 0.15551894474075179, 0.18413945837347467, 0.15354819548121235, 0.13589790146891134, 0.1421244241514802, 0.1196957262491396, 0.11664308661670253, 0.17997887683163938, 0.13928607739859422, 0.16097086002985106, 0.16125650963723437, 0.14112362487001995, 0.09369804160212702, 0.21411093683084415, 0.13235130145392215, 0.11210928655956742, 0.2456437532039134, 0.10267529930001729, 0.13850030240675948, 0.19393746532134826, 0.1806664430335222, 0.1863965722535782, 0.1796238278961091, 0.17821637610981556, 0.18993859930046542, 0.16976530385926147, 0.18942269941401035, 0.1843762629591641, 0.06300687141248695, 0.05309455704309618, 0.05227073592206777, 0.05060547444964669, 0.05943551027492466, 0.08072772903290804, 0.05535061160960408, 0.048005672817820755, 0.05370467295725734]}, "mutation_prompt": null}
{"id": "feb25776-cb7a-4851-b72b-9a512d5aa28c", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2):\n            child = np.copy(parent1)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearch", "description": "Enhancing the diversity of the population through adaptive mutation strategy for Differential Evolution.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60715a1d-70cd-4e52-8e30-3a15c3c51af7", "metadata": {"aucs": [0.24343649148078728, 0.2138346891424926, 0.19093849776620442, 0.20076131030523703, 0.21115678114314917, 0.23772391568176277, 0.2311633989211478, 0.2410282389963797, 0.2456108267457816, 0.006250180661428795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04627066026367577, 0.048050031653564695, 0.049102697104673965, 0.04853711766247981, 0.045942585025245175, 0.05640747602304197, 0.06329494825436033, 0.04648673372863099, 0.05789885952844254, 0.06352128282582581, 0.04500972849362439, 0.062156529363370794, 0.05419741320605531, 0.041746223168344865, 0.041332408553935385, 0.02684663659952735, 0.03906256091744531, 0.041188349458982754, 0.8921484414919729, 0.9200539026998826, 0.8842596314537179, 0.8896286460706208, 0.9545366399542784, 0.9226794502726119, 0.9120150114791342, 0.8982552678513623, 0.92604627554834, 0.11861658954313403, 0.07248200794585613, 0.07102275699134697, 0.14742609817970642, 0.10590804080000582, 0.07803701806534569, 0.08892090177337009, 0.06184071330727969, 0.10754364678370876, 0.11097861851655944, 0.05723788657434725, 0.11907212216145491, 0.1320046152085288, 0.12438403422563638, 0.1618964615046674, 0.10708212508823944, 0.12890788421022048, 0.14461177251727053, 0.03057480467738516, 0.07835690212615443, 0.029361341314103062, 0.04462203025318756, 0.03324954499771282, 0.0336043804503412, 0.03856231039758984, 0.0669000715023802, 0.08755459042058178, 0.036793695795509285, 0.0215701126711898, 0.023484057462292762, 0.038949819934972596, 0.04735382607521099, 0.0651908135467325, 0.05052594957984324, 0.061410682607037415, 0.0536338963971722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10912677377467772, 0.0472155139976147, 0.0477906908377701, 0.046218874030385604, 0.03715646025107178, 0.0034261322242682413, 0.07577102991649276, 0.03517261222546009, 0.031853053035227785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006256222714690507, 0.005375030239042289, 0.004001792636550094, 0.008321987665448782, 9.999999999998899e-05, 9.999999999998899e-05, 0.018694008614729696, 0.03228229223449686, 0.017968307344189083, 0.22435324802116952, 0.2498566108394633, 0.2411244990188801, 0.23134538690587336, 0.2352793641767258, 0.2323695426470046, 0.2093860618190736, 0.207958073815532, 0.2446729316960906, 0.04457413494969731, 0.042679384094078565, 0.03266849886941714, 0.04530934398415998, 0.053860042254356255, 0.04592211043707972, 0.0387337679662807, 0.047283681860520343, 0.03704568143914966, 0.14637846807396815, 0.13669439657871318, 0.13200610854615447, 0.12774267753433832, 0.11828146648968108, 0.12578049952435444, 0.146783935089019, 0.13652986608969409, 0.1255052045410272, 0.17297188413069076, 0.13125119915282213, 0.14508576899269832, 0.20080556495977775, 0.16558714396967567, 0.1782584907447572, 0.16318633764398205, 0.13254556720870114, 0.15075818035006538, 0.15855433687038145, 0.06462150428620317, 0.0947610358111407, 0.12735573113073229, 0.10822180577719132, 0.08936962413268434, 0.11834748208583135, 0.11669744554182382, 0.10834448133838104, 0.17133929236354783, 0.1668268894064242, 0.16479644128057847, 0.19385182636730358, 0.1750576816153092, 0.18501920244848935, 0.20069740303975014, 0.15507955338716672, 0.16085983315654573, 0.16191609436629917, 0.14227223258055222, 0.15465514872277764, 0.16373185331848894, 0.15266893316491637, 0.14839917176889028, 0.15783076853963718, 0.1413348168570805, 0.15551894474075179, 0.18413945837347467, 0.15354819548121235, 0.13589790146891134, 0.1421244241514802, 0.1196957262491396, 0.11664308661670253, 0.17997887683163938, 0.13928607739859422, 0.16097086002985106, 0.16125650963723437, 0.14112362487001995, 0.09369804160212702, 0.21411093683084415, 0.13235130145392215, 0.11210928655956742, 0.2456437532039134, 0.10267529930001729, 0.13850030240675948, 0.19393746532134826, 0.1806664430335222, 0.1863965722535782, 0.1796238278961091, 0.17821637610981556, 0.18993859930046542, 0.16976530385926147, 0.18942269941401035, 0.1843762629591641, 0.06300687141248695, 0.05309455704309618, 0.05227073592206777, 0.05060547444964669, 0.05943551027492466, 0.08072772903290804, 0.05535061160960408, 0.048005672817820755, 0.05370467295725734]}, "mutation_prompt": null}
{"id": "e71ce89b-d3f9-4c7e-8eb5-d4f366fb191d", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearchImproved", "description": "Improving the algorithm by incorporating a dynamic adaptation of the GA crossover probability based on fitness diversity.", "configspace": "", "generation": 54, "fitness": 0.13737552591178565, "feedback": "The algorithm AdaptiveMutationGADEWithLocalSearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.17.", "error": "", "parent_id": "60715a1d-70cd-4e52-8e30-3a15c3c51af7", "metadata": {"aucs": [0.27924317715075375, 0.28941382818775097, 0.25967286539901147, 0.246336746005422, 0.27287198233289134, 0.24204977885968793, 0.2784731435701491, 0.3526947951413938, 0.2712629066813903, 9.999999999998899e-05, 0.002130332514507116, 9.999999999998899e-05, 9.999999999998899e-05, 0.018903980455576175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058174594693115256, 0.04840332721707674, 0.07274206616350498, 0.0652908803083907, 0.051254394855809404, 0.056549055196882914, 0.046706297875659386, 0.0566163296651766, 0.08564662797114286, 0.04011590780388652, 0.061173950631258744, 0.04976788032635393, 0.05297547891069332, 0.060577493865952015, 0.04792475290363707, 0.04571053646521328, 0.06006195468940134, 0.049588751566573275, 0.9238739541434398, 0.8748979408407707, 0.8959627633842925, 0.7829060017673308, 0.8783678984021319, 0.9001729562271761, 0.8890681291329747, 0.8924685089363585, 0.9086728283898117, 0.1134382128339616, 0.09068002404312314, 0.10574263105009907, 0.1037229454948767, 0.1312789738466711, 0.0781775647373606, 0.10185496574929276, 0.11742659634350128, 0.1562182995611776, 0.1516878052965418, 0.09476661637521777, 0.09565414790123306, 0.18029504705708788, 0.12248006626231267, 0.1774422837181302, 0.16382051240404905, 0.10981972127492501, 0.13428286252474952, 0.02095738719788931, 0.030324763093496743, 0.06381828009248836, 0.044340974778552256, 0.047649376130935894, 0.08324100286202518, 0.05746923952947325, 0.05709598315928088, 0.048002993234564584, 0.1013424286038418, 0.07721089869332987, 0.07655307151646462, 0.07776093765510528, 0.090826223480026, 0.07205320926361292, 0.001984788666781645, 0.07793655123610554, 0.06375064317197554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017692921561080044, 0.01494070975698647, 0.06545118015879958, 0.03272954098305059, 0.01504460479142744, 9.999999999998899e-05, 0.06911282440205413, 0.023449296709187717, 0.012962177232606176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014516652979987832, 0.009418471782321691, 0.01415916931476402, 0.03976598379589136, 0.02104332265439879, 0.000636157933133985, 0.04540144656534628, 0.01411586236260065, 0.030437695865044745, 0.2677561308253569, 0.2663161343480466, 0.27979973036134553, 0.27386381035612806, 0.26263625010658986, 0.2889958992931282, 0.2782941697774204, 0.24247337020536963, 0.20005472188949402, 0.04797873829494825, 0.04350861392380012, 0.045797499394592545, 0.0340000665770116, 0.049665853629751844, 0.055836005327929206, 0.07822969938722346, 0.03471782070255891, 0.053203278444542645, 0.12923555993272984, 0.11663737462719748, 0.17595457171205742, 0.13818050293181838, 0.14124484585390695, 0.12238818837047039, 0.12499328385181907, 0.11770474187534496, 0.17346003357070694, 0.19370046020770282, 0.20345448437210711, 0.15016963443960463, 0.20990182685564107, 0.19798096181836067, 0.1427814599793219, 0.14954125459424994, 0.17315146416558724, 0.13270760751203559, 0.14534437419594837, 0.08978010750524967, 0.11118205174993367, 0.15259154695239285, 0.12365561882794152, 0.14668807139739548, 0.09126608551288606, 0.11119682561529354, 0.06454694660324023, 0.20289276685328983, 0.18150002973191492, 0.15635783598378072, 0.16861254715232188, 0.18590767430148458, 0.17425330417346163, 0.20123197747289778, 0.19271380218505274, 0.1718025366317424, 0.1458534624713973, 0.16732074850184742, 0.16608975635289158, 0.17771358917719804, 0.17076756418070582, 0.17303436055476118, 0.14953462302446696, 0.14505615562806817, 0.15092182546894528, 0.1519533872569696, 0.12262651186028417, 0.12284991169156934, 0.21955879797105193, 0.10273169281042482, 0.12175248494867952, 0.19061909115268638, 0.11438459438150061, 0.14409490347335796, 0.2784265920355492, 0.11006737039501346, 0.0917117296557961, 0.10327002278858854, 0.17816455029051048, 0.11522534718440913, 0.10172758542341276, 0.11162227915804745, 0.10315507275738112, 0.18645304812738406, 0.18491800267241287, 0.19445831787775614, 0.1804114250885397, 0.19020476830090605, 0.19004971221444977, 0.19367824039556514, 0.18109360196316537, 0.18591173806916417, 0.06757473358181942, 0.06417583288802398, 0.04685390243427845, 0.08764458443159984, 0.051832082282493475, 0.06046855093611392, 0.06388187019750424, 0.03808490693000244, 0.07403326927538745]}, "mutation_prompt": null}
{"id": "917ea2cf-1e93-4742-9e2b-ba5f7bed4f01", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithImprovedDiversity:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # Novel Adaptive Mutation Strategy\n                mutated = np.copy(population[i])\n                for j in range(self.dim):\n                    if np.random.rand() < CR:\n                        a, b, c = np.random.choice(pop_size, 3, replace=False)\n                        F_j = 0.5 + 0.4 * np.abs(func(candidates[a]) - func(candidates[b]))  # Adaptive mutation based on individual fitness difference\n                        mutated[j] = target_to_bounds(candidates[a, j] + F_j * (candidates[b, j] - candidates[c, j]), -5.0, 5.0)\n                population[i] = mutated\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithImprovedDiversity", "description": "Enhancing population diversity through a novel adaptive mutation strategy based on individual fitness.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'candidates' is not defined\").", "error": "NameError(\"name 'candidates' is not defined\")", "parent_id": "e71ce89b-d3f9-4c7e-8eb5-d4f366fb191d", "metadata": {}, "mutation_prompt": null}
{"id": "307e0d34-2af2-45ed-b99e-af6b41054e62", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + 0.01 * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearchImproved", "description": "Improving the algorithm by incorporating a dynamic adaptation of the GA crossover probability based on fitness diversity.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e71ce89b-d3f9-4c7e-8eb5-d4f366fb191d", "metadata": {"aucs": [0.27924317715075375, 0.28941382818775097, 0.25967286539901147, 0.246336746005422, 0.27287198233289134, 0.24204977885968793, 0.2784731435701491, 0.3526947951413938, 0.2712629066813903, 9.999999999998899e-05, 0.002130332514507116, 9.999999999998899e-05, 9.999999999998899e-05, 0.018903980455576175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058174594693115256, 0.04840332721707674, 0.07274206616350498, 0.0652908803083907, 0.051254394855809404, 0.056549055196882914, 0.046706297875659386, 0.0566163296651766, 0.08564662797114286, 0.04011590780388652, 0.061173950631258744, 0.04976788032635393, 0.05297547891069332, 0.060577493865952015, 0.04792475290363707, 0.04571053646521328, 0.06006195468940134, 0.049588751566573275, 0.9238739541434398, 0.8748979408407707, 0.8959627633842925, 0.7829060017673308, 0.8783678984021319, 0.9001729562271761, 0.8890681291329747, 0.8924685089363585, 0.9086728283898117, 0.1134382128339616, 0.09068002404312314, 0.10574263105009907, 0.1037229454948767, 0.1312789738466711, 0.0781775647373606, 0.10185496574929276, 0.11742659634350128, 0.1562182995611776, 0.1516878052965418, 0.09476661637521777, 0.09565414790123306, 0.18029504705708788, 0.12248006626231267, 0.1774422837181302, 0.16382051240404905, 0.10981972127492501, 0.13428286252474952, 0.02095738719788931, 0.030324763093496743, 0.06381828009248836, 0.044340974778552256, 0.047649376130935894, 0.08324100286202518, 0.05746923952947325, 0.05709598315928088, 0.048002993234564584, 0.1013424286038418, 0.07721089869332987, 0.07655307151646462, 0.07776093765510528, 0.090826223480026, 0.07205320926361292, 0.001984788666781645, 0.07793655123610554, 0.06375064317197554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017692921561080044, 0.01494070975698647, 0.06545118015879958, 0.03272954098305059, 0.01504460479142744, 9.999999999998899e-05, 0.06911282440205413, 0.023449296709187717, 0.012962177232606176, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014516652979987832, 0.009418471782321691, 0.01415916931476402, 0.03976598379589136, 0.02104332265439879, 0.000636157933133985, 0.04540144656534628, 0.01411586236260065, 0.030437695865044745, 0.2677561308253569, 0.2663161343480466, 0.27979973036134553, 0.27386381035612806, 0.26263625010658986, 0.2889958992931282, 0.2782941697774204, 0.24247337020536963, 0.20005472188949402, 0.04797873829494825, 0.04350861392380012, 0.045797499394592545, 0.0340000665770116, 0.049665853629751844, 0.055836005327929206, 0.07822969938722346, 0.03471782070255891, 0.053203278444542645, 0.12923555993272984, 0.11663737462719748, 0.17595457171205742, 0.13818050293181838, 0.14124484585390695, 0.12238818837047039, 0.12499328385181907, 0.11770474187534496, 0.17346003357070694, 0.19370046020770282, 0.20345448437210711, 0.15016963443960463, 0.20990182685564107, 0.19798096181836067, 0.1427814599793219, 0.14954125459424994, 0.17315146416558724, 0.13270760751203559, 0.14534437419594837, 0.08978010750524967, 0.11118205174993367, 0.15259154695239285, 0.12365561882794152, 0.14668807139739548, 0.09126608551288606, 0.11119682561529354, 0.06454694660324023, 0.20289276685328983, 0.18150002973191492, 0.15635783598378072, 0.16861254715232188, 0.18590767430148458, 0.17425330417346163, 0.20123197747289778, 0.19271380218505274, 0.1718025366317424, 0.1458534624713973, 0.16732074850184742, 0.16608975635289158, 0.17771358917719804, 0.17076756418070582, 0.17303436055476118, 0.14953462302446696, 0.14505615562806817, 0.15092182546894528, 0.1519533872569696, 0.12262651186028417, 0.12284991169156934, 0.21955879797105193, 0.10273169281042482, 0.12175248494867952, 0.19061909115268638, 0.11438459438150061, 0.14409490347335796, 0.2784265920355492, 0.11006737039501346, 0.0917117296557961, 0.10327002278858854, 0.17816455029051048, 0.11522534718440913, 0.10172758542341276, 0.11162227915804745, 0.10315507275738112, 0.18645304812738406, 0.18491800267241287, 0.19445831787775614, 0.1804114250885397, 0.19020476830090605, 0.19004971221444977, 0.19367824039556514, 0.18109360196316537, 0.18591173806916417, 0.06757473358181942, 0.06417583288802398, 0.04685390243427845, 0.08764458443159984, 0.051832082282493475, 0.06046855093611392, 0.06388187019750424, 0.03808490693000244, 0.07403326927538745]}, "mutation_prompt": null}
{"id": "88ecd5d1-828e-4064-a99c-fc6d73b32f6c", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  # Increase step size upon fitness improvement\n                else:\n                    step_size *= 0.8  # Decrease step size upon no fitness improvement\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearchImproved", "description": "Enhancing the local search by incorporating a variable step size based on fitness improvement.", "configspace": "", "generation": 57, "fitness": 0.1393122767373497, "feedback": "The algorithm AdaptiveMutationGADEWithLocalSearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.17.", "error": "", "parent_id": "e71ce89b-d3f9-4c7e-8eb5-d4f366fb191d", "metadata": {"aucs": [0.2797593593758102, 0.2925259565817613, 0.27021115993282907, 0.26337705015978274, 0.2914938528656351, 0.2611425676919701, 0.260072839006659, 0.3648844209129545, 0.27081149984561026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011047283155057874, 0.009615451314522572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0504373981473365, 0.06981856617034377, 0.05667571492526735, 0.07206895605090724, 0.03697616867327269, 0.07497861608442413, 0.08547413636801882, 0.048869039607698284, 0.0575945506609391, 0.04776028122472231, 0.04491711435414747, 0.043614081472927, 0.06124343909136931, 0.07653217560929082, 0.027097905744037365, 0.03350905589962094, 0.028256856284969434, 0.032302747333516346, 0.9238757529390802, 0.8863570626618849, 0.8959431003364917, 0.7915065032462478, 0.8783692268562551, 0.9021594827494785, 0.8890481535889267, 0.8924624646419689, 0.9016117592295415, 0.1153399738604286, 0.06718287719965632, 0.06615829322397748, 0.10900562346264009, 0.11777278746906883, 0.12104215197416324, 0.10152119735984255, 0.1349725510065617, 0.15681726440949173, 0.152051069471976, 0.0954513826406479, 0.12044894877712375, 0.1802362427650307, 0.15763857796669722, 0.17724765955574917, 0.16381732866346987, 0.11271809465111526, 0.11025075889650382, 0.023215451284432698, 0.04275932777418456, 0.06337475327186826, 0.05686091272298677, 0.057273918467868, 0.08737669221813105, 0.04071279782480264, 0.05674987784957919, 0.05581510462500738, 0.10232042824410525, 0.07489019515513917, 0.07010637413525678, 0.07926663139265144, 0.08973426884469704, 0.07020084367544754, 0.0013995949164691268, 0.07490853720926038, 0.06583205819907811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041156565566448644, 0.018486620067067583, 0.06606853616138575, 0.07018358321075102, 0.015821920972764247, 9.999999999998899e-05, 0.13504743546827847, 0.03505697086858617, 0.009577159372348487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02378066638677534, 0.009879762271378212, 0.008342656326122189, 0.03421363886827311, 0.012145244388265364, 0.02892999121413109, 0.04035063581082199, 0.014029068212510931, 0.03935068670454189, 0.29564386484155525, 0.26127396248444323, 0.23016054546354936, 0.27238562110202746, 0.26306945978759144, 0.2904126850059001, 0.27673220846188884, 0.24038009452058562, 0.20954296064265798, 0.05012914135731994, 0.06386137366978217, 0.0444549752970943, 0.06564323084886325, 0.04256870447962324, 0.08444741433075365, 0.06617330038605485, 0.04494934000794837, 0.054148343679468636, 0.11185410247654237, 0.1233873998250401, 0.18673176815753545, 0.20591835502878275, 0.13360577684888886, 0.13484763895663232, 0.14222779467542113, 0.16858510025404616, 0.13472140417709655, 0.17463609626458798, 0.19202911029124348, 0.15999865513535805, 0.2088843970655624, 0.1787963052286473, 0.14205524964196137, 0.14307825688051812, 0.19316750861347054, 0.17356016244013595, 0.15062112031499797, 0.10722809716630033, 0.1639876226868039, 0.17022456547563436, 0.13125166515027664, 0.14835632295323709, 0.09126519067528482, 0.0934020204603967, 0.07183546315833533, 0.18264501930743604, 0.1760993280339257, 0.2022702532735109, 0.17573834983796754, 0.2075879323533376, 0.16169451270544744, 0.18103539943221036, 0.18721228645628563, 0.17985247225707957, 0.15005500773942948, 0.16711744268930884, 0.16496350479800126, 0.16225352246552627, 0.17105652423985052, 0.17230399774808225, 0.1558547849227545, 0.13812536228166827, 0.15334656115898582, 0.15268393877660913, 0.11720053426561894, 0.121851122764018, 0.23057787188917578, 0.10173066787978657, 0.1213177035707087, 0.13677011857118992, 0.11299610627211665, 0.1432949187506778, 0.273543585914666, 0.1104134922253388, 0.09042114836427151, 0.10388439217020573, 0.16713917391157285, 0.11555511146556818, 0.10682716962399808, 0.10760071478116229, 0.10373036821611892, 0.17989656924041209, 0.1780122187794705, 0.19184975417748906, 0.17899174006501306, 0.17804205814172802, 0.1962580655693953, 0.19728653996397427, 0.17539488181276242, 0.18246844723826994, 0.06741557823355271, 0.07398668161616717, 0.062328107281005574, 0.0750957028724566, 0.05459176077922545, 0.07271814828241718, 0.053370866354353175, 0.05505393264842673, 0.06775505573667584]}, "mutation_prompt": null}
{"id": "4d8a37a8-65f1-4dd2-b56d-68b99dfef33b", "solution": "import numpy as np\n\nclass DynamicEnsembleOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  # Increase step size upon fitness improvement\n                else:\n                    step_size *= 0.8  # Decrease step size upon no fitness improvement\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "DynamicEnsembleOptimization", "description": "Utilizing a dynamic ensemble of optimization strategies with adaptive control parameters for efficient exploration and exploitation.", "configspace": "", "generation": 58, "fitness": 0.1393122767373497, "feedback": "The algorithm DynamicEnsembleOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.17.", "error": "", "parent_id": "88ecd5d1-828e-4064-a99c-fc6d73b32f6c", "metadata": {"aucs": [0.2797593593758102, 0.2925259565817613, 0.27021115993282907, 0.26337705015978274, 0.2914938528656351, 0.2611425676919701, 0.260072839006659, 0.3648844209129545, 0.27081149984561026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011047283155057874, 0.009615451314522572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0504373981473365, 0.06981856617034377, 0.05667571492526735, 0.07206895605090724, 0.03697616867327269, 0.07497861608442413, 0.08547413636801882, 0.048869039607698284, 0.0575945506609391, 0.04776028122472231, 0.04491711435414747, 0.043614081472927, 0.06124343909136931, 0.07653217560929082, 0.027097905744037365, 0.03350905589962094, 0.028256856284969434, 0.032302747333516346, 0.9238757529390802, 0.8863570626618849, 0.8959431003364917, 0.7915065032462478, 0.8783692268562551, 0.9021594827494785, 0.8890481535889267, 0.8924624646419689, 0.9016117592295415, 0.1153399738604286, 0.06718287719965632, 0.06615829322397748, 0.10900562346264009, 0.11777278746906883, 0.12104215197416324, 0.10152119735984255, 0.1349725510065617, 0.15681726440949173, 0.152051069471976, 0.0954513826406479, 0.12044894877712375, 0.1802362427650307, 0.15763857796669722, 0.17724765955574917, 0.16381732866346987, 0.11271809465111526, 0.11025075889650382, 0.023215451284432698, 0.04275932777418456, 0.06337475327186826, 0.05686091272298677, 0.057273918467868, 0.08737669221813105, 0.04071279782480264, 0.05674987784957919, 0.05581510462500738, 0.10232042824410525, 0.07489019515513917, 0.07010637413525678, 0.07926663139265144, 0.08973426884469704, 0.07020084367544754, 0.0013995949164691268, 0.07490853720926038, 0.06583205819907811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041156565566448644, 0.018486620067067583, 0.06606853616138575, 0.07018358321075102, 0.015821920972764247, 9.999999999998899e-05, 0.13504743546827847, 0.03505697086858617, 0.009577159372348487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02378066638677534, 0.009879762271378212, 0.008342656326122189, 0.03421363886827311, 0.012145244388265364, 0.02892999121413109, 0.04035063581082199, 0.014029068212510931, 0.03935068670454189, 0.29564386484155525, 0.26127396248444323, 0.23016054546354936, 0.27238562110202746, 0.26306945978759144, 0.2904126850059001, 0.27673220846188884, 0.24038009452058562, 0.20954296064265798, 0.05012914135731994, 0.06386137366978217, 0.0444549752970943, 0.06564323084886325, 0.04256870447962324, 0.08444741433075365, 0.06617330038605485, 0.04494934000794837, 0.054148343679468636, 0.11185410247654237, 0.1233873998250401, 0.18673176815753545, 0.20591835502878275, 0.13360577684888886, 0.13484763895663232, 0.14222779467542113, 0.16858510025404616, 0.13472140417709655, 0.17463609626458798, 0.19202911029124348, 0.15999865513535805, 0.2088843970655624, 0.1787963052286473, 0.14205524964196137, 0.14307825688051812, 0.19316750861347054, 0.17356016244013595, 0.15062112031499797, 0.10722809716630033, 0.1639876226868039, 0.17022456547563436, 0.13125166515027664, 0.14835632295323709, 0.09126519067528482, 0.0934020204603967, 0.07183546315833533, 0.18264501930743604, 0.1760993280339257, 0.2022702532735109, 0.17573834983796754, 0.2075879323533376, 0.16169451270544744, 0.18103539943221036, 0.18721228645628563, 0.17985247225707957, 0.15005500773942948, 0.16711744268930884, 0.16496350479800126, 0.16225352246552627, 0.17105652423985052, 0.17230399774808225, 0.1558547849227545, 0.13812536228166827, 0.15334656115898582, 0.15268393877660913, 0.11720053426561894, 0.121851122764018, 0.23057787188917578, 0.10173066787978657, 0.1213177035707087, 0.13677011857118992, 0.11299610627211665, 0.1432949187506778, 0.273543585914666, 0.1104134922253388, 0.09042114836427151, 0.10388439217020573, 0.16713917391157285, 0.11555511146556818, 0.10682716962399808, 0.10760071478116229, 0.10373036821611892, 0.17989656924041209, 0.1780122187794705, 0.19184975417748906, 0.17899174006501306, 0.17804205814172802, 0.1962580655693953, 0.19728653996397427, 0.17539488181276242, 0.18246844723826994, 0.06741557823355271, 0.07398668161616717, 0.062328107281005574, 0.0750957028724566, 0.05459176077922545, 0.07271814828241718, 0.053370866354353175, 0.05505393264842673, 0.06775505573667584]}, "mutation_prompt": null}
{"id": "cc377597-4c12-4638-ad6b-37a1af957b0b", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  # Increase step size upon fitness improvement\n                else:\n                    step_size *= 0.8  # Decrease step size upon no fitness improvement\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearchImproved", "description": "Enhancing the local search by incorporating a variable step size based on fitness improvement.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "88ecd5d1-828e-4064-a99c-fc6d73b32f6c", "metadata": {"aucs": [0.2797593593758102, 0.2925259565817613, 0.27021115993282907, 0.26337705015978274, 0.2914938528656351, 0.2611425676919701, 0.260072839006659, 0.3648844209129545, 0.27081149984561026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011047283155057874, 0.009615451314522572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0504373981473365, 0.06981856617034377, 0.05667571492526735, 0.07206895605090724, 0.03697616867327269, 0.07497861608442413, 0.08547413636801882, 0.048869039607698284, 0.0575945506609391, 0.04776028122472231, 0.04491711435414747, 0.043614081472927, 0.06124343909136931, 0.07653217560929082, 0.027097905744037365, 0.03350905589962094, 0.028256856284969434, 0.032302747333516346, 0.9238757529390802, 0.8863570626618849, 0.8959431003364917, 0.7915065032462478, 0.8783692268562551, 0.9021594827494785, 0.8890481535889267, 0.8924624646419689, 0.9016117592295415, 0.1153399738604286, 0.06718287719965632, 0.06615829322397748, 0.10900562346264009, 0.11777278746906883, 0.12104215197416324, 0.10152119735984255, 0.1349725510065617, 0.15681726440949173, 0.152051069471976, 0.0954513826406479, 0.12044894877712375, 0.1802362427650307, 0.15763857796669722, 0.17724765955574917, 0.16381732866346987, 0.11271809465111526, 0.11025075889650382, 0.023215451284432698, 0.04275932777418456, 0.06337475327186826, 0.05686091272298677, 0.057273918467868, 0.08737669221813105, 0.04071279782480264, 0.05674987784957919, 0.05581510462500738, 0.10232042824410525, 0.07489019515513917, 0.07010637413525678, 0.07926663139265144, 0.08973426884469704, 0.07020084367544754, 0.0013995949164691268, 0.07490853720926038, 0.06583205819907811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041156565566448644, 0.018486620067067583, 0.06606853616138575, 0.07018358321075102, 0.015821920972764247, 9.999999999998899e-05, 0.13504743546827847, 0.03505697086858617, 0.009577159372348487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02378066638677534, 0.009879762271378212, 0.008342656326122189, 0.03421363886827311, 0.012145244388265364, 0.02892999121413109, 0.04035063581082199, 0.014029068212510931, 0.03935068670454189, 0.29564386484155525, 0.26127396248444323, 0.23016054546354936, 0.27238562110202746, 0.26306945978759144, 0.2904126850059001, 0.27673220846188884, 0.24038009452058562, 0.20954296064265798, 0.05012914135731994, 0.06386137366978217, 0.0444549752970943, 0.06564323084886325, 0.04256870447962324, 0.08444741433075365, 0.06617330038605485, 0.04494934000794837, 0.054148343679468636, 0.11185410247654237, 0.1233873998250401, 0.18673176815753545, 0.20591835502878275, 0.13360577684888886, 0.13484763895663232, 0.14222779467542113, 0.16858510025404616, 0.13472140417709655, 0.17463609626458798, 0.19202911029124348, 0.15999865513535805, 0.2088843970655624, 0.1787963052286473, 0.14205524964196137, 0.14307825688051812, 0.19316750861347054, 0.17356016244013595, 0.15062112031499797, 0.10722809716630033, 0.1639876226868039, 0.17022456547563436, 0.13125166515027664, 0.14835632295323709, 0.09126519067528482, 0.0934020204603967, 0.07183546315833533, 0.18264501930743604, 0.1760993280339257, 0.2022702532735109, 0.17573834983796754, 0.2075879323533376, 0.16169451270544744, 0.18103539943221036, 0.18721228645628563, 0.17985247225707957, 0.15005500773942948, 0.16711744268930884, 0.16496350479800126, 0.16225352246552627, 0.17105652423985052, 0.17230399774808225, 0.1558547849227545, 0.13812536228166827, 0.15334656115898582, 0.15268393877660913, 0.11720053426561894, 0.121851122764018, 0.23057787188917578, 0.10173066787978657, 0.1213177035707087, 0.13677011857118992, 0.11299610627211665, 0.1432949187506778, 0.273543585914666, 0.1104134922253388, 0.09042114836427151, 0.10388439217020573, 0.16713917391157285, 0.11555511146556818, 0.10682716962399808, 0.10760071478116229, 0.10373036821611892, 0.17989656924041209, 0.1780122187794705, 0.19184975417748906, 0.17899174006501306, 0.17804205814172802, 0.1962580655693953, 0.19728653996397427, 0.17539488181276242, 0.18246844723826994, 0.06741557823355271, 0.07398668161616717, 0.062328107281005574, 0.0750957028724566, 0.05459176077922545, 0.07271814828241718, 0.053370866354353175, 0.05505393264842673, 0.06775505573667584]}, "mutation_prompt": null}
{"id": "5cf091dd-7edf-4e0c-84dd-f402cbead32c", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  # Increase step size upon fitness improvement\n                else:\n                    step_size *= 0.8  # Decrease step size upon no fitness improvement\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearchImproved", "description": "Enhancing the local search by incorporating a variable step size based on fitness improvement.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "88ecd5d1-828e-4064-a99c-fc6d73b32f6c", "metadata": {"aucs": [0.2797593593758102, 0.2925259565817613, 0.27021115993282907, 0.26337705015978274, 0.2914938528656351, 0.2611425676919701, 0.260072839006659, 0.3648844209129545, 0.27081149984561026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011047283155057874, 0.009615451314522572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0504373981473365, 0.06981856617034377, 0.05667571492526735, 0.07206895605090724, 0.03697616867327269, 0.07497861608442413, 0.08547413636801882, 0.048869039607698284, 0.0575945506609391, 0.04776028122472231, 0.04491711435414747, 0.043614081472927, 0.06124343909136931, 0.07653217560929082, 0.027097905744037365, 0.03350905589962094, 0.028256856284969434, 0.032302747333516346, 0.9238757529390802, 0.8863570626618849, 0.8959431003364917, 0.7915065032462478, 0.8783692268562551, 0.9021594827494785, 0.8890481535889267, 0.8924624646419689, 0.9016117592295415, 0.1153399738604286, 0.06718287719965632, 0.06615829322397748, 0.10900562346264009, 0.11777278746906883, 0.12104215197416324, 0.10152119735984255, 0.1349725510065617, 0.15681726440949173, 0.152051069471976, 0.0954513826406479, 0.12044894877712375, 0.1802362427650307, 0.15763857796669722, 0.17724765955574917, 0.16381732866346987, 0.11271809465111526, 0.11025075889650382, 0.023215451284432698, 0.04275932777418456, 0.06337475327186826, 0.05686091272298677, 0.057273918467868, 0.08737669221813105, 0.04071279782480264, 0.05674987784957919, 0.05581510462500738, 0.10232042824410525, 0.07489019515513917, 0.07010637413525678, 0.07926663139265144, 0.08973426884469704, 0.07020084367544754, 0.0013995949164691268, 0.07490853720926038, 0.06583205819907811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041156565566448644, 0.018486620067067583, 0.06606853616138575, 0.07018358321075102, 0.015821920972764247, 9.999999999998899e-05, 0.13504743546827847, 0.03505697086858617, 0.009577159372348487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02378066638677534, 0.009879762271378212, 0.008342656326122189, 0.03421363886827311, 0.012145244388265364, 0.02892999121413109, 0.04035063581082199, 0.014029068212510931, 0.03935068670454189, 0.29564386484155525, 0.26127396248444323, 0.23016054546354936, 0.27238562110202746, 0.26306945978759144, 0.2904126850059001, 0.27673220846188884, 0.24038009452058562, 0.20954296064265798, 0.05012914135731994, 0.06386137366978217, 0.0444549752970943, 0.06564323084886325, 0.04256870447962324, 0.08444741433075365, 0.06617330038605485, 0.04494934000794837, 0.054148343679468636, 0.11185410247654237, 0.1233873998250401, 0.18673176815753545, 0.20591835502878275, 0.13360577684888886, 0.13484763895663232, 0.14222779467542113, 0.16858510025404616, 0.13472140417709655, 0.17463609626458798, 0.19202911029124348, 0.15999865513535805, 0.2088843970655624, 0.1787963052286473, 0.14205524964196137, 0.14307825688051812, 0.19316750861347054, 0.17356016244013595, 0.15062112031499797, 0.10722809716630033, 0.1639876226868039, 0.17022456547563436, 0.13125166515027664, 0.14835632295323709, 0.09126519067528482, 0.0934020204603967, 0.07183546315833533, 0.18264501930743604, 0.1760993280339257, 0.2022702532735109, 0.17573834983796754, 0.2075879323533376, 0.16169451270544744, 0.18103539943221036, 0.18721228645628563, 0.17985247225707957, 0.15005500773942948, 0.16711744268930884, 0.16496350479800126, 0.16225352246552627, 0.17105652423985052, 0.17230399774808225, 0.1558547849227545, 0.13812536228166827, 0.15334656115898582, 0.15268393877660913, 0.11720053426561894, 0.121851122764018, 0.23057787188917578, 0.10173066787978657, 0.1213177035707087, 0.13677011857118992, 0.11299610627211665, 0.1432949187506778, 0.273543585914666, 0.1104134922253388, 0.09042114836427151, 0.10388439217020573, 0.16713917391157285, 0.11555511146556818, 0.10682716962399808, 0.10760071478116229, 0.10373036821611892, 0.17989656924041209, 0.1780122187794705, 0.19184975417748906, 0.17899174006501306, 0.17804205814172802, 0.1962580655693953, 0.19728653996397427, 0.17539488181276242, 0.18246844723826994, 0.06741557823355271, 0.07398668161616717, 0.062328107281005574, 0.0750957028724566, 0.05459176077922545, 0.07271814828241718, 0.053370866354353175, 0.05505393264842673, 0.06775505573667584]}, "mutation_prompt": null}
{"id": "140fc088-81f8-429a-b44c-2867815658ae", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  # Increase step size upon fitness improvement\n                else:\n                    step_size *= 0.8  # Decrease step size upon no fitness improvement\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearchImproved", "description": "Enhancing the local search by incorporating a variable step size based on fitness improvement.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "88ecd5d1-828e-4064-a99c-fc6d73b32f6c", "metadata": {"aucs": [0.2797593593758102, 0.2925259565817613, 0.27021115993282907, 0.26337705015978274, 0.2914938528656351, 0.2611425676919701, 0.260072839006659, 0.3648844209129545, 0.27081149984561026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011047283155057874, 0.009615451314522572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0504373981473365, 0.06981856617034377, 0.05667571492526735, 0.07206895605090724, 0.03697616867327269, 0.07497861608442413, 0.08547413636801882, 0.048869039607698284, 0.0575945506609391, 0.04776028122472231, 0.04491711435414747, 0.043614081472927, 0.06124343909136931, 0.07653217560929082, 0.027097905744037365, 0.03350905589962094, 0.028256856284969434, 0.032302747333516346, 0.9238757529390802, 0.8863570626618849, 0.8959431003364917, 0.7915065032462478, 0.8783692268562551, 0.9021594827494785, 0.8890481535889267, 0.8924624646419689, 0.9016117592295415, 0.1153399738604286, 0.06718287719965632, 0.06615829322397748, 0.10900562346264009, 0.11777278746906883, 0.12104215197416324, 0.10152119735984255, 0.1349725510065617, 0.15681726440949173, 0.152051069471976, 0.0954513826406479, 0.12044894877712375, 0.1802362427650307, 0.15763857796669722, 0.17724765955574917, 0.16381732866346987, 0.11271809465111526, 0.11025075889650382, 0.023215451284432698, 0.04275932777418456, 0.06337475327186826, 0.05686091272298677, 0.057273918467868, 0.08737669221813105, 0.04071279782480264, 0.05674987784957919, 0.05581510462500738, 0.10232042824410525, 0.07489019515513917, 0.07010637413525678, 0.07926663139265144, 0.08973426884469704, 0.07020084367544754, 0.0013995949164691268, 0.07490853720926038, 0.06583205819907811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041156565566448644, 0.018486620067067583, 0.06606853616138575, 0.07018358321075102, 0.015821920972764247, 9.999999999998899e-05, 0.13504743546827847, 0.03505697086858617, 0.009577159372348487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02378066638677534, 0.009879762271378212, 0.008342656326122189, 0.03421363886827311, 0.012145244388265364, 0.02892999121413109, 0.04035063581082199, 0.014029068212510931, 0.03935068670454189, 0.29564386484155525, 0.26127396248444323, 0.23016054546354936, 0.27238562110202746, 0.26306945978759144, 0.2904126850059001, 0.27673220846188884, 0.24038009452058562, 0.20954296064265798, 0.05012914135731994, 0.06386137366978217, 0.0444549752970943, 0.06564323084886325, 0.04256870447962324, 0.08444741433075365, 0.06617330038605485, 0.04494934000794837, 0.054148343679468636, 0.11185410247654237, 0.1233873998250401, 0.18673176815753545, 0.20591835502878275, 0.13360577684888886, 0.13484763895663232, 0.14222779467542113, 0.16858510025404616, 0.13472140417709655, 0.17463609626458798, 0.19202911029124348, 0.15999865513535805, 0.2088843970655624, 0.1787963052286473, 0.14205524964196137, 0.14307825688051812, 0.19316750861347054, 0.17356016244013595, 0.15062112031499797, 0.10722809716630033, 0.1639876226868039, 0.17022456547563436, 0.13125166515027664, 0.14835632295323709, 0.09126519067528482, 0.0934020204603967, 0.07183546315833533, 0.18264501930743604, 0.1760993280339257, 0.2022702532735109, 0.17573834983796754, 0.2075879323533376, 0.16169451270544744, 0.18103539943221036, 0.18721228645628563, 0.17985247225707957, 0.15005500773942948, 0.16711744268930884, 0.16496350479800126, 0.16225352246552627, 0.17105652423985052, 0.17230399774808225, 0.1558547849227545, 0.13812536228166827, 0.15334656115898582, 0.15268393877660913, 0.11720053426561894, 0.121851122764018, 0.23057787188917578, 0.10173066787978657, 0.1213177035707087, 0.13677011857118992, 0.11299610627211665, 0.1432949187506778, 0.273543585914666, 0.1104134922253388, 0.09042114836427151, 0.10388439217020573, 0.16713917391157285, 0.11555511146556818, 0.10682716962399808, 0.10760071478116229, 0.10373036821611892, 0.17989656924041209, 0.1780122187794705, 0.19184975417748906, 0.17899174006501306, 0.17804205814172802, 0.1962580655693953, 0.19728653996397427, 0.17539488181276242, 0.18246844723826994, 0.06741557823355271, 0.07398668161616717, 0.062328107281005574, 0.0750957028724566, 0.05459176077922545, 0.07271814828241718, 0.053370866354353175, 0.05505393264842673, 0.06775505573667584]}, "mutation_prompt": null}
{"id": "b53010f3-e8a1-4994-80e7-7b46e14dc0a4", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  # Increase step size upon fitness improvement\n                else:\n                    step_size *= 0.8  # Decrease step size upon no fitness improvement\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearchImproved", "description": "Enhancing the local search by incorporating a variable step size based on fitness improvement.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "88ecd5d1-828e-4064-a99c-fc6d73b32f6c", "metadata": {"aucs": [0.2797593593758102, 0.2925259565817613, 0.27021115993282907, 0.26337705015978274, 0.2914938528656351, 0.2611425676919701, 0.260072839006659, 0.3648844209129545, 0.27081149984561026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011047283155057874, 0.009615451314522572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0504373981473365, 0.06981856617034377, 0.05667571492526735, 0.07206895605090724, 0.03697616867327269, 0.07497861608442413, 0.08547413636801882, 0.048869039607698284, 0.0575945506609391, 0.04776028122472231, 0.04491711435414747, 0.043614081472927, 0.06124343909136931, 0.07653217560929082, 0.027097905744037365, 0.03350905589962094, 0.028256856284969434, 0.032302747333516346, 0.9238757529390802, 0.8863570626618849, 0.8959431003364917, 0.7915065032462478, 0.8783692268562551, 0.9021594827494785, 0.8890481535889267, 0.8924624646419689, 0.9016117592295415, 0.1153399738604286, 0.06718287719965632, 0.06615829322397748, 0.10900562346264009, 0.11777278746906883, 0.12104215197416324, 0.10152119735984255, 0.1349725510065617, 0.15681726440949173, 0.152051069471976, 0.0954513826406479, 0.12044894877712375, 0.1802362427650307, 0.15763857796669722, 0.17724765955574917, 0.16381732866346987, 0.11271809465111526, 0.11025075889650382, 0.023215451284432698, 0.04275932777418456, 0.06337475327186826, 0.05686091272298677, 0.057273918467868, 0.08737669221813105, 0.04071279782480264, 0.05674987784957919, 0.05581510462500738, 0.10232042824410525, 0.07489019515513917, 0.07010637413525678, 0.07926663139265144, 0.08973426884469704, 0.07020084367544754, 0.0013995949164691268, 0.07490853720926038, 0.06583205819907811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041156565566448644, 0.018486620067067583, 0.06606853616138575, 0.07018358321075102, 0.015821920972764247, 9.999999999998899e-05, 0.13504743546827847, 0.03505697086858617, 0.009577159372348487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02378066638677534, 0.009879762271378212, 0.008342656326122189, 0.03421363886827311, 0.012145244388265364, 0.02892999121413109, 0.04035063581082199, 0.014029068212510931, 0.03935068670454189, 0.29564386484155525, 0.26127396248444323, 0.23016054546354936, 0.27238562110202746, 0.26306945978759144, 0.2904126850059001, 0.27673220846188884, 0.24038009452058562, 0.20954296064265798, 0.05012914135731994, 0.06386137366978217, 0.0444549752970943, 0.06564323084886325, 0.04256870447962324, 0.08444741433075365, 0.06617330038605485, 0.04494934000794837, 0.054148343679468636, 0.11185410247654237, 0.1233873998250401, 0.18673176815753545, 0.20591835502878275, 0.13360577684888886, 0.13484763895663232, 0.14222779467542113, 0.16858510025404616, 0.13472140417709655, 0.17463609626458798, 0.19202911029124348, 0.15999865513535805, 0.2088843970655624, 0.1787963052286473, 0.14205524964196137, 0.14307825688051812, 0.19316750861347054, 0.17356016244013595, 0.15062112031499797, 0.10722809716630033, 0.1639876226868039, 0.17022456547563436, 0.13125166515027664, 0.14835632295323709, 0.09126519067528482, 0.0934020204603967, 0.07183546315833533, 0.18264501930743604, 0.1760993280339257, 0.2022702532735109, 0.17573834983796754, 0.2075879323533376, 0.16169451270544744, 0.18103539943221036, 0.18721228645628563, 0.17985247225707957, 0.15005500773942948, 0.16711744268930884, 0.16496350479800126, 0.16225352246552627, 0.17105652423985052, 0.17230399774808225, 0.1558547849227545, 0.13812536228166827, 0.15334656115898582, 0.15268393877660913, 0.11720053426561894, 0.121851122764018, 0.23057787188917578, 0.10173066787978657, 0.1213177035707087, 0.13677011857118992, 0.11299610627211665, 0.1432949187506778, 0.273543585914666, 0.1104134922253388, 0.09042114836427151, 0.10388439217020573, 0.16713917391157285, 0.11555511146556818, 0.10682716962399808, 0.10760071478116229, 0.10373036821611892, 0.17989656924041209, 0.1780122187794705, 0.19184975417748906, 0.17899174006501306, 0.17804205814172802, 0.1962580655693953, 0.19728653996397427, 0.17539488181276242, 0.18246844723826994, 0.06741557823355271, 0.07398668161616717, 0.062328107281005574, 0.0750957028724566, 0.05459176077922545, 0.07271814828241718, 0.053370866354353175, 0.05505393264842673, 0.06775505573667584]}, "mutation_prompt": null}
{"id": "527f3bf3-854a-4279-97d4-02cff845f76c", "solution": "import numpy as np\n\nclass DynamicLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2 + 0.2 * np.random.rand()  # Dynamic adjustment of step size upon fitness improvement\n                else:\n                    step_size *= 0.8 + 0.1 * np.random.rand()  # Dynamic adjustment of step size upon no fitness improvement\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "DynamicLocalSearchImproved", "description": "Enhancing the algorithm by introducing a dynamic adaptation of the local search step size and population diversity for improved exploration and exploitation.", "configspace": "", "generation": 63, "fitness": 0.13924081523283216, "feedback": "The algorithm DynamicLocalSearchImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "88ecd5d1-828e-4064-a99c-fc6d73b32f6c", "metadata": {"aucs": [0.3242916869797283, 0.2665599084490595, 0.22970682729805325, 0.27529401592939284, 0.30120893215590083, 0.2982003505379195, 0.26316462241821126, 0.309528209065035, 0.2530436663651553, 9.999999999998899e-05, 0.001034784907605668, 9.999999999998899e-05, 0.07123854197628043, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017052233737132605, 0.007498671747833252, 9.999999999998899e-05, 0.060643273270759024, 0.04470126397428198, 0.05367129457553288, 0.055868755269744, 0.0661186176013191, 0.053282227926367165, 0.045639877813954066, 0.07697838703715243, 0.04053299368803087, 0.08077257261005966, 0.03201358790317044, 0.07498050890592045, 0.03871726466016101, 0.038508806664584005, 0.04007860789214357, 0.036804227191891026, 0.04490155327726575, 0.04156741290023769, 0.9264608145508625, 0.8542757532295288, 0.8178532318053817, 0.9435063182618942, 0.963541139551916, 0.9072836612168215, 0.7928286502390453, 0.8963551031139967, 0.924512174457686, 0.09893803193431772, 0.08450856191123635, 0.06727050658135192, 0.15488709794019595, 0.11423151921943575, 0.09786098877822247, 0.1366832086920331, 0.11687063478413673, 0.118992129345045, 0.1714593660872491, 0.14097412760880923, 0.10867078976301292, 0.15642425584500075, 0.1534929230871379, 0.16296429559598868, 0.14782141362180123, 0.12389533060003666, 0.10406198090469387, 0.09015029784864748, 0.0749612460874145, 0.08204081480238379, 0.05662348014365892, 0.056987287110224494, 0.01452452441331642, 0.13074904063813897, 0.09033845278806152, 0.048463357208569535, 0.16255945805279537, 0.07814328866357334, 0.030073492986866013, 0.08935822391736492, 9.999999999998899e-05, 0.06503583801612967, 0.08993176961597416, 0.0070782382539466004, 0.07360452531661321, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034595232278245014, 0.016219470346354292, 0.07561872975193107, 0.08707858316239614, 0.027694741741379092, 0.035205896208348686, 0.0844595168841199, 0.014797966340397428, 0.008687646638168012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0229719836259894, 0.01512641111339219, 0.014358688149437193, 0.027062434431534887, 0.019235570206023067, 0.03332740773497589, 0.03762348425539219, 0.03949128955730574, 0.2471996108717961, 0.29170662109948253, 0.278800619794606, 0.28279555101025733, 0.2512454202190857, 0.26679811228359696, 0.27852140517416435, 0.2711851206255531, 0.25017603549782064, 0.0637375518132074, 0.041911629689897145, 0.067132962106774, 0.050303437190397426, 0.08289821975190748, 0.04928881808221719, 0.07093180922185605, 0.03601654993787784, 0.04213260012870346, 0.15793548367953114, 0.10587410399729014, 0.13948332973920874, 0.14022271605651226, 0.1409084896758913, 0.11590021600959122, 0.14241620087705087, 0.13805072709809119, 0.1361640190062985, 0.17847023700919795, 0.18808425398208783, 0.14276131194358677, 0.24905012332571907, 0.20155053377997112, 0.13699256032025076, 0.17175831850219114, 0.17417671472809815, 0.11309429970752005, 0.14146536014277422, 0.08773880997279371, 0.11884260032346505, 0.13952860744121276, 0.13071243451771575, 0.08766026145765249, 0.14135619603308092, 0.1285121116291541, 0.08709478845181817, 0.202616169038344, 0.1328482234934376, 0.20113121978091153, 0.1974692977894873, 0.16930596741537918, 0.14847038702139903, 0.17953865016284687, 0.1602046840941308, 0.19865725726348504, 0.1531329132374094, 0.14159400845068082, 0.14179632715753399, 0.15606107368130362, 0.14050791053785872, 0.1536976579545306, 0.16497813338926903, 0.14044834530365402, 0.14922717096530835, 0.1593804943292394, 0.11830871663638931, 0.1605631127981727, 0.1690406074920946, 0.12654626851274808, 0.11675209772524198, 0.18250676187786863, 0.12449290415531955, 0.1299944955864114, 0.13269391903677186, 0.14244224255659466, 0.09900810330601673, 0.14251015074238205, 0.12595484773542198, 0.13937033187005687, 0.10694785361850534, 0.12867629150674198, 0.17395692414595454, 0.1754231023532833, 0.18057139616347562, 0.18029323322635848, 0.17528796730821872, 0.18186425507743376, 0.19688974300430273, 0.2114121725758269, 0.19121280379277816, 0.19346785111905174, 0.062218101514126656, 0.07242973649288487, 0.04748723172319491, 0.06993753097871236, 0.06983827058902403, 0.07231599358243879, 0.06963304895810563, 0.056480838159282065, 0.048275338015016156]}, "mutation_prompt": null}
{"id": "5147c3c5-c752-47d8-92d4-afcc9545fcc8", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  # Increase step size upon fitness improvement\n                else:\n                    step_size *= 0.8  # Decrease step size upon no fitness improvement\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearchImproved", "description": "Enhancing the local search by incorporating a variable step size based on fitness improvement.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "88ecd5d1-828e-4064-a99c-fc6d73b32f6c", "metadata": {"aucs": [0.2797593593758102, 0.2925259565817613, 0.27021115993282907, 0.26337705015978274, 0.2914938528656351, 0.2611425676919701, 0.260072839006659, 0.3648844209129545, 0.27081149984561026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011047283155057874, 0.009615451314522572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0504373981473365, 0.06981856617034377, 0.05667571492526735, 0.07206895605090724, 0.03697616867327269, 0.07497861608442413, 0.08547413636801882, 0.048869039607698284, 0.0575945506609391, 0.04776028122472231, 0.04491711435414747, 0.043614081472927, 0.06124343909136931, 0.07653217560929082, 0.027097905744037365, 0.03350905589962094, 0.028256856284969434, 0.032302747333516346, 0.9238757529390802, 0.8863570626618849, 0.8959431003364917, 0.7915065032462478, 0.8783692268562551, 0.9021594827494785, 0.8890481535889267, 0.8924624646419689, 0.9016117592295415, 0.1153399738604286, 0.06718287719965632, 0.06615829322397748, 0.10900562346264009, 0.11777278746906883, 0.12104215197416324, 0.10152119735984255, 0.1349725510065617, 0.15681726440949173, 0.152051069471976, 0.0954513826406479, 0.12044894877712375, 0.1802362427650307, 0.15763857796669722, 0.17724765955574917, 0.16381732866346987, 0.11271809465111526, 0.11025075889650382, 0.023215451284432698, 0.04275932777418456, 0.06337475327186826, 0.05686091272298677, 0.057273918467868, 0.08737669221813105, 0.04071279782480264, 0.05674987784957919, 0.05581510462500738, 0.10232042824410525, 0.07489019515513917, 0.07010637413525678, 0.07926663139265144, 0.08973426884469704, 0.07020084367544754, 0.0013995949164691268, 0.07490853720926038, 0.06583205819907811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041156565566448644, 0.018486620067067583, 0.06606853616138575, 0.07018358321075102, 0.015821920972764247, 9.999999999998899e-05, 0.13504743546827847, 0.03505697086858617, 0.009577159372348487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02378066638677534, 0.009879762271378212, 0.008342656326122189, 0.03421363886827311, 0.012145244388265364, 0.02892999121413109, 0.04035063581082199, 0.014029068212510931, 0.03935068670454189, 0.29564386484155525, 0.26127396248444323, 0.23016054546354936, 0.27238562110202746, 0.26306945978759144, 0.2904126850059001, 0.27673220846188884, 0.24038009452058562, 0.20954296064265798, 0.05012914135731994, 0.06386137366978217, 0.0444549752970943, 0.06564323084886325, 0.04256870447962324, 0.08444741433075365, 0.06617330038605485, 0.04494934000794837, 0.054148343679468636, 0.11185410247654237, 0.1233873998250401, 0.18673176815753545, 0.20591835502878275, 0.13360577684888886, 0.13484763895663232, 0.14222779467542113, 0.16858510025404616, 0.13472140417709655, 0.17463609626458798, 0.19202911029124348, 0.15999865513535805, 0.2088843970655624, 0.1787963052286473, 0.14205524964196137, 0.14307825688051812, 0.19316750861347054, 0.17356016244013595, 0.15062112031499797, 0.10722809716630033, 0.1639876226868039, 0.17022456547563436, 0.13125166515027664, 0.14835632295323709, 0.09126519067528482, 0.0934020204603967, 0.07183546315833533, 0.18264501930743604, 0.1760993280339257, 0.2022702532735109, 0.17573834983796754, 0.2075879323533376, 0.16169451270544744, 0.18103539943221036, 0.18721228645628563, 0.17985247225707957, 0.15005500773942948, 0.16711744268930884, 0.16496350479800126, 0.16225352246552627, 0.17105652423985052, 0.17230399774808225, 0.1558547849227545, 0.13812536228166827, 0.15334656115898582, 0.15268393877660913, 0.11720053426561894, 0.121851122764018, 0.23057787188917578, 0.10173066787978657, 0.1213177035707087, 0.13677011857118992, 0.11299610627211665, 0.1432949187506778, 0.273543585914666, 0.1104134922253388, 0.09042114836427151, 0.10388439217020573, 0.16713917391157285, 0.11555511146556818, 0.10682716962399808, 0.10760071478116229, 0.10373036821611892, 0.17989656924041209, 0.1780122187794705, 0.19184975417748906, 0.17899174006501306, 0.17804205814172802, 0.1962580655693953, 0.19728653996397427, 0.17539488181276242, 0.18246844723826994, 0.06741557823355271, 0.07398668161616717, 0.062328107281005574, 0.0750957028724566, 0.05459176077922545, 0.07271814828241718, 0.053370866354353175, 0.05505393264842673, 0.06775505573667584]}, "mutation_prompt": null}
{"id": "4b087784-0062-426e-b70d-274a1c43cab9", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithLocalSearchImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  # Increase step size upon fitness improvement\n                else:\n                    step_size *= 0.8  # Decrease step size upon no fitness improvement\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  # Dynamic adaptation of crossover probability\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))  # Dynamic adjustment of F_i based on population diversity\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // pop_size):\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                # GA Crossover with dynamic probability\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  # Measure the diversity of the population\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                # DE Mutation with Adaptive Strategy\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                # PSO Update\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                # Local Search\n                population[i] = local_search(population[i], func)\n\n                # Update best solutions\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithLocalSearchImproved", "description": "Enhancing the local search by incorporating a variable step size based on fitness improvement.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "88ecd5d1-828e-4064-a99c-fc6d73b32f6c", "metadata": {"aucs": [0.2797593593758102, 0.2925259565817613, 0.27021115993282907, 0.26337705015978274, 0.2914938528656351, 0.2611425676919701, 0.260072839006659, 0.3648844209129545, 0.27081149984561026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011047283155057874, 0.009615451314522572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0504373981473365, 0.06981856617034377, 0.05667571492526735, 0.07206895605090724, 0.03697616867327269, 0.07497861608442413, 0.08547413636801882, 0.048869039607698284, 0.0575945506609391, 0.04776028122472231, 0.04491711435414747, 0.043614081472927, 0.06124343909136931, 0.07653217560929082, 0.027097905744037365, 0.03350905589962094, 0.028256856284969434, 0.032302747333516346, 0.9238757529390802, 0.8863570626618849, 0.8959431003364917, 0.7915065032462478, 0.8783692268562551, 0.9021594827494785, 0.8890481535889267, 0.8924624646419689, 0.9016117592295415, 0.1153399738604286, 0.06718287719965632, 0.06615829322397748, 0.10900562346264009, 0.11777278746906883, 0.12104215197416324, 0.10152119735984255, 0.1349725510065617, 0.15681726440949173, 0.152051069471976, 0.0954513826406479, 0.12044894877712375, 0.1802362427650307, 0.15763857796669722, 0.17724765955574917, 0.16381732866346987, 0.11271809465111526, 0.11025075889650382, 0.023215451284432698, 0.04275932777418456, 0.06337475327186826, 0.05686091272298677, 0.057273918467868, 0.08737669221813105, 0.04071279782480264, 0.05674987784957919, 0.05581510462500738, 0.10232042824410525, 0.07489019515513917, 0.07010637413525678, 0.07926663139265144, 0.08973426884469704, 0.07020084367544754, 0.0013995949164691268, 0.07490853720926038, 0.06583205819907811, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041156565566448644, 0.018486620067067583, 0.06606853616138575, 0.07018358321075102, 0.015821920972764247, 9.999999999998899e-05, 0.13504743546827847, 0.03505697086858617, 0.009577159372348487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02378066638677534, 0.009879762271378212, 0.008342656326122189, 0.03421363886827311, 0.012145244388265364, 0.02892999121413109, 0.04035063581082199, 0.014029068212510931, 0.03935068670454189, 0.29564386484155525, 0.26127396248444323, 0.23016054546354936, 0.27238562110202746, 0.26306945978759144, 0.2904126850059001, 0.27673220846188884, 0.24038009452058562, 0.20954296064265798, 0.05012914135731994, 0.06386137366978217, 0.0444549752970943, 0.06564323084886325, 0.04256870447962324, 0.08444741433075365, 0.06617330038605485, 0.04494934000794837, 0.054148343679468636, 0.11185410247654237, 0.1233873998250401, 0.18673176815753545, 0.20591835502878275, 0.13360577684888886, 0.13484763895663232, 0.14222779467542113, 0.16858510025404616, 0.13472140417709655, 0.17463609626458798, 0.19202911029124348, 0.15999865513535805, 0.2088843970655624, 0.1787963052286473, 0.14205524964196137, 0.14307825688051812, 0.19316750861347054, 0.17356016244013595, 0.15062112031499797, 0.10722809716630033, 0.1639876226868039, 0.17022456547563436, 0.13125166515027664, 0.14835632295323709, 0.09126519067528482, 0.0934020204603967, 0.07183546315833533, 0.18264501930743604, 0.1760993280339257, 0.2022702532735109, 0.17573834983796754, 0.2075879323533376, 0.16169451270544744, 0.18103539943221036, 0.18721228645628563, 0.17985247225707957, 0.15005500773942948, 0.16711744268930884, 0.16496350479800126, 0.16225352246552627, 0.17105652423985052, 0.17230399774808225, 0.1558547849227545, 0.13812536228166827, 0.15334656115898582, 0.15268393877660913, 0.11720053426561894, 0.121851122764018, 0.23057787188917578, 0.10173066787978657, 0.1213177035707087, 0.13677011857118992, 0.11299610627211665, 0.1432949187506778, 0.273543585914666, 0.1104134922253388, 0.09042114836427151, 0.10388439217020573, 0.16713917391157285, 0.11555511146556818, 0.10682716962399808, 0.10760071478116229, 0.10373036821611892, 0.17989656924041209, 0.1780122187794705, 0.19184975417748906, 0.17899174006501306, 0.17804205814172802, 0.1962580655693953, 0.19728653996397427, 0.17539488181276242, 0.18246844723826994, 0.06741557823355271, 0.07398668161616717, 0.062328107281005574, 0.0750957028724566, 0.05459176077922545, 0.07271814828241718, 0.053370866354353175, 0.05505393264842673, 0.06775505573667584]}, "mutation_prompt": null}
{"id": "2577f0d2-5f86-4f6c-a832-6f8fd4ccd741", "solution": "import numpy as np\n\nclass AdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i)) \n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        F = 0.8\n        CR = 0.9\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))  # Dynamic population size adjustment\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  \n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F, CR)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "AdaptiveMutationGADEWithDynamicPopulationSize", "description": "Introducing dynamic population size adjustment to balance exploration and exploitation.", "configspace": "", "generation": 66, "fitness": 0.14035526222092967, "feedback": "The algorithm AdaptiveMutationGADEWithDynamicPopulationSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "88ecd5d1-828e-4064-a99c-fc6d73b32f6c", "metadata": {"aucs": [0.2539611299631154, 0.3021885684677569, 0.30618047145516225, 0.2985579648338935, 0.2815011615015657, 0.2635065835815672, 0.27177220218448084, 0.28071168894106857, 0.2752736968136037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025981097788393415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06199410268162264, 0.05811997608131192, 0.05616783191696595, 0.058807104192736714, 0.052797055391019976, 0.060577668868946444, 0.053782385013492084, 0.05554145118940268, 0.053065432440032034, 0.04867061889623725, 0.048299266547291, 0.0656749570720373, 0.06136676789945772, 0.0662277424600286, 0.03125291720984802, 0.05021892164570252, 0.06346929722891126, 0.05733923531438945, 0.9227688968928603, 0.8929096572727353, 0.9172992776501383, 0.8401108432412394, 0.8501997493320839, 0.9286163898137246, 0.9097721223368035, 0.925329436703392, 0.9320089024672638, 0.11618863424424308, 0.10785879411280352, 0.08611055173301974, 0.09711331386860234, 0.1295164375406812, 0.12160243810426619, 0.1250957129414466, 0.07975037507809735, 0.14222799514142803, 0.14884016771849728, 0.08607265551768395, 0.11583375477951163, 0.24977373830264749, 0.14894657285999002, 0.1727948366618801, 0.17128755387487649, 0.10826637441674225, 0.12534687255807075, 0.04847673114459283, 0.09362134453566506, 0.06282635733031416, 0.02292476625000217, 0.07807775903992786, 0.07952097051447182, 0.081424834804813, 0.06776792683716903, 0.07547795524203227, 0.07842431442103193, 0.06359609349147177, 0.03802344871455665, 0.10177275776812311, 0.04986867361517611, 0.056349399089124175, 0.06413813340745078, 0.04365321568107905, 0.08674625542669578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024484620747656116, 0.04449551779697414, 0.06512796039628843, 0.069734036751946, 0.04060592955803677, 9.999999999998899e-05, 0.09944403567090498, 0.05014028588981778, 0.009547505605102424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015136463801648126, 0.017444596025916304, 0.0195178642092253, 0.058188451455893686, 0.004728295047654818, 0.006033366872747137, 0.02970866161968011, 0.012770010144562693, 0.05031953317163329, 0.2626748701084217, 0.2712394993469446, 0.27395510051124417, 0.26307341262696715, 0.27691819589191335, 0.2832942949039321, 0.30766485388097176, 0.22100379149131522, 0.24243426409097324, 0.07252082729240805, 0.05547449781459213, 0.07208492946851908, 0.038606056310919845, 0.05967427103400147, 0.05702706912039435, 0.0704960456850513, 0.05488511808717067, 0.09611699074049052, 0.15538344169804152, 0.13038686821261813, 0.161972813394771, 0.20520407139348507, 0.15085019599156402, 0.1182250879629213, 0.12390048306949253, 0.11434464064562577, 0.12709985429298953, 0.1703848259516193, 0.1835476385141238, 0.2238175694874841, 0.185443350908868, 0.1780603926179427, 0.1409625536581196, 0.17197530519555582, 0.20027378113620375, 0.12556723861300834, 0.1297807436191284, 0.08130755513573018, 0.1459178407866637, 0.16743312960344936, 0.1216042605572647, 0.14249029814060998, 0.09483855283833742, 0.11067330871653125, 0.0940934643509056, 0.1592085474736672, 0.17553778121576358, 0.2022702532735109, 0.18219657289032798, 0.17138505338008214, 0.18804565446677302, 0.19530478175115917, 0.14391400665262188, 0.18152922962464302, 0.14422400709772887, 0.16580184326073155, 0.13332214550278365, 0.17156573008150555, 0.15274287742983905, 0.1562587456341462, 0.15384806362587133, 0.1224651599337232, 0.15373449652352134, 0.12542312085123863, 0.11084070359065645, 0.12692602669960984, 0.19373290784090869, 0.11307425193467502, 0.10376298297500819, 0.11262616719663476, 0.11919702450597836, 0.14339566116088442, 0.27512843145125887, 0.10917848230730853, 0.08964094112415677, 0.07956498655821398, 0.16312804778103185, 0.11021556937912358, 0.12434226797491466, 0.14322386347277172, 0.1181331024058212, 0.18347906265023872, 0.20892114579965138, 0.1855217992761241, 0.17159452878869452, 0.1739003756920764, 0.1962580655693953, 0.2152712559981872, 0.16665914093535883, 0.1945631119001423, 0.05665105784979663, 0.07789679754364842, 0.046230094355313334, 0.08267870993647097, 0.06125235083421943, 0.04759866825365222, 0.07060824817153266, 0.05498482886695588, 0.06901011655686795]}, "mutation_prompt": null}
{"id": "6b65a6ed-ef59-4d3e-813f-fc4ecf1c2f2e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i)) \n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))  # Dynamic population size adjustment\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  \n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the population diversity by incorporating a differential evolution strategy alongside the existing genetic algorithm and particle swarm optimization components.", "configspace": "", "generation": 67, "fitness": 0.14903029464581843, "feedback": "The algorithm EnhancedAdaptiveMutationGADEWithDynamicPopulationSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.18.", "error": "", "parent_id": "2577f0d2-5f86-4f6c-a832-6f8fd4ccd741", "metadata": {"aucs": [0.2683385897465784, 0.2605149883658199, 0.28464481616338677, 0.28320615780753555, 0.3122782770674668, 0.32581782870921905, 0.29548112639756197, 0.2690760590444288, 0.2783080892596559, 0.003073313587920512, 0.013311197015025922, 0.03373276052828422, 0.01443589863777306, 0.014025045409088333, 0.005479659881267085, 0.0027484324834416984, 0.01796172628606052, 0.02125562620344268, 0.06042443736542513, 0.07728378854362272, 0.05756262015443403, 0.06314187525011272, 0.08390032155575011, 0.06267812110741944, 0.06808928520115132, 0.07322501971920958, 0.0611820215796004, 0.06439478818023603, 0.038656954808196864, 0.046421299490351564, 0.0519190075430348, 0.04124052978681014, 0.046354167271329794, 0.05124889850464953, 0.04880541291991014, 0.05387081499155888, 0.9022640325974297, 0.9411895146745031, 0.877162382021446, 0.9282000133115316, 0.856735613642615, 0.9194673532680658, 0.9030750016784236, 0.9058555288496052, 0.8270331091821419, 0.11924424821566404, 0.09363311341652902, 0.12645676286216678, 0.10596226962536659, 0.13597426936240098, 0.11167490057254581, 0.08737413909468783, 0.11390938050589372, 0.1100186970043242, 0.20690965944046147, 0.18366413485393274, 0.1819721845835255, 0.23921612791766778, 0.18102212426252295, 0.1985244473229334, 0.1873099260563197, 0.2110375072220806, 0.22021793030542047, 0.045196233439242284, 0.06939390065722817, 0.061312051225998254, 0.06622113445142075, 0.04275640585188212, 0.06644893715108535, 0.07676456860976288, 0.03986974486987105, 0.029757130697216416, 0.08102886390864972, 0.08321641526175139, 0.04066963301094362, 0.0370476639389391, 0.03269558813083406, 0.07748643845652936, 0.07030773529276246, 0.061375013644851206, 0.06032337049465919, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08566102415392174, 0.11616235579208478, 0.09425770189477467, 0.07208488423111536, 0.07005657265756127, 0.0691876540136489, 0.09764641768573168, 0.11105541272313935, 0.07318389255225688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018025820537581283, 0.02570203520411729, 0.026528247753469625, 0.02242374676417891, 0.02618626493739462, 0.026906648901779073, 0.042272985311393896, 0.04811888056726543, 0.03807064345537492, 0.24313720639269876, 0.276735200193749, 0.25568772962657926, 0.25983896614407875, 0.2556755193479535, 0.255942032915196, 0.2597456928978039, 0.24979991308262217, 0.2618933892116142, 0.0583975920790164, 0.06760639733713159, 0.0623726954926942, 0.06843559482240003, 0.055320626629608904, 0.056254496552002986, 0.05606389082695873, 0.06167493673633473, 0.06077736781147791, 0.1280534057920535, 0.13037928045344271, 0.13313928451599755, 0.12793252716101866, 0.13216091334898972, 0.1177663425983102, 0.13941956643746778, 0.16020724518708007, 0.13467567617669318, 0.1835295548652187, 0.1687499906012747, 0.21359849574076284, 0.19487413717263213, 0.16625113572727712, 0.1845608268473109, 0.17360026420856134, 0.1902118029090447, 0.20475372214146192, 0.12633883991040962, 0.15763231321448057, 0.1468682119734216, 0.14395273632573813, 0.12203283466920833, 0.144283307188666, 0.15989705175292324, 0.13148142661336948, 0.13054182071700138, 0.17127660250960475, 0.17494796812763502, 0.18109857109573246, 0.18929544125916586, 0.1681986181527525, 0.18021995749848685, 0.16299512905531532, 0.15250745153591283, 0.1648659246959946, 0.15162901209440838, 0.17033573337472152, 0.15736229047156558, 0.16847108776228237, 0.1574354990533593, 0.1547763625285108, 0.1570700678389687, 0.14635647593709888, 0.16683242900807382, 0.17954141766463527, 0.1498014841694839, 0.15977439579960906, 0.1471953271213572, 0.22114401257942706, 0.16549797358101181, 0.1611901136790297, 0.15814202840473268, 0.1364839234694869, 0.16776497516226896, 0.4542323548870558, 0.15814816529936138, 0.1548049847204076, 0.14968251804921784, 0.14653280022297932, 0.19023842216125475, 0.20097195560817915, 0.1888689608212759, 0.18000821916153797, 0.17616878111106038, 0.18430299575002396, 0.18275892553624895, 0.18872830613987734, 0.19263523316657405, 0.170619871915918, 0.17895223351613188, 0.17657528883013707, 0.05149573259138451, 0.05410391335428355, 0.06070608141667233, 0.056009833449962354, 0.0744619897179537, 0.05062699041966956, 0.05995429393837204, 0.06845715888234716, 0.06964005020114417]}, "mutation_prompt": null}
{"id": "b8fde80f-fa54-47dd-a630-ad0f18533365", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_adaptive(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i)) \n                    # Introducing Levy flight mutation\n                    if np.random.rand() < 0.1:  \n                        gamma = 0.1\n                        sigma = (math.gamma(1 + gamma) * np.sin(np.pi * gamma / 2) / (math.gamma((1 + gamma) / 2) * gamma * 2 ** ((gamma - 1) / 2))) ** (1 / gamma)\n                        levy = 0.01 * sigma * np.random.standard_t(2 * gamma)\n                        mutated[i] += levy\n                    else:\n                        mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))  # Dynamic population size adjustment\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  \n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_adaptive(population[i], population, F_de, CR_de)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Incorporating a novel adaptive mutation strategy based on Levy flights to enhance exploration and exploit the search space efficiently.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'math' is not defined\").", "error": "NameError(\"name 'math' is not defined\")", "parent_id": "6b65a6ed-ef59-4d3e-813f-fc4ecf1c2f2e", "metadata": {}, "mutation_prompt": null}
{"id": "dc52735a-3a30-4a63-8fbc-4cbd763eb3e4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def adapt_mutate_de(current, candidates, F, CR, factor):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < factor[i] * CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i)) \n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        mutation_factors = np.ones(self.dim)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))  # Dynamic population size adjustment\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  \n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = adapt_mutate_de(population[i], population, F_de, CR_de, mutation_factors)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n                # Adapt mutation factors based on individual performance\n                mutation_factors = np.where(func(population) < func(best_solution), mutation_factors * 1.05, mutation_factors * 0.95)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Improving population diversity and exploration by incorporating a novel adaptive mutation strategy that dynamically adjusts mutation rates based on individual performance.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'<' not supported between instances of 'list' and 'float'\").", "error": "TypeError(\"'<' not supported between instances of 'list' and 'float'\")", "parent_id": "6b65a6ed-ef59-4d3e-813f-fc4ecf1c2f2e", "metadata": {}, "mutation_prompt": null}
{"id": "19bb62b0-34f7-46b3-a891-7fef66de1d9a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i)) \n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))  # Dynamic population size adjustment\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)  \n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the population diversity by incorporating a differential evolution strategy alongside the existing genetic algorithm and particle swarm optimization components.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6b65a6ed-ef59-4d3e-813f-fc4ecf1c2f2e", "metadata": {"aucs": [0.2683385897465784, 0.2605149883658199, 0.28464481616338677, 0.28320615780753555, 0.3122782770674668, 0.32581782870921905, 0.29548112639756197, 0.2690760590444288, 0.2783080892596559, 0.003073313587920512, 0.013311197015025922, 0.03373276052828422, 0.01443589863777306, 0.014025045409088333, 0.005479659881267085, 0.0027484324834416984, 0.01796172628606052, 0.02125562620344268, 0.06042443736542513, 0.07728378854362272, 0.05756262015443403, 0.06314187525011272, 0.08390032155575011, 0.06267812110741944, 0.06808928520115132, 0.07322501971920958, 0.0611820215796004, 0.06439478818023603, 0.038656954808196864, 0.046421299490351564, 0.0519190075430348, 0.04124052978681014, 0.046354167271329794, 0.05124889850464953, 0.04880541291991014, 0.05387081499155888, 0.9022640325974297, 0.9411895146745031, 0.877162382021446, 0.9282000133115316, 0.856735613642615, 0.9194673532680658, 0.9030750016784236, 0.9058555288496052, 0.8270331091821419, 0.11924424821566404, 0.09363311341652902, 0.12645676286216678, 0.10596226962536659, 0.13597426936240098, 0.11167490057254581, 0.08737413909468783, 0.11390938050589372, 0.1100186970043242, 0.20690965944046147, 0.18366413485393274, 0.1819721845835255, 0.23921612791766778, 0.18102212426252295, 0.1985244473229334, 0.1873099260563197, 0.2110375072220806, 0.22021793030542047, 0.045196233439242284, 0.06939390065722817, 0.061312051225998254, 0.06622113445142075, 0.04275640585188212, 0.06644893715108535, 0.07676456860976288, 0.03986974486987105, 0.029757130697216416, 0.08102886390864972, 0.08321641526175139, 0.04066963301094362, 0.0370476639389391, 0.03269558813083406, 0.07748643845652936, 0.07030773529276246, 0.061375013644851206, 0.06032337049465919, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08566102415392174, 0.11616235579208478, 0.09425770189477467, 0.07208488423111536, 0.07005657265756127, 0.0691876540136489, 0.09764641768573168, 0.11105541272313935, 0.07318389255225688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018025820537581283, 0.02570203520411729, 0.026528247753469625, 0.02242374676417891, 0.02618626493739462, 0.026906648901779073, 0.042272985311393896, 0.04811888056726543, 0.03807064345537492, 0.24313720639269876, 0.276735200193749, 0.25568772962657926, 0.25983896614407875, 0.2556755193479535, 0.255942032915196, 0.2597456928978039, 0.24979991308262217, 0.2618933892116142, 0.0583975920790164, 0.06760639733713159, 0.0623726954926942, 0.06843559482240003, 0.055320626629608904, 0.056254496552002986, 0.05606389082695873, 0.06167493673633473, 0.06077736781147791, 0.1280534057920535, 0.13037928045344271, 0.13313928451599755, 0.12793252716101866, 0.13216091334898972, 0.1177663425983102, 0.13941956643746778, 0.16020724518708007, 0.13467567617669318, 0.1835295548652187, 0.1687499906012747, 0.21359849574076284, 0.19487413717263213, 0.16625113572727712, 0.1845608268473109, 0.17360026420856134, 0.1902118029090447, 0.20475372214146192, 0.12633883991040962, 0.15763231321448057, 0.1468682119734216, 0.14395273632573813, 0.12203283466920833, 0.144283307188666, 0.15989705175292324, 0.13148142661336948, 0.13054182071700138, 0.17127660250960475, 0.17494796812763502, 0.18109857109573246, 0.18929544125916586, 0.1681986181527525, 0.18021995749848685, 0.16299512905531532, 0.15250745153591283, 0.1648659246959946, 0.15162901209440838, 0.17033573337472152, 0.15736229047156558, 0.16847108776228237, 0.1574354990533593, 0.1547763625285108, 0.1570700678389687, 0.14635647593709888, 0.16683242900807382, 0.17954141766463527, 0.1498014841694839, 0.15977439579960906, 0.1471953271213572, 0.22114401257942706, 0.16549797358101181, 0.1611901136790297, 0.15814202840473268, 0.1364839234694869, 0.16776497516226896, 0.4542323548870558, 0.15814816529936138, 0.1548049847204076, 0.14968251804921784, 0.14653280022297932, 0.19023842216125475, 0.20097195560817915, 0.1888689608212759, 0.18000821916153797, 0.17616878111106038, 0.18430299575002396, 0.18275892553624895, 0.18872830613987734, 0.19263523316657405, 0.170619871915918, 0.17895223351613188, 0.17657528883013707, 0.05149573259138451, 0.05410391335428355, 0.06070608141667233, 0.056009833449962354, 0.0744619897179537, 0.05062699041966956, 0.05995429393837204, 0.06845715888234716, 0.06964005020114417]}, "mutation_prompt": null}
{"id": "329c4f9c-6ecb-47d0-93c1-5b773f0e96a0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2\n                else:\n                    step_size *= 0.8\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_guided_search(current, ref_population, F):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                F_i = F + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i))\n                mutated[i] = target_to_bounds(current[i] + F_i * (ref_population[b, i] - ref_population[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i))\n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))  # Dynamic population size adjustment\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_guided_search(population[i], population, F_de)\n                mutated_fitness_de = func(trial_de)\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the optimization algorithm by incorporating a new mutation strategy based on a guided search using a reference population.", "configspace": "", "generation": 71, "fitness": 0.14865174223488004, "feedback": "The algorithm EnhancedAdaptiveMutationGADEWithDynamicPopulationSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "6b65a6ed-ef59-4d3e-813f-fc4ecf1c2f2e", "metadata": {"aucs": [0.26134755679550126, 0.24575986088305057, 0.2401286354238067, 0.28554825339736534, 0.2936979165711535, 0.3164369316653547, 0.27000614731997175, 0.269330972506001, 0.2508185939397889, 0.011250481031045423, 0.019018924499719092, 0.02616511409152611, 0.10051631532434335, 0.04500555310357157, 0.01310360835025659, 0.009928894420139889, 0.017351129524027065, 0.019501275871450563, 0.04747832726158918, 0.05842986343490686, 0.05604182846729222, 0.13273222537881924, 0.05897224203377849, 0.06163668348978102, 0.072324577944064, 0.07117669088280565, 0.06599708787613567, 0.05020196906021812, 0.04306435258155783, 0.050479500258679755, 0.04984949919661208, 0.05812699985104486, 0.058074656735049746, 0.04616084409810717, 0.040196429270486944, 0.05036912982530395, 0.9049063186255255, 0.8378918041177496, 0.8695878944357872, 0.9109107779369918, 0.9076112809394709, 0.8892559635415469, 0.8797342596830505, 0.8572247563957157, 0.8242304886293957, 0.09507078867607965, 0.09474522502376237, 0.14989018855176695, 0.09024275895724354, 0.10593239261989329, 0.10108126991665833, 0.10195850800371864, 0.126971651348888, 0.12746392143763186, 0.19792595882472275, 0.18819125341895182, 0.19856074599957396, 0.1766476817540894, 0.2287978403863653, 0.17931691043416975, 0.17924422209787427, 0.1868275824331549, 0.18516643011016332, 0.03272767049796732, 0.06121067951476111, 0.0768434079293997, 0.07708327721954189, 0.07996652086815736, 0.0844134554604854, 0.05074357601750712, 0.06514754751317942, 0.04293589464929004, 0.10020357590817075, 0.06197069912648934, 0.08257841946939892, 0.06572694058378037, 0.054491424650347065, 0.048785950158711566, 0.08325870986762529, 0.06721899653356556, 0.06633389846083881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013848090367318822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09875221805884615, 0.0876932777447591, 0.0680908162865107, 0.08668473487362038, 0.06786330309315092, 0.13053209173367608, 0.13209482951503904, 0.08801171008559816, 0.11986772377999455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036148553589240184, 0.03237909230877345, 0.026793333928837648, 0.03520596368272633, 0.032822538705202575, 0.04277727310378776, 0.03630076604145793, 0.04480775444133256, 0.032377331809562704, 0.2370393174306793, 0.26402639402225714, 0.26525240372647063, 0.3025715007604013, 0.24873143980766865, 0.27017995044019394, 0.26074072215707167, 0.2753259799410348, 0.24717410100829762, 0.07431191844432616, 0.07154928850299025, 0.0697895699458917, 0.07185884285102295, 0.05743788891157786, 0.05896964090713541, 0.05921429315977145, 0.07443181772860774, 0.052716108203700096, 0.12062214277850802, 0.13265964602749825, 0.14363692213388168, 0.13908501235821136, 0.14781297702277518, 0.14158129888472704, 0.14759350888490064, 0.17791353962308276, 0.14905476968661202, 0.1875625325269933, 0.17233071231098096, 0.1944684233109023, 0.17990430100035082, 0.18175175401025612, 0.18481245127676893, 0.18444742803150382, 0.20068917608156878, 0.20296176555794243, 0.1199676388001395, 0.12983748077166946, 0.13044042216812013, 0.1288474319439945, 0.1346293512670187, 0.1385483241969523, 0.12039097457720904, 0.12566866022498302, 0.14587502733633062, 0.19293105011453926, 0.17210752335664692, 0.17885342497290824, 0.1834171888868037, 0.16209281467517145, 0.16144338673750502, 0.17594022264797493, 0.17958568637564698, 0.1610637592601193, 0.1504467696899503, 0.15836865965848412, 0.16613582913854608, 0.15141777270361145, 0.15003933066907849, 0.16737556968454337, 0.15125158146721784, 0.15492085674166156, 0.16135448550469267, 0.14785179190253894, 0.1541878178337991, 0.14916074728666628, 0.1637728318378322, 0.1547513981339358, 0.13720302199160428, 0.17826704501334478, 0.1601813773220614, 0.21658556850483124, 0.14850433505729888, 0.1688569827640627, 0.1958969715881569, 0.14059982759640643, 0.1609461247175823, 0.14266440489888377, 0.1997721323525279, 0.2638832976488572, 0.1983496216799212, 0.18566974891411825, 0.17283304147007017, 0.17385829653547957, 0.19190177092875316, 0.1900857725075198, 0.17587129055618367, 0.18292582787982015, 0.17125709736476113, 0.18041041071299113, 0.05259098553477448, 0.05254627981363902, 0.06770349029835632, 0.060237784790588944, 0.056366665703559526, 0.053546863537269784, 0.06887511707028493, 0.07146186550906897, 0.05173756766919502]}, "mutation_prompt": null}
{"id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 72, "fitness": 0.1490862428622054, "feedback": "The algorithm EnhancedAdaptiveMutationGADEWithDynamicPopulationSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "6b65a6ed-ef59-4d3e-813f-fc4ecf1c2f2e", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "ddce22b1-0be3-4e69-ac74-9fd1e966a05f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "928aa7f3-1caa-414a-9608-fc7c74c5adb1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "929cf42a-9c47-49e8-9282-e95b79ea7051", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "b8c25c05-96ae-4e77-be2a-82c024cee240", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "a1b5454c-3e48-4084-86fe-cb8fed69fe5a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "f47fb573-3a9c-446b-845e-ca41274d9fa1", "solution": "import numpy as np\n\nclass MultiSwarmOptimizationWithDynamicInteraction:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "MultiSwarmOptimizationWithDynamicInteraction", "description": "Enhancing population diversity through multi-swarm optimization with dynamic swarm interaction to improve global exploration and exploitation.", "configspace": "", "generation": 78, "fitness": 0.1490862428622054, "feedback": "The algorithm MultiSwarmOptimizationWithDynamicInteraction got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "fad2089b-897a-48b5-bbb3-6f33b2b23ca8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "a210d5ae-26c9-4925-94f2-c93f18db5523", "solution": "import numpy as np\n\nclass HybridPSODEAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "HybridPSODEAlgorithm", "description": "Enhancing the algorithm by incorporating a hybrid approach that combines Particle Swarm Optimization (PSO) with Differential Evolution (DE) for improved exploration and exploitation capabilities.", "configspace": "", "generation": 80, "fitness": 0.1490862428622054, "feedback": "The algorithm HybridPSODEAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "303dd925-a895-4fb7-8d69-1b6e4ba6c3e4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "f27f5779-013f-40c6-b189-2b546d026f0f", "solution": "import numpy as np\n\nclass CooperativePSOWithDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2\n                else:\n                    step_size *= 0.8\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i))\n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "CooperativePSOWithDE", "description": "Utilizing multi-stage optimization by combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) in a cooperative framework to enhance exploration-exploitation trade-off and convergence speed.", "configspace": "", "generation": 82, "fitness": 0.1490862428622054, "feedback": "The algorithm CooperativePSOWithDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "43605257-4ce3-478e-9068-b2ce7105c703", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "cc20b41b-bb58-4753-922c-1349a680d1d3", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSizeImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, diversity, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            diversity = np.std(population)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, diversity, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSizeImproved", "description": "Enhancing the algorithm by incorporating a novel adaptive mechanism that dynamically adjusts the mutation and crossover rates based on the population's diversity and fitness to improve exploration and exploitation balance.", "configspace": "", "generation": 84, "fitness": 0.1489226130193575, "feedback": "The algorithm EnhancedAdaptiveMutationGADEWithDynamicPopulationSizeImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.07226237827791426, 0.055948180284152826, 0.08749500933762322, 0.07513604633876547, 0.026687812810969103, 0.052031437998034225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.19484227185388925, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1680528945700711, 0.14635647593709888, 0.15931084675201823, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "47b3e618-603a-41b2-8296-42c05936c371", "solution": "import numpy as np\n\nclass UpdatedEnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2\n                else:\n                    step_size *= 0.8\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return particles[np.argmin([func(p) for p in particles])]\n\n        def particle_swarm_optimization(population, velocities, best_solution, best_particle):\n            for i in range(len(population)):\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n            return population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                population = particle_swarm_optimization(population, velocities, best_solution, best_particle)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "UpdatedEnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by incorporating a novel particle swarm optimization mechanism to improve global exploration and exploitation during the optimization process.", "configspace": "", "generation": 85, "fitness": 0.10523816342760423, "feedback": "The algorithm UpdatedEnhancedAdaptiveMutationGADEWithDynamicPopulationSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.16740926703700776, 0.13082473789110793, 0.14341460764059444, 0.16914535823571153, 0.30309464412004383, 0.23562530395412462, 0.22085349504076712, 0.16648133785901753, 0.15335254259303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05077929653654334, 0.008644571576544191, 0.012992992012621829, 0.029688002123996915, 0.014818730633277877, 0.011461576863383005, 0.03504282626054411, 0.017339570136810645, 0.0139309671342287, 0.0017003096053304079, 0.003837500385049264, 9.999999999998899e-05, 0.0050644577075336095, 0.034753461801058094, 0.009648917726258865, 9.999999999998899e-05, 9.999999999998899e-05, 0.021127178763522547, 0.9782798134702556, 0.9339389000418044, 0.9094679058691202, 0.9760769147645731, 0.9723440411075119, 0.9820665471289852, 0.9761914765639322, 0.9794777540760173, 0.9819091120390323, 0.05373962392118703, 0.04692471787047647, 0.021611708706819055, 0.010290317514550229, 0.10188713182321718, 0.03035292495575781, 9.999999999998899e-05, 0.049343949056459, 0.048907987867933156, 0.15053098543562393, 0.03724228498872595, 0.023382258115170584, 0.09891985595547625, 0.04096745242607558, 0.06842108500743094, 0.14888725955974458, 0.10169839248445023, 0.0890731784870239, 9.999999999998899e-05, 9.999999999998899e-05, 0.0044075854399397985, 9.999999999998899e-05, 0.022841123613093983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08118820340026012, 9.999999999998899e-05, 0.028295642667215404, 0.005431714700732337, 9.999999999998899e-05, 0.011402727072440166, 0.01676714299665183, 9.999999999998899e-05, 0.04795685069351252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016151336261358562, 0.014198097108461427, 9.999999999998899e-05, 0.05328743934250402, 0.010015182091309027, 0.029107749167555985, 0.05089991215042733, 9.999999999998899e-05, 0.020397957291212854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023957798381442963, 0.030334216963380123, 0.016941251973117688, 9.999999999998899e-05, 0.012314259649157111, 0.018598672266008753, 0.009631728978177101, 0.20719522877468743, 0.13389922412447763, 0.22090745828539815, 0.21049817300415274, 0.16828230554812107, 0.18687805846877126, 0.21437524382030992, 0.14304257488402217, 0.15601690529806111, 0.034335220421607526, 0.028759995978028252, 0.03831466368283598, 0.018881149838981037, 0.016079263474855554, 0.029313953024256656, 0.05341571059228589, 0.03244647544561452, 0.02670183845097307, 0.10233497193685615, 0.1086438557051691, 0.16873234872686171, 0.12326167322679471, 0.13988810233442395, 0.1394035473477574, 0.1617829838502468, 0.10601949737623906, 0.1303666260306895, 0.1768900300195524, 0.10624397987080525, 0.12276088292610843, 0.1667160420358128, 0.11853234157904413, 0.14283188831221993, 0.16029651382627197, 0.13440246384318577, 0.11946372361070168, 0.11376457643799331, 0.05420096611718872, 0.08422317015461145, 0.13268195919333126, 0.03963306666024058, 0.10823522502896044, 0.11431240455893166, 0.05978674838643616, 0.06372693794395856, 0.12077414651173823, 0.10120082953334075, 0.1354170900081899, 0.1540141720764916, 0.09875402052236326, 0.13486252902941542, 0.14155698251533544, 0.1309529035841187, 0.14050490747745903, 9.999999999998899e-05, 0.09103754565905708, 9.999999999998899e-05, 0.15264034768625734, 9.999999999998899e-05, 0.10682908363009247, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1638031346836326, 0.10754691318685816, 0.10369180993273219, 0.09699759520213103, 0.06432650855335975, 0.11975498988641575, 0.11205615253321322, 0.12285984269193218, 0.10886207457221886, 0.09249946014619126, 0.10904507313192568, 0.11876282063977472, 0.10431261385646107, 0.13757579333736758, 0.08706619715440445, 0.11359790500924283, 0.08905525209191001, 0.10360812913582229, 0.1729401341564588, 0.17850116862427767, 0.16642725952999304, 0.2047880308570572, 0.1803171313223002, 0.18005856440221746, 0.18168419729136187, 0.19016558425513053, 0.18058086206730117, 0.03538879175283205, 0.015926008949398107, 0.037325453447882184, 0.02131029847572352, 0.02065676719257592, 0.022390921588930746, 0.03141878780535967, 0.008325215728221647, 0.033035706330010184]}, "mutation_prompt": null}
{"id": "d99e1d78-3667-4f5a-bf67-b493d7c0a016", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "ab7917e7-f1a9-4e5f-b207-0a243cec07e9", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationGADEWithLocalFitnessInformation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2\n                else:\n                    step_size *= 0.8\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i))\n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedDynamicMutationGADEWithLocalFitnessInformation", "description": "Improving exploration by incorporating a dynamic mutation strategy based on local fitness landscape information.", "configspace": "", "generation": 87, "fitness": 0.1490862428622054, "feedback": "The algorithm EnhancedDynamicMutationGADEWithLocalFitnessInformation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "d3fe6fee-fcaf-4d2a-884f-318bccdddb95", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "a128a958-df38-4966-8d3d-b0c16869e525", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "d12c71bf-72fb-461b-968e-47f97fb66ad8", "solution": "import numpy as np\n\nclass EnhancedHybridPSODEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2\n                else:\n                    step_size *= 0.8\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i))\n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedHybridPSODEWithDynamicPopulationSize", "description": "Combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) to enhance population diversity and exploitation capabilities.", "configspace": "", "generation": 90, "fitness": 0.1490862428622054, "feedback": "The algorithm EnhancedHybridPSODEWithDynamicPopulationSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "4208731e-ef57-4478-bd18-b36edaeec204", "solution": "import numpy as np\n\nclass CooperativeCoevolutionaryEnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n        num_subpopulations = 3\n        \n        # Remaining code stays the same until the end\n        # Integrate cooperative coevolutionary strategy to handle multiple subpopulations\n        \n        # Define functions for cooperative coevolutionary strategy\n        \n        # Separate population into subpopulations\n        def separate_subpopulations(population):\n            subpop_size = len(population) // num_subpopulations\n            subpopulations = [population[i*subpop_size:(i+1)*subpop_size] for i in range(num_subpopulations)]\n            return subpopulations\n\n        # Merge subpopulations back into a single population\n        def merge_subpopulations(subpopulations):\n            return np.concatenate(subpopulations)\n\n        # Evolve subpopulations independently\n        def evolve_subpopulations(subpopulations, func):\n            new_subpopulations = []\n            for subpopulation in subpopulations:\n                new_subpopulation = differential_evolution(subpopulation, func)\n                new_subpopulations.append(new_subpopulation)\n            return new_subpopulations\n\n        # Exchange information between subpopulations\n        def exchange_information(subpopulations):\n            for i in range(num_subpopulations):\n                for j in range(num_subpopulations):\n                    if i != j:\n                        random_individual_i = np.random.choice(subpopulations[i])\n                        random_individual_j = np.random.choice(subpopulations[j])\n                        subpopulations[i][np.random.randint(len(subpopulations[i]))] = random_individual_j\n                        subpopulations[j][np.random.randint(len(subpopulations[j]))] = random_individual_i\n            return subpopulations\n\n        # Main loop integrating cooperative coevolutionary strategy\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n\n            subpopulations = separate_subpopulations(population)\n            subpopulations = evolve_subpopulations(subpopulations, func)\n            subpopulations = exchange_information(subpopulations)\n            population = merge_subpopulations(subpopulations)\n\n            # Remaining code remains the same\n            # Perform local search, update velocities, etc.\n\n        return best_solution", "name": "CooperativeCoevolutionaryEnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by incorporating a cooperative coevolutionary strategy to evolve subpopulations independently and exchange information periodically to improve global search capability.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'differential_evolution' is not defined\").", "error": "NameError(\"name 'differential_evolution' is not defined\")", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {}, "mutation_prompt": null}
{"id": "1581ddee-ce02-47b1-80a0-043ee669864e", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass EnhancedAdaptiveMutationGADEWithParallelSubpopulations:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        with ThreadPoolExecutor(max_workers=4) as executor:\n            for _ in range(self.budget // (initial_pop_size * 4)):\n                populations = [np.random.uniform(-5.0, 5.0, (initial_pop_size, self.dim)) for _ in range(4)]\n                velocities = [np.zeros((initial_pop_size, self.dim)) for _ in range(4)]\n                best_particles = [np.copy(best_solution) for _ in range(4)]\n                fitness_arrays = [np.zeros(initial_pop_size) for _ in range(4)]\n\n                for k in range(4):\n                    for i in range(initial_pop_size):\n                        parent1 = populations[k][i]\n                        parent2 = populations[k][np.random.choice(initial_pop_size)]\n                        diversity = np.std(populations[k])\n                        populations[k][i] = crossover_ga(parent1, parent2, diversity)\n\n                        trial_de = mutate_de(populations[k][i], populations[k], F_de, CR_de, fitness_arrays[k])\n                        mutated_fitness_de = func(trial_de)\n                        fitness_arrays[k][i] = mutated_fitness_de\n                        if mutated_fitness_de < func(populations[k][i]):\n                            populations[k][i] = trial_de\n\n                        velocities[k][i] = omega * velocities[k][i] + c1 * np.random.rand(self.dim) * (best_particles[k] - populations[k][i]) + c2 * np.random.rand(self.dim) * (best_solution - populations[k][i])\n                        populations[k][i] = target_to_bounds(populations[k][i] + velocities[k][i], -5.0, 5.0)\n\n                        populations[k] = differential_evolution(populations[k], func)\n\n                        populations[k][i] = local_search(populations[k][i], func)\n\n                        if func(populations[k][i]) < best_fitness:\n                            best_solution = populations[k][i]\n                            best_fitness = func(populations[k][i])\n                        best_particles[k] = global_best_pso(populations[k], best_particles[k])\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithParallelSubpopulations", "description": "Enhancing the algorithm by incorporating a parallelism strategy utilizing multiple subpopulations to promote diverse exploration and exploit the search space efficiently.", "configspace": "", "generation": 92, "fitness": 0.14111920772190908, "feedback": "The algorithm EnhancedAdaptiveMutationGADEWithParallelSubpopulations got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.27357807228281883, 0.2193053386687196, 0.2405003602091883, 0.26888398143767567, 0.23388838912276766, 0.2929485565633848, 0.2590059716419941, 0.25821293318560734, 0.2470697768066339, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011733137134634086, 9.999999999998899e-05, 0.0020616538132320894, 9.999999999998899e-05, 9.999999999998899e-05, 0.05516346098536706, 0.059698977695775146, 0.05787211327947139, 0.06255350342439192, 0.050566790525557015, 0.061225085454325145, 0.06357098411000484, 0.05761738304241337, 0.06160456468757525, 0.043891837691935165, 0.0412664694641639, 0.033061416509794994, 0.04034692174576937, 0.048954214520635086, 0.06283948354276758, 0.054850854260546145, 0.03111143556630791, 0.06686460381024772, 0.8922418541193835, 0.9093278735042057, 0.8797551281117475, 0.8710034519031513, 0.8637158921799147, 0.9859244802243415, 0.8919149764522228, 0.8605916928905494, 0.9447858435811478, 0.09202921952320542, 0.10703300364682622, 0.08374876849683022, 0.08923213328605029, 0.08937851545582831, 0.09420747992148426, 0.10323952019310545, 0.09767350012918541, 0.10010306721622986, 0.17034534426543613, 0.1805649430088666, 0.1583040490175559, 0.19565050804847584, 0.1657454007736322, 0.17751580049535132, 0.1994395243776821, 0.20440683423543082, 0.16246495676362116, 0.06302821098827172, 0.04329889480323468, 0.00530352700915937, 0.045610361118754716, 0.03977853885153981, 0.03059945693581545, 0.07143743931371149, 0.014856652581553664, 0.035958500748427324, 0.07474146043856655, 0.09427893778221264, 0.07438013940852128, 0.08925386014079628, 0.05827042483250533, 0.029921383784669908, 0.06067526647768484, 0.03093940183132038, 0.004565338224543858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06651652449701395, 0.07209468729287405, 0.09169059286239867, 0.0666270662072509, 0.047703135172076916, 0.12211787484624459, 0.10734813660476339, 0.09311518572414423, 0.08835690313495959, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0062956709770704, 0.022241412262423932, 0.022753623467652306, 0.020872303548668092, 0.039470104014792784, 0.005869169019933396, 0.01863545467455574, 0.045881470260187074, 0.048150172822510995, 0.24339984587153363, 0.23313310924313269, 0.2456313102989307, 0.25280701349781953, 0.21984875321216768, 0.23454044964592635, 0.21539480475256467, 0.21819341911150902, 0.2401880890865642, 0.06579875926434797, 0.0638654669839499, 0.06416301126994384, 0.06114390053675256, 0.05196912301345924, 0.06644174363937583, 0.05750927919979709, 0.07207793140334762, 0.09666360299881505, 0.12898614144120457, 0.12267156249086186, 0.12800699612982336, 0.13325183120473716, 0.13554673425507813, 0.1286830868029316, 0.12321029971853892, 0.1468245169698601, 0.13987927753773644, 0.16471579473243725, 0.17046858701756296, 0.17456887372953256, 0.19109213744200915, 0.16324111935332697, 0.1663819174658031, 0.18591051717249907, 0.17473026354450139, 0.17829830695747095, 0.11643576125087818, 0.1060165485171588, 0.13783938627458103, 0.1375013415230596, 0.11784604576235946, 0.10120365270686216, 0.16078168479552535, 0.13463049264292914, 0.12151325570457283, 0.15922498977279287, 0.18900975895163574, 0.1872189783598769, 0.16858148801249062, 0.17586608913966262, 0.2557887356712425, 0.17085582269115962, 0.1519208029668051, 0.1795392688604721, 0.1564418108494634, 0.15196943306739885, 0.1552354490465414, 0.1503175998342483, 0.15479957245158182, 0.17294404893880433, 0.1630650852278992, 0.16659017571546797, 0.15923429770928743, 0.14651917806189318, 0.16451829525727424, 0.19223842372390376, 0.15244572595377703, 0.1539637603216797, 0.156797360170852, 0.1541988104612455, 0.15057427374530907, 0.17740760587644544, 0.1645006637711267, 0.15632725441356565, 0.14141290790098515, 0.15556224414430486, 0.12014003386889183, 0.14259650082420283, 0.2014928682514121, 0.25442262115871084, 0.20278022413810404, 0.18624307410840324, 0.18270829397314226, 0.18009142983742454, 0.1802854128954814, 0.17879633775513226, 0.1972005719431804, 0.17776824055914364, 0.1716272759754145, 0.17690747966786513, 0.05135745802592173, 0.056385529556788216, 0.05446171688794532, 0.05615400706753737, 0.05981529328885571, 0.05934808986077311, 0.07276382684435811, 0.05079891816589266, 0.06435851379000046]}, "mutation_prompt": null}
{"id": "907406de-317e-458e-b146-4d873dcc3097", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array, historical_fitness_improvement):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    F_i *= 1.0 + historical_fitness_improvement[a]  # Introducing historical fitness improvement\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        historical_fitness_improvement = np.zeros(initial_pop_size)  # Track historical fitness improvement\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array, historical_fitness_improvement)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n                # Update historical fitness improvement\n                historical_fitness_improvement[i] = max(0, (best_fitness - mutated_fitness_de) / best_fitness)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the individual's historical fitness improvement to guide mutation.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 30 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 30 is out of bounds for axis 0 with size 30')", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {}, "mutation_prompt": null}
{"id": "96fb2d64-7b6c-4a6d-a1b6-7c2988ee8762", "solution": "import numpy as np\n\nclass CompetitiveAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2\n                else:\n                    step_size *= 0.8\n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity\n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def competitive_selection(population, fitness_values):\n            sorted_indices = np.argsort(fitness_values)\n            return population[sorted_indices[0]]\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i))\n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "CompetitiveAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by incorporating a competitive selection mechanism based on fitness values to guide the exploration process effectively.", "configspace": "", "generation": 94, "fitness": 0.1490862428622054, "feedback": "The algorithm CompetitiveAdaptiveMutationGADEWithDynamicPopulationSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "bb61cbca-16dd-4faf-83aa-66e69cf1227b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "ae8edd16-5282-4203-acfb-e5171fa70194", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
{"id": "6c95ed6f-a823-4720-be95-6d93cd10bdf6", "solution": "import chaospy as cp\n\nclass EnhancedAdaptiveMutationGADEWithChaoticSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def chaos_search(candidate):\n            distribution = cp.Uniform(-0.1, 0.1)\n            perturbation = distribution.sample(self.dim)\n            return target_to_bounds(candidate + perturbation, -5.0, 5.0)\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithChaoticSearch", "description": "Improving exploration by incorporating a chaotic search strategy to enhance population diversity and convergence.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'chaospy'\").", "error": "ModuleNotFoundError(\"No module named 'chaospy'\")", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {}, "mutation_prompt": null}
{"id": "869c1849-b09f-4f1f-9a88-66a252e4a72e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n        step_size_factor = 0.01\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local, eval_count):\n            best_candidate = np.copy(candidate)\n            step_size = step_size_factor\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                eval_count += 1\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2\n                else:\n                    step_size *= 0.8\n            return best_candidate, eval_count\n\n        eval_count = 0\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i], eval_count = local_search(population[i], func, eval_count)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Improving the local search mechanism by utilizing a novel adaptive step size adjustment based on function evaluations to enhance exploitation capabilities.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover_ga' is not defined\").", "error": "NameError(\"name 'crossover_ga' is not defined\")", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {}, "mutation_prompt": null}
{"id": "9d46a39b-b26e-439e-bec6-831d53bc3a82", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationGADEWithDynamicPopulationSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        initial_pop_size = 30\n        max_ls_iter = 5\n        omega = 0.5\n        c1 = 1.5\n        c2 = 1.5\n        F_de = 0.8\n        CR_de = 0.9\n\n        def target_to_bounds(target, lower, upper):\n            return np.clip(target, lower, upper)\n\n        def local_search(candidate, f_local):\n            best_candidate = np.copy(candidate)\n            step_size = 0.01\n            for _ in range(max_ls_iter):\n                new_candidate = target_to_bounds(best_candidate + step_size * np.random.randn(self.dim), -5.0, 5.0)\n                if f_local(new_candidate) < f_local(best_candidate):\n                    best_candidate = new_candidate\n                    step_size *= 1.2  \n                else:\n                    step_size *= 0.8  \n            return best_candidate\n\n        def crossover_ga(parent1, parent2, diversity):\n            child = np.copy(parent1)\n            prob_crossover = 0.5 + 0.4 * diversity  \n            for i in range(self.dim):\n                if np.random.rand() < prob_crossover:\n                    child[i] = parent2[i]\n            return child\n\n        def mutate_de(current, candidates, F, CR, fitness_array):\n            mutated = np.copy(current)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    a, b, c = np.random.choice(initial_pop_size, 3, replace=False)\n                    F_i = F + 0.1 * np.random.randn()\n                    F_i = max(0.1, min(0.9, F_i))\n                    if fitness_array[a] > np.mean(fitness_array):\n                        F_i *= 1.1\n                    else:\n                        F_i *= 0.9\n                    mutated[i] = target_to_bounds(candidates[a, i] + F_i * (candidates[b, i] - candidates[c, i]), -5.0, 5.0)\n            return mutated\n\n        def global_best_pso(particles, best_particle):\n            return best_particle\n\n        def differential_evolution(population, func):\n            new_population = np.copy(population)\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                F_i = F_de + 0.1 * np.random.randn()\n                F_i = max(0.1, min(0.9, F_i)) \n                trial_de = target_to_bounds(population[a] + F_i * (population[b] - population[c]), -5.0, 5.0)\n                if func(trial_de) < func(population[i]):\n                    new_population[i] = trial_de\n            return new_population\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // initial_pop_size):\n            pop_size = initial_pop_size + int(10 * np.sin(0.1 * _))\n            population = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n            velocities = np.zeros((pop_size, self.dim))\n            best_particle = np.copy(best_solution)\n            fitness_array = np.zeros(pop_size)\n            for i in range(pop_size):\n                parent1 = population[i]\n                parent2 = population[np.random.choice(pop_size)]\n                diversity = np.std(population)\n                population[i] = crossover_ga(parent1, parent2, diversity)\n\n                trial_de = mutate_de(population[i], population, F_de, CR_de, fitness_array)\n                mutated_fitness_de = func(trial_de)\n                fitness_array[i] = mutated_fitness_de\n                if mutated_fitness_de < func(population[i]):\n                    population[i] = trial_de\n\n                velocities[i] = omega * velocities[i] + c1 * np.random.rand(self.dim) * (best_particle - population[i]) + c2 * np.random.rand(self.dim) * (best_solution - population[i])\n                population[i] = target_to_bounds(population[i] + velocities[i], -5.0, 5.0)\n\n                population = differential_evolution(population, func)\n\n                population[i] = local_search(population[i], func)\n\n                if func(population[i]) < best_fitness:\n                    best_solution = population[i]\n                    best_fitness = func(population[i])\n                best_particle = global_best_pso(population, best_particle)\n\n        return best_solution", "name": "EnhancedAdaptiveMutationGADEWithDynamicPopulationSize", "description": "Enhancing the algorithm by introducing a dynamic mutation strategy that adapts based on the fitness landscape to improve exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "07a3adb6-6146-45ac-9b9e-36b8e620f209", "metadata": {"aucs": [0.2551767908880389, 0.25252262689465466, 0.2537004125989758, 0.2483973793274683, 0.2896488573330307, 0.3107590428770981, 0.2896476176296017, 0.31750233254058946, 0.2648258624016674, 0.03494511299800673, 0.04131413797020378, 0.034059774620344596, 0.003297127553261503, 0.017261834387421682, 0.016372624819703918, 0.015899907763112453, 0.0160652189813687, 0.017713142151154382, 0.05288126529109194, 0.07179954681559098, 0.076633421736516, 0.06374102391966974, 0.06534809445381073, 0.07231119294976829, 0.06601681852229813, 0.07075012327471342, 0.07641184756273689, 0.06743478782394541, 0.039819089587482814, 0.05622289342224973, 0.04212879920424495, 0.05617619325818901, 0.05728998893931092, 0.04411692751410734, 0.04843029609708649, 0.050735836935589806, 0.9022836556271437, 0.9411901164569041, 0.8771623799120745, 0.9282167299113263, 0.8286858911083596, 0.8803040315136392, 0.9031320518290499, 0.9129037115390103, 0.850981921354158, 0.10415885670863767, 0.1012054769316808, 0.11437391826375953, 0.094927709730103, 0.14826174081232601, 0.12741019094983763, 0.10939427551774805, 0.12697898256688, 0.09425667682651961, 0.20690965944046147, 0.16038981983626122, 0.18732265864205977, 0.21967837968718673, 0.20279700988514893, 0.20163439068827205, 0.19821218716883338, 0.22370719416491303, 0.18729631783304623, 0.07420796574836164, 0.03426540678136758, 0.06792909629172661, 0.0709277070143366, 0.04277265727150503, 0.07072583199892146, 0.04886580888295755, 0.05251256545234373, 0.04654692520839976, 0.04457666189605547, 0.08909341023356698, 0.059076961028312724, 0.06271964703645938, 0.056185729450375366, 0.09168475977907198, 0.07513604633876547, 0.029391624737451605, 0.06805092336326468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0756437493175639, 0.11627706422661266, 0.07825059113995614, 0.06191822327941443, 0.059900752818819125, 0.062343724934297295, 0.09336683500512466, 0.11105541272313935, 0.10284867344133708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023341082589512396, 0.021820624377066222, 0.020225085910166696, 0.030918386352791316, 0.027925654949815693, 0.02905188173315476, 0.03254025138603445, 0.04820895312124851, 0.043214516596434605, 0.2726347397887524, 0.23904695456667902, 0.2649800093344772, 0.26269951943074343, 0.2602676337992744, 0.2677622668826286, 0.24273084859038063, 0.26155419038623373, 0.24631628927354654, 0.07803742995615126, 0.06116834051120512, 0.06723645403364187, 0.0676961911135262, 0.059337895279720776, 0.05729796340124882, 0.06815211046610092, 0.06130817570854197, 0.06050041726009514, 0.15296161293083865, 0.14420209771699155, 0.13201390845818728, 0.1247862069328115, 0.1298436717207665, 0.12871419821450958, 0.12336558044277479, 0.11721878024340326, 0.11302082395548552, 0.1947128844634014, 0.1858693111918478, 0.19822548719792543, 0.19615447322160884, 0.168130700753101, 0.20834796340454054, 0.20590530523312722, 0.21031734398688462, 0.20102977606182015, 0.10460258929025479, 0.15881846681675038, 0.1432465050972047, 0.12678085019594876, 0.13940527828346172, 0.13767818088450168, 0.1370980669873303, 0.14568703779525782, 0.14118464827990462, 0.17380118134027922, 0.18530179285620874, 0.18421749221323358, 0.17129278697104988, 0.1688123318268977, 0.17196239675093639, 0.17411577374674614, 0.1719869642437929, 0.161394279773876, 0.15204546450152245, 0.16685459595594876, 0.16162603852272073, 0.16568674807459416, 0.15362003422567705, 0.15929584971270638, 0.1698109250075378, 0.14635647593709888, 0.1657833051611196, 0.16853736595943158, 0.20400713848618457, 0.21508601012636475, 0.12885610029487338, 0.20977082518667545, 0.15995159630461786, 0.16112782919092938, 0.1283076065617168, 0.20551288866940354, 0.2071155032232852, 0.25647893436733316, 0.15826500133186583, 0.1602081075638151, 0.14325505278219375, 0.1620396506675872, 0.1919669927371147, 0.20153628742549, 0.1871687474310595, 0.17758155741622117, 0.17403520518741367, 0.18226691346788193, 0.17484963977425538, 0.20948562591314446, 0.18447747240921575, 0.17039719904653317, 0.17269855580395854, 0.17324375124373204, 0.04456640069734252, 0.05713686982029831, 0.06782737921099669, 0.079057691043249, 0.05015278892167152, 0.05673395928682967, 0.06669010954072341, 0.05589165497234749, 0.06787535143989787]}, "mutation_prompt": null}
