{"id": "bfae29bc-35aa-460a-a064-39ea39df5920", "solution": "import numpy as np\n\nclass FireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            fireworks += new_fireworks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "FireworkAlgorithm", "description": "Novel Firework Algorithm (NFA) that utilizes the concept of fireworks explosions and sparks to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": 0.15948943140189709, "feedback": "The algorithm FireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.2767376178904962, 0.26515490528356944, 0.2857427434078842, 0.25475236152435843, 0.26428206673843746, 0.27589696609981074, 0.28950409997306603, 0.2869471480120038, 0.25487048829692927, 0.006925949753695537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06991079378144038, 0.07346178746713372, 0.075456565950338, 0.08572877863044137, 0.07957127152677401, 0.08381022339819211, 0.08494592996280625, 0.0709848773277838, 0.07968797277218231, 0.07066859861523411, 0.08944726145545578, 0.06929192717811128, 0.08841052079868028, 0.06050787092777832, 0.06923009792067747, 0.06708176137264565, 0.07166787251777929, 0.061861476696742135, 0.9704812661750702, 0.9544217956509957, 0.9641905127723532, 0.966073464498786, 0.9530148491037587, 0.9598919616462498, 0.937139304469747, 0.9574391542341014, 0.949049073563546, 0.15333753712079434, 0.16573498070627013, 0.14707946229225566, 0.13994606144981103, 0.14975160856004954, 0.19450612978324822, 0.1630409102781688, 0.1535544452770028, 0.15764438357321664, 0.1978620165022934, 0.2071193712507059, 0.21388400182324874, 0.18691697516253403, 0.19404852652457116, 0.18944102365223758, 0.18746876301133053, 0.18819459045655684, 0.1962357837259353, 0.029343625002182905, 0.09998963081072021, 0.09723938416984679, 0.11016442636201174, 0.0687208727720765, 0.08578721542935941, 0.08535086434748829, 0.0842713782623703, 0.09697875371215559, 0.1126501100140338, 0.10564092789304835, 0.0698449228925565, 0.12256214026942502, 0.08427264283987146, 0.0925501266549571, 0.06675588403677102, 0.0732187573742834, 0.08856276191314938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07552696509583035, 0.07458543041955457, 0.04118548865218674, 0.052911682362507095, 0.012767299079659455, 0.012982722343243047, 0.05084927823980756, 0.046122689897171054, 0.05118150422440049, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03742086557329294, 0.03210235172614451, 0.03712333222801245, 0.02870659870743797, 0.020712217103779906, 0.03540042512980324, 0.008217143627331502, 0.044177591197247734, 0.025439293127344165, 0.2977962292445564, 0.2750639271377897, 0.2694349824070599, 0.2662355165836937, 0.2654545070345986, 0.2755783003171134, 0.2874137886586212, 0.2803505759514905, 0.28081011047834104, 0.0720888077245947, 0.08497476427574835, 0.0730806250277416, 0.07349704906752852, 0.10242311918734304, 0.07658692620189722, 0.0890559298054614, 0.07794624605944878, 0.07127761124251175, 0.12276963131143925, 0.12779970313684808, 0.16040934706320875, 0.13338179638210945, 0.1356406373221991, 0.12181792575571415, 0.12478235547579097, 0.1337036724566376, 0.1337831752889902, 0.2110230353431476, 0.20764176765116094, 0.21049773554641182, 0.23152506692603425, 0.21819609350848002, 0.21798202896922447, 0.20955086285542057, 0.21127776988689162, 0.22760211956614496, 0.14481708373438973, 0.16433655417246595, 0.1554352844013761, 0.14922460755027056, 0.1317113226830836, 0.18339926937055795, 0.16344119510796606, 0.15366455193059714, 0.1775626412973781, 0.19017663758596526, 0.1803947370691179, 0.18785463619355802, 0.17838437639801907, 0.19128414214396228, 0.17083985087613218, 0.18964552283271396, 0.2456269052815203, 0.17535075638009423, 0.1691838538975622, 0.1746786802772654, 0.16728311974065768, 0.17578715694047498, 0.1660270722507221, 0.16677582007069502, 0.17840783312251574, 0.17403234540206236, 0.16408403751398581, 0.17841570716317545, 0.12717994415853262, 0.16924464659362348, 0.2898229812623293, 0.17119542303803215, 0.15671267780913734, 0.17448382863883505, 0.13116796360313254, 0.1740471793464039, 0.07988570755148827, 0.26531704791343225, 0.36535612189522415, 0.23654819435884766, 0.14298998552020004, 0.1848171781035991, 0.13897015676522984, 0.14280802793821912, 0.10100272538533095, 0.1735040042863324, 0.18330422092353427, 0.17748736954787603, 0.19037412996350433, 0.17768621994800193, 0.16883349474376186, 0.17314612177438682, 0.16769597317435458, 0.19112520900010943, 0.07200204670332855, 0.10794537046883346, 0.0709838698394758, 0.07675232265689724, 0.06753546357755058, 0.07419443560736583, 0.09013928472158805, 0.08433724206662352, 0.07091597964861973]}, "mutation_prompt": null}
{"id": "1694b49f-dc82-49f1-ad19-0ee60362085f", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10, exploration_radius=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.exploration_radius = exploration_radius\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.exploration_radius, self.dim) for firework in fireworks]\n            fireworks += new_fireworks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing dynamic exploration radius adaptation based on function evaluations to enhance local search capabilities.", "configspace": "", "generation": 1, "fitness": 0.15948943140189709, "feedback": "The algorithm AdaptiveFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "bfae29bc-35aa-460a-a064-39ea39df5920", "metadata": {"aucs": [0.2767376178904962, 0.26515490528356944, 0.2857427434078842, 0.25475236152435843, 0.26428206673843746, 0.27589696609981074, 0.28950409997306603, 0.2869471480120038, 0.25487048829692927, 0.006925949753695537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06991079378144038, 0.07346178746713372, 0.075456565950338, 0.08572877863044137, 0.07957127152677401, 0.08381022339819211, 0.08494592996280625, 0.0709848773277838, 0.07968797277218231, 0.07066859861523411, 0.08944726145545578, 0.06929192717811128, 0.08841052079868028, 0.06050787092777832, 0.06923009792067747, 0.06708176137264565, 0.07166787251777929, 0.061861476696742135, 0.9704812661750702, 0.9544217956509957, 0.9641905127723532, 0.966073464498786, 0.9530148491037587, 0.9598919616462498, 0.937139304469747, 0.9574391542341014, 0.949049073563546, 0.15333753712079434, 0.16573498070627013, 0.14707946229225566, 0.13994606144981103, 0.14975160856004954, 0.19450612978324822, 0.1630409102781688, 0.1535544452770028, 0.15764438357321664, 0.1978620165022934, 0.2071193712507059, 0.21388400182324874, 0.18691697516253403, 0.19404852652457116, 0.18944102365223758, 0.18746876301133053, 0.18819459045655684, 0.1962357837259353, 0.029343625002182905, 0.09998963081072021, 0.09723938416984679, 0.11016442636201174, 0.0687208727720765, 0.08578721542935941, 0.08535086434748829, 0.0842713782623703, 0.09697875371215559, 0.1126501100140338, 0.10564092789304835, 0.0698449228925565, 0.12256214026942502, 0.08427264283987146, 0.0925501266549571, 0.06675588403677102, 0.0732187573742834, 0.08856276191314938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07552696509583035, 0.07458543041955457, 0.04118548865218674, 0.052911682362507095, 0.012767299079659455, 0.012982722343243047, 0.05084927823980756, 0.046122689897171054, 0.05118150422440049, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03742086557329294, 0.03210235172614451, 0.03712333222801245, 0.02870659870743797, 0.020712217103779906, 0.03540042512980324, 0.008217143627331502, 0.044177591197247734, 0.025439293127344165, 0.2977962292445564, 0.2750639271377897, 0.2694349824070599, 0.2662355165836937, 0.2654545070345986, 0.2755783003171134, 0.2874137886586212, 0.2803505759514905, 0.28081011047834104, 0.0720888077245947, 0.08497476427574835, 0.0730806250277416, 0.07349704906752852, 0.10242311918734304, 0.07658692620189722, 0.0890559298054614, 0.07794624605944878, 0.07127761124251175, 0.12276963131143925, 0.12779970313684808, 0.16040934706320875, 0.13338179638210945, 0.1356406373221991, 0.12181792575571415, 0.12478235547579097, 0.1337036724566376, 0.1337831752889902, 0.2110230353431476, 0.20764176765116094, 0.21049773554641182, 0.23152506692603425, 0.21819609350848002, 0.21798202896922447, 0.20955086285542057, 0.21127776988689162, 0.22760211956614496, 0.14481708373438973, 0.16433655417246595, 0.1554352844013761, 0.14922460755027056, 0.1317113226830836, 0.18339926937055795, 0.16344119510796606, 0.15366455193059714, 0.1775626412973781, 0.19017663758596526, 0.1803947370691179, 0.18785463619355802, 0.17838437639801907, 0.19128414214396228, 0.17083985087613218, 0.18964552283271396, 0.2456269052815203, 0.17535075638009423, 0.1691838538975622, 0.1746786802772654, 0.16728311974065768, 0.17578715694047498, 0.1660270722507221, 0.16677582007069502, 0.17840783312251574, 0.17403234540206236, 0.16408403751398581, 0.17841570716317545, 0.12717994415853262, 0.16924464659362348, 0.2898229812623293, 0.17119542303803215, 0.15671267780913734, 0.17448382863883505, 0.13116796360313254, 0.1740471793464039, 0.07988570755148827, 0.26531704791343225, 0.36535612189522415, 0.23654819435884766, 0.14298998552020004, 0.1848171781035991, 0.13897015676522984, 0.14280802793821912, 0.10100272538533095, 0.1735040042863324, 0.18330422092353427, 0.17748736954787603, 0.19037412996350433, 0.17768621994800193, 0.16883349474376186, 0.17314612177438682, 0.16769597317435458, 0.19112520900010943, 0.07200204670332855, 0.10794537046883346, 0.0709838698394758, 0.07675232265689724, 0.06753546357755058, 0.07419443560736583, 0.09013928472158805, 0.08433724206662352, 0.07091597964861973]}, "mutation_prompt": null}
{"id": "bb13cbd8-3881-421e-8302-1e3655aee72e", "solution": "import numpy as np\n\nclass FireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10, mutation_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = []\n            for firework in fireworks:\n                if np.random.rand() < self.mutation_prob:\n                    new_fireworks.append(firework + np.random.normal(0, 1, self.dim))\n                else:\n                    new_fireworks.append(firework)\n            \n            fireworks += new_fireworks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "FireworkAlgorithm", "description": "Enhancing Firework Algorithm by introducing mutation probability to diversify the search space further.", "configspace": "", "generation": 2, "fitness": 0.12273326189741712, "feedback": "The algorithm FireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "bfae29bc-35aa-460a-a064-39ea39df5920", "metadata": {"aucs": [0.25151570359636377, 0.21380508832638045, 0.20275180860430642, 0.20408435817783888, 0.24101655397126365, 0.20477511105899038, 0.22289114857266368, 0.27139608203054366, 0.23182269884930695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04184707667068155, 0.04419366761361654, 0.058437437556702054, 0.05454308157918364, 0.07548054585092445, 0.04949980300798085, 0.049971209682580064, 0.04535074320688204, 0.05417127080467721, 0.029427314965119855, 0.038115441565074626, 0.02872149344858932, 0.05485473550546627, 0.03470450233091438, 0.0539201215756977, 0.05036165833176531, 0.023346935855201978, 0.03957261050415706, 0.881838807775514, 0.8823790975589509, 0.9212659268782849, 0.8692914876509374, 0.8103170887732607, 0.8451233999550125, 0.7792708241713179, 0.8306333976638249, 0.7688065649961292, 0.08201120529139339, 0.15928723966462854, 0.10114683373884858, 0.09910522313725145, 0.10374057026115102, 0.10410905156720496, 0.109255496739316, 0.07846294595696379, 0.10160322167174018, 0.21894602935954732, 0.14358820673663597, 0.14847833808673927, 0.17675215185185444, 0.17046896857777205, 0.10747713404385795, 0.09937594714405873, 0.12319689075146234, 0.16342329390030141, 0.002766683616208465, 0.0038598835123629938, 0.0659901595039668, 0.012859965193823708, 9.999999999998899e-05, 0.06881761376755602, 0.06973474548372682, 0.08412831269454746, 0.06795012899659814, 0.059303205930784864, 0.0355070928711444, 0.03320940816194273, 0.026065356314923904, 0.057428129531271965, 0.059043443171820975, 0.05062588718684802, 0.05754066056359586, 0.030438385038337956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10056579408707533, 0.00541035154217695, 0.02307528081790111, 0.014626124362884685, 9.999999999998899e-05, 0.03813992051276416, 0.009580668117843527, 0.023578690662752755, 0.004460305046175894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00666895403959622, 0.0026092385662565, 0.001635804086318915, 0.0037538395073061226, 9.999999999998899e-05, 0.0009313322096271559, 0.0036614846833125103, 0.0005752116314728939, 0.007757074127893948, 0.22752664881750673, 0.22557663321414634, 0.2757938617811837, 0.2270902581521247, 0.2240236612619788, 0.23066914829036755, 0.21764874539397783, 0.22104008431724498, 0.23595754399918667, 0.044491202744275093, 0.05039174087907072, 0.04699756603597982, 0.04551236271478809, 0.07042651927016963, 0.05562126219182806, 0.04661812848797131, 0.06068855795825223, 0.04483032493531869, 0.14615725047434958, 0.07803784869741337, 0.09717528546886844, 0.12221302796131073, 0.08662133402493888, 0.08631082319664818, 0.10716736580321573, 0.1045983859408407, 0.09755970761373467, 0.16278716554854455, 0.18273328958154678, 0.12607601592437367, 0.16339393099886745, 0.1636538667771531, 0.22265477545526113, 0.15007448917646338, 0.14951702841186654, 0.1369366798222994, 0.11655315756359419, 0.12882494732404282, 0.10044664810592963, 0.10446771253033116, 0.10306517686375305, 0.1305533306918102, 0.09664138045383919, 0.13650209291829618, 0.12329604083382784, 0.15069628595268947, 0.14761532991349757, 0.14740576000695726, 0.1399920083528694, 0.12146575164560436, 0.15204205999453801, 0.18186743822462004, 0.12048089633901293, 0.1659077066104213, 0.14521498607188843, 0.1527793642333074, 0.14888385911935043, 0.15131220153600078, 0.1427528814574791, 0.15344016637220648, 0.16509693865073927, 0.1580235362574215, 0.16089765615703167, 0.13134982377587112, 0.0969454291133186, 0.16133085025058658, 0.1594514985452472, 0.17340901588751856, 0.0827516671655727, 0.14411976217999778, 0.11200132073982672, 0.11394798045005516, 0.07521046344667703, 0.09320395739563825, 0.12811097148195572, 0.15526250491904925, 0.10938832664651887, 0.15147797238725924, 0.12665304133600896, 0.09227122914073171, 0.15907380411415084, 0.1305708940041892, 0.16230828289343224, 0.14763022729669195, 0.15544800505872192, 0.15597260748616049, 0.13740158372149835, 0.13985700599405482, 0.14738063310728466, 0.1487455915245851, 0.0475464799561629, 0.0464139002402022, 0.048592285968213966, 0.07461841360315902, 0.0609439160195705, 0.04018780059396909, 0.05322115915934433, 0.03885862988105149, 0.04269701616604393]}, "mutation_prompt": null}
{"id": "464b0f2b-0297-41a4-a799-9416e9cabd3d", "solution": "import numpy as np\n\nclass FireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            fireworks += new_fireworks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "FireworkAlgorithm", "description": "Novel Firework Algorithm (NFA) that utilizes the concept of fireworks explosions and sparks to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bfae29bc-35aa-460a-a064-39ea39df5920", "metadata": {"aucs": [0.2767376178904962, 0.26515490528356944, 0.2857427434078842, 0.25475236152435843, 0.26428206673843746, 0.27589696609981074, 0.28950409997306603, 0.2869471480120038, 0.25487048829692927, 0.006925949753695537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06991079378144038, 0.07346178746713372, 0.075456565950338, 0.08572877863044137, 0.07957127152677401, 0.08381022339819211, 0.08494592996280625, 0.0709848773277838, 0.07968797277218231, 0.07066859861523411, 0.08944726145545578, 0.06929192717811128, 0.08841052079868028, 0.06050787092777832, 0.06923009792067747, 0.06708176137264565, 0.07166787251777929, 0.061861476696742135, 0.9704812661750702, 0.9544217956509957, 0.9641905127723532, 0.966073464498786, 0.9530148491037587, 0.9598919616462498, 0.937139304469747, 0.9574391542341014, 0.949049073563546, 0.15333753712079434, 0.16573498070627013, 0.14707946229225566, 0.13994606144981103, 0.14975160856004954, 0.19450612978324822, 0.1630409102781688, 0.1535544452770028, 0.15764438357321664, 0.1978620165022934, 0.2071193712507059, 0.21388400182324874, 0.18691697516253403, 0.19404852652457116, 0.18944102365223758, 0.18746876301133053, 0.18819459045655684, 0.1962357837259353, 0.029343625002182905, 0.09998963081072021, 0.09723938416984679, 0.11016442636201174, 0.0687208727720765, 0.08578721542935941, 0.08535086434748829, 0.0842713782623703, 0.09697875371215559, 0.1126501100140338, 0.10564092789304835, 0.0698449228925565, 0.12256214026942502, 0.08427264283987146, 0.0925501266549571, 0.06675588403677102, 0.0732187573742834, 0.08856276191314938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07552696509583035, 0.07458543041955457, 0.04118548865218674, 0.052911682362507095, 0.012767299079659455, 0.012982722343243047, 0.05084927823980756, 0.046122689897171054, 0.05118150422440049, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03742086557329294, 0.03210235172614451, 0.03712333222801245, 0.02870659870743797, 0.020712217103779906, 0.03540042512980324, 0.008217143627331502, 0.044177591197247734, 0.025439293127344165, 0.2977962292445564, 0.2750639271377897, 0.2694349824070599, 0.2662355165836937, 0.2654545070345986, 0.2755783003171134, 0.2874137886586212, 0.2803505759514905, 0.28081011047834104, 0.0720888077245947, 0.08497476427574835, 0.0730806250277416, 0.07349704906752852, 0.10242311918734304, 0.07658692620189722, 0.0890559298054614, 0.07794624605944878, 0.07127761124251175, 0.12276963131143925, 0.12779970313684808, 0.16040934706320875, 0.13338179638210945, 0.1356406373221991, 0.12181792575571415, 0.12478235547579097, 0.1337036724566376, 0.1337831752889902, 0.2110230353431476, 0.20764176765116094, 0.21049773554641182, 0.23152506692603425, 0.21819609350848002, 0.21798202896922447, 0.20955086285542057, 0.21127776988689162, 0.22760211956614496, 0.14481708373438973, 0.16433655417246595, 0.1554352844013761, 0.14922460755027056, 0.1317113226830836, 0.18339926937055795, 0.16344119510796606, 0.15366455193059714, 0.1775626412973781, 0.19017663758596526, 0.1803947370691179, 0.18785463619355802, 0.17838437639801907, 0.19128414214396228, 0.17083985087613218, 0.18964552283271396, 0.2456269052815203, 0.17535075638009423, 0.1691838538975622, 0.1746786802772654, 0.16728311974065768, 0.17578715694047498, 0.1660270722507221, 0.16677582007069502, 0.17840783312251574, 0.17403234540206236, 0.16408403751398581, 0.17841570716317545, 0.12717994415853262, 0.16924464659362348, 0.2898229812623293, 0.17119542303803215, 0.15671267780913734, 0.17448382863883505, 0.13116796360313254, 0.1740471793464039, 0.07988570755148827, 0.26531704791343225, 0.36535612189522415, 0.23654819435884766, 0.14298998552020004, 0.1848171781035991, 0.13897015676522984, 0.14280802793821912, 0.10100272538533095, 0.1735040042863324, 0.18330422092353427, 0.17748736954787603, 0.19037412996350433, 0.17768621994800193, 0.16883349474376186, 0.17314612177438682, 0.16769597317435458, 0.19112520900010943, 0.07200204670332855, 0.10794537046883346, 0.0709838698394758, 0.07675232265689724, 0.06753546357755058, 0.07419443560736583, 0.09013928472158805, 0.08433724206662352, 0.07091597964861973]}, "mutation_prompt": null}
{"id": "c3f1c4b3-a9eb-4180-a8c1-2054b1447fc8", "solution": "import numpy as np\n\nclass FireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            fireworks += new_fireworks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "FireworkAlgorithm", "description": "Novel Firework Algorithm (NFA) that utilizes the concept of fireworks explosions and sparks to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bfae29bc-35aa-460a-a064-39ea39df5920", "metadata": {"aucs": [0.2767376178904962, 0.26515490528356944, 0.2857427434078842, 0.25475236152435843, 0.26428206673843746, 0.27589696609981074, 0.28950409997306603, 0.2869471480120038, 0.25487048829692927, 0.006925949753695537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06991079378144038, 0.07346178746713372, 0.075456565950338, 0.08572877863044137, 0.07957127152677401, 0.08381022339819211, 0.08494592996280625, 0.0709848773277838, 0.07968797277218231, 0.07066859861523411, 0.08944726145545578, 0.06929192717811128, 0.08841052079868028, 0.06050787092777832, 0.06923009792067747, 0.06708176137264565, 0.07166787251777929, 0.061861476696742135, 0.9704812661750702, 0.9544217956509957, 0.9641905127723532, 0.966073464498786, 0.9530148491037587, 0.9598919616462498, 0.937139304469747, 0.9574391542341014, 0.949049073563546, 0.15333753712079434, 0.16573498070627013, 0.14707946229225566, 0.13994606144981103, 0.14975160856004954, 0.19450612978324822, 0.1630409102781688, 0.1535544452770028, 0.15764438357321664, 0.1978620165022934, 0.2071193712507059, 0.21388400182324874, 0.18691697516253403, 0.19404852652457116, 0.18944102365223758, 0.18746876301133053, 0.18819459045655684, 0.1962357837259353, 0.029343625002182905, 0.09998963081072021, 0.09723938416984679, 0.11016442636201174, 0.0687208727720765, 0.08578721542935941, 0.08535086434748829, 0.0842713782623703, 0.09697875371215559, 0.1126501100140338, 0.10564092789304835, 0.0698449228925565, 0.12256214026942502, 0.08427264283987146, 0.0925501266549571, 0.06675588403677102, 0.0732187573742834, 0.08856276191314938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07552696509583035, 0.07458543041955457, 0.04118548865218674, 0.052911682362507095, 0.012767299079659455, 0.012982722343243047, 0.05084927823980756, 0.046122689897171054, 0.05118150422440049, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03742086557329294, 0.03210235172614451, 0.03712333222801245, 0.02870659870743797, 0.020712217103779906, 0.03540042512980324, 0.008217143627331502, 0.044177591197247734, 0.025439293127344165, 0.2977962292445564, 0.2750639271377897, 0.2694349824070599, 0.2662355165836937, 0.2654545070345986, 0.2755783003171134, 0.2874137886586212, 0.2803505759514905, 0.28081011047834104, 0.0720888077245947, 0.08497476427574835, 0.0730806250277416, 0.07349704906752852, 0.10242311918734304, 0.07658692620189722, 0.0890559298054614, 0.07794624605944878, 0.07127761124251175, 0.12276963131143925, 0.12779970313684808, 0.16040934706320875, 0.13338179638210945, 0.1356406373221991, 0.12181792575571415, 0.12478235547579097, 0.1337036724566376, 0.1337831752889902, 0.2110230353431476, 0.20764176765116094, 0.21049773554641182, 0.23152506692603425, 0.21819609350848002, 0.21798202896922447, 0.20955086285542057, 0.21127776988689162, 0.22760211956614496, 0.14481708373438973, 0.16433655417246595, 0.1554352844013761, 0.14922460755027056, 0.1317113226830836, 0.18339926937055795, 0.16344119510796606, 0.15366455193059714, 0.1775626412973781, 0.19017663758596526, 0.1803947370691179, 0.18785463619355802, 0.17838437639801907, 0.19128414214396228, 0.17083985087613218, 0.18964552283271396, 0.2456269052815203, 0.17535075638009423, 0.1691838538975622, 0.1746786802772654, 0.16728311974065768, 0.17578715694047498, 0.1660270722507221, 0.16677582007069502, 0.17840783312251574, 0.17403234540206236, 0.16408403751398581, 0.17841570716317545, 0.12717994415853262, 0.16924464659362348, 0.2898229812623293, 0.17119542303803215, 0.15671267780913734, 0.17448382863883505, 0.13116796360313254, 0.1740471793464039, 0.07988570755148827, 0.26531704791343225, 0.36535612189522415, 0.23654819435884766, 0.14298998552020004, 0.1848171781035991, 0.13897015676522984, 0.14280802793821912, 0.10100272538533095, 0.1735040042863324, 0.18330422092353427, 0.17748736954787603, 0.19037412996350433, 0.17768621994800193, 0.16883349474376186, 0.17314612177438682, 0.16769597317435458, 0.19112520900010943, 0.07200204670332855, 0.10794537046883346, 0.0709838698394758, 0.07675232265689724, 0.06753546357755058, 0.07419443560736583, 0.09013928472158805, 0.08433724206662352, 0.07091597964861973]}, "mutation_prompt": null}
{"id": "8bbecf80-394f-40f6-834c-f20d0f3fa7cf", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_rate, self.dim) for firework in fireworks]\n            fireworks += new_fireworks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with adaptive mutation strategy to balance exploration and exploitation.", "configspace": "", "generation": 5, "fitness": 0.15842659781796534, "feedback": "The algorithm EnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "bfae29bc-35aa-460a-a064-39ea39df5920", "metadata": {"aucs": [0.4407075314249206, 0.41372726876794674, 0.4438198310814424, 0.3646960378856444, 0.39895664969107303, 0.39780610465953425, 0.40220738037439063, 0.4175620368972148, 0.43964113016024453, 0.033567520557370556, 0.021625618709604555, 9.999999999998899e-05, 0.08522209472225972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018368169696157177, 0.041406487041069306, 0.03214326515683441, 0.04163952441217467, 0.03799964052356497, 0.02279225842761734, 0.0432814367257468, 0.03164502285721593, 0.01098509966279504, 0.012939555127901792, 9.999999999998899e-05, 0.017681177925168212, 0.09436106631532926, 0.00030106463110701753, 0.022656097982882928, 0.07447921543106328, 0.007009980416287864, 0.00012128577089209891, 0.7611460589301913, 0.6227767591550665, 0.7562333220018271, 0.7430260294115344, 0.6327579131213745, 0.6171996795707999, 0.5718520685549022, 0.6810759916180456, 0.6083400985697482, 0.24577475726272147, 0.26876722498452366, 0.28752042769297814, 0.2515683653123846, 0.27817548153611493, 0.25201780149840625, 0.29032176038066126, 0.2708870253610719, 0.23464587347990162, 0.6064890781674962, 0.06032641865891086, 0.0773860412215518, 0.2121744790172021, 0.06575034636907551, 0.12690573315664766, 0.0553376520031994, 0.04884999244979904, 0.17824472420964887, 0.14675456965737865, 0.1343311502377592, 0.1406383136285202, 0.09796524215353652, 0.11169957381731077, 0.10303689724620235, 0.18434999656288686, 0.1447600272441023, 0.17004987167524777, 0.19210756650607363, 0.004153818402637288, 0.1227892431875296, 0.17253353194237642, 0.15534469797432526, 0.1506244574167973, 0.19544512391421553, 0.007762850228702378, 0.15720279232369538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012410567193132716, 0.0314471315896091, 0.002234649280398626, 0.0008057850219745921, 9.999999999998899e-05, 0.005962148897006192, 0.08563154602793055, 0.04793329600922169, 0.06722663592276656, 0.06679075899843412, 0.00015957200338634348, 0.0156330006105323, 0.1652796180531494, 0.027880411010479444, 0.04046170919633407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09384362391206524, 0.07853286335682386, 0.07173842503951677, 0.08269405106832206, 0.050065999468448696, 0.09705678667924422, 0.07497802751654892, 0.08214712481597175, 0.04910594554967462, 0.4177701233970662, 0.4023027275714083, 0.4178668773901134, 0.3982816352041727, 0.3904612169552142, 0.3946619912608943, 0.4231539511202759, 0.3711657509540244, 0.41705204172763943, 0.024746700123798426, 0.05517677543996102, 0.01984646482850827, 0.04696529722153753, 0.02943763917030462, 0.08903701234649819, 0.02052328293439909, 0.016744965770312814, 0.07771641691746478, 0.1847226521462927, 0.257808718648313, 0.2680636543529761, 0.29744235190449253, 0.1911181837896686, 0.3271192201878942, 0.2873128623007608, 0.11534562505593926, 0.12485391215148012, 0.12851478626994828, 0.12800428928645402, 0.13274879991182365, 0.14887241152238928, 0.12538746097668152, 0.15255692599914328, 0.1560008116771845, 0.1257578728005705, 0.10301418501995452, 0.06387258681800123, 0.12390260185639257, 0.06986671984419845, 0.1207532190815298, 0.09018321268223395, 0.0896786221124487, 0.07585779042561569, 0.07203174323562267, 0.049422312422937154, 0.16631283390456086, 0.12359438502041453, 0.1733105924187981, 0.1783048004460197, 0.11464293485259092, 0.15855359331608287, 0.19406917445948635, 0.1300046292478273, 0.17045661414282254, 0.17381542069477451, 0.20670693740745105, 0.20797140764661315, 0.1715924205474576, 0.1836326102176975, 0.2011933527024402, 0.17850944421580117, 0.20935270634479952, 0.152487023799861, 0.11740345366525129, 0.07622976886981436, 0.13099545115509625, 0.16904074384574252, 0.201372570521836, 0.10797383693422524, 0.14760388889260867, 0.11394502431851561, 0.17545919665440946, 0.08211276806298451, 0.11108236358872636, 0.43235015525189957, 0.4562146640956778, 0.14490590552576887, 0.20055801276685603, 0.15728975725837646, 0.07121255557839523, 0.3339679105629212, 0.17489537620669637, 0.1888460249944669, 0.18574522152119644, 0.17423454983023334, 0.18589631359459569, 0.1857230953667034, 0.1679127911712187, 0.17248255782890787, 0.1780105608978323, 0.05512801666304623, 0.04341171190614701, 0.057663422385236696, 0.04112651452282301, 0.03744824445578576, 0.06331771275998055, 0.0657061535936978, 0.0400711929991836, 0.036702298162109015]}, "mutation_prompt": null}
{"id": "9135afe2-7e2f-4757-8433-91cf67c4a643", "solution": "import numpy as np\n\nclass FireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            fireworks += new_fireworks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "FireworkAlgorithm", "description": "Novel Firework Algorithm (NFA) that utilizes the concept of fireworks explosions and sparks to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bfae29bc-35aa-460a-a064-39ea39df5920", "metadata": {"aucs": [0.2767376178904962, 0.26515490528356944, 0.2857427434078842, 0.25475236152435843, 0.26428206673843746, 0.27589696609981074, 0.28950409997306603, 0.2869471480120038, 0.25487048829692927, 0.006925949753695537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06991079378144038, 0.07346178746713372, 0.075456565950338, 0.08572877863044137, 0.07957127152677401, 0.08381022339819211, 0.08494592996280625, 0.0709848773277838, 0.07968797277218231, 0.07066859861523411, 0.08944726145545578, 0.06929192717811128, 0.08841052079868028, 0.06050787092777832, 0.06923009792067747, 0.06708176137264565, 0.07166787251777929, 0.061861476696742135, 0.9704812661750702, 0.9544217956509957, 0.9641905127723532, 0.966073464498786, 0.9530148491037587, 0.9598919616462498, 0.937139304469747, 0.9574391542341014, 0.949049073563546, 0.15333753712079434, 0.16573498070627013, 0.14707946229225566, 0.13994606144981103, 0.14975160856004954, 0.19450612978324822, 0.1630409102781688, 0.1535544452770028, 0.15764438357321664, 0.1978620165022934, 0.2071193712507059, 0.21388400182324874, 0.18691697516253403, 0.19404852652457116, 0.18944102365223758, 0.18746876301133053, 0.18819459045655684, 0.1962357837259353, 0.029343625002182905, 0.09998963081072021, 0.09723938416984679, 0.11016442636201174, 0.0687208727720765, 0.08578721542935941, 0.08535086434748829, 0.0842713782623703, 0.09697875371215559, 0.1126501100140338, 0.10564092789304835, 0.0698449228925565, 0.12256214026942502, 0.08427264283987146, 0.0925501266549571, 0.06675588403677102, 0.0732187573742834, 0.08856276191314938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07552696509583035, 0.07458543041955457, 0.04118548865218674, 0.052911682362507095, 0.012767299079659455, 0.012982722343243047, 0.05084927823980756, 0.046122689897171054, 0.05118150422440049, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03742086557329294, 0.03210235172614451, 0.03712333222801245, 0.02870659870743797, 0.020712217103779906, 0.03540042512980324, 0.008217143627331502, 0.044177591197247734, 0.025439293127344165, 0.2977962292445564, 0.2750639271377897, 0.2694349824070599, 0.2662355165836937, 0.2654545070345986, 0.2755783003171134, 0.2874137886586212, 0.2803505759514905, 0.28081011047834104, 0.0720888077245947, 0.08497476427574835, 0.0730806250277416, 0.07349704906752852, 0.10242311918734304, 0.07658692620189722, 0.0890559298054614, 0.07794624605944878, 0.07127761124251175, 0.12276963131143925, 0.12779970313684808, 0.16040934706320875, 0.13338179638210945, 0.1356406373221991, 0.12181792575571415, 0.12478235547579097, 0.1337036724566376, 0.1337831752889902, 0.2110230353431476, 0.20764176765116094, 0.21049773554641182, 0.23152506692603425, 0.21819609350848002, 0.21798202896922447, 0.20955086285542057, 0.21127776988689162, 0.22760211956614496, 0.14481708373438973, 0.16433655417246595, 0.1554352844013761, 0.14922460755027056, 0.1317113226830836, 0.18339926937055795, 0.16344119510796606, 0.15366455193059714, 0.1775626412973781, 0.19017663758596526, 0.1803947370691179, 0.18785463619355802, 0.17838437639801907, 0.19128414214396228, 0.17083985087613218, 0.18964552283271396, 0.2456269052815203, 0.17535075638009423, 0.1691838538975622, 0.1746786802772654, 0.16728311974065768, 0.17578715694047498, 0.1660270722507221, 0.16677582007069502, 0.17840783312251574, 0.17403234540206236, 0.16408403751398581, 0.17841570716317545, 0.12717994415853262, 0.16924464659362348, 0.2898229812623293, 0.17119542303803215, 0.15671267780913734, 0.17448382863883505, 0.13116796360313254, 0.1740471793464039, 0.07988570755148827, 0.26531704791343225, 0.36535612189522415, 0.23654819435884766, 0.14298998552020004, 0.1848171781035991, 0.13897015676522984, 0.14280802793821912, 0.10100272538533095, 0.1735040042863324, 0.18330422092353427, 0.17748736954787603, 0.19037412996350433, 0.17768621994800193, 0.16883349474376186, 0.17314612177438682, 0.16769597317435458, 0.19112520900010943, 0.07200204670332855, 0.10794537046883346, 0.0709838698394758, 0.07675232265689724, 0.06753546357755058, 0.07419443560736583, 0.09013928472158805, 0.08433724206662352, 0.07091597964861973]}, "mutation_prompt": null}
{"id": "9f49b387-4f46-4120-ad3a-003edb3057fe", "solution": "import numpy as np\n\nclass FireworkAlgorithmImproved:\n    def __init__(self, budget, dim, n_fireworks=10, scale_factor=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.scale_factor = scale_factor\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.scale_factor, self.dim) for firework in fireworks]\n            fireworks += new_fireworks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "FireworkAlgorithmImproved", "description": "Introducing dynamic scaling factor to adapt the search radius based on the quality of solutions obtained.", "configspace": "", "generation": 7, "fitness": 0.15842659781796534, "feedback": "The algorithm FireworkAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "bfae29bc-35aa-460a-a064-39ea39df5920", "metadata": {"aucs": [0.4407075314249206, 0.41372726876794674, 0.4438198310814424, 0.3646960378856444, 0.39895664969107303, 0.39780610465953425, 0.40220738037439063, 0.4175620368972148, 0.43964113016024453, 0.033567520557370556, 0.021625618709604555, 9.999999999998899e-05, 0.08522209472225972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018368169696157177, 0.041406487041069306, 0.03214326515683441, 0.04163952441217467, 0.03799964052356497, 0.02279225842761734, 0.0432814367257468, 0.03164502285721593, 0.01098509966279504, 0.012939555127901792, 9.999999999998899e-05, 0.017681177925168212, 0.09436106631532926, 0.00030106463110701753, 0.022656097982882928, 0.07447921543106328, 0.007009980416287864, 0.00012128577089209891, 0.7611460589301913, 0.6227767591550665, 0.7562333220018271, 0.7430260294115344, 0.6327579131213745, 0.6171996795707999, 0.5718520685549022, 0.6810759916180456, 0.6083400985697482, 0.24577475726272147, 0.26876722498452366, 0.28752042769297814, 0.2515683653123846, 0.27817548153611493, 0.25201780149840625, 0.29032176038066126, 0.2708870253610719, 0.23464587347990162, 0.6064890781674962, 0.06032641865891086, 0.0773860412215518, 0.2121744790172021, 0.06575034636907551, 0.12690573315664766, 0.0553376520031994, 0.04884999244979904, 0.17824472420964887, 0.14675456965737865, 0.1343311502377592, 0.1406383136285202, 0.09796524215353652, 0.11169957381731077, 0.10303689724620235, 0.18434999656288686, 0.1447600272441023, 0.17004987167524777, 0.19210756650607363, 0.004153818402637288, 0.1227892431875296, 0.17253353194237642, 0.15534469797432526, 0.1506244574167973, 0.19544512391421553, 0.007762850228702378, 0.15720279232369538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012410567193132716, 0.0314471315896091, 0.002234649280398626, 0.0008057850219745921, 9.999999999998899e-05, 0.005962148897006192, 0.08563154602793055, 0.04793329600922169, 0.06722663592276656, 0.06679075899843412, 0.00015957200338634348, 0.0156330006105323, 0.1652796180531494, 0.027880411010479444, 0.04046170919633407, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09384362391206524, 0.07853286335682386, 0.07173842503951677, 0.08269405106832206, 0.050065999468448696, 0.09705678667924422, 0.07497802751654892, 0.08214712481597175, 0.04910594554967462, 0.4177701233970662, 0.4023027275714083, 0.4178668773901134, 0.3982816352041727, 0.3904612169552142, 0.3946619912608943, 0.4231539511202759, 0.3711657509540244, 0.41705204172763943, 0.024746700123798426, 0.05517677543996102, 0.01984646482850827, 0.04696529722153753, 0.02943763917030462, 0.08903701234649819, 0.02052328293439909, 0.016744965770312814, 0.07771641691746478, 0.1847226521462927, 0.257808718648313, 0.2680636543529761, 0.29744235190449253, 0.1911181837896686, 0.3271192201878942, 0.2873128623007608, 0.11534562505593926, 0.12485391215148012, 0.12851478626994828, 0.12800428928645402, 0.13274879991182365, 0.14887241152238928, 0.12538746097668152, 0.15255692599914328, 0.1560008116771845, 0.1257578728005705, 0.10301418501995452, 0.06387258681800123, 0.12390260185639257, 0.06986671984419845, 0.1207532190815298, 0.09018321268223395, 0.0896786221124487, 0.07585779042561569, 0.07203174323562267, 0.049422312422937154, 0.16631283390456086, 0.12359438502041453, 0.1733105924187981, 0.1783048004460197, 0.11464293485259092, 0.15855359331608287, 0.19406917445948635, 0.1300046292478273, 0.17045661414282254, 0.17381542069477451, 0.20670693740745105, 0.20797140764661315, 0.1715924205474576, 0.1836326102176975, 0.2011933527024402, 0.17850944421580117, 0.20935270634479952, 0.152487023799861, 0.11740345366525129, 0.07622976886981436, 0.13099545115509625, 0.16904074384574252, 0.201372570521836, 0.10797383693422524, 0.14760388889260867, 0.11394502431851561, 0.17545919665440946, 0.08211276806298451, 0.11108236358872636, 0.43235015525189957, 0.4562146640956778, 0.14490590552576887, 0.20055801276685603, 0.15728975725837646, 0.07121255557839523, 0.3339679105629212, 0.17489537620669637, 0.1888460249944669, 0.18574522152119644, 0.17423454983023334, 0.18589631359459569, 0.1857230953667034, 0.1679127911712187, 0.17248255782890787, 0.1780105608978323, 0.05512801666304623, 0.04341171190614701, 0.057663422385236696, 0.04112651452282301, 0.03744824445578576, 0.06331771275998055, 0.0657061535936978, 0.0400711929991836, 0.036702298162109015]}, "mutation_prompt": null}
{"id": "14404928-974e-46d6-b10c-d9129f655a3a", "solution": "import numpy as np\n\nclass FireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            fireworks += new_fireworks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "FireworkAlgorithm", "description": "Novel Firework Algorithm (NFA) that utilizes the concept of fireworks explosions and sparks to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bfae29bc-35aa-460a-a064-39ea39df5920", "metadata": {"aucs": [0.2767376178904962, 0.26515490528356944, 0.2857427434078842, 0.25475236152435843, 0.26428206673843746, 0.27589696609981074, 0.28950409997306603, 0.2869471480120038, 0.25487048829692927, 0.006925949753695537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06991079378144038, 0.07346178746713372, 0.075456565950338, 0.08572877863044137, 0.07957127152677401, 0.08381022339819211, 0.08494592996280625, 0.0709848773277838, 0.07968797277218231, 0.07066859861523411, 0.08944726145545578, 0.06929192717811128, 0.08841052079868028, 0.06050787092777832, 0.06923009792067747, 0.06708176137264565, 0.07166787251777929, 0.061861476696742135, 0.9704812661750702, 0.9544217956509957, 0.9641905127723532, 0.966073464498786, 0.9530148491037587, 0.9598919616462498, 0.937139304469747, 0.9574391542341014, 0.949049073563546, 0.15333753712079434, 0.16573498070627013, 0.14707946229225566, 0.13994606144981103, 0.14975160856004954, 0.19450612978324822, 0.1630409102781688, 0.1535544452770028, 0.15764438357321664, 0.1978620165022934, 0.2071193712507059, 0.21388400182324874, 0.18691697516253403, 0.19404852652457116, 0.18944102365223758, 0.18746876301133053, 0.18819459045655684, 0.1962357837259353, 0.029343625002182905, 0.09998963081072021, 0.09723938416984679, 0.11016442636201174, 0.0687208727720765, 0.08578721542935941, 0.08535086434748829, 0.0842713782623703, 0.09697875371215559, 0.1126501100140338, 0.10564092789304835, 0.0698449228925565, 0.12256214026942502, 0.08427264283987146, 0.0925501266549571, 0.06675588403677102, 0.0732187573742834, 0.08856276191314938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07552696509583035, 0.07458543041955457, 0.04118548865218674, 0.052911682362507095, 0.012767299079659455, 0.012982722343243047, 0.05084927823980756, 0.046122689897171054, 0.05118150422440049, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03742086557329294, 0.03210235172614451, 0.03712333222801245, 0.02870659870743797, 0.020712217103779906, 0.03540042512980324, 0.008217143627331502, 0.044177591197247734, 0.025439293127344165, 0.2977962292445564, 0.2750639271377897, 0.2694349824070599, 0.2662355165836937, 0.2654545070345986, 0.2755783003171134, 0.2874137886586212, 0.2803505759514905, 0.28081011047834104, 0.0720888077245947, 0.08497476427574835, 0.0730806250277416, 0.07349704906752852, 0.10242311918734304, 0.07658692620189722, 0.0890559298054614, 0.07794624605944878, 0.07127761124251175, 0.12276963131143925, 0.12779970313684808, 0.16040934706320875, 0.13338179638210945, 0.1356406373221991, 0.12181792575571415, 0.12478235547579097, 0.1337036724566376, 0.1337831752889902, 0.2110230353431476, 0.20764176765116094, 0.21049773554641182, 0.23152506692603425, 0.21819609350848002, 0.21798202896922447, 0.20955086285542057, 0.21127776988689162, 0.22760211956614496, 0.14481708373438973, 0.16433655417246595, 0.1554352844013761, 0.14922460755027056, 0.1317113226830836, 0.18339926937055795, 0.16344119510796606, 0.15366455193059714, 0.1775626412973781, 0.19017663758596526, 0.1803947370691179, 0.18785463619355802, 0.17838437639801907, 0.19128414214396228, 0.17083985087613218, 0.18964552283271396, 0.2456269052815203, 0.17535075638009423, 0.1691838538975622, 0.1746786802772654, 0.16728311974065768, 0.17578715694047498, 0.1660270722507221, 0.16677582007069502, 0.17840783312251574, 0.17403234540206236, 0.16408403751398581, 0.17841570716317545, 0.12717994415853262, 0.16924464659362348, 0.2898229812623293, 0.17119542303803215, 0.15671267780913734, 0.17448382863883505, 0.13116796360313254, 0.1740471793464039, 0.07988570755148827, 0.26531704791343225, 0.36535612189522415, 0.23654819435884766, 0.14298998552020004, 0.1848171781035991, 0.13897015676522984, 0.14280802793821912, 0.10100272538533095, 0.1735040042863324, 0.18330422092353427, 0.17748736954787603, 0.19037412996350433, 0.17768621994800193, 0.16883349474376186, 0.17314612177438682, 0.16769597317435458, 0.19112520900010943, 0.07200204670332855, 0.10794537046883346, 0.0709838698394758, 0.07675232265689724, 0.06753546357755058, 0.07419443560736583, 0.09013928472158805, 0.08433724206662352, 0.07091597964861973]}, "mutation_prompt": null}
{"id": "f55e8a3a-19f2-4d82-9a08-88a8457d3302", "solution": "import numpy as np\n\nclass FireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            fireworks += new_fireworks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "FireworkAlgorithm", "description": "Novel Firework Algorithm (NFA) that utilizes the concept of fireworks explosions and sparks to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bfae29bc-35aa-460a-a064-39ea39df5920", "metadata": {"aucs": [0.2767376178904962, 0.26515490528356944, 0.2857427434078842, 0.25475236152435843, 0.26428206673843746, 0.27589696609981074, 0.28950409997306603, 0.2869471480120038, 0.25487048829692927, 0.006925949753695537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06991079378144038, 0.07346178746713372, 0.075456565950338, 0.08572877863044137, 0.07957127152677401, 0.08381022339819211, 0.08494592996280625, 0.0709848773277838, 0.07968797277218231, 0.07066859861523411, 0.08944726145545578, 0.06929192717811128, 0.08841052079868028, 0.06050787092777832, 0.06923009792067747, 0.06708176137264565, 0.07166787251777929, 0.061861476696742135, 0.9704812661750702, 0.9544217956509957, 0.9641905127723532, 0.966073464498786, 0.9530148491037587, 0.9598919616462498, 0.937139304469747, 0.9574391542341014, 0.949049073563546, 0.15333753712079434, 0.16573498070627013, 0.14707946229225566, 0.13994606144981103, 0.14975160856004954, 0.19450612978324822, 0.1630409102781688, 0.1535544452770028, 0.15764438357321664, 0.1978620165022934, 0.2071193712507059, 0.21388400182324874, 0.18691697516253403, 0.19404852652457116, 0.18944102365223758, 0.18746876301133053, 0.18819459045655684, 0.1962357837259353, 0.029343625002182905, 0.09998963081072021, 0.09723938416984679, 0.11016442636201174, 0.0687208727720765, 0.08578721542935941, 0.08535086434748829, 0.0842713782623703, 0.09697875371215559, 0.1126501100140338, 0.10564092789304835, 0.0698449228925565, 0.12256214026942502, 0.08427264283987146, 0.0925501266549571, 0.06675588403677102, 0.0732187573742834, 0.08856276191314938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07552696509583035, 0.07458543041955457, 0.04118548865218674, 0.052911682362507095, 0.012767299079659455, 0.012982722343243047, 0.05084927823980756, 0.046122689897171054, 0.05118150422440049, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03742086557329294, 0.03210235172614451, 0.03712333222801245, 0.02870659870743797, 0.020712217103779906, 0.03540042512980324, 0.008217143627331502, 0.044177591197247734, 0.025439293127344165, 0.2977962292445564, 0.2750639271377897, 0.2694349824070599, 0.2662355165836937, 0.2654545070345986, 0.2755783003171134, 0.2874137886586212, 0.2803505759514905, 0.28081011047834104, 0.0720888077245947, 0.08497476427574835, 0.0730806250277416, 0.07349704906752852, 0.10242311918734304, 0.07658692620189722, 0.0890559298054614, 0.07794624605944878, 0.07127761124251175, 0.12276963131143925, 0.12779970313684808, 0.16040934706320875, 0.13338179638210945, 0.1356406373221991, 0.12181792575571415, 0.12478235547579097, 0.1337036724566376, 0.1337831752889902, 0.2110230353431476, 0.20764176765116094, 0.21049773554641182, 0.23152506692603425, 0.21819609350848002, 0.21798202896922447, 0.20955086285542057, 0.21127776988689162, 0.22760211956614496, 0.14481708373438973, 0.16433655417246595, 0.1554352844013761, 0.14922460755027056, 0.1317113226830836, 0.18339926937055795, 0.16344119510796606, 0.15366455193059714, 0.1775626412973781, 0.19017663758596526, 0.1803947370691179, 0.18785463619355802, 0.17838437639801907, 0.19128414214396228, 0.17083985087613218, 0.18964552283271396, 0.2456269052815203, 0.17535075638009423, 0.1691838538975622, 0.1746786802772654, 0.16728311974065768, 0.17578715694047498, 0.1660270722507221, 0.16677582007069502, 0.17840783312251574, 0.17403234540206236, 0.16408403751398581, 0.17841570716317545, 0.12717994415853262, 0.16924464659362348, 0.2898229812623293, 0.17119542303803215, 0.15671267780913734, 0.17448382863883505, 0.13116796360313254, 0.1740471793464039, 0.07988570755148827, 0.26531704791343225, 0.36535612189522415, 0.23654819435884766, 0.14298998552020004, 0.1848171781035991, 0.13897015676522984, 0.14280802793821912, 0.10100272538533095, 0.1735040042863324, 0.18330422092353427, 0.17748736954787603, 0.19037412996350433, 0.17768621994800193, 0.16883349474376186, 0.17314612177438682, 0.16769597317435458, 0.19112520900010943, 0.07200204670332855, 0.10794537046883346, 0.0709838698394758, 0.07675232265689724, 0.06753546357755058, 0.07419443560736583, 0.09013928472158805, 0.08433724206662352, 0.07091597964861973]}, "mutation_prompt": null}
{"id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, 0.5, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation and diversified sparks generation.", "configspace": "", "generation": 10, "fitness": 0.18668698152295177, "feedback": "The algorithm EnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "bfae29bc-35aa-460a-a064-39ea39df5920", "metadata": {"aucs": [0.3231827281506635, 0.3336187754683968, 0.3440882321875519, 0.3395999425656311, 0.3303400804768446, 0.31094307575705427, 0.31925194621605346, 0.32037181449896024, 0.33767338163648297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028902347421719266, 9.999999999998899e-05, 0.08341701130544665, 0.08387507129051319, 0.09364875494146285, 0.1013924159882128, 0.10031518591730615, 0.125698141920227, 0.08541341667262536, 0.09256016066419104, 0.07244547046868033, 0.08472025846723696, 0.07536057620816394, 0.07295323254041286, 0.08522826553745233, 0.08460096007708617, 0.0778126711180146, 0.08267275421479348, 0.08552810155166868, 0.09230889188697178, 0.9468250117247129, 0.939572307771699, 0.9391165705255057, 0.9327650065100875, 0.9026327569083011, 0.9265096354541374, 0.8966455829633773, 0.9393376684518537, 0.9087362645668775, 0.22222615436927717, 0.2260788500607669, 0.22075597598563312, 0.19845143774984064, 0.20395635187665084, 0.2382150404936243, 0.2290584867282539, 0.20835795251377576, 0.24099866142198134, 0.26163706339183634, 0.24465125245134134, 0.25518782349685776, 0.27331614115678426, 0.2980210210967622, 0.28076976318808333, 0.2386345264778773, 0.26465372816406607, 0.2716350300849544, 0.11601009370206938, 0.1468018918186712, 0.11514444463139428, 0.1229977237566442, 0.10592881069214855, 0.12361433310351999, 0.1175409889962542, 0.12220162498033893, 0.13775512181805427, 0.135041175532152, 0.1186914235929094, 0.1221591762176738, 0.14047137965160095, 0.12765435317459994, 0.13471983348643812, 0.13756074255943362, 0.07396571179316891, 0.1209831983304015, 9.999999999998899e-05, 0.004150475309962487, 9.999999999998899e-05, 0.005241824321673971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09968145338863066, 0.029418940061780474, 0.07530051091270673, 0.07364942608290626, 0.05035074216258617, 0.02322738167846161, 0.11451509995793552, 0.05610316129526871, 0.05334657030143153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06187747714790148, 0.056020730032811494, 0.050293783241940226, 0.08922695819244342, 0.05319225399924632, 0.05829802213627677, 0.05728680404797293, 0.047257804972281936, 0.06665628159615022, 0.32858277318787854, 0.3122606831708946, 0.33926407748197285, 0.3194110271671655, 0.34597588857219663, 0.3267296828805354, 0.3398392030594013, 0.3185920545567855, 0.3451648687682789, 0.10770875860061568, 0.09289077391399203, 0.09129607015054131, 0.08374781686337196, 0.10300143755392588, 0.09016497759495101, 0.09968927951407969, 0.09325250823994502, 0.0847398612141591, 0.1951130114797034, 0.19105574343684406, 0.17787505696837091, 0.16939816810502395, 0.1712060300961712, 0.1854853052960881, 0.18359221896734346, 0.16601167687192753, 0.1968863837414484, 0.24481320294567044, 0.24243501845994941, 0.22124645124231146, 0.23782337331714976, 0.17899474067083465, 0.25944270017971294, 0.2396049904799088, 0.18746157634960492, 0.2485518305877744, 0.18720819410554612, 0.19059809469387912, 0.17634103945973678, 0.19157773731979488, 0.16210953851837784, 0.18194517096232932, 0.17951877053811582, 0.15408270534266866, 0.18720839395487232, 0.21526311423046363, 0.16598352126443694, 0.20877478722117326, 0.2044397546125345, 0.1988869936904326, 0.19620589530123445, 0.2148732380473699, 0.18875921538182316, 0.269682801712567, 0.18664000293031902, 0.1827626213738821, 0.17429564090565086, 0.17979138265186645, 0.18848533091956887, 0.1826825684937704, 0.18671902344466562, 0.19049663744512246, 0.1814598047900201, 0.1646172652465595, 0.20556757201279574, 0.5042743874024826, 0.411267989842626, 0.19684360932711653, 0.11531750148687425, 0.16021341135867806, 0.14493438586844953, 0.1745754976212125, 0.33611188476974674, 0.4211589020097807, 0.1194006369853372, 0.3967221557654128, 0.1258203726049576, 0.2082157286849048, 0.37996817044085895, 0.14735618457901734, 0.37334016124578806, 0.18855798561477521, 0.17819215530523602, 0.18102144674606369, 0.18006328611503908, 0.1751871047465382, 0.1695121635524649, 0.17572623603438298, 0.18661451851538668, 0.1726422937030646, 0.10003962000555078, 0.08934048049960508, 0.08494184340457855, 0.09136883648185012, 0.1079250621061425, 0.09305273674747472, 0.10552857969288398, 0.08403770481916595, 0.10542147720344541]}, "mutation_prompt": null}
{"id": "6ee88ecb-042e-4ac3-907a-9ce6085e4e0a", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, 0.5, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation and diversified sparks generation.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.3231827281506635, 0.3336187754683968, 0.3440882321875519, 0.3395999425656311, 0.3303400804768446, 0.31094307575705427, 0.31925194621605346, 0.32037181449896024, 0.33767338163648297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028902347421719266, 9.999999999998899e-05, 0.08341701130544665, 0.08387507129051319, 0.09364875494146285, 0.1013924159882128, 0.10031518591730615, 0.125698141920227, 0.08541341667262536, 0.09256016066419104, 0.07244547046868033, 0.08472025846723696, 0.07536057620816394, 0.07295323254041286, 0.08522826553745233, 0.08460096007708617, 0.0778126711180146, 0.08267275421479348, 0.08552810155166868, 0.09230889188697178, 0.9468250117247129, 0.939572307771699, 0.9391165705255057, 0.9327650065100875, 0.9026327569083011, 0.9265096354541374, 0.8966455829633773, 0.9393376684518537, 0.9087362645668775, 0.22222615436927717, 0.2260788500607669, 0.22075597598563312, 0.19845143774984064, 0.20395635187665084, 0.2382150404936243, 0.2290584867282539, 0.20835795251377576, 0.24099866142198134, 0.26163706339183634, 0.24465125245134134, 0.25518782349685776, 0.27331614115678426, 0.2980210210967622, 0.28076976318808333, 0.2386345264778773, 0.26465372816406607, 0.2716350300849544, 0.11601009370206938, 0.1468018918186712, 0.11514444463139428, 0.1229977237566442, 0.10592881069214855, 0.12361433310351999, 0.1175409889962542, 0.12220162498033893, 0.13775512181805427, 0.135041175532152, 0.1186914235929094, 0.1221591762176738, 0.14047137965160095, 0.12765435317459994, 0.13471983348643812, 0.13756074255943362, 0.07396571179316891, 0.1209831983304015, 9.999999999998899e-05, 0.004150475309962487, 9.999999999998899e-05, 0.005241824321673971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09968145338863066, 0.029418940061780474, 0.07530051091270673, 0.07364942608290626, 0.05035074216258617, 0.02322738167846161, 0.11451509995793552, 0.05610316129526871, 0.05334657030143153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06187747714790148, 0.056020730032811494, 0.050293783241940226, 0.08922695819244342, 0.05319225399924632, 0.05829802213627677, 0.05728680404797293, 0.047257804972281936, 0.06665628159615022, 0.32858277318787854, 0.3122606831708946, 0.33926407748197285, 0.3194110271671655, 0.34597588857219663, 0.3267296828805354, 0.3398392030594013, 0.3185920545567855, 0.3451648687682789, 0.10770875860061568, 0.09289077391399203, 0.09129607015054131, 0.08374781686337196, 0.10300143755392588, 0.09016497759495101, 0.09968927951407969, 0.09325250823994502, 0.0847398612141591, 0.1951130114797034, 0.19105574343684406, 0.17787505696837091, 0.16939816810502395, 0.1712060300961712, 0.1854853052960881, 0.18359221896734346, 0.16601167687192753, 0.1968863837414484, 0.24481320294567044, 0.24243501845994941, 0.22124645124231146, 0.23782337331714976, 0.17899474067083465, 0.25944270017971294, 0.2396049904799088, 0.18746157634960492, 0.2485518305877744, 0.18720819410554612, 0.19059809469387912, 0.17634103945973678, 0.19157773731979488, 0.16210953851837784, 0.18194517096232932, 0.17951877053811582, 0.15408270534266866, 0.18720839395487232, 0.21526311423046363, 0.16598352126443694, 0.20877478722117326, 0.2044397546125345, 0.1988869936904326, 0.19620589530123445, 0.2148732380473699, 0.18875921538182316, 0.269682801712567, 0.18664000293031902, 0.1827626213738821, 0.17429564090565086, 0.17979138265186645, 0.18848533091956887, 0.1826825684937704, 0.18671902344466562, 0.19049663744512246, 0.1814598047900201, 0.1646172652465595, 0.20556757201279574, 0.5042743874024826, 0.411267989842626, 0.19684360932711653, 0.11531750148687425, 0.16021341135867806, 0.14493438586844953, 0.1745754976212125, 0.33611188476974674, 0.4211589020097807, 0.1194006369853372, 0.3967221557654128, 0.1258203726049576, 0.2082157286849048, 0.37996817044085895, 0.14735618457901734, 0.37334016124578806, 0.18855798561477521, 0.17819215530523602, 0.18102144674606369, 0.18006328611503908, 0.1751871047465382, 0.1695121635524649, 0.17572623603438298, 0.18661451851538668, 0.1726422937030646, 0.10003962000555078, 0.08934048049960508, 0.08494184340457855, 0.09136883648185012, 0.1079250621061425, 0.09305273674747472, 0.10552857969288398, 0.08403770481916595, 0.10542147720344541]}, "mutation_prompt": null}
{"id": "55830563-299e-4a3d-b214-0ee336778641", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10, mutation_rate=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_rate, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_rate * 0.5, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Introduce a dynamic mutation rate adjustment based on the function landscape to enhance exploration-exploitation balance.", "configspace": "", "generation": 12, "fitness": 0.18668698152295177, "feedback": "The algorithm EnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.3231827281506635, 0.3336187754683968, 0.3440882321875519, 0.3395999425656311, 0.3303400804768446, 0.31094307575705427, 0.31925194621605346, 0.32037181449896024, 0.33767338163648297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028902347421719266, 9.999999999998899e-05, 0.08341701130544665, 0.08387507129051319, 0.09364875494146285, 0.1013924159882128, 0.10031518591730615, 0.125698141920227, 0.08541341667262536, 0.09256016066419104, 0.07244547046868033, 0.08472025846723696, 0.07536057620816394, 0.07295323254041286, 0.08522826553745233, 0.08460096007708617, 0.0778126711180146, 0.08267275421479348, 0.08552810155166868, 0.09230889188697178, 0.9468250117247129, 0.939572307771699, 0.9391165705255057, 0.9327650065100875, 0.9026327569083011, 0.9265096354541374, 0.8966455829633773, 0.9393376684518537, 0.9087362645668775, 0.22222615436927717, 0.2260788500607669, 0.22075597598563312, 0.19845143774984064, 0.20395635187665084, 0.2382150404936243, 0.2290584867282539, 0.20835795251377576, 0.24099866142198134, 0.26163706339183634, 0.24465125245134134, 0.25518782349685776, 0.27331614115678426, 0.2980210210967622, 0.28076976318808333, 0.2386345264778773, 0.26465372816406607, 0.2716350300849544, 0.11601009370206938, 0.1468018918186712, 0.11514444463139428, 0.1229977237566442, 0.10592881069214855, 0.12361433310351999, 0.1175409889962542, 0.12220162498033893, 0.13775512181805427, 0.135041175532152, 0.1186914235929094, 0.1221591762176738, 0.14047137965160095, 0.12765435317459994, 0.13471983348643812, 0.13756074255943362, 0.07396571179316891, 0.1209831983304015, 9.999999999998899e-05, 0.004150475309962487, 9.999999999998899e-05, 0.005241824321673971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09968145338863066, 0.029418940061780474, 0.07530051091270673, 0.07364942608290626, 0.05035074216258617, 0.02322738167846161, 0.11451509995793552, 0.05610316129526871, 0.05334657030143153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06187747714790148, 0.056020730032811494, 0.050293783241940226, 0.08922695819244342, 0.05319225399924632, 0.05829802213627677, 0.05728680404797293, 0.047257804972281936, 0.06665628159615022, 0.32858277318787854, 0.3122606831708946, 0.33926407748197285, 0.3194110271671655, 0.34597588857219663, 0.3267296828805354, 0.3398392030594013, 0.3185920545567855, 0.3451648687682789, 0.10770875860061568, 0.09289077391399203, 0.09129607015054131, 0.08374781686337196, 0.10300143755392588, 0.09016497759495101, 0.09968927951407969, 0.09325250823994502, 0.0847398612141591, 0.1951130114797034, 0.19105574343684406, 0.17787505696837091, 0.16939816810502395, 0.1712060300961712, 0.1854853052960881, 0.18359221896734346, 0.16601167687192753, 0.1968863837414484, 0.24481320294567044, 0.24243501845994941, 0.22124645124231146, 0.23782337331714976, 0.17899474067083465, 0.25944270017971294, 0.2396049904799088, 0.18746157634960492, 0.2485518305877744, 0.18720819410554612, 0.19059809469387912, 0.17634103945973678, 0.19157773731979488, 0.16210953851837784, 0.18194517096232932, 0.17951877053811582, 0.15408270534266866, 0.18720839395487232, 0.21526311423046363, 0.16598352126443694, 0.20877478722117326, 0.2044397546125345, 0.1988869936904326, 0.19620589530123445, 0.2148732380473699, 0.18875921538182316, 0.269682801712567, 0.18664000293031902, 0.1827626213738821, 0.17429564090565086, 0.17979138265186645, 0.18848533091956887, 0.1826825684937704, 0.18671902344466562, 0.19049663744512246, 0.1814598047900201, 0.1646172652465595, 0.20556757201279574, 0.5042743874024826, 0.411267989842626, 0.19684360932711653, 0.11531750148687425, 0.16021341135867806, 0.14493438586844953, 0.1745754976212125, 0.33611188476974674, 0.4211589020097807, 0.1194006369853372, 0.3967221557654128, 0.1258203726049576, 0.2082157286849048, 0.37996817044085895, 0.14735618457901734, 0.37334016124578806, 0.18855798561477521, 0.17819215530523602, 0.18102144674606369, 0.18006328611503908, 0.1751871047465382, 0.1695121635524649, 0.17572623603438298, 0.18661451851538668, 0.1726422937030646, 0.10003962000555078, 0.08934048049960508, 0.08494184340457855, 0.09136883648185012, 0.1079250621061425, 0.09305273674747472, 0.10552857969288398, 0.08403770481916595, 0.10542147720344541]}, "mutation_prompt": null}
{"id": "005ccfac-cfe8-43e4-97c4-e7e495acd37d", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, 0.5, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation and diversified sparks generation.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.3231827281506635, 0.3336187754683968, 0.3440882321875519, 0.3395999425656311, 0.3303400804768446, 0.31094307575705427, 0.31925194621605346, 0.32037181449896024, 0.33767338163648297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028902347421719266, 9.999999999998899e-05, 0.08341701130544665, 0.08387507129051319, 0.09364875494146285, 0.1013924159882128, 0.10031518591730615, 0.125698141920227, 0.08541341667262536, 0.09256016066419104, 0.07244547046868033, 0.08472025846723696, 0.07536057620816394, 0.07295323254041286, 0.08522826553745233, 0.08460096007708617, 0.0778126711180146, 0.08267275421479348, 0.08552810155166868, 0.09230889188697178, 0.9468250117247129, 0.939572307771699, 0.9391165705255057, 0.9327650065100875, 0.9026327569083011, 0.9265096354541374, 0.8966455829633773, 0.9393376684518537, 0.9087362645668775, 0.22222615436927717, 0.2260788500607669, 0.22075597598563312, 0.19845143774984064, 0.20395635187665084, 0.2382150404936243, 0.2290584867282539, 0.20835795251377576, 0.24099866142198134, 0.26163706339183634, 0.24465125245134134, 0.25518782349685776, 0.27331614115678426, 0.2980210210967622, 0.28076976318808333, 0.2386345264778773, 0.26465372816406607, 0.2716350300849544, 0.11601009370206938, 0.1468018918186712, 0.11514444463139428, 0.1229977237566442, 0.10592881069214855, 0.12361433310351999, 0.1175409889962542, 0.12220162498033893, 0.13775512181805427, 0.135041175532152, 0.1186914235929094, 0.1221591762176738, 0.14047137965160095, 0.12765435317459994, 0.13471983348643812, 0.13756074255943362, 0.07396571179316891, 0.1209831983304015, 9.999999999998899e-05, 0.004150475309962487, 9.999999999998899e-05, 0.005241824321673971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09968145338863066, 0.029418940061780474, 0.07530051091270673, 0.07364942608290626, 0.05035074216258617, 0.02322738167846161, 0.11451509995793552, 0.05610316129526871, 0.05334657030143153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06187747714790148, 0.056020730032811494, 0.050293783241940226, 0.08922695819244342, 0.05319225399924632, 0.05829802213627677, 0.05728680404797293, 0.047257804972281936, 0.06665628159615022, 0.32858277318787854, 0.3122606831708946, 0.33926407748197285, 0.3194110271671655, 0.34597588857219663, 0.3267296828805354, 0.3398392030594013, 0.3185920545567855, 0.3451648687682789, 0.10770875860061568, 0.09289077391399203, 0.09129607015054131, 0.08374781686337196, 0.10300143755392588, 0.09016497759495101, 0.09968927951407969, 0.09325250823994502, 0.0847398612141591, 0.1951130114797034, 0.19105574343684406, 0.17787505696837091, 0.16939816810502395, 0.1712060300961712, 0.1854853052960881, 0.18359221896734346, 0.16601167687192753, 0.1968863837414484, 0.24481320294567044, 0.24243501845994941, 0.22124645124231146, 0.23782337331714976, 0.17899474067083465, 0.25944270017971294, 0.2396049904799088, 0.18746157634960492, 0.2485518305877744, 0.18720819410554612, 0.19059809469387912, 0.17634103945973678, 0.19157773731979488, 0.16210953851837784, 0.18194517096232932, 0.17951877053811582, 0.15408270534266866, 0.18720839395487232, 0.21526311423046363, 0.16598352126443694, 0.20877478722117326, 0.2044397546125345, 0.1988869936904326, 0.19620589530123445, 0.2148732380473699, 0.18875921538182316, 0.269682801712567, 0.18664000293031902, 0.1827626213738821, 0.17429564090565086, 0.17979138265186645, 0.18848533091956887, 0.1826825684937704, 0.18671902344466562, 0.19049663744512246, 0.1814598047900201, 0.1646172652465595, 0.20556757201279574, 0.5042743874024826, 0.411267989842626, 0.19684360932711653, 0.11531750148687425, 0.16021341135867806, 0.14493438586844953, 0.1745754976212125, 0.33611188476974674, 0.4211589020097807, 0.1194006369853372, 0.3967221557654128, 0.1258203726049576, 0.2082157286849048, 0.37996817044085895, 0.14735618457901734, 0.37334016124578806, 0.18855798561477521, 0.17819215530523602, 0.18102144674606369, 0.18006328611503908, 0.1751871047465382, 0.1695121635524649, 0.17572623603438298, 0.18661451851538668, 0.1726422937030646, 0.10003962000555078, 0.08934048049960508, 0.08494184340457855, 0.09136883648185012, 0.1079250621061425, 0.09305273674747472, 0.10552857969288398, 0.08403770481916595, 0.10542147720344541]}, "mutation_prompt": null}
{"id": "485e1a9e-ea2a-48d9-a9f6-b5029bb94ba6", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithmImproved:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, 0.5 * np.exp(-func(firework)), self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithmImproved", "description": "Improved Enhanced Firework Algorithm with varying explosion amplitude and spark creation based on function landscape.", "configspace": "", "generation": 14, "fitness": 0.12861825479651315, "feedback": "The algorithm EnhancedFireworkAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.16.", "error": "", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.22485755926042994, 0.22417457095795723, 0.2520722282343436, 0.206993793133594, 0.23915143903435887, 0.20244459658324776, 0.21982442814448377, 0.21974079833208326, 0.24175775404817257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05187801959219762, 0.051642754410588854, 0.046033712117657166, 0.05955000624585971, 0.0443112594034224, 0.04295738972780383, 0.04874924663861968, 0.06288230607619949, 0.05547694200857045, 0.041311481590492805, 0.047633197168447494, 0.0369162136258272, 0.050888514848176025, 0.039547318609386095, 0.034234997859149185, 0.050188609329688716, 0.028063479671866287, 0.04542801983898681, 0.8890578795993838, 0.8565882039201441, 0.8707248898515627, 0.8052975439873185, 0.7745312572860769, 0.7975783990938845, 0.8317064435424213, 0.8287218362395686, 0.7663262700512528, 0.11270444089757836, 0.11784097103378677, 0.1344682402938039, 0.1326920644158649, 0.11559323567752855, 0.11610571664605229, 0.11277509164465149, 0.11095393327819825, 0.11364977596419445, 0.18514171124046064, 0.11844116698995455, 0.1531332111372261, 0.15105765880927224, 0.16072367876586435, 0.1489556771436693, 0.15918074128603343, 0.16035683298884884, 0.193841502851413, 9.999999999998899e-05, 0.02763845780594476, 0.035527025824462766, 0.039022707997333095, 0.021282732073909183, 0.05805441039746073, 0.05643861407418682, 0.05147009718257123, 0.05862520822551176, 0.06828615274676453, 0.04419754939901699, 0.04915731875291951, 0.07361932484042555, 0.07155436742343224, 0.04305429696545793, 0.05587432449949825, 9.999999999998899e-05, 0.049032902983056514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07755465840713405, 9.999999999998899e-05, 0.0028376839975273738, 0.06276846102927813, 9.999999999998899e-05, 9.999999999998899e-05, 0.07501161043898374, 0.013722803053346277, 0.02703748568055031, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013555543950175664, 0.003271599773872702, 0.006139714834850207, 0.011409507876563252, 0.005702270865136638, 0.005713191817732111, 0.007019932906692117, 0.010334139415620336, 0.00920146075090511, 0.2237118605222399, 0.2296430208167477, 0.2511306327826154, 0.2471874266507269, 0.232683895071768, 0.23953629918984687, 0.23135304694080228, 0.23839473743219464, 0.2564207993912351, 0.0504503721267181, 0.054789119244552764, 0.05110696990637664, 0.0711668723861687, 0.04639184585716771, 0.06578008011693015, 0.055134674544239703, 0.06865124485295981, 0.05501155585629369, 0.09102177094727326, 0.10052162723551061, 0.09760073955968496, 0.10681868283214502, 0.09635449088268866, 0.0909804539522604, 0.10210814109576571, 0.12253694038720642, 0.102308459170256, 0.19448014137639402, 0.1822899048786516, 0.1901983124546045, 0.1395330979322258, 0.1757178671637485, 0.16146270101283278, 0.17853849872472094, 0.17849853179894648, 0.1794519481384539, 0.09741011225920704, 0.13687393995327746, 0.11672265496277046, 0.12790518522491134, 0.11289145821367297, 0.134545242216625, 0.11778854994806898, 0.1364512849110996, 0.11525591387881451, 0.16477465349225018, 0.14704966087293303, 0.14498612706304848, 0.13982244253926168, 0.17433589972063468, 0.214171507002473, 0.18807043541527668, 0.15482582566552794, 0.1623942498798795, 0.15169156728158562, 0.14614001332637594, 0.15019434141776233, 0.15609815109725678, 0.16193125264985375, 0.15106286974900263, 0.14701656085841186, 0.14305556859248614, 0.14834274892818522, 0.11475655603154356, 0.10706645111196156, 0.12228811655056093, 0.25763812511253525, 0.19002923147756878, 0.1607220429075089, 0.1608246216995607, 0.11097726907501015, 0.16210795907136855, 0.1677817616945143, 0.21295981329081382, 0.1583870449895528, 0.2149658120659762, 0.10687078302601438, 0.1800152090428705, 0.12123100514996132, 0.11828911995115099, 0.10442943712758168, 0.19382617245359046, 0.16118357757554436, 0.1740026778307232, 0.1816226252493255, 0.18041422950045127, 0.18005748630418528, 0.14937039508427152, 0.14652319450623708, 0.15422492890323247, 0.04326816879704476, 0.04305297274908315, 0.045399998505535555, 0.06764902660636885, 0.05430717483075154, 0.054538594847853394, 0.05421596214660018, 0.04795908990116404, 0.05363685340727098]}, "mutation_prompt": null}
{"id": "00a4d1ff-79ac-4b38-9eb4-61684c90d75a", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, 0.5, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation and diversified sparks generation.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.3231827281506635, 0.3336187754683968, 0.3440882321875519, 0.3395999425656311, 0.3303400804768446, 0.31094307575705427, 0.31925194621605346, 0.32037181449896024, 0.33767338163648297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028902347421719266, 9.999999999998899e-05, 0.08341701130544665, 0.08387507129051319, 0.09364875494146285, 0.1013924159882128, 0.10031518591730615, 0.125698141920227, 0.08541341667262536, 0.09256016066419104, 0.07244547046868033, 0.08472025846723696, 0.07536057620816394, 0.07295323254041286, 0.08522826553745233, 0.08460096007708617, 0.0778126711180146, 0.08267275421479348, 0.08552810155166868, 0.09230889188697178, 0.9468250117247129, 0.939572307771699, 0.9391165705255057, 0.9327650065100875, 0.9026327569083011, 0.9265096354541374, 0.8966455829633773, 0.9393376684518537, 0.9087362645668775, 0.22222615436927717, 0.2260788500607669, 0.22075597598563312, 0.19845143774984064, 0.20395635187665084, 0.2382150404936243, 0.2290584867282539, 0.20835795251377576, 0.24099866142198134, 0.26163706339183634, 0.24465125245134134, 0.25518782349685776, 0.27331614115678426, 0.2980210210967622, 0.28076976318808333, 0.2386345264778773, 0.26465372816406607, 0.2716350300849544, 0.11601009370206938, 0.1468018918186712, 0.11514444463139428, 0.1229977237566442, 0.10592881069214855, 0.12361433310351999, 0.1175409889962542, 0.12220162498033893, 0.13775512181805427, 0.135041175532152, 0.1186914235929094, 0.1221591762176738, 0.14047137965160095, 0.12765435317459994, 0.13471983348643812, 0.13756074255943362, 0.07396571179316891, 0.1209831983304015, 9.999999999998899e-05, 0.004150475309962487, 9.999999999998899e-05, 0.005241824321673971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09968145338863066, 0.029418940061780474, 0.07530051091270673, 0.07364942608290626, 0.05035074216258617, 0.02322738167846161, 0.11451509995793552, 0.05610316129526871, 0.05334657030143153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06187747714790148, 0.056020730032811494, 0.050293783241940226, 0.08922695819244342, 0.05319225399924632, 0.05829802213627677, 0.05728680404797293, 0.047257804972281936, 0.06665628159615022, 0.32858277318787854, 0.3122606831708946, 0.33926407748197285, 0.3194110271671655, 0.34597588857219663, 0.3267296828805354, 0.3398392030594013, 0.3185920545567855, 0.3451648687682789, 0.10770875860061568, 0.09289077391399203, 0.09129607015054131, 0.08374781686337196, 0.10300143755392588, 0.09016497759495101, 0.09968927951407969, 0.09325250823994502, 0.0847398612141591, 0.1951130114797034, 0.19105574343684406, 0.17787505696837091, 0.16939816810502395, 0.1712060300961712, 0.1854853052960881, 0.18359221896734346, 0.16601167687192753, 0.1968863837414484, 0.24481320294567044, 0.24243501845994941, 0.22124645124231146, 0.23782337331714976, 0.17899474067083465, 0.25944270017971294, 0.2396049904799088, 0.18746157634960492, 0.2485518305877744, 0.18720819410554612, 0.19059809469387912, 0.17634103945973678, 0.19157773731979488, 0.16210953851837784, 0.18194517096232932, 0.17951877053811582, 0.15408270534266866, 0.18720839395487232, 0.21526311423046363, 0.16598352126443694, 0.20877478722117326, 0.2044397546125345, 0.1988869936904326, 0.19620589530123445, 0.2148732380473699, 0.18875921538182316, 0.269682801712567, 0.18664000293031902, 0.1827626213738821, 0.17429564090565086, 0.17979138265186645, 0.18848533091956887, 0.1826825684937704, 0.18671902344466562, 0.19049663744512246, 0.1814598047900201, 0.1646172652465595, 0.20556757201279574, 0.5042743874024826, 0.411267989842626, 0.19684360932711653, 0.11531750148687425, 0.16021341135867806, 0.14493438586844953, 0.1745754976212125, 0.33611188476974674, 0.4211589020097807, 0.1194006369853372, 0.3967221557654128, 0.1258203726049576, 0.2082157286849048, 0.37996817044085895, 0.14735618457901734, 0.37334016124578806, 0.18855798561477521, 0.17819215530523602, 0.18102144674606369, 0.18006328611503908, 0.1751871047465382, 0.1695121635524649, 0.17572623603438298, 0.18661451851538668, 0.1726422937030646, 0.10003962000555078, 0.08934048049960508, 0.08494184340457855, 0.09136883648185012, 0.1079250621061425, 0.09305273674747472, 0.10552857969288398, 0.08403770481916595, 0.10542147720344541]}, "mutation_prompt": null}
{"id": "91d4a23e-5857-4879-83a5-f38a0d8fcd11", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, 0.5, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation and diversified sparks generation.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.3231827281506635, 0.3336187754683968, 0.3440882321875519, 0.3395999425656311, 0.3303400804768446, 0.31094307575705427, 0.31925194621605346, 0.32037181449896024, 0.33767338163648297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028902347421719266, 9.999999999998899e-05, 0.08341701130544665, 0.08387507129051319, 0.09364875494146285, 0.1013924159882128, 0.10031518591730615, 0.125698141920227, 0.08541341667262536, 0.09256016066419104, 0.07244547046868033, 0.08472025846723696, 0.07536057620816394, 0.07295323254041286, 0.08522826553745233, 0.08460096007708617, 0.0778126711180146, 0.08267275421479348, 0.08552810155166868, 0.09230889188697178, 0.9468250117247129, 0.939572307771699, 0.9391165705255057, 0.9327650065100875, 0.9026327569083011, 0.9265096354541374, 0.8966455829633773, 0.9393376684518537, 0.9087362645668775, 0.22222615436927717, 0.2260788500607669, 0.22075597598563312, 0.19845143774984064, 0.20395635187665084, 0.2382150404936243, 0.2290584867282539, 0.20835795251377576, 0.24099866142198134, 0.26163706339183634, 0.24465125245134134, 0.25518782349685776, 0.27331614115678426, 0.2980210210967622, 0.28076976318808333, 0.2386345264778773, 0.26465372816406607, 0.2716350300849544, 0.11601009370206938, 0.1468018918186712, 0.11514444463139428, 0.1229977237566442, 0.10592881069214855, 0.12361433310351999, 0.1175409889962542, 0.12220162498033893, 0.13775512181805427, 0.135041175532152, 0.1186914235929094, 0.1221591762176738, 0.14047137965160095, 0.12765435317459994, 0.13471983348643812, 0.13756074255943362, 0.07396571179316891, 0.1209831983304015, 9.999999999998899e-05, 0.004150475309962487, 9.999999999998899e-05, 0.005241824321673971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09968145338863066, 0.029418940061780474, 0.07530051091270673, 0.07364942608290626, 0.05035074216258617, 0.02322738167846161, 0.11451509995793552, 0.05610316129526871, 0.05334657030143153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06187747714790148, 0.056020730032811494, 0.050293783241940226, 0.08922695819244342, 0.05319225399924632, 0.05829802213627677, 0.05728680404797293, 0.047257804972281936, 0.06665628159615022, 0.32858277318787854, 0.3122606831708946, 0.33926407748197285, 0.3194110271671655, 0.34597588857219663, 0.3267296828805354, 0.3398392030594013, 0.3185920545567855, 0.3451648687682789, 0.10770875860061568, 0.09289077391399203, 0.09129607015054131, 0.08374781686337196, 0.10300143755392588, 0.09016497759495101, 0.09968927951407969, 0.09325250823994502, 0.0847398612141591, 0.1951130114797034, 0.19105574343684406, 0.17787505696837091, 0.16939816810502395, 0.1712060300961712, 0.1854853052960881, 0.18359221896734346, 0.16601167687192753, 0.1968863837414484, 0.24481320294567044, 0.24243501845994941, 0.22124645124231146, 0.23782337331714976, 0.17899474067083465, 0.25944270017971294, 0.2396049904799088, 0.18746157634960492, 0.2485518305877744, 0.18720819410554612, 0.19059809469387912, 0.17634103945973678, 0.19157773731979488, 0.16210953851837784, 0.18194517096232932, 0.17951877053811582, 0.15408270534266866, 0.18720839395487232, 0.21526311423046363, 0.16598352126443694, 0.20877478722117326, 0.2044397546125345, 0.1988869936904326, 0.19620589530123445, 0.2148732380473699, 0.18875921538182316, 0.269682801712567, 0.18664000293031902, 0.1827626213738821, 0.17429564090565086, 0.17979138265186645, 0.18848533091956887, 0.1826825684937704, 0.18671902344466562, 0.19049663744512246, 0.1814598047900201, 0.1646172652465595, 0.20556757201279574, 0.5042743874024826, 0.411267989842626, 0.19684360932711653, 0.11531750148687425, 0.16021341135867806, 0.14493438586844953, 0.1745754976212125, 0.33611188476974674, 0.4211589020097807, 0.1194006369853372, 0.3967221557654128, 0.1258203726049576, 0.2082157286849048, 0.37996817044085895, 0.14735618457901734, 0.37334016124578806, 0.18855798561477521, 0.17819215530523602, 0.18102144674606369, 0.18006328611503908, 0.1751871047465382, 0.1695121635524649, 0.17572623603438298, 0.18661451851538668, 0.1726422937030646, 0.10003962000555078, 0.08934048049960508, 0.08494184340457855, 0.09136883648185012, 0.1079250621061425, 0.09305273674747472, 0.10552857969288398, 0.08403770481916595, 0.10542147720344541]}, "mutation_prompt": null}
{"id": "8d7740e1-1786-43c4-83d7-a113891f413a", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10, explosion_amplitude=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n        self.explosion_amplitude = explosion_amplitude\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) * self.explosion_amplitude for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, 0.5, self.dim) * self.explosion_amplitude for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n\n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation, diversified sparks generation, and adaptive explosion amplitude based on function landscape analysis.", "configspace": "", "generation": 17, "fitness": 0.18668698152295177, "feedback": "The algorithm EnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.3231827281506635, 0.3336187754683968, 0.3440882321875519, 0.3395999425656311, 0.3303400804768446, 0.31094307575705427, 0.31925194621605346, 0.32037181449896024, 0.33767338163648297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028902347421719266, 9.999999999998899e-05, 0.08341701130544665, 0.08387507129051319, 0.09364875494146285, 0.1013924159882128, 0.10031518591730615, 0.125698141920227, 0.08541341667262536, 0.09256016066419104, 0.07244547046868033, 0.08472025846723696, 0.07536057620816394, 0.07295323254041286, 0.08522826553745233, 0.08460096007708617, 0.0778126711180146, 0.08267275421479348, 0.08552810155166868, 0.09230889188697178, 0.9468250117247129, 0.939572307771699, 0.9391165705255057, 0.9327650065100875, 0.9026327569083011, 0.9265096354541374, 0.8966455829633773, 0.9393376684518537, 0.9087362645668775, 0.22222615436927717, 0.2260788500607669, 0.22075597598563312, 0.19845143774984064, 0.20395635187665084, 0.2382150404936243, 0.2290584867282539, 0.20835795251377576, 0.24099866142198134, 0.26163706339183634, 0.24465125245134134, 0.25518782349685776, 0.27331614115678426, 0.2980210210967622, 0.28076976318808333, 0.2386345264778773, 0.26465372816406607, 0.2716350300849544, 0.11601009370206938, 0.1468018918186712, 0.11514444463139428, 0.1229977237566442, 0.10592881069214855, 0.12361433310351999, 0.1175409889962542, 0.12220162498033893, 0.13775512181805427, 0.135041175532152, 0.1186914235929094, 0.1221591762176738, 0.14047137965160095, 0.12765435317459994, 0.13471983348643812, 0.13756074255943362, 0.07396571179316891, 0.1209831983304015, 9.999999999998899e-05, 0.004150475309962487, 9.999999999998899e-05, 0.005241824321673971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09968145338863066, 0.029418940061780474, 0.07530051091270673, 0.07364942608290626, 0.05035074216258617, 0.02322738167846161, 0.11451509995793552, 0.05610316129526871, 0.05334657030143153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06187747714790148, 0.056020730032811494, 0.050293783241940226, 0.08922695819244342, 0.05319225399924632, 0.05829802213627677, 0.05728680404797293, 0.047257804972281936, 0.06665628159615022, 0.32858277318787854, 0.3122606831708946, 0.33926407748197285, 0.3194110271671655, 0.34597588857219663, 0.3267296828805354, 0.3398392030594013, 0.3185920545567855, 0.3451648687682789, 0.10770875860061568, 0.09289077391399203, 0.09129607015054131, 0.08374781686337196, 0.10300143755392588, 0.09016497759495101, 0.09968927951407969, 0.09325250823994502, 0.0847398612141591, 0.1951130114797034, 0.19105574343684406, 0.17787505696837091, 0.16939816810502395, 0.1712060300961712, 0.1854853052960881, 0.18359221896734346, 0.16601167687192753, 0.1968863837414484, 0.24481320294567044, 0.24243501845994941, 0.22124645124231146, 0.23782337331714976, 0.17899474067083465, 0.25944270017971294, 0.2396049904799088, 0.18746157634960492, 0.2485518305877744, 0.18720819410554612, 0.19059809469387912, 0.17634103945973678, 0.19157773731979488, 0.16210953851837784, 0.18194517096232932, 0.17951877053811582, 0.15408270534266866, 0.18720839395487232, 0.21526311423046363, 0.16598352126443694, 0.20877478722117326, 0.2044397546125345, 0.1988869936904326, 0.19620589530123445, 0.2148732380473699, 0.18875921538182316, 0.269682801712567, 0.18664000293031902, 0.1827626213738821, 0.17429564090565086, 0.17979138265186645, 0.18848533091956887, 0.1826825684937704, 0.18671902344466562, 0.19049663744512246, 0.1814598047900201, 0.1646172652465595, 0.20556757201279574, 0.5042743874024826, 0.411267989842626, 0.19684360932711653, 0.11531750148687425, 0.16021341135867806, 0.14493438586844953, 0.1745754976212125, 0.33611188476974674, 0.4211589020097807, 0.1194006369853372, 0.3967221557654128, 0.1258203726049576, 0.2082157286849048, 0.37996817044085895, 0.14735618457901734, 0.37334016124578806, 0.18855798561477521, 0.17819215530523602, 0.18102144674606369, 0.18006328611503908, 0.1751871047465382, 0.1695121635524649, 0.17572623603438298, 0.18661451851538668, 0.1726422937030646, 0.10003962000555078, 0.08934048049960508, 0.08494184340457855, 0.09136883648185012, 0.1079250621061425, 0.09305273674747472, 0.10552857969288398, 0.08403770481916595, 0.10542147720344541]}, "mutation_prompt": null}
{"id": "5bb7e7c2-6a3d-43f7-af9a-0e78537ab1ee", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10, explosion_amplitude=1.0):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n        self.explosion_amplitude = explosion_amplitude\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.explosion_amplitude, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.explosion_amplitude/2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation, diversified sparks generation, and adaptive explosion amplitude.", "configspace": "", "generation": 18, "fitness": 0.18668698152295177, "feedback": "The algorithm EnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.3231827281506635, 0.3336187754683968, 0.3440882321875519, 0.3395999425656311, 0.3303400804768446, 0.31094307575705427, 0.31925194621605346, 0.32037181449896024, 0.33767338163648297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028902347421719266, 9.999999999998899e-05, 0.08341701130544665, 0.08387507129051319, 0.09364875494146285, 0.1013924159882128, 0.10031518591730615, 0.125698141920227, 0.08541341667262536, 0.09256016066419104, 0.07244547046868033, 0.08472025846723696, 0.07536057620816394, 0.07295323254041286, 0.08522826553745233, 0.08460096007708617, 0.0778126711180146, 0.08267275421479348, 0.08552810155166868, 0.09230889188697178, 0.9468250117247129, 0.939572307771699, 0.9391165705255057, 0.9327650065100875, 0.9026327569083011, 0.9265096354541374, 0.8966455829633773, 0.9393376684518537, 0.9087362645668775, 0.22222615436927717, 0.2260788500607669, 0.22075597598563312, 0.19845143774984064, 0.20395635187665084, 0.2382150404936243, 0.2290584867282539, 0.20835795251377576, 0.24099866142198134, 0.26163706339183634, 0.24465125245134134, 0.25518782349685776, 0.27331614115678426, 0.2980210210967622, 0.28076976318808333, 0.2386345264778773, 0.26465372816406607, 0.2716350300849544, 0.11601009370206938, 0.1468018918186712, 0.11514444463139428, 0.1229977237566442, 0.10592881069214855, 0.12361433310351999, 0.1175409889962542, 0.12220162498033893, 0.13775512181805427, 0.135041175532152, 0.1186914235929094, 0.1221591762176738, 0.14047137965160095, 0.12765435317459994, 0.13471983348643812, 0.13756074255943362, 0.07396571179316891, 0.1209831983304015, 9.999999999998899e-05, 0.004150475309962487, 9.999999999998899e-05, 0.005241824321673971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09968145338863066, 0.029418940061780474, 0.07530051091270673, 0.07364942608290626, 0.05035074216258617, 0.02322738167846161, 0.11451509995793552, 0.05610316129526871, 0.05334657030143153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06187747714790148, 0.056020730032811494, 0.050293783241940226, 0.08922695819244342, 0.05319225399924632, 0.05829802213627677, 0.05728680404797293, 0.047257804972281936, 0.06665628159615022, 0.32858277318787854, 0.3122606831708946, 0.33926407748197285, 0.3194110271671655, 0.34597588857219663, 0.3267296828805354, 0.3398392030594013, 0.3185920545567855, 0.3451648687682789, 0.10770875860061568, 0.09289077391399203, 0.09129607015054131, 0.08374781686337196, 0.10300143755392588, 0.09016497759495101, 0.09968927951407969, 0.09325250823994502, 0.0847398612141591, 0.1951130114797034, 0.19105574343684406, 0.17787505696837091, 0.16939816810502395, 0.1712060300961712, 0.1854853052960881, 0.18359221896734346, 0.16601167687192753, 0.1968863837414484, 0.24481320294567044, 0.24243501845994941, 0.22124645124231146, 0.23782337331714976, 0.17899474067083465, 0.25944270017971294, 0.2396049904799088, 0.18746157634960492, 0.2485518305877744, 0.18720819410554612, 0.19059809469387912, 0.17634103945973678, 0.19157773731979488, 0.16210953851837784, 0.18194517096232932, 0.17951877053811582, 0.15408270534266866, 0.18720839395487232, 0.21526311423046363, 0.16598352126443694, 0.20877478722117326, 0.2044397546125345, 0.1988869936904326, 0.19620589530123445, 0.2148732380473699, 0.18875921538182316, 0.269682801712567, 0.18664000293031902, 0.1827626213738821, 0.17429564090565086, 0.17979138265186645, 0.18848533091956887, 0.1826825684937704, 0.18671902344466562, 0.19049663744512246, 0.1814598047900201, 0.1646172652465595, 0.20556757201279574, 0.5042743874024826, 0.411267989842626, 0.19684360932711653, 0.11531750148687425, 0.16021341135867806, 0.14493438586844953, 0.1745754976212125, 0.33611188476974674, 0.4211589020097807, 0.1194006369853372, 0.3967221557654128, 0.1258203726049576, 0.2082157286849048, 0.37996817044085895, 0.14735618457901734, 0.37334016124578806, 0.18855798561477521, 0.17819215530523602, 0.18102144674606369, 0.18006328611503908, 0.1751871047465382, 0.1695121635524649, 0.17572623603438298, 0.18661451851538668, 0.1726422937030646, 0.10003962000555078, 0.08934048049960508, 0.08494184340457855, 0.09136883648185012, 0.1079250621061425, 0.09305273674747472, 0.10552857969288398, 0.08403770481916595, 0.10542147720344541]}, "mutation_prompt": null}
{"id": "1ff90135-d677-4cce-a68d-9b8d979b7115", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, 0.5, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation and diversified sparks generation.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.3231827281506635, 0.3336187754683968, 0.3440882321875519, 0.3395999425656311, 0.3303400804768446, 0.31094307575705427, 0.31925194621605346, 0.32037181449896024, 0.33767338163648297, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028902347421719266, 9.999999999998899e-05, 0.08341701130544665, 0.08387507129051319, 0.09364875494146285, 0.1013924159882128, 0.10031518591730615, 0.125698141920227, 0.08541341667262536, 0.09256016066419104, 0.07244547046868033, 0.08472025846723696, 0.07536057620816394, 0.07295323254041286, 0.08522826553745233, 0.08460096007708617, 0.0778126711180146, 0.08267275421479348, 0.08552810155166868, 0.09230889188697178, 0.9468250117247129, 0.939572307771699, 0.9391165705255057, 0.9327650065100875, 0.9026327569083011, 0.9265096354541374, 0.8966455829633773, 0.9393376684518537, 0.9087362645668775, 0.22222615436927717, 0.2260788500607669, 0.22075597598563312, 0.19845143774984064, 0.20395635187665084, 0.2382150404936243, 0.2290584867282539, 0.20835795251377576, 0.24099866142198134, 0.26163706339183634, 0.24465125245134134, 0.25518782349685776, 0.27331614115678426, 0.2980210210967622, 0.28076976318808333, 0.2386345264778773, 0.26465372816406607, 0.2716350300849544, 0.11601009370206938, 0.1468018918186712, 0.11514444463139428, 0.1229977237566442, 0.10592881069214855, 0.12361433310351999, 0.1175409889962542, 0.12220162498033893, 0.13775512181805427, 0.135041175532152, 0.1186914235929094, 0.1221591762176738, 0.14047137965160095, 0.12765435317459994, 0.13471983348643812, 0.13756074255943362, 0.07396571179316891, 0.1209831983304015, 9.999999999998899e-05, 0.004150475309962487, 9.999999999998899e-05, 0.005241824321673971, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09968145338863066, 0.029418940061780474, 0.07530051091270673, 0.07364942608290626, 0.05035074216258617, 0.02322738167846161, 0.11451509995793552, 0.05610316129526871, 0.05334657030143153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06187747714790148, 0.056020730032811494, 0.050293783241940226, 0.08922695819244342, 0.05319225399924632, 0.05829802213627677, 0.05728680404797293, 0.047257804972281936, 0.06665628159615022, 0.32858277318787854, 0.3122606831708946, 0.33926407748197285, 0.3194110271671655, 0.34597588857219663, 0.3267296828805354, 0.3398392030594013, 0.3185920545567855, 0.3451648687682789, 0.10770875860061568, 0.09289077391399203, 0.09129607015054131, 0.08374781686337196, 0.10300143755392588, 0.09016497759495101, 0.09968927951407969, 0.09325250823994502, 0.0847398612141591, 0.1951130114797034, 0.19105574343684406, 0.17787505696837091, 0.16939816810502395, 0.1712060300961712, 0.1854853052960881, 0.18359221896734346, 0.16601167687192753, 0.1968863837414484, 0.24481320294567044, 0.24243501845994941, 0.22124645124231146, 0.23782337331714976, 0.17899474067083465, 0.25944270017971294, 0.2396049904799088, 0.18746157634960492, 0.2485518305877744, 0.18720819410554612, 0.19059809469387912, 0.17634103945973678, 0.19157773731979488, 0.16210953851837784, 0.18194517096232932, 0.17951877053811582, 0.15408270534266866, 0.18720839395487232, 0.21526311423046363, 0.16598352126443694, 0.20877478722117326, 0.2044397546125345, 0.1988869936904326, 0.19620589530123445, 0.2148732380473699, 0.18875921538182316, 0.269682801712567, 0.18664000293031902, 0.1827626213738821, 0.17429564090565086, 0.17979138265186645, 0.18848533091956887, 0.1826825684937704, 0.18671902344466562, 0.19049663744512246, 0.1814598047900201, 0.1646172652465595, 0.20556757201279574, 0.5042743874024826, 0.411267989842626, 0.19684360932711653, 0.11531750148687425, 0.16021341135867806, 0.14493438586844953, 0.1745754976212125, 0.33611188476974674, 0.4211589020097807, 0.1194006369853372, 0.3967221557654128, 0.1258203726049576, 0.2082157286849048, 0.37996817044085895, 0.14735618457901734, 0.37334016124578806, 0.18855798561477521, 0.17819215530523602, 0.18102144674606369, 0.18006328611503908, 0.1751871047465382, 0.1695121635524649, 0.17572623603438298, 0.18661451851538668, 0.1726422937030646, 0.10003962000555078, 0.08934048049960508, 0.08494184340457855, 0.09136883648185012, 0.1079250621061425, 0.09305273674747472, 0.10552857969288398, 0.08403770481916595, 0.10542147720344541]}, "mutation_prompt": null}
{"id": "c1e4e586-1e89-4ed2-8455-567d65ade1a2", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, 1, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, 0.5 + np.random.random()*0.5, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Improved Enhanced Firework Algorithm with enhanced sparks generation diversity for better exploration-exploitation balance.", "configspace": "", "generation": 20, "fitness": 0.1813769837618906, "feedback": "The algorithm EnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.32024870038157394, 0.3421438072378946, 0.3599792414781098, 0.3168519067023695, 0.31212270453300217, 0.3143621913926098, 0.29036044251036996, 0.3424172355759313, 0.3234257733414615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00034609627481263505, 9.999999999998899e-05, 9.999999999998899e-05, 0.09251441573029917, 0.09209210882427765, 0.10501269520639167, 0.08732122699403777, 0.07914394534124569, 0.10721170212444853, 0.09106632120469116, 0.09236983605457916, 0.09900233081581811, 0.08122854445466254, 0.07181989106274722, 0.06877730159901863, 0.08109053216462958, 0.08361570440919353, 0.07722132965316908, 0.07447139454550034, 0.07497004440484556, 0.07272351185523385, 0.9463586515676791, 0.9477401828878129, 0.9581337734967519, 0.9653311664019529, 0.9476250825334727, 0.9391925293009441, 0.9299943311327286, 0.9470062487908135, 0.9330022397878277, 0.23186682103965228, 0.18093766308806802, 0.18690598869396913, 0.20890983638493554, 0.22026230226704047, 0.197550887486871, 0.19567793647370157, 0.1823203522318958, 0.17414838401709842, 0.22434213548580306, 0.2061971389348649, 0.22340078695654053, 0.21758800454738025, 0.2403724993234756, 0.24850772544669786, 0.20081132511863997, 0.23429839402292751, 0.2621200255920051, 0.10090946852950944, 0.10486163000213988, 0.09574190096251423, 0.12904062330574506, 0.10299847894243064, 0.1026814167184219, 0.11039547041191511, 0.11057406498965561, 0.12085234145856716, 0.12297073505881728, 0.03601553533633106, 0.11119972510154053, 0.10922431389487686, 0.10212331780982953, 0.10067322986076765, 0.12707454175064636, 0.11018222998143445, 0.11907731562468094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002767545909588276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07107281391296272, 0.055600870306808936, 0.09141024207078086, 0.07147851702158858, 0.06404799926783977, 0.01765215281327437, 0.12448257705999588, 0.041810724433248625, 0.07396704769332008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04013180046896847, 0.05325683477105281, 0.03878802758177369, 0.05282064832074351, 0.060513198574546956, 0.04809840884858818, 0.047423261816401996, 0.029835430353585046, 0.06273696425481123, 0.3032298248660218, 0.3098587721722422, 0.30252112859733027, 0.30028816613493237, 0.31599997085834297, 0.31536268541440426, 0.3190597316615734, 0.29249548368871015, 0.2994191557150637, 0.08724492982054566, 0.0901246925016459, 0.09200905279335259, 0.09987924682698157, 0.09516622399960184, 0.09005760627971393, 0.10689773857695906, 0.11504596854677052, 0.08648137146197565, 0.1773197622651329, 0.14476205735186265, 0.18719829747331962, 0.16716188240487773, 0.16580889877551874, 0.1616699481164322, 0.22161939987451962, 0.1483828635785649, 0.16036220791655464, 0.22703453728508471, 0.24274484753576742, 0.224010399780583, 0.23103867674962553, 0.23663798328403052, 0.23238600230491224, 0.2150524650231722, 0.24110369195620351, 0.2402300192560729, 0.17111178965204876, 0.17164823686413078, 0.17692292737590343, 0.2012325373321321, 0.16712602765284446, 0.1820940738080793, 0.17720607001025712, 0.15997739437014002, 0.18737921441632954, 0.21860769625441012, 0.22159220732872487, 0.215048928437375, 0.18601979023801007, 0.23101015914538126, 0.21739926097746531, 0.19934312757529682, 0.18754303511920745, 0.20448980022612184, 0.17906996032265565, 0.1725790968969133, 0.1743294212803448, 0.18870501750702273, 0.20465150864103776, 0.188249379539149, 0.19310886333380872, 0.17440834054929477, 0.18007625993973653, 0.19025127394657293, 0.1761735560871419, 0.4206724995990543, 0.3912504496122695, 0.1939771257167474, 0.4195736838747647, 0.15551664904293083, 0.14675869109576545, 0.1714451146614585, 0.3202038238253846, 0.36627608819803004, 0.46134524906009433, 0.34640227602258034, 0.12282466425969196, 0.20139795956860684, 0.1634361059118179, 0.15192091026727905, 0.2574706956257995, 0.1755552118731406, 0.16383337024204248, 0.1884972424989324, 0.1792756318610249, 0.17178768826480062, 0.18296142626031586, 0.19089162925300074, 0.17784891757416077, 0.18236139368896742, 0.0817509383894297, 0.07847428334925954, 0.07138428129031205, 0.08847858258154206, 0.09524610024204483, 0.10062202866465342, 0.09468058755126951, 0.0746887022945002, 0.07409309056658653]}, "mutation_prompt": null}
{"id": "ae51313f-f274-45e1-969a-c6546cdc003b", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.1, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation, diversified sparks generation, and adaptive mutation strategy.", "configspace": "", "generation": 21, "fitness": 0.21206602951573375, "feedback": "The algorithm EnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "d7552796-17df-4c6f-b669-6b66f675b2c1", "metadata": {"aucs": [0.4987843642327161, 0.46868714692827684, 0.4726628233522556, 0.47733622775320783, 0.4892715624699103, 0.4866371189810309, 0.48594720364237043, 0.4981129758886337, 0.5093482291931879, 0.0492038669236976, 0.056697743164431436, 0.04748254032526589, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08219143029462195, 0.09097250675557012, 0.06520129824585141, 0.1065332030435604, 0.07478112170002027, 0.1212720031865796, 0.04803384276088274, 0.10266162394176626, 0.06548728438750417, 0.1053169524107207, 0.05872574768935923, 0.0985047225285327, 0.10283171537425839, 0.020834583887907154, 0.0864656419094324, 0.10391418872792657, 0.07890451806837895, 0.07555105962646502, 0.9089423698729744, 0.8803320546442922, 0.9259818527347616, 0.8841583973665011, 0.8703584000919814, 0.8815759183574311, 0.8825153513100719, 0.8978968098441258, 0.8431171986895786, 0.33780882987894634, 0.31997490624419533, 0.32906236598149363, 0.3347790925808112, 0.3252763344035008, 0.3445363942476217, 0.33324276982875467, 0.32175937982013725, 0.3500748084580232, 0.6678763467317845, 0.1754254411265872, 0.8789552276826691, 0.19176525559100577, 0.18854693216052132, 0.19883958149624714, 0.2138820041398648, 0.21856704879834354, 0.22371987495057954, 0.15218703177554238, 0.11453141507130637, 0.11899006417722413, 0.1938249933921865, 0.14812511512424842, 0.17234310208108805, 0.1832394728102772, 0.1241733716968616, 0.19146040878725423, 0.2767767584630044, 0.18472606390950186, 0.2431851876919191, 0.2628663050865119, 0.18353243261583507, 0.20416477577450254, 0.2006325759354871, 9.999999999998899e-05, 0.24543411708850538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034703987426199956, 0.006090405367353724, 0.0006164140490269032, 9.999999999998899e-05, 9.999999999998899e-05, 0.10314946642949308, 0.03165999130186625, 0.08084765861793697, 0.06790137795672346, 0.04315814652921668, 0.02052665281520971, 0.185690199768908, 0.028867442886318484, 0.0606215157287725, 9.999999999998899e-05, 0.0028424373568610717, 0.008878079484229251, 0.008986226794846841, 0.04866676099120815, 0.0006657585191144344, 0.0007253456641960199, 0.013384434907590781, 0.0220010731092396, 0.05529313204050834, 0.06502460744799432, 0.13525161702137733, 0.05049460996738031, 0.08736471336700724, 0.12684357634210175, 0.0686024541173963, 0.13537995155357185, 0.10382934242239172, 0.44037669140145663, 0.4405969361645672, 0.4891925269813774, 0.45344787901398664, 0.459483440075797, 0.4303537675724678, 0.44748330569872474, 0.45591032083176264, 0.45106026056948767, 0.06971796708336875, 0.11284147309782255, 0.09969459520923318, 0.0990459064147019, 0.09280139899364581, 0.09203009412623364, 0.07653372915777801, 0.11595484978061266, 0.0826052620072103, 0.3061423004453634, 0.31398836176004075, 0.3442707791766566, 0.3355353403932019, 0.19718043817635966, 0.19642718091924416, 0.3167528978136943, 0.16526270598818504, 0.19275256371369753, 0.1354203044954818, 0.3236043964787799, 0.16007036614644166, 0.3241002050853332, 0.17706924998429152, 0.31833227580080814, 0.1479551105465543, 0.21985814622368982, 0.17461852833863523, 0.10045891138289154, 0.2066846407709979, 0.11902471409269477, 0.1239321763847413, 0.16196462164068304, 0.25194518693631374, 0.10200524362310681, 0.19163743385107346, 0.11494630928904803, 0.22587074068510582, 0.1898937704216379, 0.2582414616326436, 0.203878773103094, 0.1807460847176099, 0.1985424439183726, 0.24338004593414175, 0.18636013819983832, 0.17078094833225788, 0.19342336616284928, 0.20274712514926785, 0.36090141194756586, 0.22297700282415645, 0.1967882506739137, 0.20011323037582907, 0.18375894422472228, 0.21487104807872148, 0.1650738408278668, 0.16415849421889905, 0.13324969302657552, 0.1349459090923456, 0.7376450320238788, 0.2006124107108913, 0.1640372045090669, 0.1569754030316386, 0.12488957900238407, 0.17665140718525763, 0.0828079295773223, 0.5121741105127724, 0.11824998587833002, 0.5825681631641326, 0.12593587898735692, 0.20961512119576764, 0.09332003863033789, 0.1521092765351324, 0.297789471404002, 0.1930322686814656, 0.18871379282967204, 0.18773814674413192, 0.174843635984414, 0.1882685784227761, 0.1996296824813122, 0.19402321618333263, 0.18768566734770453, 0.18801532088218242, 0.07149710610269955, 0.0809135289904287, 0.08274907969323375, 0.09324423406640092, 0.08508057911896794, 0.097763357476915, 0.09359776895323235, 0.07335190490659838, 0.07197321110666399]}, "mutation_prompt": null}
{"id": "aa787a0b-fcd2-4bd5-b8c9-613f8c90a10a", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.1, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation, diversified sparks generation, and adaptive mutation strategy.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae51313f-f274-45e1-969a-c6546cdc003b", "metadata": {"aucs": [0.4987843642327161, 0.46868714692827684, 0.4726628233522556, 0.47733622775320783, 0.4892715624699103, 0.4866371189810309, 0.48594720364237043, 0.4981129758886337, 0.5093482291931879, 0.0492038669236976, 0.056697743164431436, 0.04748254032526589, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08219143029462195, 0.09097250675557012, 0.06520129824585141, 0.1065332030435604, 0.07478112170002027, 0.1212720031865796, 0.04803384276088274, 0.10266162394176626, 0.06548728438750417, 0.1053169524107207, 0.05872574768935923, 0.0985047225285327, 0.10283171537425839, 0.020834583887907154, 0.0864656419094324, 0.10391418872792657, 0.07890451806837895, 0.07555105962646502, 0.9089423698729744, 0.8803320546442922, 0.9259818527347616, 0.8841583973665011, 0.8703584000919814, 0.8815759183574311, 0.8825153513100719, 0.8978968098441258, 0.8431171986895786, 0.33780882987894634, 0.31997490624419533, 0.32906236598149363, 0.3347790925808112, 0.3252763344035008, 0.3445363942476217, 0.33324276982875467, 0.32175937982013725, 0.3500748084580232, 0.6678763467317845, 0.1754254411265872, 0.8789552276826691, 0.19176525559100577, 0.18854693216052132, 0.19883958149624714, 0.2138820041398648, 0.21856704879834354, 0.22371987495057954, 0.15218703177554238, 0.11453141507130637, 0.11899006417722413, 0.1938249933921865, 0.14812511512424842, 0.17234310208108805, 0.1832394728102772, 0.1241733716968616, 0.19146040878725423, 0.2767767584630044, 0.18472606390950186, 0.2431851876919191, 0.2628663050865119, 0.18353243261583507, 0.20416477577450254, 0.2006325759354871, 9.999999999998899e-05, 0.24543411708850538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034703987426199956, 0.006090405367353724, 0.0006164140490269032, 9.999999999998899e-05, 9.999999999998899e-05, 0.10314946642949308, 0.03165999130186625, 0.08084765861793697, 0.06790137795672346, 0.04315814652921668, 0.02052665281520971, 0.185690199768908, 0.028867442886318484, 0.0606215157287725, 9.999999999998899e-05, 0.0028424373568610717, 0.008878079484229251, 0.008986226794846841, 0.04866676099120815, 0.0006657585191144344, 0.0007253456641960199, 0.013384434907590781, 0.0220010731092396, 0.05529313204050834, 0.06502460744799432, 0.13525161702137733, 0.05049460996738031, 0.08736471336700724, 0.12684357634210175, 0.0686024541173963, 0.13537995155357185, 0.10382934242239172, 0.44037669140145663, 0.4405969361645672, 0.4891925269813774, 0.45344787901398664, 0.459483440075797, 0.4303537675724678, 0.44748330569872474, 0.45591032083176264, 0.45106026056948767, 0.06971796708336875, 0.11284147309782255, 0.09969459520923318, 0.0990459064147019, 0.09280139899364581, 0.09203009412623364, 0.07653372915777801, 0.11595484978061266, 0.0826052620072103, 0.3061423004453634, 0.31398836176004075, 0.3442707791766566, 0.3355353403932019, 0.19718043817635966, 0.19642718091924416, 0.3167528978136943, 0.16526270598818504, 0.19275256371369753, 0.1354203044954818, 0.3236043964787799, 0.16007036614644166, 0.3241002050853332, 0.17706924998429152, 0.31833227580080814, 0.1479551105465543, 0.21985814622368982, 0.17461852833863523, 0.10045891138289154, 0.2066846407709979, 0.11902471409269477, 0.1239321763847413, 0.16196462164068304, 0.25194518693631374, 0.10200524362310681, 0.19163743385107346, 0.11494630928904803, 0.22587074068510582, 0.1898937704216379, 0.2582414616326436, 0.203878773103094, 0.1807460847176099, 0.1985424439183726, 0.24338004593414175, 0.18636013819983832, 0.17078094833225788, 0.19342336616284928, 0.20274712514926785, 0.36090141194756586, 0.22297700282415645, 0.1967882506739137, 0.20011323037582907, 0.18375894422472228, 0.21487104807872148, 0.1650738408278668, 0.16415849421889905, 0.13324969302657552, 0.1349459090923456, 0.7376450320238788, 0.2006124107108913, 0.1640372045090669, 0.1569754030316386, 0.12488957900238407, 0.17665140718525763, 0.0828079295773223, 0.5121741105127724, 0.11824998587833002, 0.5825681631641326, 0.12593587898735692, 0.20961512119576764, 0.09332003863033789, 0.1521092765351324, 0.297789471404002, 0.1930322686814656, 0.18871379282967204, 0.18773814674413192, 0.174843635984414, 0.1882685784227761, 0.1996296824813122, 0.19402321618333263, 0.18768566734770453, 0.18801532088218242, 0.07149710610269955, 0.0809135289904287, 0.08274907969323375, 0.09324423406640092, 0.08508057911896794, 0.097763357476915, 0.09359776895323235, 0.07335190490659838, 0.07197321110666399]}, "mutation_prompt": null}
{"id": "a8de8f31-0937-4e68-ab95-e92be6df5716", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.1, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with dynamic population size adaptation, diversified sparks generation, and adaptive mutation strategy.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ae51313f-f274-45e1-969a-c6546cdc003b", "metadata": {"aucs": [0.4987843642327161, 0.46868714692827684, 0.4726628233522556, 0.47733622775320783, 0.4892715624699103, 0.4866371189810309, 0.48594720364237043, 0.4981129758886337, 0.5093482291931879, 0.0492038669236976, 0.056697743164431436, 0.04748254032526589, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08219143029462195, 0.09097250675557012, 0.06520129824585141, 0.1065332030435604, 0.07478112170002027, 0.1212720031865796, 0.04803384276088274, 0.10266162394176626, 0.06548728438750417, 0.1053169524107207, 0.05872574768935923, 0.0985047225285327, 0.10283171537425839, 0.020834583887907154, 0.0864656419094324, 0.10391418872792657, 0.07890451806837895, 0.07555105962646502, 0.9089423698729744, 0.8803320546442922, 0.9259818527347616, 0.8841583973665011, 0.8703584000919814, 0.8815759183574311, 0.8825153513100719, 0.8978968098441258, 0.8431171986895786, 0.33780882987894634, 0.31997490624419533, 0.32906236598149363, 0.3347790925808112, 0.3252763344035008, 0.3445363942476217, 0.33324276982875467, 0.32175937982013725, 0.3500748084580232, 0.6678763467317845, 0.1754254411265872, 0.8789552276826691, 0.19176525559100577, 0.18854693216052132, 0.19883958149624714, 0.2138820041398648, 0.21856704879834354, 0.22371987495057954, 0.15218703177554238, 0.11453141507130637, 0.11899006417722413, 0.1938249933921865, 0.14812511512424842, 0.17234310208108805, 0.1832394728102772, 0.1241733716968616, 0.19146040878725423, 0.2767767584630044, 0.18472606390950186, 0.2431851876919191, 0.2628663050865119, 0.18353243261583507, 0.20416477577450254, 0.2006325759354871, 9.999999999998899e-05, 0.24543411708850538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034703987426199956, 0.006090405367353724, 0.0006164140490269032, 9.999999999998899e-05, 9.999999999998899e-05, 0.10314946642949308, 0.03165999130186625, 0.08084765861793697, 0.06790137795672346, 0.04315814652921668, 0.02052665281520971, 0.185690199768908, 0.028867442886318484, 0.0606215157287725, 9.999999999998899e-05, 0.0028424373568610717, 0.008878079484229251, 0.008986226794846841, 0.04866676099120815, 0.0006657585191144344, 0.0007253456641960199, 0.013384434907590781, 0.0220010731092396, 0.05529313204050834, 0.06502460744799432, 0.13525161702137733, 0.05049460996738031, 0.08736471336700724, 0.12684357634210175, 0.0686024541173963, 0.13537995155357185, 0.10382934242239172, 0.44037669140145663, 0.4405969361645672, 0.4891925269813774, 0.45344787901398664, 0.459483440075797, 0.4303537675724678, 0.44748330569872474, 0.45591032083176264, 0.45106026056948767, 0.06971796708336875, 0.11284147309782255, 0.09969459520923318, 0.0990459064147019, 0.09280139899364581, 0.09203009412623364, 0.07653372915777801, 0.11595484978061266, 0.0826052620072103, 0.3061423004453634, 0.31398836176004075, 0.3442707791766566, 0.3355353403932019, 0.19718043817635966, 0.19642718091924416, 0.3167528978136943, 0.16526270598818504, 0.19275256371369753, 0.1354203044954818, 0.3236043964787799, 0.16007036614644166, 0.3241002050853332, 0.17706924998429152, 0.31833227580080814, 0.1479551105465543, 0.21985814622368982, 0.17461852833863523, 0.10045891138289154, 0.2066846407709979, 0.11902471409269477, 0.1239321763847413, 0.16196462164068304, 0.25194518693631374, 0.10200524362310681, 0.19163743385107346, 0.11494630928904803, 0.22587074068510582, 0.1898937704216379, 0.2582414616326436, 0.203878773103094, 0.1807460847176099, 0.1985424439183726, 0.24338004593414175, 0.18636013819983832, 0.17078094833225788, 0.19342336616284928, 0.20274712514926785, 0.36090141194756586, 0.22297700282415645, 0.1967882506739137, 0.20011323037582907, 0.18375894422472228, 0.21487104807872148, 0.1650738408278668, 0.16415849421889905, 0.13324969302657552, 0.1349459090923456, 0.7376450320238788, 0.2006124107108913, 0.1640372045090669, 0.1569754030316386, 0.12488957900238407, 0.17665140718525763, 0.0828079295773223, 0.5121741105127724, 0.11824998587833002, 0.5825681631641326, 0.12593587898735692, 0.20961512119576764, 0.09332003863033789, 0.1521092765351324, 0.297789471404002, 0.1930322686814656, 0.18871379282967204, 0.18773814674413192, 0.174843635984414, 0.1882685784227761, 0.1996296824813122, 0.19402321618333263, 0.18768566734770453, 0.18801532088218242, 0.07149710610269955, 0.0809135289904287, 0.08274907969323375, 0.09324423406640092, 0.08508057911896794, 0.097763357476915, 0.09359776895323235, 0.07335190490659838, 0.07197321110666399]}, "mutation_prompt": null}
{"id": "f25bbb84-4cd1-44f2-9c59-e4980b275007", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with adaptive mutation strategy and improved sparks generation diversity.", "configspace": "", "generation": 24, "fitness": 0.21253879336938827, "feedback": "The algorithm EnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "ae51313f-f274-45e1-969a-c6546cdc003b", "metadata": {"aucs": [0.43934242058377215, 0.45931321725976015, 0.4561570273906488, 0.4266241908641647, 0.4230000171098547, 0.4447324822500621, 0.4398145379247079, 0.4480045199329338, 0.43377500027182136, 0.035522167931038906, 0.041491680481630655, 0.004650834480283583, 9.999999999998899e-05, 9.999999999998899e-05, 0.013381016932774714, 0.039092719764538764, 9.999999999998899e-05, 9.999999999998899e-05, 0.09671106822694486, 0.08029787068454475, 0.09392173175068597, 0.08561183023121177, 0.10476326935609992, 0.10953059699380974, 0.052612172524534206, 0.10439519601580138, 0.09585068865084034, 0.060002135769591236, 0.07147091382431758, 0.07105162640152396, 0.1218287514028511, 0.05994026276726594, 0.10707951537454752, 0.11810554801807815, 0.0531758457662157, 0.10119263398656564, 0.9222352828560765, 0.8880048929769668, 0.9253112830394707, 0.9049649170136914, 0.881700762706388, 0.8795597302272252, 0.8821587691794102, 0.9014499767897042, 0.8477358613466313, 0.3054242602976457, 0.3005262331338078, 0.30499522852540684, 0.29431197252429775, 0.30829105961328573, 0.30135630525958834, 0.2991931229594351, 0.2906762573783047, 0.29879991080922363, 0.39041838018059694, 0.20390764221029234, 0.3085826148899038, 0.6066946693014966, 0.19043570028818035, 0.22947503790151147, 0.22449444486997627, 0.5917851355403304, 0.49137539346207626, 0.13525810666582205, 0.15327713696132106, 0.19843915237614052, 0.17863111322882708, 0.18073066909254998, 0.257734521527899, 0.17474766616458237, 0.15670165873041497, 0.19366936215603459, 0.2164671812838609, 0.2080151082643058, 0.21551821402456872, 0.2068120195909272, 0.17851360594878807, 0.17537311681988033, 0.21739073461972258, 0.04726699452189009, 0.19650673600762703, 9.999999999998899e-05, 0.0178952514408518, 9.999999999998899e-05, 0.0007973602366054822, 0.016930186693122073, 0.07620330149433707, 0.0003979342218747295, 9.999999999998899e-05, 0.08626383309964492, 0.08991222077049643, 0.08951364058926725, 0.11053975532435978, 0.0788515599478311, 0.004862795579155366, 0.014933404043344645, 0.15652175338735397, 0.0328707918364729, 0.054389385785336475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012999162253362062, 0.07333219340972774, 0.08071071046465372, 0.0656595760198474, 0.11419112559806166, 0.0943740806979495, 0.09886813454303878, 0.11274594648951697, 0.10451009427466851, 0.10113966375337391, 0.42141124884210046, 0.41329439459745565, 0.42844073867528065, 0.41822551192735735, 0.4117695444925057, 0.3983223308425131, 0.43793058799596163, 0.4163682046947689, 0.4222267431660388, 0.08667933777635917, 0.07290196176081243, 0.11133127302710766, 0.1590602487566628, 0.08986035316488983, 0.14173576481094274, 0.11498081604761923, 0.060181996127552706, 0.0815317729132754, 0.2818547417651789, 0.28800432964200373, 0.2577124225962176, 0.2794317330920726, 0.1828381625649278, 0.23654019118360847, 0.30725446904250286, 0.20156785170740332, 0.18149570505694124, 0.16045260684488127, 0.15899117481307912, 0.16543516749991927, 0.2932236091967101, 0.17471249206840134, 0.30430936557501476, 0.21354537951989627, 0.20848705666147038, 0.26134595631671587, 0.09896556462576922, 0.21888176671391646, 0.20543870788097862, 0.23854145704702134, 0.1507292699068148, 0.23935595680524968, 0.10893999717890979, 0.18830988903584767, 0.08916875060058649, 0.22203427967420608, 0.1845770415801009, 0.2085040570134884, 0.21389188664806658, 0.14802784715428075, 0.19734927521127354, 0.21309586668280212, 0.18305976505985078, 0.19701582252852645, 0.2136483107716456, 0.20906108744680119, 0.20389990009516645, 0.20100755047092056, 0.18824238457278952, 0.2301855692403556, 0.19566416383227225, 0.19306478941838945, 0.20900785166565417, 0.16366205757574648, 0.13488542260093495, 0.6772174082042985, 0.17013267988779257, 0.20126707670850164, 0.15311324316476616, 0.1492362946292355, 0.11439967042867649, 0.177610986938044, 0.4326770363447193, 0.615252829631907, 0.12230557324083546, 0.6072067594602277, 0.12689269108573265, 0.21047945362379195, 0.16441861789338585, 0.15343491121814168, 0.44948550306532775, 0.180581365431712, 0.16830270195214725, 0.17942965012798817, 0.19926049033661386, 0.17917377202506835, 0.17985043782569976, 0.1877275429701999, 0.18559841831593304, 0.18450083715085253, 0.09637106942899554, 0.07235744971299551, 0.07605990348923097, 0.09019981483360895, 0.10609546413030801, 0.1069555686413225, 0.10036851313507267, 0.08403864134009709, 0.0781294074943859]}, "mutation_prompt": null}
{"id": "d39cc769-1633-47bb-bfe5-54602406d674", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim, n_fireworks=10):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = n_fireworks\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n        \n        return best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhanced Firework Algorithm with adaptive mutation strategy and improved sparks generation diversity.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f25bbb84-4cd1-44f2-9c59-e4980b275007", "metadata": {"aucs": [0.43934242058377215, 0.45931321725976015, 0.4561570273906488, 0.4266241908641647, 0.4230000171098547, 0.4447324822500621, 0.4398145379247079, 0.4480045199329338, 0.43377500027182136, 0.035522167931038906, 0.041491680481630655, 0.004650834480283583, 9.999999999998899e-05, 9.999999999998899e-05, 0.013381016932774714, 0.039092719764538764, 9.999999999998899e-05, 9.999999999998899e-05, 0.09671106822694486, 0.08029787068454475, 0.09392173175068597, 0.08561183023121177, 0.10476326935609992, 0.10953059699380974, 0.052612172524534206, 0.10439519601580138, 0.09585068865084034, 0.060002135769591236, 0.07147091382431758, 0.07105162640152396, 0.1218287514028511, 0.05994026276726594, 0.10707951537454752, 0.11810554801807815, 0.0531758457662157, 0.10119263398656564, 0.9222352828560765, 0.8880048929769668, 0.9253112830394707, 0.9049649170136914, 0.881700762706388, 0.8795597302272252, 0.8821587691794102, 0.9014499767897042, 0.8477358613466313, 0.3054242602976457, 0.3005262331338078, 0.30499522852540684, 0.29431197252429775, 0.30829105961328573, 0.30135630525958834, 0.2991931229594351, 0.2906762573783047, 0.29879991080922363, 0.39041838018059694, 0.20390764221029234, 0.3085826148899038, 0.6066946693014966, 0.19043570028818035, 0.22947503790151147, 0.22449444486997627, 0.5917851355403304, 0.49137539346207626, 0.13525810666582205, 0.15327713696132106, 0.19843915237614052, 0.17863111322882708, 0.18073066909254998, 0.257734521527899, 0.17474766616458237, 0.15670165873041497, 0.19366936215603459, 0.2164671812838609, 0.2080151082643058, 0.21551821402456872, 0.2068120195909272, 0.17851360594878807, 0.17537311681988033, 0.21739073461972258, 0.04726699452189009, 0.19650673600762703, 9.999999999998899e-05, 0.0178952514408518, 9.999999999998899e-05, 0.0007973602366054822, 0.016930186693122073, 0.07620330149433707, 0.0003979342218747295, 9.999999999998899e-05, 0.08626383309964492, 0.08991222077049643, 0.08951364058926725, 0.11053975532435978, 0.0788515599478311, 0.004862795579155366, 0.014933404043344645, 0.15652175338735397, 0.0328707918364729, 0.054389385785336475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012999162253362062, 0.07333219340972774, 0.08071071046465372, 0.0656595760198474, 0.11419112559806166, 0.0943740806979495, 0.09886813454303878, 0.11274594648951697, 0.10451009427466851, 0.10113966375337391, 0.42141124884210046, 0.41329439459745565, 0.42844073867528065, 0.41822551192735735, 0.4117695444925057, 0.3983223308425131, 0.43793058799596163, 0.4163682046947689, 0.4222267431660388, 0.08667933777635917, 0.07290196176081243, 0.11133127302710766, 0.1590602487566628, 0.08986035316488983, 0.14173576481094274, 0.11498081604761923, 0.060181996127552706, 0.0815317729132754, 0.2818547417651789, 0.28800432964200373, 0.2577124225962176, 0.2794317330920726, 0.1828381625649278, 0.23654019118360847, 0.30725446904250286, 0.20156785170740332, 0.18149570505694124, 0.16045260684488127, 0.15899117481307912, 0.16543516749991927, 0.2932236091967101, 0.17471249206840134, 0.30430936557501476, 0.21354537951989627, 0.20848705666147038, 0.26134595631671587, 0.09896556462576922, 0.21888176671391646, 0.20543870788097862, 0.23854145704702134, 0.1507292699068148, 0.23935595680524968, 0.10893999717890979, 0.18830988903584767, 0.08916875060058649, 0.22203427967420608, 0.1845770415801009, 0.2085040570134884, 0.21389188664806658, 0.14802784715428075, 0.19734927521127354, 0.21309586668280212, 0.18305976505985078, 0.19701582252852645, 0.2136483107716456, 0.20906108744680119, 0.20389990009516645, 0.20100755047092056, 0.18824238457278952, 0.2301855692403556, 0.19566416383227225, 0.19306478941838945, 0.20900785166565417, 0.16366205757574648, 0.13488542260093495, 0.6772174082042985, 0.17013267988779257, 0.20126707670850164, 0.15311324316476616, 0.1492362946292355, 0.11439967042867649, 0.177610986938044, 0.4326770363447193, 0.615252829631907, 0.12230557324083546, 0.6072067594602277, 0.12689269108573265, 0.21047945362379195, 0.16441861789338585, 0.15343491121814168, 0.44948550306532775, 0.180581365431712, 0.16830270195214725, 0.17942965012798817, 0.19926049033661386, 0.17917377202506835, 0.17985043782569976, 0.1877275429701999, 0.18559841831593304, 0.18450083715085253, 0.09637106942899554, 0.07235744971299551, 0.07605990348923097, 0.09019981483360895, 0.10609546413030801, 0.1069555686413225, 0.10036851313507267, 0.08403864134009709, 0.0781294074943859]}, "mutation_prompt": null}
{"id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 26, "fitness": 0.21277028081004729, "feedback": "The algorithm AdaptiveFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "f25bbb84-4cd1-44f2-9c59-e4980b275007", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "674c4277-6d3b-4454-80e4-fda6094d908a", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "214f3028-9f1c-4778-b46b-c99785ac4210", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "213099c9-1b8d-4591-908c-b32c22edc026", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "82b666a0-435c-410f-b7c3-57d95510803b", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "02788b81-b995-42fb-b9d7-052a01dde2b0", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "31b03a46-20a2-434f-b693-e55c2c38048a", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "753aedff-529e-49e1-81ec-342479218a54", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "b33c1ec0-00bf-4c4b-bbf1-da475ee64fb9", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "58bc549b-ff32-4a50-b87b-5805aecf9459", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "4ecd13e7-a9d5-48d7-b0da-dbfbfb324f7b", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "2d659ece-88f5-4aa6-81c5-5bb7d5110ba6", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "fe95ab18-3f53-481f-807d-1994beb36579", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "656ecdf8-d39e-40de-b630-edc7c2d6b93f", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "1d7deeb4-7296-4843-9ff6-0761bde3e13c", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "f16b16c1-cf23-41bb-b884-38c93cc29eaa", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.standard_cauchy(self.dim) for firework in fireworks]  # Cauchy mutation for increased exploration\n            new_sparks = [firework + np.random.standard_cauchy(self.dim) * 0.2 for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity with Cauchy mutation\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Enhancing exploration by incorporating a mutation scheme based on Cauchy distribution for increased diversity.", "configspace": "", "generation": 41, "fitness": 0.19932617202970876, "feedback": "The algorithm AdaptiveFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.36969927649183154, 0.37075418763548795, 0.4042229582665603, 0.4004925073076976, 0.3696125755808225, 0.3841170647803531, 0.3855826997951608, 0.393661432915382, 0.358645585782863, 0.05782343074641616, 0.0024093564456685312, 0.024447462643603424, 0.07122305263332296, 0.012293611929515613, 9.999999999998899e-05, 0.02665883085076437, 0.005597159011644592, 0.005599892123878125, 0.09166329644229987, 0.10733651784128584, 0.09849616819074491, 0.09981113672080377, 0.1029863816633404, 0.09877298897270448, 0.12175959912352696, 0.10557412027292779, 0.09779477130027403, 0.10034269818315023, 0.11594377518594023, 0.0829991085779116, 0.0865945592142382, 0.0907032353220869, 0.09365857130057809, 0.11268455690090828, 0.08596596195786155, 0.07665310055159902, 0.9718363139888171, 0.9638972714872099, 0.9572979497127755, 0.9684343509989785, 0.9634254804122251, 0.972527192604613, 0.9705425283308964, 0.9699952133950093, 0.9644588958967819, 0.22225051528947803, 0.24121258302064907, 0.23900924488462638, 0.22975990312401495, 0.2360480527703347, 0.2386907623630613, 0.23062577901283043, 0.2163387650357268, 0.22672588306828068, 0.3132234794002313, 0.20301507678302322, 0.28183710018169605, 0.2756453806419831, 0.2780698660301587, 0.2581168687182278, 0.2149202357372253, 0.26131573960854815, 0.23701560270961652, 0.15489716003239862, 0.08976944258791952, 0.07755445661237659, 0.13313811234716655, 0.12595791815831658, 0.14661607349131534, 0.15398578017916498, 0.13488221466973704, 0.13611096024575398, 0.14516393308186237, 0.07016048348714943, 0.15034611268313425, 0.14031930573698703, 0.13562096771658538, 0.1444997434491292, 0.13882718977990205, 0.13694749695282493, 0.1394277648399742, 0.03993739885022607, 0.00207235576820497, 0.02650534065754795, 0.014689068960926255, 0.008021458819443827, 0.03682406824893403, 0.0005188296695383121, 9.999999999998899e-05, 0.022142282118832957, 0.08966791008876551, 0.0670755954263399, 0.07258710206241159, 0.08168143728058419, 0.026564963962018573, 0.07439152594655318, 0.09556980998230924, 0.08596952848326422, 0.03369200794499938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07154538139655564, 0.0731045999713944, 0.07137055005907444, 0.07423663741585773, 0.06920709637531475, 0.07288490439060369, 0.08166651893004806, 0.08015488488750067, 0.057728667230830255, 0.35216565370589603, 0.4501441034175354, 0.3764453212131186, 0.3442780813626779, 0.3608055133329261, 0.3522807286674582, 0.354692511901501, 0.34755104216221366, 0.3651486649302098, 0.09016301094349399, 0.10077593081701908, 0.11760893045439369, 0.10569663562009413, 0.09234969978892837, 0.08770259761999766, 0.08564742229433908, 0.10096608960745779, 0.09155232890518605, 0.2573950990899885, 0.18957574737423644, 0.20867756409562888, 0.19147672066652877, 0.20846784441124233, 0.18465061233571245, 0.20722612774059856, 0.20318704264357024, 0.21718099269023317, 0.2576880670913403, 0.25096727414464826, 0.2516499638637568, 0.2685248716059573, 0.20627344063081632, 0.2551518569411161, 0.25769142731830175, 0.25173292766392286, 0.2659398218756348, 0.21314529463846277, 0.20222541843616515, 0.1903590673029888, 0.2003024536501966, 0.17950451183970784, 0.188172536102853, 0.17063350595505689, 0.18356828311589513, 0.16520422229004939, 0.19665394972449002, 0.213528861312813, 0.2257943901384457, 0.2236044121218791, 0.19060126481985118, 0.1912271585513935, 0.20601579429195838, 0.21418142154262787, 0.20538214588886217, 0.2393777946500666, 0.21493052496016452, 0.1967417501857539, 0.18355724206456403, 0.20133274994716577, 0.20450196748216587, 0.186904848195938, 0.2305010403179255, 0.18374961818875568, 0.1993075760923937, 0.16956620453366034, 0.18462570576244186, 0.1850420468184789, 0.19826875435494573, 0.18301416621468647, 0.13025661006540157, 0.11471670945550905, 0.17494135549065337, 0.4835031523806276, 0.37796716387205553, 0.5976902326677461, 0.12528198868459473, 0.45454926092579373, 0.2027307280044205, 0.3449888245196563, 0.09306493188604203, 0.3795987313389122, 0.16584863782696724, 0.19202707011347764, 0.20565222194312405, 0.18051497140558004, 0.18335193486641888, 0.18477194160168164, 0.18008028473259274, 0.20813526790673453, 0.16879933385947266, 0.09014579446599547, 0.07255399474970758, 0.0769623119128039, 0.08512355831739571, 0.07626120162358474, 0.09941402532755206, 0.0821237586833442, 0.08368609568186525, 0.10480000483694663]}, "mutation_prompt": null}
{"id": "d7c2514c-41dc-4b43-b88a-cdea77899331", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "f9ff9596-dada-4c5f-9e0a-8fb29a9bd080", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "27884eea-bc1f-4f3b-affc-3b86aaa6d47f", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "454c6180-3fb6-41ca-9eff-9b29370fc45b", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "e7b59e62-14f1-4d33-a670-b03e510360e4", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "cf55d4f1-ee72-4631-9a6f-c0eeb4dacdcc", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "53ec64c5-604f-46cc-a9d1-4a01cf3d439a", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "20ee1daa-95d8-4210-bcfe-164b6353db96", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "322f7dc7-a4c1-470e-b048-50a8d3e16cf1", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "ba2dadd1-8ba1-4266-ba53-02be33aaf7ec", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "c92b2ba0-1dcb-4bab-8d3a-47e528ab7af0", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "82c3f343-eb85-4b48-b974-3b5cc6410a93", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "4a2a434d-5410-4e72-9c85-12d8062ce815", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "87db6841-fdf9-4038-a06b-718cf454c4dd", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "28158108-4dfd-487e-baee-622df6f3925a", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "f9ccf86d-ba0b-4e6b-9e60-ba7198efe45f", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "480a8494-c493-49f2-91db-c2868336db3c", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "952af107-6d6d-4a28-b4bc-7c50e15e4b9a", "solution": "def dynamic_scaling(func_values):\n    min_val, max_val = min(func_values), max(func_values)\n    return 1.0 / (max_val - min_val + 1e-6)\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            mutation_scale = dynamic_scaling([func(firework) for firework in fireworks])\n            new_fireworks = [firework + np.random.normal(0, mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            \n            # Dynamic mutation scale adjustment based on fitness landscape\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Enhancing the mutation strategy by incorporating a dynamic scaling factor based on the fitness landscape.", "configspace": "", "generation": 59, "fitness": 0.1452729853049713, "feedback": "The algorithm AdaptiveFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.2744909986338525, 0.27897281792092654, 0.317772054852242, 0.23979820950211606, 0.29708035925034204, 0.2845897830701737, 0.2489423456715676, 0.2730254200456267, 0.29794528847204915, 0.01064510490808157, 0.03400436403474849, 9.999999999998899e-05, 0.0007925132145976121, 9.999999999998899e-05, 9.999999999998899e-05, 0.006794443477932899, 9.999999999998899e-05, 9.999999999998899e-05, 0.06491942377982429, 0.05844677531840847, 0.04021051210498339, 0.05442873799884507, 0.035655631935269216, 0.05525170636349863, 0.06113727430266658, 0.01943193201389315, 0.01858082093551694, 0.0485432261844333, 0.01420959011885714, 0.031650500771237655, 0.09030939667628735, 0.031204581835303502, 0.02851712699713549, 0.07070751277924225, 0.028184667597082047, 0.01334068219103357, 0.8493119202070862, 0.8671075888812516, 0.9175422792284484, 0.8827053984791907, 0.8485981880709839, 0.8417275371954884, 0.8055683738282353, 0.8968948338967208, 0.7765659589034573, 9.999999999998899e-05, 0.1899100436480532, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003181299339622967, 0.23191012307049963, 0.09305341083364982, 0.011293496906888523, 0.17756702034392602, 0.2203251659603015, 0.03775594762470191, 0.05982414446230411, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.026279303607937843, 9.999999999998899e-05, 0.03182076477044815, 0.09932380424376919, 0.09101412696402988, 0.10770922042604958, 0.04539325895811075, 0.046592382322447, 9.999999999998899e-05, 0.12293183469843683, 0.08303716759870772, 0.13681511940845525, 0.15864857122988596, 0.007623429059932629, 0.11811095954069861, 0.13129214332976813, 0.10189860825743258, 0.14905941934821754, 0.1703266836473324, 0.010939791957939038, 0.1477786751527207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007143143728751911, 9.999999999998899e-05, 0.00010051445597525355, 9.999999999998899e-05, 9.999999999998899e-05, 0.07888392860457738, 0.026959265023259293, 0.06947637315300104, 0.07895211801896784, 0.0017979961625834706, 9.999999999998899e-05, 0.15502294523389826, 0.02905291300504398, 0.03132148822732439, 0.006700942211963268, 0.0453212448386735, 9.999999999998899e-05, 0.026175990910722424, 0.08157781042416701, 9.999999999998899e-05, 0.004528349149345523, 0.03653638218248212, 9.999999999998899e-05, 0.07740708752761893, 0.05469176442347001, 0.051441325984418085, 0.058389001216570646, 0.028876949436089316, 0.05973781844350601, 0.026502376606214795, 0.049791345876978976, 0.02699494462757468, 0.2671939898544239, 0.23984071682628516, 0.328838982755673, 0.269363342215321, 0.26719310791573314, 0.30193291999959926, 0.3105655617311972, 0.24779981747227464, 0.2984815404233442, 0.03039772658571105, 0.06241023478198293, 0.06575570227694738, 0.10286842171655464, 0.03641639421666665, 0.08733307490920139, 0.04891943868884008, 0.050265105036501834, 0.07966461338245645, 0.23791810437298555, 0.20213758224244704, 0.2224365084630745, 0.19870494995910026, 0.16825285283632274, 0.20507308944392744, 0.21591228250501648, 0.15966442292118244, 0.15829550584940988, 0.2306367471246279, 0.2549856305913194, 0.2130246305814152, 0.2355955448115682, 0.16926579662536145, 0.20908297549798815, 0.23099049888524326, 0.17024875044265886, 0.19820886058298293, 0.09889275042987122, 0.19441875087294025, 0.08571287559131102, 0.19600090625470024, 0.1336993814375368, 0.09525205836711326, 0.16559112070522874, 0.15199062951782927, 0.07430182040042255, 0.20104367657434752, 0.167114675489064, 0.18329543125469394, 0.19882060981219052, 0.14310853323096384, 0.1964539676223397, 0.19489926373961164, 0.1577845642988186, 0.1887821335849823, 0.17314891918067588, 0.1693697484325326, 0.18672857944921817, 0.09878043492476796, 0.12979004094258695, 0.18106845520372084, 0.15674006502174487, 0.15478379612263848, 0.10446332288683757, 0.14840666832301852, 0.16222893683404838, 0.13075719382483075, 0.2943497215443961, 0.1718493242878596, 0.15530131147989323, 0.144077910402292, 0.13456474337436974, 0.14766450028611466, 0.24819091575714014, 0.1095732924925158, 0.29937633133134334, 0.3150133148113289, 0.14344848954712164, 0.20353664256829396, 0.15249580127031181, 0.12718703422063904, 0.27130304946604267, 0.18978283611969438, 0.1850104879456791, 0.17866197373654902, 0.19338528920040343, 0.18146374797798814, 0.1799860419809225, 0.1746559435630013, 0.17579816323791297, 0.18484607391125463, 0.04489295243910618, 0.05780368451625906, 0.06310346049069615, 0.043148530399142015, 0.06447077028221959, 0.045806319946665286, 0.05906509124586534, 0.05582541292466736, 0.03981606179071573]}, "mutation_prompt": null}
{"id": "cc78c292-e044-44ab-b5d4-92bf5b0a3c03", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "c6682fa5-9330-44c6-be4d-4b68e56e8e07", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "b200cbbd-b90c-4640-ba0b-fc3f81fa3671", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "2ef711da-854b-49f6-935c-6d1b052ea060", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "38b3bd7e-1eaa-4565-bca3-568d8f4a3152", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "961e8839-0437-4390-9c46-d6d210266b13", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "6db1c5ae-9ab1-4609-b828-99d8410cfe19", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "995ebcb5-6fe2-42a3-9ea9-d85a5cafbbbd", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "6200949d-356f-45c6-8b4d-c26cf9692d21", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "6d06d30c-ddb9-4c94-98b6-023601cfcd38", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "26421f60-c75a-4aa9-a566-f2506a17073a", "solution": "import numpy as np\n\nclass EnhancedFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        global_best_firework = best_firework\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            if func(best_firework) < func(global_best_firework):\n                global_best_firework = best_firework\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return global_best_firework", "name": "EnhancedFireworkAlgorithm", "description": "Enhancing the diversity of solutions by introducing a multi-swarm strategy with global best and local best fireworks.", "configspace": "", "generation": 70, "fitness": 0.2110947221380821, "feedback": "The algorithm EnhancedFireworkAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4588672719133554, 0.4667121301456906, 0.4164299045875286, 0.4286748043029336, 0.4762677901068023, 0.4115965073338762, 0.45916781835100784, 0.4775873178517378, 0.4431921267016429, 0.09979696317089615, 0.0033331584537168446, 0.002295789994923303, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03872733292878838, 9.999999999998899e-05, 9.999999999998899e-05, 0.10475842007295744, 0.06965578342364565, 0.10259716408673192, 0.10810985720110144, 0.13855240111163725, 0.12224702133823862, 0.08954420861792001, 0.05977363212001241, 0.1276491275186865, 0.10453769534995794, 0.05767936036859045, 0.07376918270497357, 0.09794823518639573, 0.04694345068147232, 0.07353887341227405, 0.13084397158966, 0.09405677574069982, 0.0829012967775945, 0.8945996378990186, 0.8952547800133659, 0.9262400448553916, 0.8798337300535944, 0.9176305164042274, 0.8795624261276929, 0.905087604238126, 0.9272981030006815, 0.871789826098333, 0.30274965709576396, 0.31497958970378004, 0.295417635984385, 0.30415683265575577, 0.32600970144210195, 0.2809457063848675, 0.3214847515377832, 0.3200871645780651, 0.2841973065633071, 0.4800830930674268, 0.13057096371242516, 0.4227554804045289, 0.5210065213240667, 0.20328356928969338, 0.2453078675189978, 0.15915823340253032, 0.19139762890491208, 0.6484729899745973, 0.1414433580257657, 0.15484997139341705, 0.17415358679533788, 0.16766773595942663, 0.12277146327728605, 0.1694556079361329, 0.18337837122009726, 0.16837039590213276, 0.1803486259650514, 0.21759572346734168, 0.17173265216710154, 0.1438794345149632, 0.1773134820430452, 0.19176040517085235, 0.15965595644020925, 0.208778180248386, 0.08936951073712007, 0.2078142470766453, 9.999999999998899e-05, 0.012472670647233453, 0.05406596262017227, 9.999999999998899e-05, 0.010882735574237246, 0.039277336199603496, 0.019612735270443937, 9.999999999998899e-05, 9.999999999998899e-05, 0.09880435608084337, 0.04219832140249258, 0.07888810723826412, 0.07469880151413288, 0.026961345748416687, 0.018253762864012257, 0.18659132367250608, 0.03769629541023389, 0.04791529586508181, 0.00015715947540506647, 0.004124112293597881, 9.999999999998899e-05, 0.0020985354048185245, 0.006565981821016975, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013479482437654955, 9.999999999998899e-05, 0.07995042325334889, 0.0926907736815763, 0.08489301490876333, 0.11777336709458597, 0.08463948938316967, 0.11732203589010437, 0.09802703570811477, 0.07565452476886936, 0.08587675133974881, 0.40894403916850774, 0.4454301485621103, 0.40436288164338363, 0.4053203539317357, 0.4190926746420591, 0.3909410131801877, 0.4234966767778945, 0.4129481086780652, 0.3914756609393949, 0.0680460929949257, 0.0755879855667918, 0.07437794897133376, 0.098774621528944, 0.11140904394583762, 0.08865745778498746, 0.0784204266724493, 0.10049939882248127, 0.0906981184114024, 0.2871216930799596, 0.28701095176426594, 0.23829569976793974, 0.321665200422213, 0.18340777533030272, 0.1852422825619059, 0.3111960906254251, 0.2133177690147381, 0.1820630332679195, 0.1468397279562461, 0.3011207438449016, 0.14045202525444256, 0.3049322113849622, 0.20922492168278184, 0.2967535710160626, 0.30504352502284404, 0.21252681577552002, 0.28630989274860075, 0.10125981541874085, 0.21856938984981733, 0.0956246425247047, 0.20465079600041847, 0.18178413634836588, 0.22901917829948204, 0.2543126630395799, 0.18675675640178113, 0.17627348729541226, 0.23633512477363205, 0.19738408516572514, 0.22541786376067263, 0.20671015652738978, 0.20820730703485069, 0.20608740369519496, 0.2123010755444995, 0.19889412225711023, 0.20543701447343687, 0.2288416623769215, 0.19755298025396084, 0.18297322063700772, 0.17745701233863254, 0.20852390983594737, 0.1804862390227896, 0.18674312683101568, 0.2148543272949217, 0.17048601881061243, 0.18428192425151213, 0.1972459066071518, 0.7432275429138369, 0.16981752496452518, 0.20110881504278366, 0.11595209936351403, 0.14959370330334731, 0.11452110952181627, 0.17746897795895078, 0.5106890073648457, 0.5338383058140712, 0.12401126878594537, 0.4979993839547263, 0.12665614112362455, 0.20739700137403194, 0.09339692562074431, 0.09313125227862185, 0.2961805892040984, 0.20467342102244956, 0.19717527336956997, 0.17261867714283197, 0.1936214015277513, 0.18769329695982817, 0.18841864842741718, 0.17475290262777654, 0.17897453450839873, 0.23818940188432491, 0.09482156783997231, 0.08586757634268416, 0.07649056606823923, 0.0711536580420219, 0.10110641672108234, 0.1103613058832299, 0.1135075859425706, 0.05695329339365762, 0.07141722902189629]}, "mutation_prompt": null}
{"id": "8af47b6b-350c-4105-88e8-6838fd3189e2", "solution": "import numpy as np\n\nclass AdaptiveFireworkAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n        \n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]  # Increased sparks diversity\n            fireworks += new_fireworks + new_sparks\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)  # Adaptive mutation strategy\n            \n            # Dynamic population size strategy to adaptively adjust the number of fireworks\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "AdaptiveFireworkAlgorithm", "description": "Introducing a dynamic population size strategy to adaptively adjust the number of fireworks based on performance.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.4629811835353972, 0.47347491830381927, 0.4184660071722405, 0.43284213561301876, 0.4822205918379395, 0.41333547568785234, 0.4624968671297992, 0.48435830310867045, 0.4441361326647395, 0.10124732910859935, 0.004216156134833393, 0.0024345476875667904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039997408606950335, 9.999999999998899e-05, 9.999999999998899e-05, 0.10547462745382241, 0.06981226207416169, 0.10296965747864473, 0.10849868299762988, 0.1395856528279884, 0.12265341313302724, 0.0899936803363316, 0.05996019411808151, 0.12847072068312626, 0.10501128906722734, 0.0580123929566857, 0.07435310332580103, 0.09826776046898289, 0.04734747628393288, 0.07376789658745242, 0.13201985771342262, 0.09510017041314, 0.08367137118625656, 0.8973900436187089, 0.898185402254887, 0.9281594015804564, 0.8830169398885862, 0.9198981548257412, 0.8827607188612634, 0.9075891365232479, 0.9292787674546177, 0.8751854995794587, 0.30879365578118145, 0.32115795017026616, 0.29722336581390507, 0.3076583706818756, 0.330595846554922, 0.2825865942391873, 0.3240390752991933, 0.3244384081729369, 0.2862784631259526, 0.49842937172287316, 0.1309065139569311, 0.4348118537552742, 0.5370542790518333, 0.20367471309147156, 0.24861615043314955, 0.1597672398159533, 0.19322459622895727, 0.6563420749283231, 0.1420920964841358, 0.15796862683613722, 0.175070930678637, 0.1704990481592944, 0.12329773215018958, 0.17059593931534522, 0.18602389954747522, 0.17150506168888768, 0.18106753329318426, 0.22012514203645672, 0.17534487925442155, 0.14502812671166898, 0.17917948530625671, 0.19438441698535247, 0.16092880302074986, 0.21062296469289365, 0.09555198790078834, 0.20873337116979807, 9.999999999998899e-05, 0.013265990617433276, 0.05483678935413716, 9.999999999998899e-05, 0.011233676211026444, 0.040825634318639614, 0.020415275881804473, 9.999999999998899e-05, 9.999999999998899e-05, 0.09955799429866108, 0.042463939051773925, 0.07912544217840789, 0.07498431384763626, 0.027268743521759453, 0.018450028738317248, 0.18761139558950712, 0.038122841617018954, 0.048254196196217514, 0.000592019798094201, 0.006375351146994945, 9.999999999998899e-05, 0.0032089428195627434, 0.008013729129367153, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020120235302936162, 9.999999999998899e-05, 0.08107286315739859, 0.09437866554574825, 0.08560839982131785, 0.1199151685262676, 0.0868977157203602, 0.1183210316224158, 0.09984897499318779, 0.07667802250732891, 0.0869613428074153, 0.41090599752869894, 0.45005891505913875, 0.40582919094071523, 0.4077451701100917, 0.4225189081943619, 0.3925577540053412, 0.42629719661357934, 0.41722518566347366, 0.39278243769192445, 0.06822665327663602, 0.07603260894920272, 0.07455184314382746, 0.09924298552932775, 0.11202287288937407, 0.08877234703183234, 0.07908496268510667, 0.10100196074510126, 0.09093284560957149, 0.2884804499143535, 0.2913341540988642, 0.24057061552860293, 0.3251470163534229, 0.1843901922693728, 0.18577027135596647, 0.3148822999871762, 0.21451671116887117, 0.182580092000598, 0.1470969515242465, 0.3038084632607775, 0.14058210702234064, 0.3065346913563908, 0.20985518331133912, 0.2976198433117626, 0.3071893358061014, 0.2133307225100286, 0.2873191385283689, 0.10158609745242375, 0.22024261315870297, 0.09575658832176903, 0.2056313050372105, 0.1827208511347097, 0.22986932528820736, 0.2566383187226061, 0.18785453149222697, 0.17706851066582552, 0.2375416993463636, 0.19801427309069564, 0.22583572168011412, 0.2076174013224389, 0.21020096368801378, 0.20691329246296208, 0.21253697697329121, 0.19923771503170873, 0.20585020457206316, 0.22975086752652396, 0.19806416394615922, 0.18317757169843552, 0.1777349071263319, 0.20927054264919254, 0.18074532391037423, 0.18702830909934132, 0.21538046335332683, 0.17070358149247045, 0.18443538045420815, 0.19740115588157792, 0.7467536973346817, 0.16993272385393488, 0.2011584353787622, 0.11599297187385982, 0.14974765844850457, 0.11454381252326784, 0.17753893451023983, 0.5217120825316632, 0.5452611567520687, 0.12415043330004605, 0.5097773914214283, 0.12673031240490562, 0.20761010173049654, 0.09344478297993697, 0.09318819594125793, 0.3001193232913011, 0.20497356400866262, 0.1978762375790586, 0.17278311877810226, 0.19428149153007912, 0.1880397292994217, 0.1885703725284068, 0.17606487530486215, 0.181210490187797, 0.23883377555120355, 0.09581493578624523, 0.08653346429774955, 0.0767690067395641, 0.07196264584238488, 0.10157078606849923, 0.11082068490569219, 0.11413859730053932, 0.057353530241801454, 0.07165419230055359]}, "mutation_prompt": null}
{"id": "e8abd7eb-960c-4472-b1b9-2303793fcea0", "solution": "import numpy as np\n\nclass HybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "HybridFireworkPSOAlgorithm", "description": "Implementing a hybrid approach by combining Adaptive Firework Algorithm with Particle Swarm Optimization to enhance exploration-exploitation balance.", "configspace": "", "generation": 72, "fitness": 0.2340469774346268, "feedback": "The algorithm HybridFireworkPSOAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "fdb504bf-c5ab-4628-9101-814a0d425b80", "metadata": {"aucs": [0.5426087740312463, 0.47730625269856997, 0.5042795990475116, 0.4706463518599916, 0.4659934383135046, 0.49555909934504916, 0.4930323200046457, 0.4890538814175207, 0.4755648545039346, 0.08519848378519823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006061876548598799, 0.011469985959429274, 9.999999999998899e-05, 0.09400452628670342, 0.07430801306390367, 0.1445821964919871, 0.08586635311383195, 0.1116708979571589, 0.1034121006482972, 0.07087816113328371, 0.11814374280249218, 0.09075553888594057, 0.069658878606225, 0.060621170809001534, 0.08858115169055181, 0.10548160418878383, 0.06272835887344985, 0.12290077417930334, 0.1046156343190614, 0.07132952254177582, 0.07030847334452284, 0.9449330424552198, 0.9176183267628867, 0.9925147725415691, 0.9613876656709082, 0.9539872905172375, 0.8753089454434102, 0.9371214513308276, 0.9346767557345146, 0.8825101595626936, 0.32846983049324985, 0.3657313865114574, 0.2742143560150142, 0.3670849555591642, 0.3429551832747991, 0.345996976634811, 0.33373700949425633, 0.34294738605795483, 0.30623594078497063, 0.3947217501731387, 0.15652828141435293, 0.19863232434835676, 0.3658235628551485, 0.2660730068746986, 0.24874186608068172, 0.35979511253287977, 0.2339132794517601, 0.23687278616920138, 0.14664298586912228, 0.1927219531944112, 0.17300583729496233, 0.11399669329621798, 0.2620272657590099, 0.1500936915296337, 0.20129608899281537, 0.17103969160611632, 0.19216609001423735, 0.1730407517104775, 0.10662111248262796, 0.23525494014202042, 0.21888916480589637, 0.18079095741872098, 0.1852429017143139, 0.2082767005739491, 0.15714420992182898, 0.12745621771084192, 0.06626742304422428, 9.999999999998899e-05, 0.029575708161382996, 0.007220834107764862, 0.020839843283219528, 0.08195317952668468, 0.019418024189463923, 9.999999999998899e-05, 0.04753173572330249, 0.16160358742712266, 0.17242680271767985, 0.12615899475295844, 0.1691809911781469, 0.14501056769774257, 0.1119370682307943, 0.1573703137706277, 0.12008112944724603, 0.17230813901318975, 0.030737109551289943, 9.999999999998899e-05, 0.0050231897892717425, 0.002802671782463073, 0.027100242965411248, 0.005773810711664384, 0.001796290915719867, 0.009759871773264095, 0.005833770659293802, 0.09532815367354597, 0.10740918398796073, 0.12784619715821555, 0.1238867460431613, 0.10578221125404175, 0.051386461311523246, 0.057660228609692554, 0.09391088858346142, 0.05082102718065595, 0.45214056883780107, 0.43809463369967805, 0.4993321664115702, 0.43615076879074555, 0.44628629263237685, 0.42621849292816893, 0.49746947496168137, 0.4425615931380855, 0.47012418825005775, 0.0923709341510317, 0.11095809622919262, 0.0915976150607748, 0.10162649462469397, 0.07758123447491727, 0.16508814833330998, 0.13415713982334876, 0.115614970923269, 0.08247760098928225, 0.2001137690836705, 0.24637540024062332, 0.31748752420883153, 0.3217428837397014, 0.18070438549160883, 0.34032012237430187, 0.19482197319688777, 0.1852432201368195, 0.3534652759400916, 0.1558002586924716, 0.29518384858965196, 0.30305286865203407, 0.33234311411703144, 0.20867391986136163, 0.2703785173374519, 0.21568670076592633, 0.18803067595759482, 0.28935486290159795, 0.21123642781702368, 0.2607141301216309, 0.1963725120539953, 0.25094234862373255, 0.18972400259670386, 0.23531808749419303, 0.1950794464486849, 0.15801895109831499, 0.2268035033900302, 0.22242704288914739, 0.20977927153929066, 0.20083546894496973, 0.2152068536661833, 0.2285795665068987, 0.21252815286133298, 0.24189887343593675, 0.2823100930276904, 0.24095862835881998, 0.21494715506923, 0.21027383106786235, 0.24884740847675735, 0.17385653717110638, 0.19482047026078686, 0.20708175447131605, 0.21145215680504703, 0.2182926078817743, 0.18832012669203235, 0.16378481614948437, 0.13650224367216035, 0.15739824317449858, 0.6940811376524858, 0.20125104594312304, 0.1610603945635819, 0.1538488856797301, 0.11454969315769536, 0.17793041225052675, 0.5119769390891165, 0.7808274750978713, 0.6654449370812119, 0.7808163815777556, 0.12751460252890634, 0.21150526715678408, 0.6085504776151103, 0.16259844105065857, 0.5461045681411627, 0.23196647854615737, 0.20222214735269595, 0.25719977709566033, 0.2266166814902839, 0.22629629386159245, 0.19781979338202105, 0.22732288786056343, 0.2220199308992159, 0.20989024450253646, 0.10203270975225076, 0.07382424898381545, 0.09797075769647456, 0.10561928844977098, 0.09208781094788743, 0.14531247081370746, 0.12251176351119153, 0.08877632846964112, 0.10015133290789313]}, "mutation_prompt": null}
{"id": "4e2c865f-f843-4d27-b708-612db12c35ef", "solution": "import numpy as np\n\nclass HybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            fireworks += new_fireworks + new_sparks\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "HybridFireworkPSOAlgorithm", "description": "Implementing a hybrid approach by combining Adaptive Firework Algorithm with Particle Swarm Optimization to enhance exploration-exploitation balance.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8abd7eb-960c-4472-b1b9-2303793fcea0", "metadata": {"aucs": [0.5426087740312463, 0.47730625269856997, 0.5042795990475116, 0.4706463518599916, 0.4659934383135046, 0.49555909934504916, 0.4930323200046457, 0.4890538814175207, 0.4755648545039346, 0.08519848378519823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006061876548598799, 0.011469985959429274, 9.999999999998899e-05, 0.09400452628670342, 0.07430801306390367, 0.1445821964919871, 0.08586635311383195, 0.1116708979571589, 0.1034121006482972, 0.07087816113328371, 0.11814374280249218, 0.09075553888594057, 0.069658878606225, 0.060621170809001534, 0.08858115169055181, 0.10548160418878383, 0.06272835887344985, 0.12290077417930334, 0.1046156343190614, 0.07132952254177582, 0.07030847334452284, 0.9449330424552198, 0.9176183267628867, 0.9925147725415691, 0.9613876656709082, 0.9539872905172375, 0.8753089454434102, 0.9371214513308276, 0.9346767557345146, 0.8825101595626936, 0.32846983049324985, 0.3657313865114574, 0.2742143560150142, 0.3670849555591642, 0.3429551832747991, 0.345996976634811, 0.33373700949425633, 0.34294738605795483, 0.30623594078497063, 0.3947217501731387, 0.15652828141435293, 0.19863232434835676, 0.3658235628551485, 0.2660730068746986, 0.24874186608068172, 0.35979511253287977, 0.2339132794517601, 0.23687278616920138, 0.14664298586912228, 0.1927219531944112, 0.17300583729496233, 0.11399669329621798, 0.2620272657590099, 0.1500936915296337, 0.20129608899281537, 0.17103969160611632, 0.19216609001423735, 0.1730407517104775, 0.10662111248262796, 0.23525494014202042, 0.21888916480589637, 0.18079095741872098, 0.1852429017143139, 0.2082767005739491, 0.15714420992182898, 0.12745621771084192, 0.06626742304422428, 9.999999999998899e-05, 0.029575708161382996, 0.007220834107764862, 0.020839843283219528, 0.08195317952668468, 0.019418024189463923, 9.999999999998899e-05, 0.04753173572330249, 0.16160358742712266, 0.17242680271767985, 0.12615899475295844, 0.1691809911781469, 0.14501056769774257, 0.1119370682307943, 0.1573703137706277, 0.12008112944724603, 0.17230813901318975, 0.030737109551289943, 9.999999999998899e-05, 0.0050231897892717425, 0.002802671782463073, 0.027100242965411248, 0.005773810711664384, 0.001796290915719867, 0.009759871773264095, 0.005833770659293802, 0.09532815367354597, 0.10740918398796073, 0.12784619715821555, 0.1238867460431613, 0.10578221125404175, 0.051386461311523246, 0.057660228609692554, 0.09391088858346142, 0.05082102718065595, 0.45214056883780107, 0.43809463369967805, 0.4993321664115702, 0.43615076879074555, 0.44628629263237685, 0.42621849292816893, 0.49746947496168137, 0.4425615931380855, 0.47012418825005775, 0.0923709341510317, 0.11095809622919262, 0.0915976150607748, 0.10162649462469397, 0.07758123447491727, 0.16508814833330998, 0.13415713982334876, 0.115614970923269, 0.08247760098928225, 0.2001137690836705, 0.24637540024062332, 0.31748752420883153, 0.3217428837397014, 0.18070438549160883, 0.34032012237430187, 0.19482197319688777, 0.1852432201368195, 0.3534652759400916, 0.1558002586924716, 0.29518384858965196, 0.30305286865203407, 0.33234311411703144, 0.20867391986136163, 0.2703785173374519, 0.21568670076592633, 0.18803067595759482, 0.28935486290159795, 0.21123642781702368, 0.2607141301216309, 0.1963725120539953, 0.25094234862373255, 0.18972400259670386, 0.23531808749419303, 0.1950794464486849, 0.15801895109831499, 0.2268035033900302, 0.22242704288914739, 0.20977927153929066, 0.20083546894496973, 0.2152068536661833, 0.2285795665068987, 0.21252815286133298, 0.24189887343593675, 0.2823100930276904, 0.24095862835881998, 0.21494715506923, 0.21027383106786235, 0.24884740847675735, 0.17385653717110638, 0.19482047026078686, 0.20708175447131605, 0.21145215680504703, 0.2182926078817743, 0.18832012669203235, 0.16378481614948437, 0.13650224367216035, 0.15739824317449858, 0.6940811376524858, 0.20125104594312304, 0.1610603945635819, 0.1538488856797301, 0.11454969315769536, 0.17793041225052675, 0.5119769390891165, 0.7808274750978713, 0.6654449370812119, 0.7808163815777556, 0.12751460252890634, 0.21150526715678408, 0.6085504776151103, 0.16259844105065857, 0.5461045681411627, 0.23196647854615737, 0.20222214735269595, 0.25719977709566033, 0.2266166814902839, 0.22629629386159245, 0.19781979338202105, 0.22732288786056343, 0.2220199308992159, 0.20989024450253646, 0.10203270975225076, 0.07382424898381545, 0.09797075769647456, 0.10561928844977098, 0.09208781094788743, 0.14531247081370746, 0.12251176351119153, 0.08877632846964112, 0.10015133290789313]}, "mutation_prompt": null}
{"id": "00b47b53-266c-4e36-a40e-f945824bf205", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.de_weight = 0.7\n        self.de_cr = 0.9\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            \n            # Differential Evolution Strategy\n            for i in range(self.n_fireworks):\n                mutant = fireworks[np.random.choice(range(self.n_fireworks))]\n                trial = fireworks[i] + self.de_weight * (mutant - fireworks[i])\n                for j in range(self.dim):\n                    if np.random.rand() > self.de_cr:\n                        trial[j] = mutant[j]\n                if func(trial) < func(fireworks[i]):\n                    fireworks[i] = trial\n            \n            fireworks += new_sparks\n\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the search space by incorporating Differential Evolution strategy into the Hybrid Firework PSO Algorithm.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e8abd7eb-960c-4472-b1b9-2303793fcea0", "metadata": {}, "mutation_prompt": null}
{"id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 75, "fitness": 0.2353175945337793, "feedback": "The algorithm EnhancedHybridFireworkPSOAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "e8abd7eb-960c-4472-b1b9-2303793fcea0", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "0423eaff-af4e-4179-86b2-acaafff40c1a", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "2ce654dd-f2d4-4429-bec7-9bdd8b25a1a3", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "d97fc75e-8273-4232-b4b8-fc134fc28845", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "7aa3fbf7-c412-43fb-943f-45dc27e209b0", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "7f83751a-bc6a-4f8e-ad8f-d6ed7a309744", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "31b61eb2-7ad7-4ed3-b3b4-ee0bdf5c42cb", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "5c0b9552-6485-4a8b-9833-f1de0c97ca7f", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "d6226ac4-57e9-4b2d-9616-2e771148efe8", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "f8062e45-42e4-4750-add8-597081a68899", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "10bd3bac-1c91-4048-9e3a-5365e3dc064b", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "05573590-87a8-42d2-b36e-739a4701c6ba", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "d8d9d5d9-436d-4797-bf07-05b955935c7a", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "bbb4ac20-867c-429c-980e-929093dcb2f2", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "4f4b0673-5a84-4ebe-a978-98879d6b5aa8", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "f6cf8327-eb21-4389-9e7a-3018dd17e172", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "8321e8c2-f35d-4462-b8e9-f9f3976be345", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "23c38728-e9c7-4b49-9a6d-a82a92522c85", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "44e75b89-dd0f-4181-b4e3-c2fd2554cfbe", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "80e085b0-97e4-4d63-ab35-39ce336f87e0", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "63dbfcba-ed63-4621-84de-ef06dfaed794", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "861a2959-ebb8-4a18-8394-e5773e34bd92", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "28196d62-6810-47ab-96e7-ad06b72766ef", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "61b8f4eb-d2a8-4250-bfd8-37313a107acd", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
{"id": "3d8d6681-2612-4246-8e44-c2ed9b6177ee", "solution": "import numpy as np\n\nclass EnhancedHybridFireworkPSOAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.n_fireworks = 10\n        self.n_sparks = 5\n        self.mutation_scale = 1.0\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        def create_firework():\n            return np.random.uniform(-5.0, 5.0, self.dim)\n\n        fireworks = [create_firework() for _ in range(self.n_fireworks)]\n        best_firework = min(fireworks, key=lambda x: func(x))\n\n        for _ in range(self.budget - self.n_fireworks):\n            new_fireworks = [firework + np.random.normal(0, self.mutation_scale, self.dim) for firework in fireworks]\n            new_sparks = [firework + np.random.normal(0, self.mutation_scale * 0.2, self.dim) for _ in range(self.n_sparks) for firework in fireworks]\n            levy_flights = [firework + np.random.standard_cauchy(self.dim) * 0.1 for firework in fireworks]  # Introducing Levy flights for mutation\n            fireworks += new_fireworks + new_sparks + levy_flights\n\n            # Particle Swarm Optimization Update\n            velocities = [np.zeros(self.dim) for _ in range(self.n_fireworks)]\n            global_best = fireworks[0]\n            for i in range(self.n_fireworks):\n                velocities[i] = self.inertia_weight * velocities[i] + self.cognitive_weight * np.random.rand() * (best_firework - fireworks[i]) + self.social_weight * np.random.rand() * (global_best - fireworks[i])\n                fireworks[i] += velocities[i]\n\n            fireworks.sort(key=lambda x: func(x))\n            fireworks = fireworks[:self.n_fireworks]\n            if func(fireworks[0]) < func(best_firework):\n                best_firework = fireworks[0]\n            self.mutation_scale = max(0.1, self.mutation_scale * 0.99)\n\n            if np.random.rand() < 0.1:\n                self.n_fireworks = max(5, int(self.n_fireworks * 1.1)) if np.random.rand() < 0.5 else max(5, int(self.n_fireworks * 0.9))\n\n        return best_firework", "name": "EnhancedHybridFireworkPSOAlgorithm", "description": "Enhancing the diversity of the population by introducing a novel mutation strategy based on Levy flights.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "587f167d-d1cd-4f35-9fca-ddd4b7d522b2", "metadata": {"aucs": [0.4817870786099464, 0.49320150671262075, 0.49416014967802535, 0.48644349938558173, 0.4927428720003051, 0.49868101409043775, 0.49390626342715216, 0.5211591694392933, 0.47847642721229033, 0.10494028113379805, 0.014934618256566279, 9.999999999998899e-05, 0.006992601869779902, 9.999999999998899e-05, 9.999999999998899e-05, 0.05459151032841403, 9.999999999998899e-05, 0.09065359900206771, 0.08814158289485863, 0.08623457577524296, 0.12673193714889408, 0.09984970054018771, 0.10452083537633061, 0.09282816753632173, 0.08538346569422561, 0.08898561723133658, 0.10216358469856801, 0.09050705144579463, 0.0644673409954899, 0.07112135899150596, 0.0861129097190485, 0.08701547880180027, 0.06932961362442491, 0.10186011068326262, 0.10782148518247048, 0.10840569321640814, 0.9911787913997796, 0.9466887248005624, 0.962344637463281, 0.9552456512107254, 0.9241473803248872, 0.9452566817116139, 0.9257688557877265, 0.9342710949612663, 0.9196173554183587, 0.3188420594445488, 0.33210209280884784, 0.33067684947409737, 0.3359973469071308, 0.35170319259699834, 0.3345990857265434, 0.3515266133000071, 0.3252326804867349, 0.32273118525120803, 0.6517987147455542, 0.1570575322050246, 0.6080325411283947, 0.27637286876716194, 0.6525860357145084, 0.20316108010888678, 0.43400156878219276, 0.20760253404950046, 0.5996969722315305, 0.14987520658727083, 0.15727122428981033, 0.1300844405903121, 0.19764986289128395, 0.15481928416485857, 0.1480691710943669, 0.21593822524353468, 0.16606075142594834, 0.14070395749937747, 0.3147490727318982, 0.09953425895152845, 0.24126994535704416, 0.18260451431056035, 0.18438548713085356, 0.19275854114798918, 0.18856324826915993, 0.13662998094677026, 0.16987253337408326, 9.999999999998899e-05, 0.005535743186490638, 0.004560848448048271, 0.046040342353955155, 0.018891038652891656, 0.011828566728255607, 0.04128636386109097, 0.0016695503541006573, 0.024172888190385877, 0.1734247592620799, 0.12301778570099942, 0.16869391492429253, 0.19531903197540412, 0.07539586146946509, 0.10702305095184161, 0.19947957829084384, 0.18953987125466953, 0.15289253987911866, 0.05679406903658124, 0.0017723856116512726, 0.009325023624417339, 0.0211073270152774, 0.006940757316173607, 0.002564643914074294, 0.00580586849597331, 0.01937514621600145, 0.037291000034410327, 0.04133703156797108, 0.14107957015518457, 0.05193374825678054, 0.057878824652152217, 0.11151755691151832, 0.11274958789339928, 0.1034393773256348, 0.15519305030349806, 0.07872492154076083, 0.44523331174133063, 0.43816554595701684, 0.4652799386699349, 0.45138143194316704, 0.45896397595423744, 0.4211156051085161, 0.4476210537941506, 0.44803009631169066, 0.44156816368210805, 0.060414211040415444, 0.09646957753193075, 0.1100401370481735, 0.09358792111869985, 0.05972369733536509, 0.11183229671277328, 0.08114049146288327, 0.112128102292408, 0.08739757512939961, 0.3857180128418626, 0.24917106230887676, 0.34342891821612376, 0.2311994489709055, 0.3372584156503362, 0.18817857124888282, 0.2629473846188495, 0.2016401884575343, 0.183744206822828, 0.24226427949550888, 0.31394985234569384, 0.13505699196659593, 0.31122352653870333, 0.18603044917898792, 0.31540302271999643, 0.1639268046952107, 0.19768581468397306, 0.2248264587034099, 0.10250825821347864, 0.26028075571980425, 0.1149528208381142, 0.21721715551916065, 0.13501884338232284, 0.2436897533478859, 0.1941566979071072, 0.15376217920291224, 0.1323829957655014, 0.20958328506180923, 0.23934756771768295, 0.21366565471677834, 0.21470869439513918, 0.33032788197782836, 0.22816784971350745, 0.2076311945901701, 0.24632801092615464, 0.20132827755617377, 0.18822576740876562, 0.1882176909707517, 0.21037246306451485, 0.2036108255109128, 0.2723153983541017, 0.17345018545733926, 0.19531740340331272, 0.21981479110462998, 0.21319601109334885, 0.18493979234229507, 0.13561413653675913, 0.7966214181264768, 0.17175492022792627, 0.20166522338204118, 0.15874991652685477, 0.15280650790765193, 0.15229260041358794, 0.17786817128331245, 0.6177242625889393, 0.6302583132759461, 0.6823242607049562, 0.6104764360415162, 0.127513397162625, 0.12818365584782354, 0.09305220161082728, 0.1525355842011311, 0.6925057394378125, 0.19014397961557383, 0.19504427706719496, 0.18885272594268487, 0.19469446362310183, 0.21824847071676334, 0.20708959864309406, 0.21136114262272498, 0.220392557006451, 0.21363931618513787, 0.09323050434177749, 0.08735159463714481, 0.10138273003794163, 0.08897848570919709, 0.12718320579996722, 0.12102787093480416, 0.11444170190810232, 0.08003736013197593, 0.09795638266495021]}, "mutation_prompt": null}
