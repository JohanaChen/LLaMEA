{"id": "10037485-b0a3-41b5-a60c-af6e78d1604c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    new_solution[i] = np.random.uniform(-self.bandwidth, self.bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by the musical process of searching for a perfect state of harmony by considering solutions as musical notes and improvising to find the global optimum.", "configspace": "", "generation": 0, "fitness": 0.05643076568122724, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": null, "metadata": {"aucs": [0.10922998228503888, 0.08252311053246886, 0.0952959643092054, 0.13922046259033172, 0.14873961777199096, 0.0620798930286548, 0.1993453120971036, 0.14115193169179108, 0.13833663666006146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05362075781209985, 0.04885364289512362, 0.039016103380557055, 0.00936536760633977, 0.018764858819325436, 0.019718987281312494, 0.05666882651773486, 0.025017869230681722, 0.06512443547203928, 0.0548155062263157, 9.999999999998899e-05, 0.05511386826158071, 0.03588588497282852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636964874150197, 0.0855307529291367, 0.04824396819681476, 0.09501831186278287, 0.08822023715247973, 0.08179342166745851, 0.056228064449230786, 0.10604665493819199, 0.08037381084747719, 9.999999999998899e-05, 9.999999999998899e-05, 0.015563961449717167, 0.017497804900904135, 0.0018877340620192529, 9.999999999998899e-05, 0.030803406693822977, 0.019055807558415516, 0.12920270260316724, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.021643683007896986, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03873759304578284, 9.999999999998899e-05, 9.999999999998899e-05, 0.07170689075743009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023906004341249343, 0.03576267381545206, 0.033071484905628834, 0.0006399043715157315, 9.999999999998899e-05, 0.0012723346432897964, 0.03670678207356959, 9.999999999998899e-05, 0.013239421909086335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0920547661398814, 0.13177655820111545, 0.16933033764565275, 0.10886865404212365, 0.08662426218889685, 0.1252510996991748, 0.15732787769133305, 0.12417199908973975, 0.1396127146377597, 0.00909086507865231, 0.013569065955362558, 0.042002023838647484, 0.02308761669315551, 0.01761432673675134, 0.09374132762681797, 0.007619334124086552, 0.03668583843460549, 0.05406969746640955, 0.1276476261776297, 0.0815079125384447, 0.0951595182277315, 0.1361487635029882, 0.08893436355695739, 0.0803799134623332, 0.08322011205008983, 0.09230767894848302, 0.0807312176023397, 0.1274873211507347, 0.10981398998815495, 0.10358821422865527, 0.14587410677927326, 0.11311377530989808, 0.11923281298942745, 0.12076194980898725, 0.13360749903940072, 0.09998743039688962, 0.05327452940640032, 0.03431516336938345, 0.05715345325044563, 0.0786352153815687, 0.0675718256498683, 0.07850486432892945, 0.07202176537946436, 0.05608996887168538, 0.034791961473991107, 0.16930762660829746, 0.08399660321185698, 0.18408602001458207, 0.1501251389300967, 0.15918004168286792, 0.17177640669413918, 0.1569363934376543, 0.09714208602894492, 0.14668090272589163, 9.999999999998899e-05, 9.999999999998899e-05, 0.045936752809364045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09323598700084512, 0.07808344589036265, 0.10934598678193508, 0.11252105916855693, 0.12073769374915988, 0.10869203610266709, 0.10270500726686571, 0.0726848324727194, 0.07380756567625923, 0.16314509709217762, 0.09556929624728205, 0.09629956440464083, 0.11755584191211965, 0.05586882432161733, 0.0736484316011522, 0.03293494234925587, 0.1733164533591518, 0.061815074459618535, 0.19216863746659585, 0.1785765216484626, 0.2020789704993181, 0.16681175966412898, 0.18092452744056942, 0.2059650632507073, 0.18140653869698808, 0.2101828229113033, 0.19944209529419155, 0.030396783966634255, 0.03317304748225447, 0.0389894181331889, 0.038192864761730005, 0.04284642182565057, 0.05181717459178303, 0.03600519003404823, 0.023425049285362154, 0.044738269932971475]}, "mutation_prompt": null}
{"id": "29d8eea8-f2d5-4cc7-814d-85e69f66623f", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    new_solution[i] = np.random.uniform(-self.bandwidth, self.bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by the musical process of searching for a perfect state of harmony by considering solutions as musical notes and improvising to find the global optimum.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "10037485-b0a3-41b5-a60c-af6e78d1604c", "metadata": {"aucs": [0.10922998228503888, 0.08252311053246886, 0.0952959643092054, 0.13922046259033172, 0.14873961777199096, 0.0620798930286548, 0.1993453120971036, 0.14115193169179108, 0.13833663666006146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05362075781209985, 0.04885364289512362, 0.039016103380557055, 0.00936536760633977, 0.018764858819325436, 0.019718987281312494, 0.05666882651773486, 0.025017869230681722, 0.06512443547203928, 0.0548155062263157, 9.999999999998899e-05, 0.05511386826158071, 0.03588588497282852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636964874150197, 0.0855307529291367, 0.04824396819681476, 0.09501831186278287, 0.08822023715247973, 0.08179342166745851, 0.056228064449230786, 0.10604665493819199, 0.08037381084747719, 9.999999999998899e-05, 9.999999999998899e-05, 0.015563961449717167, 0.017497804900904135, 0.0018877340620192529, 9.999999999998899e-05, 0.030803406693822977, 0.019055807558415516, 0.12920270260316724, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.021643683007896986, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03873759304578284, 9.999999999998899e-05, 9.999999999998899e-05, 0.07170689075743009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023906004341249343, 0.03576267381545206, 0.033071484905628834, 0.0006399043715157315, 9.999999999998899e-05, 0.0012723346432897964, 0.03670678207356959, 9.999999999998899e-05, 0.013239421909086335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0920547661398814, 0.13177655820111545, 0.16933033764565275, 0.10886865404212365, 0.08662426218889685, 0.1252510996991748, 0.15732787769133305, 0.12417199908973975, 0.1396127146377597, 0.00909086507865231, 0.013569065955362558, 0.042002023838647484, 0.02308761669315551, 0.01761432673675134, 0.09374132762681797, 0.007619334124086552, 0.03668583843460549, 0.05406969746640955, 0.1276476261776297, 0.0815079125384447, 0.0951595182277315, 0.1361487635029882, 0.08893436355695739, 0.0803799134623332, 0.08322011205008983, 0.09230767894848302, 0.0807312176023397, 0.1274873211507347, 0.10981398998815495, 0.10358821422865527, 0.14587410677927326, 0.11311377530989808, 0.11923281298942745, 0.12076194980898725, 0.13360749903940072, 0.09998743039688962, 0.05327452940640032, 0.03431516336938345, 0.05715345325044563, 0.0786352153815687, 0.0675718256498683, 0.07850486432892945, 0.07202176537946436, 0.05608996887168538, 0.034791961473991107, 0.16930762660829746, 0.08399660321185698, 0.18408602001458207, 0.1501251389300967, 0.15918004168286792, 0.17177640669413918, 0.1569363934376543, 0.09714208602894492, 0.14668090272589163, 9.999999999998899e-05, 9.999999999998899e-05, 0.045936752809364045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09323598700084512, 0.07808344589036265, 0.10934598678193508, 0.11252105916855693, 0.12073769374915988, 0.10869203610266709, 0.10270500726686571, 0.0726848324727194, 0.07380756567625923, 0.16314509709217762, 0.09556929624728205, 0.09629956440464083, 0.11755584191211965, 0.05586882432161733, 0.0736484316011522, 0.03293494234925587, 0.1733164533591518, 0.061815074459618535, 0.19216863746659585, 0.1785765216484626, 0.2020789704993181, 0.16681175966412898, 0.18092452744056942, 0.2059650632507073, 0.18140653869698808, 0.2101828229113033, 0.19944209529419155, 0.030396783966634255, 0.03317304748225447, 0.0389894181331889, 0.038192864761730005, 0.04284642182565057, 0.05181717459178303, 0.03600519003404823, 0.023425049285362154, 0.044738269932971475]}, "mutation_prompt": null}
{"id": "c229ac0e-2bd6-41d1-b546-7fbdd8ce93fc", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    new_solution[i] = np.random.uniform(-self.bandwidth, self.bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by the musical process of searching for a perfect state of harmony by considering solutions as musical notes and improvising to find the global optimum.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "10037485-b0a3-41b5-a60c-af6e78d1604c", "metadata": {"aucs": [0.10922998228503888, 0.08252311053246886, 0.0952959643092054, 0.13922046259033172, 0.14873961777199096, 0.0620798930286548, 0.1993453120971036, 0.14115193169179108, 0.13833663666006146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05362075781209985, 0.04885364289512362, 0.039016103380557055, 0.00936536760633977, 0.018764858819325436, 0.019718987281312494, 0.05666882651773486, 0.025017869230681722, 0.06512443547203928, 0.0548155062263157, 9.999999999998899e-05, 0.05511386826158071, 0.03588588497282852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636964874150197, 0.0855307529291367, 0.04824396819681476, 0.09501831186278287, 0.08822023715247973, 0.08179342166745851, 0.056228064449230786, 0.10604665493819199, 0.08037381084747719, 9.999999999998899e-05, 9.999999999998899e-05, 0.015563961449717167, 0.017497804900904135, 0.0018877340620192529, 9.999999999998899e-05, 0.030803406693822977, 0.019055807558415516, 0.12920270260316724, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.021643683007896986, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03873759304578284, 9.999999999998899e-05, 9.999999999998899e-05, 0.07170689075743009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023906004341249343, 0.03576267381545206, 0.033071484905628834, 0.0006399043715157315, 9.999999999998899e-05, 0.0012723346432897964, 0.03670678207356959, 9.999999999998899e-05, 0.013239421909086335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0920547661398814, 0.13177655820111545, 0.16933033764565275, 0.10886865404212365, 0.08662426218889685, 0.1252510996991748, 0.15732787769133305, 0.12417199908973975, 0.1396127146377597, 0.00909086507865231, 0.013569065955362558, 0.042002023838647484, 0.02308761669315551, 0.01761432673675134, 0.09374132762681797, 0.007619334124086552, 0.03668583843460549, 0.05406969746640955, 0.1276476261776297, 0.0815079125384447, 0.0951595182277315, 0.1361487635029882, 0.08893436355695739, 0.0803799134623332, 0.08322011205008983, 0.09230767894848302, 0.0807312176023397, 0.1274873211507347, 0.10981398998815495, 0.10358821422865527, 0.14587410677927326, 0.11311377530989808, 0.11923281298942745, 0.12076194980898725, 0.13360749903940072, 0.09998743039688962, 0.05327452940640032, 0.03431516336938345, 0.05715345325044563, 0.0786352153815687, 0.0675718256498683, 0.07850486432892945, 0.07202176537946436, 0.05608996887168538, 0.034791961473991107, 0.16930762660829746, 0.08399660321185698, 0.18408602001458207, 0.1501251389300967, 0.15918004168286792, 0.17177640669413918, 0.1569363934376543, 0.09714208602894492, 0.14668090272589163, 9.999999999998899e-05, 9.999999999998899e-05, 0.045936752809364045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09323598700084512, 0.07808344589036265, 0.10934598678193508, 0.11252105916855693, 0.12073769374915988, 0.10869203610266709, 0.10270500726686571, 0.0726848324727194, 0.07380756567625923, 0.16314509709217762, 0.09556929624728205, 0.09629956440464083, 0.11755584191211965, 0.05586882432161733, 0.0736484316011522, 0.03293494234925587, 0.1733164533591518, 0.061815074459618535, 0.19216863746659585, 0.1785765216484626, 0.2020789704993181, 0.16681175966412898, 0.18092452744056942, 0.2059650632507073, 0.18140653869698808, 0.2101828229113033, 0.19944209529419155, 0.030396783966634255, 0.03317304748225447, 0.0389894181331889, 0.038192864761730005, 0.04284642182565057, 0.05181717459178303, 0.03600519003404823, 0.023425049285362154, 0.044738269932971475]}, "mutation_prompt": null}
{"id": "cec80f31-4dd3-4ae0-9cc3-470130242735", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    new_solution[i] = np.random.uniform(-self.bandwidth, self.bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by the musical process of searching for a perfect state of harmony by considering solutions as musical notes and improvising to find the global optimum.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "10037485-b0a3-41b5-a60c-af6e78d1604c", "metadata": {"aucs": [0.10922998228503888, 0.08252311053246886, 0.0952959643092054, 0.13922046259033172, 0.14873961777199096, 0.0620798930286548, 0.1993453120971036, 0.14115193169179108, 0.13833663666006146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05362075781209985, 0.04885364289512362, 0.039016103380557055, 0.00936536760633977, 0.018764858819325436, 0.019718987281312494, 0.05666882651773486, 0.025017869230681722, 0.06512443547203928, 0.0548155062263157, 9.999999999998899e-05, 0.05511386826158071, 0.03588588497282852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636964874150197, 0.0855307529291367, 0.04824396819681476, 0.09501831186278287, 0.08822023715247973, 0.08179342166745851, 0.056228064449230786, 0.10604665493819199, 0.08037381084747719, 9.999999999998899e-05, 9.999999999998899e-05, 0.015563961449717167, 0.017497804900904135, 0.0018877340620192529, 9.999999999998899e-05, 0.030803406693822977, 0.019055807558415516, 0.12920270260316724, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.021643683007896986, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03873759304578284, 9.999999999998899e-05, 9.999999999998899e-05, 0.07170689075743009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023906004341249343, 0.03576267381545206, 0.033071484905628834, 0.0006399043715157315, 9.999999999998899e-05, 0.0012723346432897964, 0.03670678207356959, 9.999999999998899e-05, 0.013239421909086335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0920547661398814, 0.13177655820111545, 0.16933033764565275, 0.10886865404212365, 0.08662426218889685, 0.1252510996991748, 0.15732787769133305, 0.12417199908973975, 0.1396127146377597, 0.00909086507865231, 0.013569065955362558, 0.042002023838647484, 0.02308761669315551, 0.01761432673675134, 0.09374132762681797, 0.007619334124086552, 0.03668583843460549, 0.05406969746640955, 0.1276476261776297, 0.0815079125384447, 0.0951595182277315, 0.1361487635029882, 0.08893436355695739, 0.0803799134623332, 0.08322011205008983, 0.09230767894848302, 0.0807312176023397, 0.1274873211507347, 0.10981398998815495, 0.10358821422865527, 0.14587410677927326, 0.11311377530989808, 0.11923281298942745, 0.12076194980898725, 0.13360749903940072, 0.09998743039688962, 0.05327452940640032, 0.03431516336938345, 0.05715345325044563, 0.0786352153815687, 0.0675718256498683, 0.07850486432892945, 0.07202176537946436, 0.05608996887168538, 0.034791961473991107, 0.16930762660829746, 0.08399660321185698, 0.18408602001458207, 0.1501251389300967, 0.15918004168286792, 0.17177640669413918, 0.1569363934376543, 0.09714208602894492, 0.14668090272589163, 9.999999999998899e-05, 9.999999999998899e-05, 0.045936752809364045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09323598700084512, 0.07808344589036265, 0.10934598678193508, 0.11252105916855693, 0.12073769374915988, 0.10869203610266709, 0.10270500726686571, 0.0726848324727194, 0.07380756567625923, 0.16314509709217762, 0.09556929624728205, 0.09629956440464083, 0.11755584191211965, 0.05586882432161733, 0.0736484316011522, 0.03293494234925587, 0.1733164533591518, 0.061815074459618535, 0.19216863746659585, 0.1785765216484626, 0.2020789704993181, 0.16681175966412898, 0.18092452744056942, 0.2059650632507073, 0.18140653869698808, 0.2101828229113033, 0.19944209529419155, 0.030396783966634255, 0.03317304748225447, 0.0389894181331889, 0.038192864761730005, 0.04284642182565057, 0.05181717459178303, 0.03600519003404823, 0.023425049285362154, 0.044738269932971475]}, "mutation_prompt": null}
{"id": "c0a53fb1-9241-4531-8de8-c06794fe5fac", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    new_solution[i] = np.random.uniform(-self.bandwidth, self.bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by the musical process of searching for a perfect state of harmony by considering solutions as musical notes and improvising to find the global optimum.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "10037485-b0a3-41b5-a60c-af6e78d1604c", "metadata": {"aucs": [0.10922998228503888, 0.08252311053246886, 0.0952959643092054, 0.13922046259033172, 0.14873961777199096, 0.0620798930286548, 0.1993453120971036, 0.14115193169179108, 0.13833663666006146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05362075781209985, 0.04885364289512362, 0.039016103380557055, 0.00936536760633977, 0.018764858819325436, 0.019718987281312494, 0.05666882651773486, 0.025017869230681722, 0.06512443547203928, 0.0548155062263157, 9.999999999998899e-05, 0.05511386826158071, 0.03588588497282852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636964874150197, 0.0855307529291367, 0.04824396819681476, 0.09501831186278287, 0.08822023715247973, 0.08179342166745851, 0.056228064449230786, 0.10604665493819199, 0.08037381084747719, 9.999999999998899e-05, 9.999999999998899e-05, 0.015563961449717167, 0.017497804900904135, 0.0018877340620192529, 9.999999999998899e-05, 0.030803406693822977, 0.019055807558415516, 0.12920270260316724, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.021643683007896986, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03873759304578284, 9.999999999998899e-05, 9.999999999998899e-05, 0.07170689075743009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023906004341249343, 0.03576267381545206, 0.033071484905628834, 0.0006399043715157315, 9.999999999998899e-05, 0.0012723346432897964, 0.03670678207356959, 9.999999999998899e-05, 0.013239421909086335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0920547661398814, 0.13177655820111545, 0.16933033764565275, 0.10886865404212365, 0.08662426218889685, 0.1252510996991748, 0.15732787769133305, 0.12417199908973975, 0.1396127146377597, 0.00909086507865231, 0.013569065955362558, 0.042002023838647484, 0.02308761669315551, 0.01761432673675134, 0.09374132762681797, 0.007619334124086552, 0.03668583843460549, 0.05406969746640955, 0.1276476261776297, 0.0815079125384447, 0.0951595182277315, 0.1361487635029882, 0.08893436355695739, 0.0803799134623332, 0.08322011205008983, 0.09230767894848302, 0.0807312176023397, 0.1274873211507347, 0.10981398998815495, 0.10358821422865527, 0.14587410677927326, 0.11311377530989808, 0.11923281298942745, 0.12076194980898725, 0.13360749903940072, 0.09998743039688962, 0.05327452940640032, 0.03431516336938345, 0.05715345325044563, 0.0786352153815687, 0.0675718256498683, 0.07850486432892945, 0.07202176537946436, 0.05608996887168538, 0.034791961473991107, 0.16930762660829746, 0.08399660321185698, 0.18408602001458207, 0.1501251389300967, 0.15918004168286792, 0.17177640669413918, 0.1569363934376543, 0.09714208602894492, 0.14668090272589163, 9.999999999998899e-05, 9.999999999998899e-05, 0.045936752809364045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09323598700084512, 0.07808344589036265, 0.10934598678193508, 0.11252105916855693, 0.12073769374915988, 0.10869203610266709, 0.10270500726686571, 0.0726848324727194, 0.07380756567625923, 0.16314509709217762, 0.09556929624728205, 0.09629956440464083, 0.11755584191211965, 0.05586882432161733, 0.0736484316011522, 0.03293494234925587, 0.1733164533591518, 0.061815074459618535, 0.19216863746659585, 0.1785765216484626, 0.2020789704993181, 0.16681175966412898, 0.18092452744056942, 0.2059650632507073, 0.18140653869698808, 0.2101828229113033, 0.19944209529419155, 0.030396783966634255, 0.03317304748225447, 0.0389894181331889, 0.038192864761730005, 0.04284642182565057, 0.05181717459178303, 0.03600519003404823, 0.023425049285362154, 0.044738269932971475]}, "mutation_prompt": null}
{"id": "f35addb7-f73c-4fc2-957f-3ed45ed53e9e", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    new_solution[i] = np.random.uniform(-self.bandwidth, self.bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Harmony Search Algorithm: A metaheuristic algorithm inspired by the musical process of searching for a perfect state of harmony by considering solutions as musical notes and improvising to find the global optimum.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "10037485-b0a3-41b5-a60c-af6e78d1604c", "metadata": {"aucs": [0.10922998228503888, 0.08252311053246886, 0.0952959643092054, 0.13922046259033172, 0.14873961777199096, 0.0620798930286548, 0.1993453120971036, 0.14115193169179108, 0.13833663666006146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05362075781209985, 0.04885364289512362, 0.039016103380557055, 0.00936536760633977, 0.018764858819325436, 0.019718987281312494, 0.05666882651773486, 0.025017869230681722, 0.06512443547203928, 0.0548155062263157, 9.999999999998899e-05, 0.05511386826158071, 0.03588588497282852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06636964874150197, 0.0855307529291367, 0.04824396819681476, 0.09501831186278287, 0.08822023715247973, 0.08179342166745851, 0.056228064449230786, 0.10604665493819199, 0.08037381084747719, 9.999999999998899e-05, 9.999999999998899e-05, 0.015563961449717167, 0.017497804900904135, 0.0018877340620192529, 9.999999999998899e-05, 0.030803406693822977, 0.019055807558415516, 0.12920270260316724, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.021643683007896986, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03873759304578284, 9.999999999998899e-05, 9.999999999998899e-05, 0.07170689075743009, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023906004341249343, 0.03576267381545206, 0.033071484905628834, 0.0006399043715157315, 9.999999999998899e-05, 0.0012723346432897964, 0.03670678207356959, 9.999999999998899e-05, 0.013239421909086335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0920547661398814, 0.13177655820111545, 0.16933033764565275, 0.10886865404212365, 0.08662426218889685, 0.1252510996991748, 0.15732787769133305, 0.12417199908973975, 0.1396127146377597, 0.00909086507865231, 0.013569065955362558, 0.042002023838647484, 0.02308761669315551, 0.01761432673675134, 0.09374132762681797, 0.007619334124086552, 0.03668583843460549, 0.05406969746640955, 0.1276476261776297, 0.0815079125384447, 0.0951595182277315, 0.1361487635029882, 0.08893436355695739, 0.0803799134623332, 0.08322011205008983, 0.09230767894848302, 0.0807312176023397, 0.1274873211507347, 0.10981398998815495, 0.10358821422865527, 0.14587410677927326, 0.11311377530989808, 0.11923281298942745, 0.12076194980898725, 0.13360749903940072, 0.09998743039688962, 0.05327452940640032, 0.03431516336938345, 0.05715345325044563, 0.0786352153815687, 0.0675718256498683, 0.07850486432892945, 0.07202176537946436, 0.05608996887168538, 0.034791961473991107, 0.16930762660829746, 0.08399660321185698, 0.18408602001458207, 0.1501251389300967, 0.15918004168286792, 0.17177640669413918, 0.1569363934376543, 0.09714208602894492, 0.14668090272589163, 9.999999999998899e-05, 9.999999999998899e-05, 0.045936752809364045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09323598700084512, 0.07808344589036265, 0.10934598678193508, 0.11252105916855693, 0.12073769374915988, 0.10869203610266709, 0.10270500726686571, 0.0726848324727194, 0.07380756567625923, 0.16314509709217762, 0.09556929624728205, 0.09629956440464083, 0.11755584191211965, 0.05586882432161733, 0.0736484316011522, 0.03293494234925587, 0.1733164533591518, 0.061815074459618535, 0.19216863746659585, 0.1785765216484626, 0.2020789704993181, 0.16681175966412898, 0.18092452744056942, 0.2059650632507073, 0.18140653869698808, 0.2101828229113033, 0.19944209529419155, 0.030396783966634255, 0.03317304748225447, 0.0389894181331889, 0.038192864761730005, 0.04284642182565057, 0.05181717459178303, 0.03600519003404823, 0.023425049285362154, 0.044738269932971475]}, "mutation_prompt": null}
{"id": "3e12a85c-99d3-4333-ac75-9c803124e138", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Introducing dynamic bandwidth adjustment to enhance exploration and exploitation trade-off in Harmony Search Algorithm.", "configspace": "", "generation": 6, "fitness": 0.05667486392058386, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "10037485-b0a3-41b5-a60c-af6e78d1604c", "metadata": {"aucs": [0.10817941519405228, 0.08239988027525236, 0.09530942324301084, 0.13927619216808795, 0.14825037343911407, 0.06197238316387188, 0.19832255075600125, 0.1409424536161552, 0.1366665435152472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05139782795480352, 0.04870445285154079, 0.03908345792506884, 0.009400308690840187, 0.01772670710222135, 0.020338353993947234, 0.056528864785542865, 0.026348848652464785, 0.06538370371593905, 0.05721607150784691, 9.999999999998899e-05, 0.055047186435158935, 0.03404588607077441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612437985206565, 0.08539618612327105, 0.04811058393886247, 0.09469304111569166, 0.08797582365288015, 0.07995994489046532, 0.056127590723439424, 0.10566408193156818, 0.07917055294558173, 9.999999999998899e-05, 9.999999999998899e-05, 0.01120668844790651, 0.017454758176043805, 0.0018779141624861717, 9.999999999998899e-05, 0.030266803303239942, 0.01894731489616064, 0.12902617012078044, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.046440571965468136, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038858030248854813, 9.999999999998899e-05, 9.999999999998899e-05, 0.056901231582156986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023995489268962555, 0.035367423947515686, 0.027907076704910327, 0.000845096586888916, 9.999999999998899e-05, 0.00120008688290274, 0.03686280130920894, 9.999999999998899e-05, 0.013608469576827487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09202163167287158, 0.13161947241303673, 0.16918314630270748, 0.10864537400758167, 0.0865918277915595, 0.12481658153999875, 0.15615603897859287, 0.12382658871145735, 0.13971187601816093, 0.008230960018686395, 0.013535651278802852, 0.03976072268257358, 0.02386236194729008, 0.017467565637237392, 0.09069834085484141, 0.008006877632240839, 0.03515038140677551, 0.05314578327655728, 0.1250970602246565, 0.06900541680183869, 0.09398782434373842, 0.09959987875696463, 0.09719005741230502, 0.08061363417121137, 0.09078020827904987, 0.09686090466178154, 0.08086768521234466, 0.12761797013383425, 0.10966104549281286, 0.10358821422865527, 0.13548499732894836, 0.11316181077398602, 0.11375920315432808, 0.12126825235915262, 0.13537457396021657, 0.08155839979190127, 0.053235474407822725, 0.03431673141750924, 0.056051666717097604, 0.07868199451615543, 0.0676978906117498, 0.07855675258907158, 0.07145734518999158, 0.08337988310433597, 0.03294955270973565, 0.20693036955174815, 0.08862143577016668, 0.16189997362520425, 0.2358102185466754, 0.1577377576524981, 0.16424908603308996, 0.1511042767054669, 0.12026120178418842, 0.15251385017262198, 9.999999999998899e-05, 9.999999999998899e-05, 0.04369052528203465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301964587882572, 0.07695499527038319, 0.10897974321913628, 0.11224391703700387, 0.1207376937260819, 0.10858778991628482, 0.10270707099423326, 0.07243119423882216, 0.07377288012083971, 0.1627667221372432, 0.09445343537840745, 0.0957155594325968, 0.11528970384510795, 0.0558687654624368, 0.07219231896291989, 0.032794504993629014, 0.17187129948625424, 0.061099437281466495, 0.1852151615700358, 0.1956085324504827, 0.21978608574620861, 0.16574958573381227, 0.1783844278088863, 0.19954918485070838, 0.18901210113885003, 0.2096241730873024, 0.19134848178246688, 0.030474048438887125, 0.027747343891901477, 0.03856425404623964, 0.038619913587427224, 0.04037996587046977, 0.048702825687751417, 0.036071402677013475, 0.023426229274904786, 0.044441189031964146]}, "mutation_prompt": null}
{"id": "94150bef-2bcd-4515-bf64-95b73d5cceaa", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Introducing dynamic bandwidth adjustment to enhance exploration and exploitation trade-off in Harmony Search Algorithm.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e12a85c-99d3-4333-ac75-9c803124e138", "metadata": {"aucs": [0.10817941519405228, 0.08239988027525236, 0.09530942324301084, 0.13927619216808795, 0.14825037343911407, 0.06197238316387188, 0.19832255075600125, 0.1409424536161552, 0.1366665435152472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05139782795480352, 0.04870445285154079, 0.03908345792506884, 0.009400308690840187, 0.01772670710222135, 0.020338353993947234, 0.056528864785542865, 0.026348848652464785, 0.06538370371593905, 0.05721607150784691, 9.999999999998899e-05, 0.055047186435158935, 0.03404588607077441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612437985206565, 0.08539618612327105, 0.04811058393886247, 0.09469304111569166, 0.08797582365288015, 0.07995994489046532, 0.056127590723439424, 0.10566408193156818, 0.07917055294558173, 9.999999999998899e-05, 9.999999999998899e-05, 0.01120668844790651, 0.017454758176043805, 0.0018779141624861717, 9.999999999998899e-05, 0.030266803303239942, 0.01894731489616064, 0.12902617012078044, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.046440571965468136, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038858030248854813, 9.999999999998899e-05, 9.999999999998899e-05, 0.056901231582156986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023995489268962555, 0.035367423947515686, 0.027907076704910327, 0.000845096586888916, 9.999999999998899e-05, 0.00120008688290274, 0.03686280130920894, 9.999999999998899e-05, 0.013608469576827487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09202163167287158, 0.13161947241303673, 0.16918314630270748, 0.10864537400758167, 0.0865918277915595, 0.12481658153999875, 0.15615603897859287, 0.12382658871145735, 0.13971187601816093, 0.008230960018686395, 0.013535651278802852, 0.03976072268257358, 0.02386236194729008, 0.017467565637237392, 0.09069834085484141, 0.008006877632240839, 0.03515038140677551, 0.05314578327655728, 0.1250970602246565, 0.06900541680183869, 0.09398782434373842, 0.09959987875696463, 0.09719005741230502, 0.08061363417121137, 0.09078020827904987, 0.09686090466178154, 0.08086768521234466, 0.12761797013383425, 0.10966104549281286, 0.10358821422865527, 0.13548499732894836, 0.11316181077398602, 0.11375920315432808, 0.12126825235915262, 0.13537457396021657, 0.08155839979190127, 0.053235474407822725, 0.03431673141750924, 0.056051666717097604, 0.07868199451615543, 0.0676978906117498, 0.07855675258907158, 0.07145734518999158, 0.08337988310433597, 0.03294955270973565, 0.20693036955174815, 0.08862143577016668, 0.16189997362520425, 0.2358102185466754, 0.1577377576524981, 0.16424908603308996, 0.1511042767054669, 0.12026120178418842, 0.15251385017262198, 9.999999999998899e-05, 9.999999999998899e-05, 0.04369052528203465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301964587882572, 0.07695499527038319, 0.10897974321913628, 0.11224391703700387, 0.1207376937260819, 0.10858778991628482, 0.10270707099423326, 0.07243119423882216, 0.07377288012083971, 0.1627667221372432, 0.09445343537840745, 0.0957155594325968, 0.11528970384510795, 0.0558687654624368, 0.07219231896291989, 0.032794504993629014, 0.17187129948625424, 0.061099437281466495, 0.1852151615700358, 0.1956085324504827, 0.21978608574620861, 0.16574958573381227, 0.1783844278088863, 0.19954918485070838, 0.18901210113885003, 0.2096241730873024, 0.19134848178246688, 0.030474048438887125, 0.027747343891901477, 0.03856425404623964, 0.038619913587427224, 0.04037996587046977, 0.048702825687751417, 0.036071402677013475, 0.023426229274904786, 0.044441189031964146]}, "mutation_prompt": null}
{"id": "1e602084-5f4e-4241-bc09-c8322d91f940", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Introducing dynamic bandwidth adjustment to enhance exploration and exploitation trade-off in Harmony Search Algorithm.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e12a85c-99d3-4333-ac75-9c803124e138", "metadata": {"aucs": [0.10817941519405228, 0.08239988027525236, 0.09530942324301084, 0.13927619216808795, 0.14825037343911407, 0.06197238316387188, 0.19832255075600125, 0.1409424536161552, 0.1366665435152472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05139782795480352, 0.04870445285154079, 0.03908345792506884, 0.009400308690840187, 0.01772670710222135, 0.020338353993947234, 0.056528864785542865, 0.026348848652464785, 0.06538370371593905, 0.05721607150784691, 9.999999999998899e-05, 0.055047186435158935, 0.03404588607077441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612437985206565, 0.08539618612327105, 0.04811058393886247, 0.09469304111569166, 0.08797582365288015, 0.07995994489046532, 0.056127590723439424, 0.10566408193156818, 0.07917055294558173, 9.999999999998899e-05, 9.999999999998899e-05, 0.01120668844790651, 0.017454758176043805, 0.0018779141624861717, 9.999999999998899e-05, 0.030266803303239942, 0.01894731489616064, 0.12902617012078044, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.046440571965468136, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038858030248854813, 9.999999999998899e-05, 9.999999999998899e-05, 0.056901231582156986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023995489268962555, 0.035367423947515686, 0.027907076704910327, 0.000845096586888916, 9.999999999998899e-05, 0.00120008688290274, 0.03686280130920894, 9.999999999998899e-05, 0.013608469576827487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09202163167287158, 0.13161947241303673, 0.16918314630270748, 0.10864537400758167, 0.0865918277915595, 0.12481658153999875, 0.15615603897859287, 0.12382658871145735, 0.13971187601816093, 0.008230960018686395, 0.013535651278802852, 0.03976072268257358, 0.02386236194729008, 0.017467565637237392, 0.09069834085484141, 0.008006877632240839, 0.03515038140677551, 0.05314578327655728, 0.1250970602246565, 0.06900541680183869, 0.09398782434373842, 0.09959987875696463, 0.09719005741230502, 0.08061363417121137, 0.09078020827904987, 0.09686090466178154, 0.08086768521234466, 0.12761797013383425, 0.10966104549281286, 0.10358821422865527, 0.13548499732894836, 0.11316181077398602, 0.11375920315432808, 0.12126825235915262, 0.13537457396021657, 0.08155839979190127, 0.053235474407822725, 0.03431673141750924, 0.056051666717097604, 0.07868199451615543, 0.0676978906117498, 0.07855675258907158, 0.07145734518999158, 0.08337988310433597, 0.03294955270973565, 0.20693036955174815, 0.08862143577016668, 0.16189997362520425, 0.2358102185466754, 0.1577377576524981, 0.16424908603308996, 0.1511042767054669, 0.12026120178418842, 0.15251385017262198, 9.999999999998899e-05, 9.999999999998899e-05, 0.04369052528203465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301964587882572, 0.07695499527038319, 0.10897974321913628, 0.11224391703700387, 0.1207376937260819, 0.10858778991628482, 0.10270707099423326, 0.07243119423882216, 0.07377288012083971, 0.1627667221372432, 0.09445343537840745, 0.0957155594325968, 0.11528970384510795, 0.0558687654624368, 0.07219231896291989, 0.032794504993629014, 0.17187129948625424, 0.061099437281466495, 0.1852151615700358, 0.1956085324504827, 0.21978608574620861, 0.16574958573381227, 0.1783844278088863, 0.19954918485070838, 0.18901210113885003, 0.2096241730873024, 0.19134848178246688, 0.030474048438887125, 0.027747343891901477, 0.03856425404623964, 0.038619913587427224, 0.04037996587046977, 0.048702825687751417, 0.036071402677013475, 0.023426229274904786, 0.044441189031964146]}, "mutation_prompt": null}
{"id": "95b5fc95-8ec5-45af-96eb-709e90198262", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Introducing dynamic bandwidth adjustment to enhance exploration and exploitation trade-off in Harmony Search Algorithm.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "3e12a85c-99d3-4333-ac75-9c803124e138", "metadata": {"aucs": [0.10817941519405228, 0.08239988027525236, 0.09530942324301084, 0.13927619216808795, 0.14825037343911407, 0.06197238316387188, 0.19832255075600125, 0.1409424536161552, 0.1366665435152472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05139782795480352, 0.04870445285154079, 0.03908345792506884, 0.009400308690840187, 0.01772670710222135, 0.020338353993947234, 0.056528864785542865, 0.026348848652464785, 0.06538370371593905, 0.05721607150784691, 9.999999999998899e-05, 0.055047186435158935, 0.03404588607077441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612437985206565, 0.08539618612327105, 0.04811058393886247, 0.09469304111569166, 0.08797582365288015, 0.07995994489046532, 0.056127590723439424, 0.10566408193156818, 0.07917055294558173, 9.999999999998899e-05, 9.999999999998899e-05, 0.01120668844790651, 0.017454758176043805, 0.0018779141624861717, 9.999999999998899e-05, 0.030266803303239942, 0.01894731489616064, 0.12902617012078044, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.046440571965468136, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038858030248854813, 9.999999999998899e-05, 9.999999999998899e-05, 0.056901231582156986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023995489268962555, 0.035367423947515686, 0.027907076704910327, 0.000845096586888916, 9.999999999998899e-05, 0.00120008688290274, 0.03686280130920894, 9.999999999998899e-05, 0.013608469576827487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09202163167287158, 0.13161947241303673, 0.16918314630270748, 0.10864537400758167, 0.0865918277915595, 0.12481658153999875, 0.15615603897859287, 0.12382658871145735, 0.13971187601816093, 0.008230960018686395, 0.013535651278802852, 0.03976072268257358, 0.02386236194729008, 0.017467565637237392, 0.09069834085484141, 0.008006877632240839, 0.03515038140677551, 0.05314578327655728, 0.1250970602246565, 0.06900541680183869, 0.09398782434373842, 0.09959987875696463, 0.09719005741230502, 0.08061363417121137, 0.09078020827904987, 0.09686090466178154, 0.08086768521234466, 0.12761797013383425, 0.10966104549281286, 0.10358821422865527, 0.13548499732894836, 0.11316181077398602, 0.11375920315432808, 0.12126825235915262, 0.13537457396021657, 0.08155839979190127, 0.053235474407822725, 0.03431673141750924, 0.056051666717097604, 0.07868199451615543, 0.0676978906117498, 0.07855675258907158, 0.07145734518999158, 0.08337988310433597, 0.03294955270973565, 0.20693036955174815, 0.08862143577016668, 0.16189997362520425, 0.2358102185466754, 0.1577377576524981, 0.16424908603308996, 0.1511042767054669, 0.12026120178418842, 0.15251385017262198, 9.999999999998899e-05, 9.999999999998899e-05, 0.04369052528203465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301964587882572, 0.07695499527038319, 0.10897974321913628, 0.11224391703700387, 0.1207376937260819, 0.10858778991628482, 0.10270707099423326, 0.07243119423882216, 0.07377288012083971, 0.1627667221372432, 0.09445343537840745, 0.0957155594325968, 0.11528970384510795, 0.0558687654624368, 0.07219231896291989, 0.032794504993629014, 0.17187129948625424, 0.061099437281466495, 0.1852151615700358, 0.1956085324504827, 0.21978608574620861, 0.16574958573381227, 0.1783844278088863, 0.19954918485070838, 0.18901210113885003, 0.2096241730873024, 0.19134848178246688, 0.030474048438887125, 0.027747343891901477, 0.03856425404623964, 0.038619913587427224, 0.04037996587046977, 0.048702825687751417, 0.036071402677013475, 0.023426229274904786, 0.044441189031964146]}, "mutation_prompt": null}
{"id": "a1a8704f-2edb-4a73-a08e-3c681b4c75f4", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Introducing dynamic bandwidth adjustment to enhance exploration and exploitation trade-off in Harmony Search Algorithm.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "3e12a85c-99d3-4333-ac75-9c803124e138", "metadata": {"aucs": [0.10817941519405228, 0.08239988027525236, 0.09530942324301084, 0.13927619216808795, 0.14825037343911407, 0.06197238316387188, 0.19832255075600125, 0.1409424536161552, 0.1366665435152472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05139782795480352, 0.04870445285154079, 0.03908345792506884, 0.009400308690840187, 0.01772670710222135, 0.020338353993947234, 0.056528864785542865, 0.026348848652464785, 0.06538370371593905, 0.05721607150784691, 9.999999999998899e-05, 0.055047186435158935, 0.03404588607077441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612437985206565, 0.08539618612327105, 0.04811058393886247, 0.09469304111569166, 0.08797582365288015, 0.07995994489046532, 0.056127590723439424, 0.10566408193156818, 0.07917055294558173, 9.999999999998899e-05, 9.999999999998899e-05, 0.01120668844790651, 0.017454758176043805, 0.0018779141624861717, 9.999999999998899e-05, 0.030266803303239942, 0.01894731489616064, 0.12902617012078044, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.046440571965468136, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038858030248854813, 9.999999999998899e-05, 9.999999999998899e-05, 0.056901231582156986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023995489268962555, 0.035367423947515686, 0.027907076704910327, 0.000845096586888916, 9.999999999998899e-05, 0.00120008688290274, 0.03686280130920894, 9.999999999998899e-05, 0.013608469576827487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09202163167287158, 0.13161947241303673, 0.16918314630270748, 0.10864537400758167, 0.0865918277915595, 0.12481658153999875, 0.15615603897859287, 0.12382658871145735, 0.13971187601816093, 0.008230960018686395, 0.013535651278802852, 0.03976072268257358, 0.02386236194729008, 0.017467565637237392, 0.09069834085484141, 0.008006877632240839, 0.03515038140677551, 0.05314578327655728, 0.1250970602246565, 0.06900541680183869, 0.09398782434373842, 0.09959987875696463, 0.09719005741230502, 0.08061363417121137, 0.09078020827904987, 0.09686090466178154, 0.08086768521234466, 0.12761797013383425, 0.10966104549281286, 0.10358821422865527, 0.13548499732894836, 0.11316181077398602, 0.11375920315432808, 0.12126825235915262, 0.13537457396021657, 0.08155839979190127, 0.053235474407822725, 0.03431673141750924, 0.056051666717097604, 0.07868199451615543, 0.0676978906117498, 0.07855675258907158, 0.07145734518999158, 0.08337988310433597, 0.03294955270973565, 0.20693036955174815, 0.08862143577016668, 0.16189997362520425, 0.2358102185466754, 0.1577377576524981, 0.16424908603308996, 0.1511042767054669, 0.12026120178418842, 0.15251385017262198, 9.999999999998899e-05, 9.999999999998899e-05, 0.04369052528203465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301964587882572, 0.07695499527038319, 0.10897974321913628, 0.11224391703700387, 0.1207376937260819, 0.10858778991628482, 0.10270707099423326, 0.07243119423882216, 0.07377288012083971, 0.1627667221372432, 0.09445343537840745, 0.0957155594325968, 0.11528970384510795, 0.0558687654624368, 0.07219231896291989, 0.032794504993629014, 0.17187129948625424, 0.061099437281466495, 0.1852151615700358, 0.1956085324504827, 0.21978608574620861, 0.16574958573381227, 0.1783844278088863, 0.19954918485070838, 0.18901210113885003, 0.2096241730873024, 0.19134848178246688, 0.030474048438887125, 0.027747343891901477, 0.03856425404623964, 0.038619913587427224, 0.04037996587046977, 0.048702825687751417, 0.036071402677013475, 0.023426229274904786, 0.044441189031964146]}, "mutation_prompt": null}
{"id": "33545646-0334-42e3-9fa9-10bc1846a842", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Introducing dynamic bandwidth adjustment to enhance exploration and exploitation trade-off in Harmony Search Algorithm.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e12a85c-99d3-4333-ac75-9c803124e138", "metadata": {"aucs": [0.10817941519405228, 0.08239988027525236, 0.09530942324301084, 0.13927619216808795, 0.14825037343911407, 0.06197238316387188, 0.19832255075600125, 0.1409424536161552, 0.1366665435152472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05139782795480352, 0.04870445285154079, 0.03908345792506884, 0.009400308690840187, 0.01772670710222135, 0.020338353993947234, 0.056528864785542865, 0.026348848652464785, 0.06538370371593905, 0.05721607150784691, 9.999999999998899e-05, 0.055047186435158935, 0.03404588607077441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612437985206565, 0.08539618612327105, 0.04811058393886247, 0.09469304111569166, 0.08797582365288015, 0.07995994489046532, 0.056127590723439424, 0.10566408193156818, 0.07917055294558173, 9.999999999998899e-05, 9.999999999998899e-05, 0.01120668844790651, 0.017454758176043805, 0.0018779141624861717, 9.999999999998899e-05, 0.030266803303239942, 0.01894731489616064, 0.12902617012078044, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.046440571965468136, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038858030248854813, 9.999999999998899e-05, 9.999999999998899e-05, 0.056901231582156986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023995489268962555, 0.035367423947515686, 0.027907076704910327, 0.000845096586888916, 9.999999999998899e-05, 0.00120008688290274, 0.03686280130920894, 9.999999999998899e-05, 0.013608469576827487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09202163167287158, 0.13161947241303673, 0.16918314630270748, 0.10864537400758167, 0.0865918277915595, 0.12481658153999875, 0.15615603897859287, 0.12382658871145735, 0.13971187601816093, 0.008230960018686395, 0.013535651278802852, 0.03976072268257358, 0.02386236194729008, 0.017467565637237392, 0.09069834085484141, 0.008006877632240839, 0.03515038140677551, 0.05314578327655728, 0.1250970602246565, 0.06900541680183869, 0.09398782434373842, 0.09959987875696463, 0.09719005741230502, 0.08061363417121137, 0.09078020827904987, 0.09686090466178154, 0.08086768521234466, 0.12761797013383425, 0.10966104549281286, 0.10358821422865527, 0.13548499732894836, 0.11316181077398602, 0.11375920315432808, 0.12126825235915262, 0.13537457396021657, 0.08155839979190127, 0.053235474407822725, 0.03431673141750924, 0.056051666717097604, 0.07868199451615543, 0.0676978906117498, 0.07855675258907158, 0.07145734518999158, 0.08337988310433597, 0.03294955270973565, 0.20693036955174815, 0.08862143577016668, 0.16189997362520425, 0.2358102185466754, 0.1577377576524981, 0.16424908603308996, 0.1511042767054669, 0.12026120178418842, 0.15251385017262198, 9.999999999998899e-05, 9.999999999998899e-05, 0.04369052528203465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301964587882572, 0.07695499527038319, 0.10897974321913628, 0.11224391703700387, 0.1207376937260819, 0.10858778991628482, 0.10270707099423326, 0.07243119423882216, 0.07377288012083971, 0.1627667221372432, 0.09445343537840745, 0.0957155594325968, 0.11528970384510795, 0.0558687654624368, 0.07219231896291989, 0.032794504993629014, 0.17187129948625424, 0.061099437281466495, 0.1852151615700358, 0.1956085324504827, 0.21978608574620861, 0.16574958573381227, 0.1783844278088863, 0.19954918485070838, 0.18901210113885003, 0.2096241730873024, 0.19134848178246688, 0.030474048438887125, 0.027747343891901477, 0.03856425404623964, 0.038619913587427224, 0.04037996587046977, 0.048702825687751417, 0.036071402677013475, 0.023426229274904786, 0.044441189031964146]}, "mutation_prompt": null}
{"id": "f1084678-f7fd-494f-9e87-fd414c6e6761", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Introducing dynamic bandwidth adjustment to enhance exploration and exploitation trade-off in Harmony Search Algorithm.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3e12a85c-99d3-4333-ac75-9c803124e138", "metadata": {"aucs": [0.10817941519405228, 0.08239988027525236, 0.09530942324301084, 0.13927619216808795, 0.14825037343911407, 0.06197238316387188, 0.19832255075600125, 0.1409424536161552, 0.1366665435152472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05139782795480352, 0.04870445285154079, 0.03908345792506884, 0.009400308690840187, 0.01772670710222135, 0.020338353993947234, 0.056528864785542865, 0.026348848652464785, 0.06538370371593905, 0.05721607150784691, 9.999999999998899e-05, 0.055047186435158935, 0.03404588607077441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06612437985206565, 0.08539618612327105, 0.04811058393886247, 0.09469304111569166, 0.08797582365288015, 0.07995994489046532, 0.056127590723439424, 0.10566408193156818, 0.07917055294558173, 9.999999999998899e-05, 9.999999999998899e-05, 0.01120668844790651, 0.017454758176043805, 0.0018779141624861717, 9.999999999998899e-05, 0.030266803303239942, 0.01894731489616064, 0.12902617012078044, 0.10017660085554358, 0.05319817898720414, 0.019289974383453923, 0.046440571965468136, 0.013666317325993105, 0.023952140453590398, 0.03136551659895792, 0.027611219200820436, 0.047635771926621384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038858030248854813, 9.999999999998899e-05, 9.999999999998899e-05, 0.056901231582156986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023995489268962555, 0.035367423947515686, 0.027907076704910327, 0.000845096586888916, 9.999999999998899e-05, 0.00120008688290274, 0.03686280130920894, 9.999999999998899e-05, 0.013608469576827487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09202163167287158, 0.13161947241303673, 0.16918314630270748, 0.10864537400758167, 0.0865918277915595, 0.12481658153999875, 0.15615603897859287, 0.12382658871145735, 0.13971187601816093, 0.008230960018686395, 0.013535651278802852, 0.03976072268257358, 0.02386236194729008, 0.017467565637237392, 0.09069834085484141, 0.008006877632240839, 0.03515038140677551, 0.05314578327655728, 0.1250970602246565, 0.06900541680183869, 0.09398782434373842, 0.09959987875696463, 0.09719005741230502, 0.08061363417121137, 0.09078020827904987, 0.09686090466178154, 0.08086768521234466, 0.12761797013383425, 0.10966104549281286, 0.10358821422865527, 0.13548499732894836, 0.11316181077398602, 0.11375920315432808, 0.12126825235915262, 0.13537457396021657, 0.08155839979190127, 0.053235474407822725, 0.03431673141750924, 0.056051666717097604, 0.07868199451615543, 0.0676978906117498, 0.07855675258907158, 0.07145734518999158, 0.08337988310433597, 0.03294955270973565, 0.20693036955174815, 0.08862143577016668, 0.16189997362520425, 0.2358102185466754, 0.1577377576524981, 0.16424908603308996, 0.1511042767054669, 0.12026120178418842, 0.15251385017262198, 9.999999999998899e-05, 9.999999999998899e-05, 0.04369052528203465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09301964587882572, 0.07695499527038319, 0.10897974321913628, 0.11224391703700387, 0.1207376937260819, 0.10858778991628482, 0.10270707099423326, 0.07243119423882216, 0.07377288012083971, 0.1627667221372432, 0.09445343537840745, 0.0957155594325968, 0.11528970384510795, 0.0558687654624368, 0.07219231896291989, 0.032794504993629014, 0.17187129948625424, 0.061099437281466495, 0.1852151615700358, 0.1956085324504827, 0.21978608574620861, 0.16574958573381227, 0.1783844278088863, 0.19954918485070838, 0.18901210113885003, 0.2096241730873024, 0.19134848178246688, 0.030474048438887125, 0.027747343891901477, 0.03856425404623964, 0.038619913587427224, 0.04037996587046977, 0.048702825687751417, 0.036071402677013475, 0.023426229274904786, 0.044441189031964146]}, "mutation_prompt": null}
{"id": "e6d73112-a742-4262-bc19-097a3d44d140", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 13, "fitness": 0.17273596385179865, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "3e12a85c-99d3-4333-ac75-9c803124e138", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "38734bd0-1a0b-4195-af07-8595dce3f0d0", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "8a302751-b492-4cd6-bd53-ae15870d5cfb", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "f9a1baec-37cc-430b-a37d-58df3992e124", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "dc811ebe-0338-4db5-8ee2-bc53b4d21c05", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "73203bc6-4459-4ccf-a157-c1c784af5e82", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "d3eb8c33-a65d-4439-90ec-7f74f4cf8acd", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "864dec62-69d3-477c-92b4-600eefc70711", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "dad58c5b-7e46-4a77-bfd5-f52833dcbaea", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "dedf00b5-c62a-466b-9eeb-5dc5c14fd09c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "e4c137e8-9fa4-4adc-92bc-761209b0e0f3", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                fitness_values = [func(sol) for sol in self.harmony_memory]\n                self.harmony_memory = self.harmony_memory[np.argsort(fitness_values)]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Improving convergence by incorporating a dynamic harmony memory updating mechanism based on the fitness comparison of new solutions.", "configspace": "", "generation": 23, "fitness": 0.17273596385179865, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "e60e0565-1a9b-4099-8576-86b697b58355", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "9ef86934-495d-4a32-a56f-63be3d089671", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "8c04285e-59e3-4c77-9f07-5523554d0cee", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "91493585-1340-4b24-a8df-411d52fda663", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "442fa639-0827-42f2-8f7e-b6c2ec5748e6", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "ef9dc6be-ca0a-478d-9edf-91bd58c47720", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "fcc9ad0c-305f-46e9-8399-9a93829a48d2", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "819df25f-b24a-41dd-8be5-189c21111ff3", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "7ca168bb-c465-4e37-afc4-33443f256ce7", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "349dbdda-50ae-4150-b3e8-4ddb5ce50cdb", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "c12864aa-700a-4f6e-b22f-ed606f11dad1", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "ad2f77a9-ba40-47e4-b5db-b2f09be4c2db", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "c0a34f04-52c3-4e57-b894-836c2809f514", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "96fa017d-a1a6-4b00-950b-a8a9a1f68b69", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.mutation_rate = mutation_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < self.mutation_rate:  # Introduce Gaussian mutation with the specified rate\n                        step = np.random.normal(0, dynamic_bandwidth)\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhance the local search by incorporating a Gaussian mutation for better exploration.", "configspace": "", "generation": 37, "fitness": 0.06056005128771301, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.13946900988850341, 0.1535974208654679, 0.09221922741961075, 0.1826936277411635, 0.14874783158113714, 0.06986992208654774, 0.14190009678286275, 0.14785009929692638, 0.12412283102199595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06672845692384566, 0.02858554195308438, 0.05609717879920695, 0.015026553441069734, 0.008300570859553047, 0.05661733358116949, 0.0742383923044847, 0.02130234159740918, 0.07814069886626662, 0.04694687893382621, 0.0007057441353308658, 0.030592683822062594, 0.05037622950229237, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009995956150149476, 9.999999999998899e-05, 0.09521182107301285, 0.08131537422657242, 0.06928995000373073, 0.07587004693608401, 0.1096218965735114, 0.07881492320757277, 0.08055079195173387, 0.10811190867759646, 0.07878966126915343, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022687277673790973, 0.0022874596545365833, 0.0015431519049617926, 0.008538799103270711, 0.018443795279195152, 9.999999999998899e-05, 0.10269356407714969, 0.06742879945767855, 0.019699827633966938, 0.04616803075244502, 0.007307997610253358, 0.04176621469497621, 0.08442892569151716, 0.03289577988709147, 0.045656331694371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02408663144566925, 0.03753362197931709, 9.999999999998899e-05, 9.999999999998899e-05, 0.028612826753245613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023246819649251793, 0.06740027564357476, 0.05508286495852244, 0.004004021425287441, 0.002803199051084837, 9.999999999998899e-05, 0.027758686758092344, 0.00027344037703225244, 0.01416061067338692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1472170594308242, 0.1262084317260027, 0.16549724459770132, 0.1277016421769651, 0.14910432778400573, 0.22243076979410337, 0.13949514729868928, 0.10403868029457208, 0.13601643880898606, 0.02543429601237346, 0.07429480882019546, 0.0583501030987742, 0.015315451323892892, 0.004140868697905309, 0.052698082069245866, 0.007122929642328413, 0.014437668077461385, 0.05053599723262192, 0.12299122213487135, 0.08278564500635988, 0.09084961728834318, 0.09854103794943381, 0.12826717837626433, 0.0875869620973283, 0.0899106678271182, 0.08889759866543012, 0.10420044095428438, 0.13752540274554392, 0.11213715185924011, 0.10358892627476213, 0.18040546190044993, 0.12025294118180951, 0.13657629978633323, 0.13087803171500723, 0.14642543439598632, 0.1382392473249201, 0.08125192567578177, 0.062407141023502866, 0.0495376243039336, 0.08565014426259498, 0.06149534932467027, 0.09372006324437132, 0.08402848049652423, 0.09701446140169556, 0.035784795689207005, 0.17878297120593378, 0.16857568883334428, 0.14442759655303528, 0.179130661434043, 0.1824630420064839, 0.1815309787166951, 0.14327215116988934, 0.117722736510679, 0.16183859524260769, 9.999999999998899e-05, 9.999999999998899e-05, 0.027656921010729474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05936806471765044, 0.06904543786891604, 0.11951099985663727, 0.12940953606877426, 0.12071137559417366, 0.1211189894593745, 0.09009847638855406, 0.08183882142434062, 0.11697958791622642, 0.09275680309607526, 0.08030871380069404, 0.10267864713416752, 0.07151290929096998, 0.0428261263914641, 0.09378050229046753, 0.045899677663953864, 0.1770772795229555, 0.0713947454301761, 0.22764307398737105, 0.17679375567233035, 0.19515251954578228, 0.2229704359959611, 0.2155907150008728, 0.19357174211242523, 0.23870407031493157, 0.17384659790672263, 0.20062656827820768, 0.03929777329248774, 0.022481500523737652, 0.05674661706457573, 0.04979317122278737, 0.067531672125283, 0.051321720524709735, 0.023564564072210525, 0.029780546723364942, 0.03783684208821814]}, "mutation_prompt": null}
{"id": "97749f87-bb16-462a-8216-a0124e3b081c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "94608f9b-2bd4-4f19-ae8d-8217d5ecdc3d", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "12d24504-886d-43b4-8ea2-b946ede7ea90", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "d806193b-0fd1-40a0-8d06-9edd6f012cd5", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "98dd7b76-8b0e-4349-99a4-8e2e105ea77c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "4c106657-d80e-4bdf-a80e-e59fe5f82e91", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "82e919d7-be84-42f0-b193-d98b06c6efa4", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "eba0d339-5963-4479-bc0d-076ac1a76210", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "dc9ffa09-0104-49ad-b14e-0a5c32017e52", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "7313b842-1cf2-4dc6-b719-5cde996b4099", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "840a6c0a-75c5-435d-a741-210658ca0bfe", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim, harmony_memory_size=10, bandwidth=0.01, pitch_adjust_rate=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = harmony_memory_size\n        self.bandwidth = bandwidth\n        self.pitch_adjust_rate = pitch_adjust_rate\n        self.harmony_memory = np.random.uniform(-5.0, 5.0, (self.harmony_memory_size, self.dim))\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        new_solution[i] = np.random.uniform(-dynamic_bandwidth, dynamic_bandwidth) + np.min(self.harmony_memory[:, i])\n                    new_solution[i] = max(-5.0, min(5.0, new_solution[i]))\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearch", "description": "Enhancing exploration by introducing a new mutation strategy based on Levy flights.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3584943294521842, 0.36590340859702597, 0.3600657524301304, 0.3586053157061486, 0.35466872483639567, 0.37540945269511594, 0.3963847886830786, 0.37997253700436995, 0.35817786275833696, 0.059869171569280843, 0.12813300288746943, 0.07314738241258167, 0.07130518115347495, 0.11641476314527732, 0.08068772655289758, 0.07140234860872718, 0.09737467425541324, 0.068351248914851, 0.16648459518336023, 0.16159708668623984, 0.13463837387009248, 0.14290042422252336, 0.15267049957240908, 0.13837891074529363, 0.18219622427216942, 0.13435217750199813, 0.13433805949016075, 0.11361558359931023, 0.11720989747009625, 0.14493535634584442, 0.12322567273692764, 0.11124579662869605, 0.1253575444564491, 0.11933626708763989, 0.12150628025790633, 0.12381163530236461, 0.9075506477996796, 0.9304793588566617, 0.942890483202535, 0.9153130065128758, 0.8738126631736065, 0.917940066109495, 0.9274964937711165, 0.9495448951656239, 0.8842355377801495, 0.111240614758646, 0.10517553700263049, 0.18583098166780976, 0.15670422127248873, 0.1506999720536336, 0.2157036017869639, 0.15023104588750924, 0.18337032591315883, 0.1782229235963545, 0.2096315837479289, 0.10010322316447162, 0.17914698479875024, 0.21848942716328412, 0.16976356910599788, 0.15656862133044036, 0.15252171772520617, 0.13386172848328115, 0.18880929500388488, 0.13148471166720332, 0.1319051973199603, 0.10975104611857367, 0.09710697102553201, 0.09193307804652162, 0.10604395558815138, 0.11009494436448697, 0.12860730798422515, 0.12019173004486461, 0.10711358596829179, 0.10474111832525845, 0.11355703066278167, 0.11823877739804778, 0.09474359527463871, 0.13383222160352093, 0.10756970688186718, 0.09787973922604998, 0.13822162670672677, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05499436448674855, 0.0240450884345339, 0.04109159950873731, 0.048997117435606974, 0.005703048431254687, 0.014898398830600623, 0.018575514192377907, 0.02510520370082303, 0.005554559335580023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536183910583692, 0.02586316445088832, 0.02067219641689011, 0.010419719254856519, 0.0389783013116205, 0.05073393634981349, 0.061939436621845534, 0.05677463589226539, 0.057696261492301115, 0.3162479392758921, 0.2826907984851269, 0.316854156571559, 0.30309001626240595, 0.3124452795438568, 0.34944340709164023, 0.2940616142410417, 0.28830877556196677, 0.311238834495858, 0.0787607427120387, 0.07444606554262367, 0.06809995126637369, 0.07241279637514197, 0.10861788203342826, 0.08131277282099669, 0.07402578201338461, 0.07151575641195485, 0.0726288924920716, 0.12668372991276533, 0.153236174048771, 0.12311970771814396, 0.16069986221290988, 0.12249896556727358, 0.1366276055028769, 0.18111954718222578, 0.1541955987932574, 0.14258425321355972, 0.23022202627804766, 0.25869401189476593, 0.18189898978199404, 0.23618180592298388, 0.19722010926345712, 0.22613687241560743, 0.210275099987823, 0.22535280811677216, 0.22762148788333358, 0.18573191772653863, 0.17970145539075844, 0.1659872197667086, 0.12338159296336504, 0.13932104444319138, 0.1495929656824716, 0.15159502510329237, 0.16532436927249405, 0.18669179105145084, 0.20082828223187965, 0.16918418030440863, 0.19396521150833157, 0.16944995445578537, 0.17786273832150234, 0.191917955859346, 0.19067157313847627, 0.18919453537944364, 0.18624224128065314, 0.18441331787515636, 0.1787922266869515, 0.18518226497474222, 0.18510435928712, 0.19060133785150213, 0.1767273998124792, 0.18804149450183372, 0.17664743353320067, 0.1746448791116776, 0.1634679854554668, 0.14275887851976854, 0.17210357961499745, 0.1884057517684119, 0.17779490747975146, 0.16066719915837202, 0.4099651419863546, 0.11243623402301706, 0.15445341834700899, 0.16415958398184793, 0.18765347753113526, 0.1932787165190284, 0.15827647964451552, 0.1641201448182975, 0.19247840749908718, 0.11709543710381509, 0.11024201638818798, 0.19405027963688537, 0.17653833002427477, 0.1909528436569483, 0.18156951553995293, 0.19793464554111362, 0.1761819945074079, 0.1714327142167167, 0.17788699025071764, 0.18062879139551025, 0.1863252354465721, 0.06334153563383282, 0.06644022003294159, 0.062339726378520255, 0.07361296473595846, 0.07275021238518131, 0.06854070555502911, 0.07563423504774236, 0.05977853168793712, 0.0585751606818008]}, "mutation_prompt": null}
{"id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 49, "fitness": 0.18235297543469756, "feedback": "The algorithm HarmonySearchRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "e6d73112-a742-4262-bc19-097a3d44d140", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "dc5fd1b5-93b6-4862-883a-4fe914a73bf6", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "7699074d-bbe8-407a-bcf5-f9f3f4f8972e", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "459a2151-73bd-4766-a162-34f80d798e1e", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "f7dc536a-ab4f-43d4-8d50-e615483382ba", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "e3e5ff90-0a84-4df2-82ec-0204b4f3e1c5", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "5c9b5fde-7727-4b63-a817-b4792efb61e3", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "05ac7bf3-588f-4c32-86de-7971c1ddab92", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "4b102b27-fe35-494b-8d80-9b01b2113189", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "68fbdc1b-81d3-4e13-8977-b376b8906173", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "c5bc2c51-9c72-41a2-94cc-432b450d2994", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "449f1178-d976-40a2-9c73-855c6af393a9", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "f8bb97af-d024-446a-9b18-92ac066ac4b0", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "883c7e3c-db8f-4b9b-b67b-7777de97e64f", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "37fc5701-171d-4abd-9150-12a44f822626", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "de80a91e-6af8-4ad0-8b5b-b76c08581ff3", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "289f3831-3a97-4137-8d35-f5b35c13f816", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "1bcbb4d5-7ae9-4991-9631-499077f09a9a", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "af7baa98-101b-4833-a5dd-3f1be608e1c6", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "3a90c91a-c782-4e90-8f7f-ba85cf7472ad", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "0e05bb1c-fa53-4f0d-b3b8-2730c797444e", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "9ed865a7-799e-45b8-b098-a4cab6376dca", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "daf46caf-0fef-4c5a-a0c3-246a11c0411b", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "e80bbb71-c6f7-4bd2-8bd9-8b71030fc816", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "1a413dac-df79-41e6-a281-52cdb7d6d2ad", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "8a206a5b-c104-47d7-b716-0a6d83dd9282", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "04a72034-af0b-4c99-98ad-03f08376a1d7", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "ffbe4df8-6fcd-4140-9a22-803aee58d189", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "ace289f1-506e-44f4-948d-83841c95b83f", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "d90843eb-45c6-4dc4-bea4-103095f0788b", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "ba4738af-bbb5-40ce-af1a-0390bffad09b", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "75b5ad49-f22b-4bd9-a76e-1b4b4b22fc17", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "50428231-e027-449d-a437-2dc2b0c1cbe0", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "5146015e-baea-4736-9436-94fb3628e62f", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "3d60f55c-38a4-4375-94fb-1cfc8d2f9532", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "8a374c4a-79da-4fb7-b685-bfe8a3e77257", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "396cf58d-18fc-4e5d-98e7-f386c1443f06", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "151c7962-17a0-43e9-b7ca-f88667f1b976", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "3bbe9a16-cf3e-4f30-bec9-61b0a8dd1d39", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "f02614e7-fcb6-426f-adb5-74e76515daee", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "37e7cea7-0e4e-413b-9125-3b5c600fd029", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            pitch_adjust_rate = 1 - 0.9 * _ / self.budget  # Dynamic pitch adjustment rate\n            for i in range(self.dim):\n                if np.random.rand() < pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Introducing a dynamic pitch adjustment rate based on function landscape to enhance exploration and exploitation.", "configspace": "", "generation": 89, "fitness": 0.15129676626679464, "feedback": "The algorithm HarmonySearchRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.34229005802097834, 0.34592941286977996, 0.31649784479973375, 0.49841073485480125, 0.34391874846519266, 0.3007779148277091, 0.34222531711618553, 0.32135654336787456, 0.3654218884301279, 0.017397544909361407, 9.999999999998899e-05, 0.015498673375854755, 0.005988788694947678, 9.999999999998899e-05, 0.0547936698003314, 0.00021508670998826585, 0.02764061244828464, 0.02297902023196907, 0.11065268582597032, 0.1027349573866595, 0.14101620228619127, 0.16902327197463018, 0.1599612740559887, 0.12283977491475329, 0.11144773133819508, 0.12043194527070422, 0.12844565529952978, 0.11074720880426214, 0.0988567671581515, 0.1266529865841658, 0.11196335426839432, 0.1231958082177147, 0.08437050735170692, 0.12458146025480288, 0.08800230491433836, 0.09157940262923203, 0.7677017920986453, 0.8466795984007174, 0.7885297884416275, 0.6705424191538866, 0.7964223912707004, 0.8494674027955347, 0.6187875242731882, 0.8405482654801488, 0.7172325255037062, 0.12811198847875627, 0.051431443852894554, 0.10702180194664179, 0.14108342688429076, 0.11002492366601324, 0.11633506125752446, 0.0744657412322931, 0.13511142164489487, 0.2097553221795443, 0.16263742349540566, 0.10160182271101681, 0.10468953922703772, 0.17187578930768654, 0.19894501214465854, 0.20672044264904554, 0.1139973323770318, 0.1557483622783148, 0.13246394731904565, 0.07853033002109899, 0.09927846819479913, 0.1410769414825983, 0.005105582964879951, 0.12421100495871795, 0.10710216878906631, 0.137360842897984, 0.10662702163516824, 0.07710599422498032, 0.11013578051182626, 0.10945463888585927, 0.08978525950012695, 0.07646687201947211, 0.11020617984969938, 0.09938855909728606, 0.11324915254886692, 0.09584833212927102, 0.10429219088429109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002847192525462394, 0.04729213327999837, 0.053972272955827405, 0.011399121604614093, 0.001807920590021106, 0.01671370218104351, 0.0490441359640994, 0.07774624876409708, 0.03133934219970158, 0.020451602290821436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001107879120601285, 0.00515534187796074, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02748116985586968, 0.04500747289642626, 0.06272567913543758, 0.07296596442530623, 0.012639066586475733, 0.04513271555102727, 0.054287977014184974, 0.05784637940700055, 0.040938105626323495, 0.25330628952776857, 0.29254124689510985, 0.3166678329505004, 0.27316257593036697, 0.3098911877786903, 0.28145501892850167, 0.28193781025032694, 0.23187555965597628, 0.28360833265325713, 0.07768207308746844, 0.07697748222996748, 0.04811290344593433, 0.04340336142855317, 0.058198930179767516, 0.07730601166251694, 0.06197709495510373, 0.09045693277464084, 0.07258493575833547, 0.143421556830303, 0.14534927273881626, 0.10915579168855494, 0.1508141333990587, 0.16332407282786976, 0.12029767238655298, 0.11048313378937857, 0.11411698234803225, 0.11763994396377786, 0.14091670610541218, 0.13099819738479834, 0.17938876948653237, 0.22049466852404154, 0.18999007593704587, 0.17516743946029634, 0.17204132976626474, 0.16897437816988492, 0.12269826243600623, 0.16522629751755213, 0.1400639566041636, 0.13422155650620593, 0.12332609327903488, 0.1470146939202427, 0.10579073088371382, 0.08784291189666238, 0.15410251412678877, 0.06799889325572717, 0.16199827890567908, 0.15949061712222246, 0.1859768588898688, 0.19753203263683983, 0.2394591962175372, 0.19061383425663436, 0.21766896659827772, 0.18961730320512482, 0.16362680149508957, 0.23660449349289725, 0.1338982331140025, 0.16726953728496774, 0.16462305256848742, 0.1817743735550552, 0.15066791430901771, 0.18264956306234348, 0.15373880647792626, 0.13063754462973698, 0.10822347369655327, 0.2107030796327325, 0.19066137582308962, 0.3380167004756144, 0.18566635443568225, 0.33227691392023895, 0.21805673243710066, 0.12638061535502043, 0.105725116637027, 0.20320098772754702, 0.1608921785182239, 0.06439946382919448, 0.142058457752675, 0.08274137977527085, 0.16660817791055593, 0.14091943952382968, 0.19219491297364588, 0.08383671794588676, 0.17339147707738722, 0.19173493697483435, 0.16408684658015282, 0.19784772894382818, 0.17555039146576656, 0.2146009814209514, 0.2246345560929216, 0.18960800578404136, 0.18077919518910135, 0.05898736571531604, 0.06023674700894921, 0.04720356766010503, 0.04900346348335005, 0.06438873089509867, 0.04791105475706681, 0.05912516673643298, 0.04624970655065297, 0.05174207779752471]}, "mutation_prompt": null}
{"id": "e22c180e-5f3a-4005-bff7-3ce1ba6f45ea", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "acb8492b-cb4a-4f4a-98bf-09207cdb2c19", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "cf57c36f-23d4-4fa4-98d4-77f29c06690b", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "66ab1357-74bb-4a78-8313-8d956976ba65", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "9e2b6166-6e0b-47fb-9de2-43ab3615518a", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "4bf41a96-2dd4-481c-b57f-16b8b2707668", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "a7dd63d4-4c8b-45b4-a382-0b525662ba9f", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "f93380b3-7aa1-442e-b4ee-fb4fe2877dff", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "a2eb4a02-a5dc-49ca-9be9-ccc50ae0cf47", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
{"id": "d4513e9b-ed41-4cb3-84b3-9bc36488c38a", "solution": "import numpy as np\n\nclass HarmonySearchRefined(HarmonySearch):\n    def __call__(self, func):\n        for _ in range(self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.pitch_adjust_rate:\n                    idx = np.random.randint(self.harmony_memory_size)\n                    new_solution[i] = self.harmony_memory[idx, i]\n                else:\n                    dynamic_bandwidth = self.bandwidth * (1 - _ / self.budget)  # Dynamic bandwidth adjustment\n                    if np.random.rand() < 0.9:  # Introduce Levy flight mutation with 90% probability\n                        step = np.random.standard_cauchy() / np.sqrt(np.abs(np.random.randn()))\n                        new_solution[i] = self.harmony_memory[-1, i] + step\n                    else:\n                        best_solution = self.harmony_memory[0, i]\n                        perturbation = np.random.normal(best_solution, dynamic_bandwidth / 2)  # Gaussian perturbation around the best solution\n                        new_solution[i] = np.clip(perturbation, -5.0, 5.0)\n\n            if func(new_solution) < func(self.harmony_memory[-1]):\n                self.harmony_memory[-1] = new_solution\n                self.harmony_memory = self.harmony_memory[np.argsort([func(sol) for sol in self.harmony_memory])]\n\n        return self.harmony_memory[0]", "name": "HarmonySearchRefined", "description": "Enhancing exploration and exploitation by integrating a local search with a Gaussian perturbation around the best harmony memory.", "configspace": "", "generation": 50, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f02ff50a-958c-4821-a6b7-16756ff01c67", "metadata": {"aucs": [0.3839456667430299, 0.36234346628795555, 0.3822247022646691, 0.36132245200989266, 0.3543711412607785, 0.35980779840851207, 0.36756699147847693, 0.4053289816198028, 0.4475426519151503, 0.16340151781731616, 0.12893775627476822, 0.07024067744699536, 0.13719627581034033, 0.16161255173425526, 0.08791556311960558, 0.09435845604850113, 0.08657021201015691, 0.09519245689473244, 0.19257961381699806, 0.1326373011202182, 0.17471009998435783, 0.1453822301606762, 0.12467814454540205, 0.13092912025862935, 0.2187544167079113, 0.1552336561354365, 0.14503761310252117, 0.11944434103521395, 0.15574649980395638, 0.11587926856816755, 0.13428786058484787, 0.10550020709198815, 0.11896552519429493, 0.12317555195173846, 0.19374227467281624, 0.125116442640543, 0.9045797805016429, 0.9380114122357555, 0.9143406090680658, 0.9259110631691962, 0.9654441239114924, 0.8996081270547736, 0.9461723623226538, 0.9240832143926826, 0.9240990198674446, 0.1880830985276838, 0.17264555265375126, 0.17619831766076477, 0.16726855932581552, 0.16613676116504283, 0.15615849466757703, 0.15981381961065222, 0.1486764380597171, 0.17028971969514495, 0.21652218769917708, 0.10969241244886274, 0.133664260555729, 0.2224258340820694, 0.17248205306415842, 0.22817052856555042, 0.17919228116378438, 0.14247400872687144, 0.16473271180449278, 0.07588035606935195, 0.15037099907484575, 0.1171501169430218, 0.11148555983892527, 0.13092752831230103, 0.10195182234809164, 0.10372517937452064, 0.15522125831404188, 0.12629675122892603, 0.1343775151262866, 0.10330059804862524, 0.1093571500705619, 0.11646914587262525, 0.11205645318528845, 0.10892488353574403, 0.14112206289131046, 0.11561198011854468, 0.11279522852424684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001389420329537816, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011997390232230454, 0.030768449780008034, 0.05992053986748491, 0.05959936704488378, 9.999999999998899e-05, 0.02449668784841319, 0.047112242423477446, 0.015510673752225035, 0.06544104630572478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018717059196141639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019977290701559403, 9.999999999998899e-05, 0.07037226900915594, 0.0471933919721903, 0.026799681367609574, 0.030899411317767078, 0.05903086527938317, 0.08217900332671724, 0.08415710994757097, 0.051264608982779625, 0.03857708264268278, 0.2915516317840031, 0.36118942404354315, 0.33732430163346494, 0.3391349016675955, 0.3287431465681713, 0.37680738191030927, 0.3180986749022062, 0.34490967801266503, 0.3591550385029748, 0.10387134419354205, 0.07902316834471057, 0.1125716016222732, 0.09112370984682805, 0.08246817059439326, 0.10403149673389633, 0.14359731502095985, 0.08260939813811785, 0.07943357768289006, 0.1396761626419566, 0.1441650681468074, 0.14914288984761992, 0.12293343622904629, 0.2269559314746047, 0.093701143290296, 0.15560651047439877, 0.11765122815073059, 0.15326076858226856, 0.2520486948577392, 0.22249674317437507, 0.19172732116847757, 0.24275198763976324, 0.18999346431771091, 0.27731071416362774, 0.2480909620676498, 0.22711008973440971, 0.19889987524200392, 0.17495501949105507, 0.14791723358609254, 0.19714884518443643, 0.14939250688674544, 0.20430194466671592, 0.14893426177370506, 0.16473823815707855, 0.15121329159155028, 0.13768189596553115, 0.17098701908044844, 0.17935044006117096, 0.18558359568206184, 0.22431960331651013, 0.17032929953856524, 0.18095475234578828, 0.16628527959327966, 0.1786908622265957, 0.1519845059077246, 0.18375495786779972, 0.17766640736462525, 0.2071953640295492, 0.22847742382791847, 0.2137189447853829, 0.255039553315376, 0.19770896368254198, 0.18905125744810947, 0.24660641722619825, 0.15396768652063053, 0.13965718357532275, 0.1790173975896936, 0.3523114987382535, 0.19071530689520122, 0.22322028617823675, 0.4475126563989448, 0.13089293547414504, 0.16424461016695802, 0.1078557309907574, 0.16434642454641724, 0.1819676956291304, 0.11738516698037416, 0.20023147007860398, 0.19555837559960865, 0.23756967827750863, 0.10161663274427668, 0.19538817845117562, 0.17298555630934276, 0.1761767630301445, 0.166228492932454, 0.17440093808049928, 0.17946615233714458, 0.18012219736368174, 0.17712909756602713, 0.1756962263796864, 0.17069174158357925, 0.06536925346562861, 0.0637667581778163, 0.06855008290275544, 0.06217397131748181, 0.07694749857281946, 0.07492598554823415, 0.08666020414265951, 0.05980132514041181, 0.0827771933824002]}, "mutation_prompt": null}
