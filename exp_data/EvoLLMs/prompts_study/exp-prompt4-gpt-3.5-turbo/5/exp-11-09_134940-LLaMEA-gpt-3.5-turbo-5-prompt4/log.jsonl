{"id": "5d81f236-2356-4c8b-9c78-48360d61b884", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 0, "fitness": 0.2349255810277628, "feedback": "The algorithm IntelligentParticleOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "8a59a8e7-8c25-4554-b37b-1c2668838ad7", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "3e8642ca-d247-4b73-955a-d5c012fceefd", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "2070e0de-3ab9-41e1-b34a-8c5e413019b1", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "f709c32d-233f-4d25-889c-e8f2fd33245a", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "e2f499ba-02c9-4dae-b0b4-e48e91c2ec94", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "11daf588-fdd2-4f4b-9af2-dada39a86792", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "dd5c2e4a-e648-47c2-b635-3ab976a21b06", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "8d4c1b59-d111-40ef-98f3-b8d65ba61493", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "e66dc941-8eac-4734-8462-f3242b59fe21", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "41eccb5e-52a5-43eb-9cd4-9821570b4ffc", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "0737f403-cf98-4e37-be51-4eccd4866120", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "8e77f834-4bb1-46a5-827d-295f2b7e5060", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "9197cb4f-fdec-40b7-b91d-706f47fab6f5", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "49c24fce-e9f2-4901-ac96-34b1e2a492b0", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "a4dd0721-d1d5-408e-b873-6fc941f8137e", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "5df69e7c-3bb3-494f-bcb8-792a245d3cf5", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "66d67a62-2368-41c4-8e58-c5dc828d634f", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "f79c0b65-5471-49b6-8f02-008bb1838509", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "48445a4d-f3b0-45c9-9c83-5f95d9c91e1f", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "c60d5435-8fbb-43c8-9959-44f8d69ed93f", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "5fb652d0-5377-4319-b52e-2c8ef010c7fb", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "2d876dc5-d668-4458-8d3d-d8b9d3e29a30", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "c2912d75-c505-4928-b49b-6cdd982d2104", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "c2118788-230f-4485-bad1-ebad2c4123df", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "0a221a88-269b-4cd1-9622-613b817a2071", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "bcc7ab6f-15d3-4907-aa6a-413803d6c74a", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "ad5e17b5-e8b3-4584-b6d7-fa257c619016", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "ca8e8014-2241-458c-b922-7800405f3905", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "c80a5429-284c-4876-a598-e6753b123501", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "90b15036-293f-415f-8e0c-84da4da906b9", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "de96f686-6408-4e89-91ed-54d72959fa47", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "992c7d8c-79eb-4bdf-8b05-42d850f2ba88", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "f33dd844-ed89-4b8b-82eb-9078ecbe9c9c", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "b9ff9659-b670-44b5-bf96-38ff4d168b67", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "1497763c-371e-44a0-9ffb-c1c3ff8a5617", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "312c9587-e547-453a-884c-f6b7a4dd0882", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "b68c82d4-16e9-445c-9421-e4f2dbbd3698", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "6916eed6-27d8-4754-a8b7-bf456dd57580", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "4ab576f7-e3b1-4b0a-b80a-fb175bd57670", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "b3a6bb08-0239-453c-b18f-82cf8892ab62", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "0ef562cb-4f22-4f94-b502-fe5230144453", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "99c47f55-5d6a-4edf-9346-11bb2aff4ef5", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "eee741b2-ba1a-4bf0-a799-54ea2832d830", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "99c3b9e5-1de4-47a5-8c09-b2eaf52fc754", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "746a9d17-5493-4752-8f56-0371ba081f49", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "7e81a9d6-6650-4309-b749-85bc0a1fe02e", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "da75584a-ba97-4bbe-8c5d-2bd2ccbb1984", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "72065cdb-4a05-4c68-8a16-162275966506", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "3b61280d-cc16-4759-b731-bc1762b42e6c", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "25351baf-ab14-4087-89ec-138f9d942653", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "b6ebebfb-22b3-449c-9c57-4d278ea5eaf9", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "dcf0018c-c314-48a9-ae92-87477529e2b9", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "3ce98296-b174-4faf-9986-6de2640a10ad", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "e55845cf-ef40-426d-8346-2392fac71deb", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "d255335d-d51d-42c5-a7ac-2db830728b91", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "f7cf15e3-e313-4df4-8d1a-46d473c9a25f", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "70e6630f-c7e6-4c0e-bfaa-8cecdb0c6b25", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "e8efd00c-12dd-4278-b364-2dcd4a3b452e", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "2cce83e2-c7b6-436d-9dd9-76d8abca2857", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "7e72bd49-c61f-49be-980c-67682b472905", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "b1a131d1-5c59-4341-9659-e0814af96b9d", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "2f311857-dc06-483f-bf80-a89599d6ca27", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "9317204e-3db8-4995-be0f-ed7f4931a9cc", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "a1c1f8e2-9af8-4236-9dad-986c158f5348", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "255d4703-3d9b-4ce7-9c47-3af459d599bf", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "59a79426-0648-446f-84c1-0869e00fdb67", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "3bc557eb-a82f-454c-bcc6-1e2c5409abd3", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "994fb627-a91b-4b62-ab60-a64b5f190be3", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "90d6b095-8872-484f-a491-3a9664e36cb4", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, inertia_decay=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.inertia_decay = inertia_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best, epoch):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for epoch in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best, epoch)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n                    \n            self.inertia_weight *= self.inertia_decay\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "Enhancing exploration by incorporating a dynamic inertia weight update strategy.", "configspace": "", "generation": 69, "fitness": 0.20536155324300293, "feedback": "The algorithm IntelligentParticleOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8626953970179719, 0.7350634603013243, 0.7745248377349708, 0.7034529703460322, 0.18856835817012807, 0.5930889064190379, 0.7323321076171238, 0.1819078154896724, 0.7716195020535161, 0.08509119918160746, 0.06969397250443088, 9.999999999998899e-05, 0.09349051482660375, 0.049372514016429725, 0.048026067100638614, 0.05190888577838282, 0.015105813145748437, 9.999999999998899e-05, 0.09409289112731223, 0.09412696401412235, 0.05866943003954128, 0.10323862167890985, 0.06423004074027427, 0.08420629417651693, 0.08163974524040551, 0.0971932118327532, 0.09582624090942826, 0.09370826196322546, 0.050937612812583244, 0.03725486995013638, 0.15134351713681404, 0.0515637332641925, 0.08288306887533725, 0.08736069590384543, 0.032016736858849426, 0.12059191237226019, 0.9769980561380056, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793163010425252, 0.9480543689963266, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.21421153823240469, 0.1683847960023449, 0.16651632391112814, 0.33989263763302413, 0.1507608987989788, 0.1812929049897105, 0.15229030386526088, 0.14271353538411513, 0.08812333746388545, 0.12999566217887004, 0.19228787994227692, 0.14115488358948203, 0.19235689807222722, 0.31087151602158447, 0.19777192869118743, 0.10917814695400008, 0.11026179369872935, 0.17512634548238126, 0.18316714163130676, 0.1876147898958237, 0.15215877484920715, 0.15702463881142337, 0.1259834253233002, 0.09830788968485671, 0.13621586296664046, 0.15708997302966288, 0.17906789182510152, 0.13152132690445173, 9.999999999998899e-05, 0.13221258172856265, 0.1308693214441875, 0.13862494050855878, 0.19430839919694654, 0.1053291875294855, 0.1444434755406513, 0.13047198706421936, 9.999999999998899e-05, 9.999999999998899e-05, 0.013032483289464825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047242035227187285, 0.018802209626065824, 0.023392034054563027, 0.14736089375480566, 0.1454972423385259, 0.15223116688092053, 0.10479148640169766, 0.07392194619587367, 0.03662059603263479, 0.04102841445848937, 0.10120056137765532, 0.0398254357036496, 0.047706332344328306, 0.06895017945798232, 0.11601280367481559, 0.2938840507104632, 0.19964951434567313, 0.09194635613390023, 0.2471623285219916, 0.07116348220652713, 0.07154520149265531, 0.14808535492172692, 0.04194103329865917, 0.12461699895638556, 0.006564207571304159, 0.006341484103662198, 0.31956476911186227, 0.1678615023425345, 0.24698261012632294, 0.08117215314900328, 0.5366535851893779, 0.5614563910742834, 0.4199746134902189, 0.24693517177256386, 0.4291871827708533, 0.20724406284090113, 0.4896744416767249, 0.47290760220490546, 0.5092232531484876, 0.04542307539667967, 0.04498029791598124, 0.0635406508491222, 0.10745447443515099, 0.07151997668788368, 0.08273567729890019, 0.08862757955099843, 0.09903347912954918, 0.11007982606976674, 0.19586692493228552, 0.19445255722443122, 0.20432655796016896, 0.1719989265799362, 0.14658670820064323, 0.14519304746808825, 0.16203318150035406, 0.1418173520400976, 0.20609121853962686, 0.2057977538767286, 0.2831580657319881, 0.20002988609611771, 0.2638338871279412, 0.15792455609588651, 0.30652726691191123, 0.2523491247177333, 0.22411879800033851, 0.20615852645095567, 0.10593707686884302, 0.2540854199960437, 0.17560055201558045, 0.22656881898790426, 0.15571107862618117, 0.21446998001909334, 0.14854172789544995, 0.17199500556487035, 0.12558276484441244, 0.21874762631622724, 0.17286828155761436, 0.23665945562383772, 0.23332153451309778, 0.16633870980195986, 0.1710602021258104, 0.2097147294288727, 0.23025402669937844, 0.18980925671058835, 0.17320908199899754, 0.19780779676997895, 0.24889276577864483, 0.1755493095662065, 0.1598632324426641, 0.19853979623476703, 0.18253383487401653, 0.21828527690789357, 0.18577387828268155, 0.12576006760779945, 0.12593505858130394, 0.15336025266421893, 0.16948132218372758, 0.20036675003704751, 0.20025643848097052, 0.09963007801879831, 0.1697044311705591, 0.20874450106328024, 0.7343730546939382, 0.1566307542909886, 0.10951031091554209, 0.39512245200472385, 0.1684490101324393, 0.2096172004330299, 0.10486668134937227, 0.10411484793262682, 0.6395915873937357, 0.1872465512053232, 0.20526193301463602, 0.19208365419160123, 0.20261565079439148, 0.1875875825127692, 0.18948309869202962, 0.23576901985636056, 0.19419661262192667, 0.22296886354463752, 0.07143012460708087, 0.1140096182445881, 0.05901006767824346, 0.08301396965633989, 0.07327297134464517, 0.08411317921835892, 0.07359668836607747, 0.07133631876797442, 0.08053038084459618]}, "mutation_prompt": null}
{"id": "5eda2040-f525-4423-bd32-448406493e24", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "c4cec986-2018-4bf7-884a-4d48c5b3a9c3", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "621640a3-2026-4720-9f94-1b34e85818ca", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "0a11f4cd-5dbe-4e85-8106-3239da9ec046", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "fae08a93-5580-41f0-a835-fabe46be77f0", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "fc80310b-aa09-44d6-bec9-8dc3f0c83c7a", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "ce80f06f-2979-41c7-a22c-a77d9f2e64f1", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "2fc3b2a1-2435-4226-9f48-48371d1a27eb", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "6d4d0c39-fc9f-4b18-a21a-3e73cc3e0df6", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "79dbb59f-84e0-4e31-bf94-f214cac7c40d", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "9cc1b321-c49c-4547-b299-aaf1f9a52c89", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "e5045ab3-04e4-4475-9c6c-1a413cee1a7e", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "23d0ba4a-0bd0-41d4-b2aa-25ce5c3ed596", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "f966791e-e286-4a40-a04e-f3425e0138f7", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "91ea7daf-648e-4faf-8092-37f75e308f48", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "fd28499a-49ce-4e45-9976-5634ba6f035f", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "424f2c94-fdf4-4f39-9e53-535c3f66870c", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "4e4903a4-5618-4b95-af02-763a75cadc6c", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "cf43af61-5c07-40b9-952b-ce41d5c7ed97", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "de0f86df-3e37-499c-b4d7-4b70429c1b28", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "c7a54b7d-e2d4-4ca9-8083-dc6895a7bae5", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "3ac3f95f-68af-4f42-9c00-ce2e6f6b7636", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "0c26acb5-da22-4098-b966-96b31f346c4d", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "ee3d5bff-66b7-4d04-9ad3-fcc59d16ff01", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "918d4c49-aa04-4ea9-8f84-5395481d70ed", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "5dfaf871-3e15-4b8e-89f7-b241b5e8afd4", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "ba4d01fd-35f3-4b20-b2c0-c8f5fb80c353", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "c85bf731-ce99-4e62-9d39-e577f3c16cc5", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "ee007ca1-c422-4d15-b601-7b9c0823c9d9", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
{"id": "abc6c87d-a63c-4e91-b84e-c0a4af1e47de", "solution": "import numpy as np\n\nclass IntelligentParticleOptimization:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        def update_particle(particle, personal_best, global_best):\n            inertia_term = self.inertia_weight * particle[\"velocity\"]\n            cognitive_term = self.cognitive_weight * np.random.rand() * (personal_best - particle[\"position\"])\n            social_term = self.social_weight * np.random.rand() * (global_best - particle[\"position\"])\n            new_velocity = inertia_term + cognitive_term + social_term\n            new_position = particle[\"position\"] + new_velocity\n            return {\"position\": np.clip(new_position, -5.0, 5.0), \"velocity\": new_velocity}\n\n        particles = [{\"position\": pos, \"velocity\": np.zeros_like(pos)} for pos in initialize_particles()]\n        personal_bests = np.copy([particle[\"position\"] for particle in particles])\n        global_best = personal_bests[np.argmin([func(p) for p in personal_bests])]\n\n        for _ in range(self.budget):\n            for i, particle in enumerate(particles):\n                particles[i] = update_particle(particle, personal_bests[i], global_best)\n                f_val = func(particles[i][\"position\"])\n                if f_val < func(personal_bests[i]):\n                    personal_bests[i] = particles[i][\"position\"]\n                if f_val < func(global_best):\n                    global_best = particles[i][\"position\"]\n\n        return global_best", "name": "IntelligentParticleOptimization", "description": "A novel metaheuristic algorithm based on the concept of intelligent particles that adaptively adjust their exploration and exploitation behavior to efficiently explore the search space while focusing on promising regions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5d81f236-2356-4c8b-9c78-48360d61b884", "metadata": {"aucs": [0.8228627751772213, 0.8094704456973592, 0.8201376768688804, 0.7807136413144975, 0.18779168683306235, 0.773732352761018, 0.8005646778923646, 0.18189206788063517, 0.7910183331467591, 0.19708090509963783, 0.05460026507751625, 9.999999999998899e-05, 0.11849456515814494, 0.04183076990743795, 0.12622383840425722, 0.1559304757781872, 0.20308937929919335, 0.044930147843500134, 0.07470188464106575, 0.13722696331654693, 0.044801131726763144, 0.05941671086737765, 0.1309727417526224, 0.05801666158865937, 0.10065124061502762, 0.0980749176948773, 0.08081777998093098, 0.09056473574626012, 0.05641888789933658, 0.04203675779849525, 0.11786391951485553, 0.061591367849876955, 0.08088020898125725, 0.07661613268488654, 0.055964488903696874, 0.07971727829593334, 0.9766662458625713, 0.9945989459571386, 0.992413983385817, 0.09986342225610456, 0.9793303168198932, 0.9384346595869796, 0.9952657718379185, 0.9922677477403272, 0.9923129403521552, 0.4371894597323993, 0.3103222222281329, 0.3998862910953107, 0.40650463172348605, 0.15220688056650855, 0.14937494387004968, 0.16715073194454377, 0.08710622190881423, 0.21060299971665752, 0.22319696332183392, 0.1166766008318948, 0.13464952887188175, 0.19365693828024477, 0.2132810241462728, 0.19192075108855855, 0.10976492883714906, 0.17212423716172376, 0.23161801068467913, 0.1272090951728001, 0.29250036364958043, 0.19579920139000595, 0.18453529557913495, 0.2167644259897139, 0.2659331890240255, 0.49670201296894256, 0.13600396174472917, 0.29782202728881435, 0.14552295762798206, 0.1042190752870581, 0.13084695163469173, 0.4272650131213942, 0.12758766822407341, 0.4101083869234783, 0.09505968312537294, 0.13827816900991396, 0.4458004264747981, 9.999999999998899e-05, 0.04222583270539748, 0.06802915564607048, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1295981329980539, 0.004670320673904271, 0.07963092552728446, 0.11179916756433161, 0.09484199834299512, 0.2627780627319728, 0.16023475990349723, 0.06135562926414895, 0.04920153452424669, 0.050693719761591094, 0.1284546750589327, 0.11788971049058039, 0.045591473692522366, 0.09099780996400642, 0.12343152424450576, 0.14787977111123818, 0.11935735771115252, 0.11935080741600634, 0.26068552120579, 0.06460736134377909, 0.06519550967461984, 0.19142542890147995, 0.039669800952790824, 0.2674215131574088, 0.006072163509372341, 0.13759834448615782, 0.14853222992232407, 0.07729663859779956, 9.999999999998899e-05, 0.0806946602724049, 0.6065227151477235, 0.5913185886993778, 0.6895654065814218, 0.630762076660158, 0.6064102821919413, 0.20724921395754814, 0.5686670740750601, 0.5557204711639641, 0.6145887107241608, 0.06197399982830798, 0.0652818575216888, 0.054073880843010236, 0.08925979986149923, 0.0773947386229431, 0.1782799687717176, 0.07009435975399303, 0.07889700566803926, 0.07660071866057439, 0.18844443317392567, 0.1975567540832095, 0.19237760600568532, 0.13598426550026066, 0.20242145746055462, 0.14553998332461504, 0.19743200422067397, 0.18908300495883923, 0.20447271755767182, 0.1868230488389141, 0.21616181263981638, 0.2893485463130877, 0.2680421062939108, 0.17819757235698375, 0.2702339074484409, 0.2999440232845575, 0.21793543825636252, 0.33473965924056515, 0.14654429939429392, 0.15908081458241718, 0.162700947913486, 0.2371889844602233, 0.21427386898335654, 0.21155819617161287, 0.15066922153875917, 0.17107415611192356, 0.22379556914188947, 0.193467051734582, 0.14340989893795653, 0.16431298858257049, 0.1932280098095156, 0.2054033935644085, 0.19564749853448926, 0.18949060093982517, 0.2119677049335501, 0.22173083735821997, 0.19470661116907462, 0.19259903128312794, 0.19870855035199742, 0.218937088783845, 0.20491079642148946, 0.1715264475932996, 0.1912110442984235, 0.20203467800116492, 0.19551171265169864, 0.16708419999042767, 0.17881697060161184, 0.15307018623494384, 0.7869894167646472, 0.20000454442487903, 0.20026828910671424, 0.1186386696924937, 0.16932004777690013, 0.20617444815370667, 0.8054127460365357, 0.15616947186841734, 0.11044320560036391, 0.8218317765039083, 0.16795905280486934, 0.20579222540114084, 0.10489631130366361, 0.191311557486743, 0.7843131021645469, 0.17840880179228336, 0.190589250167166, 0.24787218366834896, 0.20490910810934437, 0.1811620811582143, 0.1727097454939136, 0.18236893295786372, 0.21224069360815734, 0.20650076073335522, 0.09812260656187499, 0.06527943358234423, 0.059407546025947, 0.07682415590392355, 0.07610555869599633, 0.08442513137253538, 0.08769397815804947, 0.11087769633431721, 0.06598774341814295]}, "mutation_prompt": null}
